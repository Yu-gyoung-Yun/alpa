trainig_args.mod:  1.5B
[WARNING] Please, check seq_len: 256
get pretrain_model
no model_name_or_path
!!!!!!!!!!!!!!!!!!!Model parameters:  0.11589360237121582
stpes_per_epoch:  1966029
train_epochs:  1
Initial compilation. This might take some minutes...
-------------------- Layer slicing stats --------------------
layer_num: 14
 - Number of Jaxpr eqns in each stage:
Layer 0: #eqns=14, flop=1.291 TFlop, #heavy_ops=2
Layer 1: #eqns=121, flop=0.245 TFlop, #heavy_ops=6
Layer 2: #eqns=121, flop=0.245 TFlop, #heavy_ops=6
Layer 3: #eqns=121, flop=0.245 TFlop, #heavy_ops=6
Layer 4: #eqns=121, flop=0.245 TFlop, #heavy_ops=6
Layer 5: #eqns=81, flop=0.090 TFlop, #heavy_ops=4
Layer 6: #eqns=121, flop=0.245 TFlop, #heavy_ops=6
Layer 7: #eqns=121, flop=0.245 TFlop, #heavy_ops=6
Layer 8: #eqns=121, flop=0.245 TFlop, #heavy_ops=6
Layer 9: #eqns=121, flop=0.245 TFlop, #heavy_ops=6
Layer 10: #eqns=121, flop=0.245 TFlop, #heavy_ops=6
Layer 11: #eqns=121, flop=0.245 TFlop, #heavy_ops=6
Layer 12: #eqns=121, flop=0.245 TFlop, #heavy_ops=6
Layer 13: #eqns=97, flop=1.419 TFlop, #heavy_ops=3
 - Invars of each stage:
Layer 0 has inputs:
Layer 1 has inputs:
gk (64, 256, 768) from layer 0
fy (64, 256) from layer 0
Layer 2 has inputs:
la (64, 256, 768) from layer 1
fy (64, 256) from layer 0
Layer 3 has inputs:
pq (64, 256, 768) from layer 2
fy (64, 256) from layer 0
Layer 4 has inputs:
ug (64, 256, 768) from layer 3
fy (64, 256) from layer 0
Layer 5 has inputs:
yw (64, 256, 768) from layer 4
fy (64, 256) from layer 0
Layer 6 has inputs:
bby (64, 256, 768) from layer 5
fy (64, 256) from layer 0
Layer 7 has inputs:
bgo (64, 256, 768) from layer 6
fy (64, 256) from layer 0
Layer 8 has inputs:
ble (64, 256, 768) from layer 7
fy (64, 256) from layer 0
Layer 9 has inputs:
bpu (64, 256, 768) from layer 8
fy (64, 256) from layer 0
Layer 10 has inputs:
buk (64, 256, 768) from layer 9
fy (64, 256) from layer 0
Layer 11 has inputs:
bza (64, 256, 768) from layer 10
fy (64, 256) from layer 0
Layer 12 has inputs:
cdq (64, 256, 768) from layer 11
fy (64, 256) from layer 0
Layer 13 has inputs:
cig (64, 256, 768) from layer 12
-------------------------------------------------------------
-------------------- Layer slicing stats --------------------
layer_num: 14
 - Number of Jaxpr eqns in each stage:
Layer 0: #eqns=14, flop=1.291 TFlop, #heavy_ops=2
Layer 1: #eqns=121, flop=0.245 TFlop, #heavy_ops=6
Layer 2: #eqns=121, flop=0.245 TFlop, #heavy_ops=6
Layer 3: #eqns=121, flop=0.245 TFlop, #heavy_ops=6
Layer 4: #eqns=121, flop=0.245 TFlop, #heavy_ops=6
Layer 5: #eqns=81, flop=0.090 TFlop, #heavy_ops=4
Layer 6: #eqns=121, flop=0.245 TFlop, #heavy_ops=6
Layer 7: #eqns=121, flop=0.245 TFlop, #heavy_ops=6
Layer 8: #eqns=121, flop=0.245 TFlop, #heavy_ops=6
Layer 9: #eqns=121, flop=0.245 TFlop, #heavy_ops=6
Layer 10: #eqns=121, flop=0.245 TFlop, #heavy_ops=6
Layer 11: #eqns=121, flop=0.245 TFlop, #heavy_ops=6
Layer 12: #eqns=121, flop=0.245 TFlop, #heavy_ops=6
Layer 13: #eqns=97, flop=1.419 TFlop, #heavy_ops=3
 - Invars of each stage:
Layer 0 has inputs:
Layer 1 has inputs:
gk (64, 256, 768) from layer 0
fy (64, 256) from layer 0
Layer 2 has inputs:
la (64, 256, 768) from layer 1
fy (64, 256) from layer 0
Layer 3 has inputs:
pq (64, 256, 768) from layer 2
fy (64, 256) from layer 0
Layer 4 has inputs:
ug (64, 256, 768) from layer 3
fy (64, 256) from layer 0
Layer 5 has inputs:
yw (64, 256, 768) from layer 4
fy (64, 256) from layer 0
Layer 6 has inputs:
bby (64, 256, 768) from layer 5
fy (64, 256) from layer 0
Layer 7 has inputs:
bgo (64, 256, 768) from layer 6
fy (64, 256) from layer 0
Layer 8 has inputs:
ble (64, 256, 768) from layer 7
fy (64, 256) from layer 0
Layer 9 has inputs:
bpu (64, 256, 768) from layer 8
fy (64, 256) from layer 0
Layer 10 has inputs:
buk (64, 256, 768) from layer 9
fy (64, 256) from layer 0
Layer 11 has inputs:
bza (64, 256, 768) from layer 10
fy (64, 256) from layer 0
Layer 12 has inputs:
cdq (64, 256, 768) from layer 11
fy (64, 256) from layer 0
Layer 13 has inputs:
cig (64, 256, 768) from layer 12
-------------------------------------------------------------
-------------------- Layer slicing stats --------------------
layer_num: 14
 - Number of Jaxpr eqns in each stage:
Layer 0: #eqns=14, flop=10.324 TFlop, #heavy_ops=2
Layer 1: #eqns=121, flop=1.959 TFlop, #heavy_ops=6
Layer 2: #eqns=121, flop=1.959 TFlop, #heavy_ops=6
Layer 3: #eqns=121, flop=1.959 TFlop, #heavy_ops=6
Layer 4: #eqns=121, flop=1.959 TFlop, #heavy_ops=6
Layer 5: #eqns=81, flop=0.722 TFlop, #heavy_ops=4
Layer 6: #eqns=121, flop=1.959 TFlop, #heavy_ops=6
Layer 7: #eqns=121, flop=1.959 TFlop, #heavy_ops=6
Layer 8: #eqns=121, flop=1.959 TFlop, #heavy_ops=6
Layer 9: #eqns=121, flop=1.959 TFlop, #heavy_ops=6
Layer 10: #eqns=121, flop=1.959 TFlop, #heavy_ops=6
Layer 11: #eqns=121, flop=1.959 TFlop, #heavy_ops=6
Layer 12: #eqns=121, flop=1.959 TFlop, #heavy_ops=6
Layer 13: #eqns=97, flop=11.355 TFlop, #heavy_ops=3
 - Invars of each stage:
Layer 0 has inputs:
Layer 1 has inputs:
gk (512, 256, 768) from layer 0
fy (512, 256) from layer 0
Layer 2 has inputs:
la (512, 256, 768) from layer 1
fy (512, 256) from layer 0
Layer 3 has inputs:
pq (512, 256, 768) from layer 2
fy (512, 256) from layer 0
Layer 4 has inputs:
ug (512, 256, 768) from layer 3
fy (512, 256) from layer 0
Layer 5 has inputs:
yw (512, 256, 768) from layer 4
fy (512, 256) from layer 0
Layer 6 has inputs:
bby (512, 256, 768) from layer 5
fy (512, 256) from layer 0
Layer 7 has inputs:
bgo (512, 256, 768) from layer 6
fy (512, 256) from layer 0
Layer 8 has inputs:
ble (512, 256, 768) from layer 7
fy (512, 256) from layer 0
Layer 9 has inputs:
bpu (512, 256, 768) from layer 8
fy (512, 256) from layer 0
Layer 10 has inputs:
buk (512, 256, 768) from layer 9
fy (512, 256) from layer 0
Layer 11 has inputs:
bza (512, 256, 768) from layer 10
fy (512, 256) from layer 0
Layer 12 has inputs:
cdq (512, 256, 768) from layer 11
fy (512, 256) from layer 0
Layer 13 has inputs:
cig (512, 256, 768) from layer 12
-------------------------------------------------------------
-------------------- Layer slicing stats --------------------
layer_num: 14
 - Number of Jaxpr eqns in each stage:
Layer 0: #eqns=14, flop=10.324 TFlop, #heavy_ops=2
Layer 1: #eqns=121, flop=1.959 TFlop, #heavy_ops=6
Layer 2: #eqns=121, flop=1.959 TFlop, #heavy_ops=6
Layer 3: #eqns=121, flop=1.959 TFlop, #heavy_ops=6
Layer 4: #eqns=121, flop=1.959 TFlop, #heavy_ops=6
Layer 5: #eqns=81, flop=0.722 TFlop, #heavy_ops=4
Layer 6: #eqns=121, flop=1.959 TFlop, #heavy_ops=6
Layer 7: #eqns=121, flop=1.959 TFlop, #heavy_ops=6
Layer 8: #eqns=121, flop=1.959 TFlop, #heavy_ops=6
Layer 9: #eqns=121, flop=1.959 TFlop, #heavy_ops=6
Layer 10: #eqns=121, flop=1.959 TFlop, #heavy_ops=6
Layer 11: #eqns=121, flop=1.959 TFlop, #heavy_ops=6
Layer 12: #eqns=121, flop=1.959 TFlop, #heavy_ops=6
Layer 13: #eqns=97, flop=11.355 TFlop, #heavy_ops=3
 - Invars of each stage:
Layer 0 has inputs:
Layer 1 has inputs:
gk (512, 256, 768) from layer 0
fy (512, 256) from layer 0
Layer 2 has inputs:
la (512, 256, 768) from layer 1
fy (512, 256) from layer 0
Layer 3 has inputs:
pq (512, 256, 768) from layer 2
fy (512, 256) from layer 0
Layer 4 has inputs:
ug (512, 256, 768) from layer 3
fy (512, 256) from layer 0
Layer 5 has inputs:
yw (512, 256, 768) from layer 4
fy (512, 256) from layer 0
Layer 6 has inputs:
bby (512, 256, 768) from layer 5
fy (512, 256) from layer 0
Layer 7 has inputs:
bgo (512, 256, 768) from layer 6
fy (512, 256) from layer 0
Layer 8 has inputs:
ble (512, 256, 768) from layer 7
fy (512, 256) from layer 0
Layer 9 has inputs:
bpu (512, 256, 768) from layer 8
fy (512, 256) from layer 0
Layer 10 has inputs:
buk (512, 256, 768) from layer 9
fy (512, 256) from layer 0
Layer 11 has inputs:
bza (512, 256, 768) from layer 10
fy (512, 256) from layer 0
Layer 12 has inputs:
cdq (512, 256, 768) from layer 11
fy (512, 256) from layer 0
Layer 13 has inputs:
cig (512, 256, 768) from layer 12
-------------------------------------------------------------
compile_pipehshard_executable_internal
split_and_process_layers
jaxpr.eqns, len: 3
eqn: a:f16[50257,768] b:f16[1024,768] c:f16[64,256] d:f16[64,256] e:f16[64,256] f:f16[768]
  g:f16[768] h:f16[2304,768] i:f16[2304] j:f16[768,768] k:f16[768] l:f16[768] m:f16[768]
  n:f16[3072,768] o:f16[3072] p:f16[768,3072] q:f16[768] r:f16[768] s:f16[768] t:f16[2304,768]
  u:f16[2304] v:f16[768,768] w:f16[768] x:f16[768] y:f16[768] z:f16[3072,768] ba:f16[3072]
  bb:f16[768,3072] bc:f16[768] = pipeline_marker[mark_type=start name=0] bd be bf
  bg bh bi bj bk bl bm bn bo bp bq br bs bt bu bv bw bx by bz ca cb cc cd ce cf
eqn: a:i32[64,256] b:f16[64,256,1024] c:f16[64,256,50257] d:f16[64,256,3072] e:f16[3072,768]
  f:f16[64,256,3072] g:f16[64,256,3072] h:f16[64,256,3072] i:f16[64,256,3072] j:f16[64,256,3072]
  k:f16[64,256,768] l:f16[768,3072] m:f32[64,256,768] n:f32[64,256,1] o:f32[1,1,768]
  p:f32[64,256,1] q:f32[64,256] r:f32[64,256] s:f32[64,256,768] t:f32[64,256,768]
  u:f16[64,256,768] v:f16[768,768] w:f16[64,256,12,64] x:f16[64,12,256,1] y:f16[64,12,256,256]
  z:f16[64,12,256,1] ba:f16[64,256,12,64] bb:f16[64,256,12,64] bc:f16[] bd:f16[64,12,256,256]
  be:f16[64,256,768] bf:f16[768,2304] bg:f32[64,256,768] bh:f32[64,256,1] bi:f32[1,1,768]
  bj:f32[64,256,1] bk:f32[64,256] bl:f32[64,256] bm:f32[64,256,768] bn:f32[64,256,768]
  bo:f16[64,256,768] bp:f16[64,256,3072] bq:f16[3072,768] br:f16[64,256,3072] bs:f16[64,256,3072]
  bt:f16[64,256,3072] bu:f16[64,256,3072] bv:f16[64,256,3072] bw:f16[64,256,768]
  bx:f16[768,3072] by:f32[64,256,768] bz:f32[64,256,1] ca:f32[1,1,768] cb:f32[64,256,1]
  cc:f32[64,256] cd:f32[64,256] ce:f32[64,256,768] cf:f32[64,256,768] cg:f16[64,256,768]
  ch:f16[768,768] ci:f16[64,256,12,64] cj:f16[64,12,256,1] ck:f16[64,12,256,256]
  cl:f16[64,12,256,1] cm:f16[64,256,12,64] cn:f16[64,256,12,64] co:f16[] cp:f16[64,12,256,256]
  cq:f16[64,256,768] cr:f16[768,2304] cs:f32[64,256,768] ct:f32[64,256,1] cu:f32[1,1,768]
  cv:f32[64,256,1] cw:f32[64,256] cx:f32[64,256] cy:f32[64,256,768] cz:f32[64,256,768] = named_call[
  call_jaxpr={ lambda ; da:f16[50257,768] db:f16[1024,768] dc:f16[64,256] dd:f16[64,256]
      de:f16[64,256] df:f16[768] dg:f16[768] dh:f16[2304,768] di:f16[2304] dj:f16[768,768]
      dk:f16[768] dl:f16[768] dm:f16[768] dn:f16[3072,768] do:f16[3072] dp:f16[768,3072]
      dq:f16[768] dr:f16[768] ds:f16[768] dt:f16[2304,768] du:f16[2304] dv:f16[768,768]
      dw:f16[768] dx:f16[768] dy:f16[768] dz:f16[3072,768] ea:f16[3072] eb:f16[768,3072]
      ec:f16[768]. let
      ed:f16[64,256,768] ee:i32[64,256] ef:f16[64,256,1024] eg:f16[64,256,50257] = named_call[
        call_jaxpr={ lambda ; eh:f16[50257,768] ei:f16[1024,768] ej:f16[64,256] ek:f16[64,256]
            el:f16[64,256]. let
            em:i32[64,256] = convert_element_type[
              new_dtype=int32
              weak_type=False
            ] ej
            en:i32[64,256] = convert_element_type[
              new_dtype=int32
              weak_type=False
            ] ek
            eo:i32[64,256] = convert_element_type[
              new_dtype=int32
              weak_type=False
            ] el
            ep:i32[64,256,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1)
            ] em
            eq:i32[1,1,50257] = iota[
              dimension=2
              dtype=int32
              shape=(1, 1, 50257)
            ] 
            er:bool[64,256,50257] = eq ep eq
            es:f16[64,256,50257] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] er
            et:f16[64,256,768] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] es eh
            eu:i32[64,256,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1)
            ] eo
            ev:i32[1,1,1024] = iota[dimension=2 dtype=int32 shape=(1, 1, 1024)] 
            ew:bool[64,256,1024] = eq eu ev
            ex:f16[64,256,1024] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] ew
            ey:f16[64,256,768] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] ex ei
            ez:f16[64,256,768] = add et ey
          in (ez, en, ex, es) }
        name=00
      ] da db dc dd de
      fa:f16[64,256,768] fb:f16[64,256,3072] fc:f16[3072,768] fd:f16[64,256,3072]
        fe:f16[64,256,3072] ff:f16[64,256,3072] fg:f16[64,256,3072] fh:f16[64,256,3072]
        fi:f16[64,256,768] fj:f16[768,3072] fk:f32[64,256,768] fl:f32[64,256,1] fm:f32[1,1,768]
        fn:f32[64,256,1] fo:f32[64,256] fp:f32[64,256] fq:f32[64,256,768] fr:f32[64,256,768]
        fs:f16[64,256,768] ft:f16[768,768] fu:f16[64,256,12,64] fv:f16[64,12,256,1]
        fw:f16[64,12,256,256] fx:f16[64,12,256,1] fy:f16[64,256,12,64] fz:f16[64,256,12,64]
        ga:f16[] gb:f16[64,12,256,256] gc:f16[64,256,768] gd:f16[768,2304] ge:f32[64,256,768]
        gf:f32[64,256,1] gg:f32[1,1,768] gh:f32[64,256,1] gi:f32[64,256] gj:f32[64,256]
        gk:f32[64,256,768] gl:f32[64,256,768] = named_call[
        call_jaxpr={ lambda ; gm:f16[64,256,768] gn:f16[768] go:f16[768] gp:f16[2304,768]
            gq:f16[2304] gr:i32[64,256] gs:f16[768,768] gt:f16[768] gu:f16[768] gv:f16[768]
            gw:f16[3072,768] gx:f16[3072] gy:f16[768,3072] gz:f16[768]. let
            ha:f32[64,256,768] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] gm
            hb:f32[64,256] = reduce_sum[axes=(2,)] ha
            hc:f32[64,256] = div hb 768.0
            hd:f32[64,256,768] = integer_pow[y=2] ha
            he:f32[64,256,768] = integer_pow[y=1] ha
            hf:f32[64,256,768] = mul 2.0 he
            hg:f32[64,256] = reduce_sum[axes=(2,)] hd
            hh:f32[64,256] = div hg 768.0
            hi:f32[64,256] = integer_pow[y=2] hc
            hj:f32[64,256] = integer_pow[y=1] hc
            hk:f32[64,256] = mul 2.0 hj
            hl:f32[64,256] = sub hh hi
            hm:f32[64,256] = max 0.0 hl
            hn:bool[64,256] = eq hl hm
            ho:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            hp:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 0.0
            hq:f32[64,256] = select_n hn hp ho
            hr:bool[64,256] = eq 0.0 hm
            hs:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 2.0
            ht:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            hu:f32[64,256] = select_n hr ht hs
            hv:f32[64,256] = div hq hu
            hw:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] hc
            hx:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] hm
            hy:f32[64,256,768] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] gm
            hz:f32[64,256,768] = sub hy hw
            ia:f32[64,256,1] = add hx 9.999999747378752e-06
            ib:f32[64,256,1] = rsqrt ia
            ic:f32[64,256,1] = div ib ia
            id:f32[64,256,1] = mul -0.5 ic
            ie:f16[1,1,768] = reshape[dimensions=None new_sizes=(1, 1, 768)] gn
            if:f32[1,1,768] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] ie
            ig:f32[64,256,768] = mul ib if
            ih:f32[64,256,768] = mul hz ig
            ii:f16[1,1,768] = reshape[dimensions=None new_sizes=(1, 1, 768)] go
            ij:f32[1,1,768] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] ii
            ik:f32[64,256,768] = add ih ij
            il:f16[64,256,768] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] ik
            im:i32[1024] = iota[dimension=0 dtype=int32 shape=(1024,)] 
            in:i32[1,1024] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 1024)
            ] im
            io:i32[1,1024,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(1, 1024, 1)
            ] in
            ip:i32[1,1,1024] = broadcast_in_dim[
              broadcast_dimensions=(0, 2)
              shape=(1, 1, 1024)
            ] in
            iq:bool[1,1024,1024] = ge io ip
            ir:bool[1,1,1024,1024] = broadcast_in_dim[
              broadcast_dimensions=(0, 2, 3)
              shape=(1, 1, 1024, 1024)
            ] iq
            is:f16[768,2304] = transpose[permutation=(1, 0)] gp
            it:f16[64,256,2304] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] il is
            iu:f16[1,1,2304] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 2304)
            ] gq
            iv:f16[64,256,2304] = add it iu
            iw:f16[64,256,768] = slice[
              limit_indices=(64, 256, 768)
              start_indices=(0, 0, 0)
              strides=None
            ] iv
            ix:f16[64,256,768] = slice[
              limit_indices=(64, 256, 1536)
              start_indices=(0, 0, 768)
              strides=None
            ] iv
            iy:f16[64,256,768] = slice[
              limit_indices=(64, 256, 2304)
              start_indices=(0, 0, 1536)
              strides=None
            ] iv
            iz:f16[64,256,12,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 12, 64)
            ] iw
            ja:f16[64,256,12,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 12, 64)
            ] ix
            jb:f16[64,256,12,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 12, 64)
            ] iy
            jc:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
            jd:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
            je:i32[2] = concatenate[dimension=0] jc jd
            jf:bool[1,1,256,256] = gather[
              dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2, 3), collapsed_slice_dims=(), start_index_map=(2, 3))
              fill_value=None
              indices_are_sorted=True
              mode=GatherScatterMode.PROMISE_IN_BOUNDS
              slice_sizes=(1, 1, 256, 256)
              unique_indices=True
            ] ir je
            jg:bool[1,256,256] = squeeze[dimensions=(0,)] jf
            jh:bool[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(64, 1, 256, 256)
            ] jg
            ji:i32[64,1,1,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 3)
              shape=(64, 1, 1, 256)
            ] gr
            jj:i32[64,1,256] = squeeze[dimensions=(2,)] ji
            jk:i32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 3)
              shape=(64, 1, 256, 256)
            ] jj
            jl:bool[64,1,256,256] = ne jk 0
            jm:bool[64,1,256,256] = and jl jh
            jn:f32[64,1,256,256] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] jm
            jo:bool[64,1,256,256] = gt jn 0.0
            jp:f32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 1, 256, 256)
            ] 0.0
            jq:f16[64,1,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] jp
            jr:f32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 1, 256, 256)
            ] -10000.0
            js:f16[64,1,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] jr
            jt:f16[64,1,256,256] = select_n jo js jq
            ju:f32[] = sqrt 64.0
            jv:f16[] = convert_element_type[new_dtype=float16 weak_type=False] ju
            jw:f16[64,256,12,64] = div iz jv
            jx:f16[64,12,256,256] = dot_general[
              dimension_numbers=(((3,), (3,)), ((0, 2), (0, 2)))
              precision=None
              preferred_element_type=None
            ] jw ja
            jy:f16[64,12,256,256] = add jx jt
            jz:f16[64,12,256] = reduce_max[axes=(3,)] jy
            ka:f16[64,12,256,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 12, 256, 1)
            ] jz
            kb:f16[64,12,256,1] = stop_gradient ka
            kc:f16[64,12,256,256] = sub jy kb
            kd:f16[64,12,256,256] = exp kc
            ke:f32[64,12,256,256] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] kd
            kf:f32[64,12,256] = reduce_sum[axes=(3,)] ke
            kg:f32[64,12,256,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 12, 256, 1)
            ] kf
            kh:f16[64,12,256,1] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] kg
            ki:f16[64,12,256,256] = div kd kh
            kj:f16[64,12,256,1] = integer_pow[y=-2] kh
            kk:f16[64,12,64,256] = dot_general[
              dimension_numbers=(((1,), (3,)), ((0, 2), (0, 1)))
              precision=None
              preferred_element_type=None
            ] jb ki
            kl:f16[64,256,12,64] = transpose[permutation=(0, 3, 1, 2)] kk
            km:f16[64,256,768] = reshape[
              dimensions=None
              new_sizes=(64, 256, 768)
            ] kl
            kn:f16[768,768] = transpose[permutation=(1, 0)] gs
            ko:f16[64,256,768] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] km kn
            kp:f16[1,1,768] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 768)
            ] gt
            kq:f16[64,256,768] = add ko kp
            kr:f16[64,256,768] = add kq gm
            ks:f32[64,256,768] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] kr
            kt:f32[64,256] = reduce_sum[axes=(2,)] ks
            ku:f32[64,256] = div kt 768.0
            kv:f32[64,256,768] = integer_pow[y=2] ks
            kw:f32[64,256,768] = integer_pow[y=1] ks
            kx:f32[64,256,768] = mul 2.0 kw
            ky:f32[64,256] = reduce_sum[axes=(2,)] kv
            kz:f32[64,256] = div ky 768.0
            la:f32[64,256] = integer_pow[y=2] ku
            lb:f32[64,256] = integer_pow[y=1] ku
            lc:f32[64,256] = mul 2.0 lb
            ld:f32[64,256] = sub kz la
            le:f32[64,256] = max 0.0 ld
            lf:bool[64,256] = eq ld le
            lg:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            lh:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 0.0
            li:f32[64,256] = select_n lf lh lg
            lj:bool[64,256] = eq 0.0 le
            lk:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 2.0
            ll:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            lm:f32[64,256] = select_n lj ll lk
            ln:f32[64,256] = div li lm
            lo:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] ku
            lp:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] le
            lq:f32[64,256,768] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] kr
            lr:f32[64,256,768] = sub lq lo
            ls:f32[64,256,1] = add lp 9.999999747378752e-06
            lt:f32[64,256,1] = rsqrt ls
            lu:f32[64,256,1] = div lt ls
            lv:f32[64,256,1] = mul -0.5 lu
            lw:f16[1,1,768] = reshape[dimensions=None new_sizes=(1, 1, 768)] gu
            lx:f32[1,1,768] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] lw
            ly:f32[64,256,768] = mul lt lx
            lz:f32[64,256,768] = mul lr ly
            ma:f16[1,1,768] = reshape[dimensions=None new_sizes=(1, 1, 768)] gv
            mb:f32[1,1,768] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] ma
            mc:f32[64,256,768] = add lz mb
            md:f16[64,256,768] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] mc
            me:f16[768,3072] = transpose[permutation=(1, 0)] gw
            mf:f16[64,256,3072] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] md me
            mg:f16[1,1,3072] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 3072)
            ] gx
            mh:f16[64,256,3072] = add mf mg
            mi:f16[64,256,3072] = integer_pow[y=3] mh
            mj:f16[64,256,3072] = integer_pow[y=2] mh
            mk:f16[64,256,3072] = mul 3.0 mj
            ml:f16[64,256,3072] = mul 0.044708251953125 mi
            mm:f16[64,256,3072] = add mh ml
            mn:f16[64,256,3072] = mul 0.7978515625 mm
            mo:f16[64,256,3072] = tanh mn
            mp:f16[64,256,3072] = sub 1.0 mo
            mq:f16[64,256,3072] = add 1.0 mo
            mr:f16[64,256,3072] = mul 0.5 mq
            ms:f16[64,256,3072] = mul mh mr
            mt:f16[3072,768] = transpose[permutation=(1, 0)] gy
            mu:f16[64,256,768] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] ms mt
            mv:f16[1,1,768] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 768)
            ] gz
            mw:f16[64,256,768] = add mu mv
            mx:f16[64,256,768] = add kr mw
          in (mx, ms, mt, mh, mp, mo, mk, mr, md, me, lr, lt, lx, lv, ln, lc, kx,
            ly, km, kn, jb, kj, kd, kh, jw, ja, jv, ki, il, is, hz, ib, if, id, hv,
            hk, hf, ig) }
        name=01
      ] ed df dg dh di ee dj dk dl dm dn do dp dq
      my:f16[64,256,768] mz:f16[64,256,3072] na:f16[3072,768] nb:f16[64,256,3072]
        nc:f16[64,256,3072] nd:f16[64,256,3072] ne:f16[64,256,3072] nf:f16[64,256,3072]
        ng:f16[64,256,768] nh:f16[768,3072] ni:f32[64,256,768] nj:f32[64,256,1] nk:f32[1,1,768]
        nl:f32[64,256,1] nm:f32[64,256] nn:f32[64,256] no:f32[64,256,768] np:f32[64,256,768]
        nq:f16[64,256,768] nr:f16[768,768] ns:f16[64,256,12,64] nt:f16[64,12,256,1]
        nu:f16[64,12,256,256] nv:f16[64,12,256,1] nw:f16[64,256,12,64] nx:f16[64,256,12,64]
        ny:f16[] nz:f16[64,12,256,256] oa:f16[64,256,768] ob:f16[768,2304] oc:f32[64,256,768]
        od:f32[64,256,1] oe:f32[1,1,768] of:f32[64,256,1] og:f32[64,256] oh:f32[64,256]
        oi:f32[64,256,768] oj:f32[64,256,768] = named_call[
        call_jaxpr={ lambda ; ok:f16[64,256,768] ol:f16[768] om:f16[768] on:f16[2304,768]
            oo:f16[2304] op:i32[64,256] oq:f16[768,768] or:f16[768] os:f16[768] ot:f16[768]
            ou:f16[3072,768] ov:f16[3072] ow:f16[768,3072] ox:f16[768]. let
            oy:f32[64,256,768] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] ok
            oz:f32[64,256] = reduce_sum[axes=(2,)] oy
            pa:f32[64,256] = div oz 768.0
            pb:f32[64,256,768] = integer_pow[y=2] oy
            pc:f32[64,256,768] = integer_pow[y=1] oy
            pd:f32[64,256,768] = mul 2.0 pc
            pe:f32[64,256] = reduce_sum[axes=(2,)] pb
            pf:f32[64,256] = div pe 768.0
            pg:f32[64,256] = integer_pow[y=2] pa
            ph:f32[64,256] = integer_pow[y=1] pa
            pi:f32[64,256] = mul 2.0 ph
            pj:f32[64,256] = sub pf pg
            pk:f32[64,256] = max 0.0 pj
            pl:bool[64,256] = eq pj pk
            pm:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            pn:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 0.0
            po:f32[64,256] = select_n pl pn pm
            pp:bool[64,256] = eq 0.0 pk
            pq:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 2.0
            pr:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            ps:f32[64,256] = select_n pp pr pq
            pt:f32[64,256] = div po ps
            pu:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] pa
            pv:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] pk
            pw:f32[64,256,768] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] ok
            px:f32[64,256,768] = sub pw pu
            py:f32[64,256,1] = add pv 9.999999747378752e-06
            pz:f32[64,256,1] = rsqrt py
            qa:f32[64,256,1] = div pz py
            qb:f32[64,256,1] = mul -0.5 qa
            qc:f16[1,1,768] = reshape[dimensions=None new_sizes=(1, 1, 768)] ol
            qd:f32[1,1,768] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] qc
            qe:f32[64,256,768] = mul pz qd
            qf:f32[64,256,768] = mul px qe
            qg:f16[1,1,768] = reshape[dimensions=None new_sizes=(1, 1, 768)] om
            qh:f32[1,1,768] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] qg
            qi:f32[64,256,768] = add qf qh
            qj:f16[64,256,768] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] qi
            qk:i32[1024] = iota[dimension=0 dtype=int32 shape=(1024,)] 
            ql:i32[1,1024] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 1024)
            ] qk
            qm:i32[1,1024,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(1, 1024, 1)
            ] ql
            qn:i32[1,1,1024] = broadcast_in_dim[
              broadcast_dimensions=(0, 2)
              shape=(1, 1, 1024)
            ] ql
            qo:bool[1,1024,1024] = ge qm qn
            qp:bool[1,1,1024,1024] = broadcast_in_dim[
              broadcast_dimensions=(0, 2, 3)
              shape=(1, 1, 1024, 1024)
            ] qo
            qq:f16[768,2304] = transpose[permutation=(1, 0)] on
            qr:f16[64,256,2304] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] qj qq
            qs:f16[1,1,2304] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 2304)
            ] oo
            qt:f16[64,256,2304] = add qr qs
            qu:f16[64,256,768] = slice[
              limit_indices=(64, 256, 768)
              start_indices=(0, 0, 0)
              strides=None
            ] qt
            qv:f16[64,256,768] = slice[
              limit_indices=(64, 256, 1536)
              start_indices=(0, 0, 768)
              strides=None
            ] qt
            qw:f16[64,256,768] = slice[
              limit_indices=(64, 256, 2304)
              start_indices=(0, 0, 1536)
              strides=None
            ] qt
            qx:f16[64,256,12,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 12, 64)
            ] qu
            qy:f16[64,256,12,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 12, 64)
            ] qv
            qz:f16[64,256,12,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 12, 64)
            ] qw
            ra:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
            rb:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
            rc:i32[2] = concatenate[dimension=0] ra rb
            rd:bool[1,1,256,256] = gather[
              dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2, 3), collapsed_slice_dims=(), start_index_map=(2, 3))
              fill_value=None
              indices_are_sorted=True
              mode=GatherScatterMode.PROMISE_IN_BOUNDS
              slice_sizes=(1, 1, 256, 256)
              unique_indices=True
            ] qp rc
            re:bool[1,256,256] = squeeze[dimensions=(0,)] rd
            rf:bool[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(64, 1, 256, 256)
            ] re
            rg:i32[64,1,1,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 3)
              shape=(64, 1, 1, 256)
            ] op
            rh:i32[64,1,256] = squeeze[dimensions=(2,)] rg
            ri:i32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 3)
              shape=(64, 1, 256, 256)
            ] rh
            rj:bool[64,1,256,256] = ne ri 0
            rk:bool[64,1,256,256] = and rj rf
            rl:f32[64,1,256,256] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] rk
            rm:bool[64,1,256,256] = gt rl 0.0
            rn:f32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 1, 256, 256)
            ] 0.0
            ro:f16[64,1,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] rn
            rp:f32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 1, 256, 256)
            ] -10000.0
            rq:f16[64,1,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] rp
            rr:f16[64,1,256,256] = select_n rm rq ro
            rs:f32[] = sqrt 64.0
            rt:f16[] = convert_element_type[new_dtype=float16 weak_type=False] rs
            ru:f16[64,256,12,64] = div qx rt
            rv:f16[64,12,256,256] = dot_general[
              dimension_numbers=(((3,), (3,)), ((0, 2), (0, 2)))
              precision=None
              preferred_element_type=None
            ] ru qy
            rw:f16[64,12,256,256] = add rv rr
            rx:f16[64,12,256] = reduce_max[axes=(3,)] rw
            ry:f16[64,12,256,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 12, 256, 1)
            ] rx
            rz:f16[64,12,256,1] = stop_gradient ry
            sa:f16[64,12,256,256] = sub rw rz
            sb:f16[64,12,256,256] = exp sa
            sc:f32[64,12,256,256] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] sb
            sd:f32[64,12,256] = reduce_sum[axes=(3,)] sc
            se:f32[64,12,256,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 12, 256, 1)
            ] sd
            sf:f16[64,12,256,1] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] se
            sg:f16[64,12,256,256] = div sb sf
            sh:f16[64,12,256,1] = integer_pow[y=-2] sf
            si:f16[64,12,64,256] = dot_general[
              dimension_numbers=(((1,), (3,)), ((0, 2), (0, 1)))
              precision=None
              preferred_element_type=None
            ] qz sg
            sj:f16[64,256,12,64] = transpose[permutation=(0, 3, 1, 2)] si
            sk:f16[64,256,768] = reshape[
              dimensions=None
              new_sizes=(64, 256, 768)
            ] sj
            sl:f16[768,768] = transpose[permutation=(1, 0)] oq
            sm:f16[64,256,768] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] sk sl
            sn:f16[1,1,768] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 768)
            ] or
            so:f16[64,256,768] = add sm sn
            sp:f16[64,256,768] = add so ok
            sq:f32[64,256,768] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] sp
            sr:f32[64,256] = reduce_sum[axes=(2,)] sq
            ss:f32[64,256] = div sr 768.0
            st:f32[64,256,768] = integer_pow[y=2] sq
            su:f32[64,256,768] = integer_pow[y=1] sq
            sv:f32[64,256,768] = mul 2.0 su
            sw:f32[64,256] = reduce_sum[axes=(2,)] st
            sx:f32[64,256] = div sw 768.0
            sy:f32[64,256] = integer_pow[y=2] ss
            sz:f32[64,256] = integer_pow[y=1] ss
            ta:f32[64,256] = mul 2.0 sz
            tb:f32[64,256] = sub sx sy
            tc:f32[64,256] = max 0.0 tb
            td:bool[64,256] = eq tb tc
            te:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            tf:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 0.0
            tg:f32[64,256] = select_n td tf te
            th:bool[64,256] = eq 0.0 tc
            ti:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 2.0
            tj:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            tk:f32[64,256] = select_n th tj ti
            tl:f32[64,256] = div tg tk
            tm:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] ss
            tn:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] tc
            to:f32[64,256,768] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] sp
            tp:f32[64,256,768] = sub to tm
            tq:f32[64,256,1] = add tn 9.999999747378752e-06
            tr:f32[64,256,1] = rsqrt tq
            ts:f32[64,256,1] = div tr tq
            tt:f32[64,256,1] = mul -0.5 ts
            tu:f16[1,1,768] = reshape[dimensions=None new_sizes=(1, 1, 768)] os
            tv:f32[1,1,768] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] tu
            tw:f32[64,256,768] = mul tr tv
            tx:f32[64,256,768] = mul tp tw
            ty:f16[1,1,768] = reshape[dimensions=None new_sizes=(1, 1, 768)] ot
            tz:f32[1,1,768] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] ty
            ua:f32[64,256,768] = add tx tz
            ub:f16[64,256,768] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] ua
            uc:f16[768,3072] = transpose[permutation=(1, 0)] ou
            ud:f16[64,256,3072] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] ub uc
            ue:f16[1,1,3072] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 3072)
            ] ov
            uf:f16[64,256,3072] = add ud ue
            ug:f16[64,256,3072] = integer_pow[y=3] uf
            uh:f16[64,256,3072] = integer_pow[y=2] uf
            ui:f16[64,256,3072] = mul 3.0 uh
            uj:f16[64,256,3072] = mul 0.044708251953125 ug
            uk:f16[64,256,3072] = add uf uj
            ul:f16[64,256,3072] = mul 0.7978515625 uk
            um:f16[64,256,3072] = tanh ul
            un:f16[64,256,3072] = sub 1.0 um
            uo:f16[64,256,3072] = add 1.0 um
            up:f16[64,256,3072] = mul 0.5 uo
            uq:f16[64,256,3072] = mul uf up
            ur:f16[3072,768] = transpose[permutation=(1, 0)] ow
            us:f16[64,256,768] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] uq ur
            ut:f16[1,1,768] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 768)
            ] ox
            uu:f16[64,256,768] = add us ut
            uv:f16[64,256,768] = add sp uu
          in (uv, uq, ur, uf, un, um, ui, up, ub, uc, tp, tr, tv, tt, tl, ta, sv,
            tw, sk, sl, qz, sh, sb, sf, ru, qy, rt, sg, qj, qq, px, pz, qd, qb, pt,
            pi, pd, qe) }
        name=02
      ] fa dr ds dt du ee dv dw dx dy dz ea eb ec
    in (ee, ef, eg, fb, fc, fd, fe, ff, fg, fh, fi, fj, fk, fl, fm, fn, fo, fp, fq,
      fr, fs, ft, fu, fv, fw, fx, fy, fz, ga, gb, gc, gd, ge, gf, gg, gh, gi, gj,
      gk, gl, my, mz, na, nb, nc, nd, ne, nf, ng, nh, ni, nj, nk, nl, nm, nn, no,
      np, nq, nr, ns, nt, nu, nv, nw, nx, ny, nz, oa, ob, oc, od, oe, of, og, oh,
      oi, oj) }
  name=0
] uw ux uy uz va vb vc vd ve vf vg vh vi vj vk vl vm vn vo vp vq vr vs vt vu vv vw
  vx vy
eqn: a:i32[64,256] b:f16[64,256,1024] c:f16[64,256,50257] d:f16[64,256,3072] e:f16[3072,768]
  f:f16[64,256,3072] g:f16[64,256,3072] h:f16[64,256,3072] i:f16[64,256,3072] j:f16[64,256,3072]
  k:f16[64,256,768] l:f16[768,3072] m:f32[64,256,768] n:f32[64,256,1] o:f32[1,1,768]
  p:f32[64,256,1] q:f32[64,256] r:f32[64,256] s:f32[64,256,768] t:f32[64,256,768]
  u:f16[64,256,768] v:f16[768,768] w:f16[64,256,12,64] x:f16[64,12,256,1] y:f16[64,12,256,256]
  z:f16[64,12,256,1] ba:f16[64,256,12,64] bb:f16[64,256,12,64] bc:f16[] bd:f16[64,12,256,256]
  be:f16[64,256,768] bf:f16[768,2304] bg:f32[64,256,768] bh:f32[64,256,1] bi:f32[1,1,768]
  bj:f32[64,256,1] bk:f32[64,256] bl:f32[64,256] bm:f32[64,256,768] bn:f32[64,256,768]
  bo:f16[64,256,768] bp:f16[64,256,3072] bq:f16[3072,768] br:f16[64,256,3072] bs:f16[64,256,3072]
  bt:f16[64,256,3072] bu:f16[64,256,3072] bv:f16[64,256,3072] bw:f16[64,256,768]
  bx:f16[768,3072] by:f32[64,256,768] bz:f32[64,256,1] ca:f32[1,1,768] cb:f32[64,256,1]
  cc:f32[64,256] cd:f32[64,256] ce:f32[64,256,768] cf:f32[64,256,768] cg:f16[64,256,768]
  ch:f16[768,768] ci:f16[64,256,12,64] cj:f16[64,12,256,1] ck:f16[64,12,256,256]
  cl:f16[64,12,256,1] cm:f16[64,256,12,64] cn:f16[64,256,12,64] co:f16[] cp:f16[64,12,256,256]
  cq:f16[64,256,768] cr:f16[768,2304] cs:f32[64,256,768] ct:f32[64,256,1] cu:f32[1,1,768]
  cv:f32[64,256,1] cw:f32[64,256] cx:f32[64,256] cy:f32[64,256,768] cz:f32[64,256,768] = pipeline_marker[
  mark_type=end
  name=0
] da db dc dd de df dg dh di dj dk dl dm dn do dp dq dr ds dt du dv dw dx dy dz ea
  eb ec ed ee ef eg eh ei ej ek el em en eo ep eq er es et eu ev ew ex ey ez fa fb
  fc fd fe ff fg fh fi fj fk fl fm fn fo fp fq fr fs ft fu fv fw fx fy fz
input_var_mem_size
[fs, fr, xa, wz, xc, g, f, c, b, e, d, i, h, k, j, m, l, s, r, o, n, q, p, u, t, w, v, y, x]
[(50257, 768), (1024, 768), (64, 256), (64, 256), (64, 256), (768,), (768,), (2304, 768), (2304,), (768, 768), (768,), (768,), (768,), (3072, 768), (3072,), (768, 3072), (768,), (768,), (768,), (2304, 768), (2304,), (768, 768), (768,), (768,), (768,), (3072, 768), (3072,), (768, 3072), (768,)]
param_size: 0.0499269962310791 [GiB] 
jaxpr.eqns, len: 3
eqn: a:f16[64,256,768] b:f16[768] c:f16[768] d:f16[2304,768] e:f16[2304] f:i32[64,256]
  g:f16[768,768] h:f16[768] i:f16[768] j:f16[768] k:f16[3072,768] l:f16[3072] m:f16[768,3072]
  n:f16[768] o:f16[768] p:f16[768] q:f16[2304,768] r:f16[2304] s:f16[768,768] t:f16[768]
  u:f16[768] v:f16[768] w:f16[3072,768] x:f16[3072] y:f16[768,3072] z:f16[768] ba:f16[768]
  bb:f16[768] bc:f16[2304,768] bd:f16[2304] be:f16[768,768] bf:f16[768] bg:f16[768]
  bh:f16[768] bi:f16[3072,768] bj:f16[3072] bk:f16[768,3072] bl:f16[768] bm:f16[768]
  bn:f16[768] bo:f16[2304,768] bp:f16[2304] bq:f16[768,768] br:f16[768] bs:f16[768]
  bt:f16[768] bu:f16[3072,768] bv:f16[3072] bw:f16[768,3072] bx:f16[768] by:f16[768]
  bz:f16[768] ca:f16[2304,768] cb:f16[2304] cc:f16[768,768] cd:f16[768] = pipeline_marker[
  mark_type=start
  name=1
] ce cf cg ch ci cj ck cl cm cn co cp cq cr cs ct cu cv cw cx cy cz da db dc dd de
  df dg dh di dj dk dl dm dn do dp dq dr ds dt du dv dw dx dy dz ea eb ec ed ee ef
  eg eh
eqn: a:f16[64,256,3072] b:f16[3072,768] c:f16[64,256,3072] d:f16[64,256,3072] e:f16[64,256,3072]
  f:f16[64,256,3072] g:f16[64,256,3072] h:f16[64,256,768] i:f16[768,3072] j:f32[64,256,768]
  k:f32[64,256,1] l:f32[1,1,768] m:f32[64,256,1] n:f32[64,256] o:f32[64,256] p:f32[64,256,768]
  q:f32[64,256,768] r:f16[64,256,768] s:f16[768,768] t:f16[64,256,12,64] u:f16[64,12,256,1]
  v:f16[64,12,256,256] w:f16[64,12,256,1] x:f16[64,256,12,64] y:f16[64,256,12,64]
  z:f16[] ba:f16[64,12,256,256] bb:f16[64,256,768] bc:f16[768,2304] bd:f32[64,256,768]
  be:f32[64,256,1] bf:f32[1,1,768] bg:f32[64,256,1] bh:f32[64,256] bi:f32[64,256]
  bj:f32[64,256,768] bk:f32[64,256,768] bl:f16[64,256,3072] bm:f16[3072,768] bn:f16[64,256,3072]
  bo:f16[64,256,3072] bp:f16[64,256,3072] bq:f16[64,256,3072] br:f16[64,256,3072]
  bs:f16[64,256,768] bt:f16[768,3072] bu:f32[64,256,768] bv:f32[64,256,1] bw:f32[1,1,768]
  bx:f32[64,256,1] by:f32[64,256] bz:f32[64,256] ca:f32[64,256,768] cb:f32[64,256,768]
  cc:f16[64,256,768] cd:f16[768,768] ce:f16[64,256,12,64] cf:f16[64,12,256,1] cg:f16[64,12,256,256]
  ch:f16[64,12,256,1] ci:f16[64,256,12,64] cj:f16[64,256,12,64] ck:f16[] cl:f16[64,12,256,256]
  cm:f16[64,256,768] cn:f16[768,2304] co:f32[64,256,768] cp:f32[64,256,1] cq:f32[1,1,768]
  cr:f32[64,256,1] cs:f32[64,256] ct:f32[64,256] cu:f32[64,256,768] cv:f32[64,256,768]
  cw:f16[64,256,768] cx:f16[768,768] cy:f16[64,256,12,64] cz:f16[64,12,256,1] da:f16[64,12,256,256]
  db:f16[64,12,256,1] dc:f16[64,256,12,64] dd:f16[64,256,12,64] de:f16[] df:f16[64,12,256,256]
  dg:f16[64,256,768] dh:f16[768,2304] di:f32[64,256,768] dj:f32[64,256,1] dk:f32[1,1,768]
  dl:f32[64,256,1] dm:f32[64,256] dn:f32[64,256] do:f32[64,256,768] dp:f32[64,256,768]
  dq:f16[64,256,768] dr:f16[768,768] ds:f16[64,256,12,64] dt:f16[64,12,256,1] du:f16[64,12,256,256]
  dv:f16[64,12,256,1] dw:f16[64,256,12,64] dx:f16[64,256,12,64] dy:f16[] dz:f16[64,12,256,256]
  ea:f16[64,256,768] eb:f16[768,2304] ec:f32[64,256,768] ed:f32[64,256,1] ee:f32[1,1,768]
  ef:f32[64,256,1] eg:f32[64,256] eh:f32[64,256] ei:f32[64,256,768] ej:f32[64,256,768]
  ek:f16[64,256,3072] el:f16[3072,768] em:f16[64,256,3072] en:f16[64,256,3072] eo:f16[64,256,3072]
  ep:f16[64,256,3072] eq:f16[64,256,3072] er:f16[64,256,768] es:f16[768,3072] et:f32[64,256,768]
  eu:f32[64,256,1] ev:f32[1,1,768] ew:f32[64,256,1] ex:f32[64,256] ey:f32[64,256]
  ez:f32[64,256,768] fa:f32[64,256,768] fb:f16[64,256,768] fc:f16[64,256,768] fd:f16[768,768]
  fe:f16[64,256,12,64] ff:f16[64,12,256,1] fg:f16[64,12,256,256] fh:f16[64,12,256,1]
  fi:f16[64,256,12,64] fj:f16[64,256,12,64] fk:f16[] fl:f16[64,12,256,256] fm:f16[64,256,768]
  fn:f16[768,2304] fo:f32[64,256,768] fp:f32[64,256,1] fq:f32[1,1,768] fr:f32[64,256,1]
  fs:f32[64,256] ft:f32[64,256] fu:f32[64,256,768] fv:f32[64,256,768] fw:f16[64,256,3072]
  fx:f16[3072,768] fy:f16[64,256,3072] fz:f16[64,256,3072] ga:f16[64,256,3072] gb:f16[64,256,3072]
  gc:f16[64,256,3072] gd:f16[64,256,768] ge:f16[768,3072] gf:f32[64,256,768] gg:f32[64,256,1]
  gh:f32[1,1,768] gi:f32[64,256,1] gj:f32[64,256] gk:f32[64,256] gl:f32[64,256,768]
  gm:f32[64,256,768] = named_call[
  call_jaxpr={ lambda ; gn:f16[64,256,768] go:f16[768] gp:f16[768] gq:f16[2304,768]
      gr:f16[2304] gs:i32[64,256] gt:f16[768,768] gu:f16[768] gv:f16[768] gw:f16[768]
      gx:f16[3072,768] gy:f16[3072] gz:f16[768,3072] ha:f16[768] hb:f16[768] hc:f16[768]
      hd:f16[2304,768] he:f16[2304] hf:f16[768,768] hg:f16[768] hh:f16[768] hi:f16[768]
      hj:f16[3072,768] hk:f16[3072] hl:f16[768,3072] hm:f16[768] hn:f16[768] ho:f16[768]
      hp:f16[2304,768] hq:f16[2304] hr:f16[768,768] hs:f16[768] ht:f16[768] hu:f16[768]
      hv:f16[3072,768] hw:f16[3072] hx:f16[768,3072] hy:f16[768] hz:f16[768] ia:f16[768]
      ib:f16[2304,768] ic:f16[2304] id:f16[768,768] ie:f16[768] if:f16[768] ig:f16[768]
      ih:f16[3072,768] ii:f16[3072] ij:f16[768,3072] ik:f16[768] il:f16[768] im:f16[768]
      in:f16[2304,768] io:f16[2304] ip:f16[768,768] iq:f16[768]. let
      ir:f16[64,256,768] is:f16[64,256,3072] it:f16[3072,768] iu:f16[64,256,3072]
        iv:f16[64,256,3072] iw:f16[64,256,3072] ix:f16[64,256,3072] iy:f16[64,256,3072]
        iz:f16[64,256,768] ja:f16[768,3072] jb:f32[64,256,768] jc:f32[64,256,1] jd:f32[1,1,768]
        je:f32[64,256,1] jf:f32[64,256] jg:f32[64,256] jh:f32[64,256,768] ji:f32[64,256,768]
        jj:f16[64,256,768] jk:f16[768,768] jl:f16[64,256,12,64] jm:f16[64,12,256,1]
        jn:f16[64,12,256,256] jo:f16[64,12,256,1] jp:f16[64,256,12,64] jq:f16[64,256,12,64]
        jr:f16[] js:f16[64,12,256,256] jt:f16[64,256,768] ju:f16[768,2304] jv:f32[64,256,768]
        jw:f32[64,256,1] jx:f32[1,1,768] jy:f32[64,256,1] jz:f32[64,256] ka:f32[64,256]
        kb:f32[64,256,768] kc:f32[64,256,768] = named_call[
        call_jaxpr={ lambda ; kd:f16[64,256,768] ke:f16[768] kf:f16[768] kg:f16[2304,768]
            kh:f16[2304] ki:i32[64,256] kj:f16[768,768] kk:f16[768] kl:f16[768] km:f16[768]
            kn:f16[3072,768] ko:f16[3072] kp:f16[768,3072] kq:f16[768]. let
            kr:f32[64,256,768] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] kd
            ks:f32[64,256] = reduce_sum[axes=(2,)] kr
            kt:f32[64,256] = div ks 768.0
            ku:f32[64,256,768] = integer_pow[y=2] kr
            kv:f32[64,256,768] = integer_pow[y=1] kr
            kw:f32[64,256,768] = mul 2.0 kv
            kx:f32[64,256] = reduce_sum[axes=(2,)] ku
            ky:f32[64,256] = div kx 768.0
            kz:f32[64,256] = integer_pow[y=2] kt
            la:f32[64,256] = integer_pow[y=1] kt
            lb:f32[64,256] = mul 2.0 la
            lc:f32[64,256] = sub ky kz
            ld:f32[64,256] = max 0.0 lc
            le:bool[64,256] = eq lc ld
            lf:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            lg:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 0.0
            lh:f32[64,256] = select_n le lg lf
            li:bool[64,256] = eq 0.0 ld
            lj:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 2.0
            lk:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            ll:f32[64,256] = select_n li lk lj
            lm:f32[64,256] = div lh ll
            ln:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] kt
            lo:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] ld
            lp:f32[64,256,768] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] kd
            lq:f32[64,256,768] = sub lp ln
            lr:f32[64,256,1] = add lo 9.999999747378752e-06
            ls:f32[64,256,1] = rsqrt lr
            lt:f32[64,256,1] = div ls lr
            lu:f32[64,256,1] = mul -0.5 lt
            lv:f16[1,1,768] = reshape[dimensions=None new_sizes=(1, 1, 768)] ke
            lw:f32[1,1,768] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] lv
            lx:f32[64,256,768] = mul ls lw
            ly:f32[64,256,768] = mul lq lx
            lz:f16[1,1,768] = reshape[dimensions=None new_sizes=(1, 1, 768)] kf
            ma:f32[1,1,768] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] lz
            mb:f32[64,256,768] = add ly ma
            mc:f16[64,256,768] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] mb
            md:i32[1024] = iota[dimension=0 dtype=int32 shape=(1024,)] 
            me:i32[1,1024] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 1024)
            ] md
            mf:i32[1,1024,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(1, 1024, 1)
            ] me
            mg:i32[1,1,1024] = broadcast_in_dim[
              broadcast_dimensions=(0, 2)
              shape=(1, 1, 1024)
            ] me
            mh:bool[1,1024,1024] = ge mf mg
            mi:bool[1,1,1024,1024] = broadcast_in_dim[
              broadcast_dimensions=(0, 2, 3)
              shape=(1, 1, 1024, 1024)
            ] mh
            mj:f16[768,2304] = transpose[permutation=(1, 0)] kg
            mk:f16[64,256,2304] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] mc mj
            ml:f16[1,1,2304] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 2304)
            ] kh
            mm:f16[64,256,2304] = add mk ml
            mn:f16[64,256,768] = slice[
              limit_indices=(64, 256, 768)
              start_indices=(0, 0, 0)
              strides=None
            ] mm
            mo:f16[64,256,768] = slice[
              limit_indices=(64, 256, 1536)
              start_indices=(0, 0, 768)
              strides=None
            ] mm
            mp:f16[64,256,768] = slice[
              limit_indices=(64, 256, 2304)
              start_indices=(0, 0, 1536)
              strides=None
            ] mm
            mq:f16[64,256,12,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 12, 64)
            ] mn
            mr:f16[64,256,12,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 12, 64)
            ] mo
            ms:f16[64,256,12,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 12, 64)
            ] mp
            mt:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
            mu:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
            mv:i32[2] = concatenate[dimension=0] mt mu
            mw:bool[1,1,256,256] = gather[
              dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2, 3), collapsed_slice_dims=(), start_index_map=(2, 3))
              fill_value=None
              indices_are_sorted=True
              mode=GatherScatterMode.PROMISE_IN_BOUNDS
              slice_sizes=(1, 1, 256, 256)
              unique_indices=True
            ] mi mv
            mx:bool[1,256,256] = squeeze[dimensions=(0,)] mw
            my:bool[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(64, 1, 256, 256)
            ] mx
            mz:i32[64,1,1,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 3)
              shape=(64, 1, 1, 256)
            ] ki
            na:i32[64,1,256] = squeeze[dimensions=(2,)] mz
            nb:i32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 3)
              shape=(64, 1, 256, 256)
            ] na
            nc:bool[64,1,256,256] = ne nb 0
            nd:bool[64,1,256,256] = and nc my
            ne:f32[64,1,256,256] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] nd
            nf:bool[64,1,256,256] = gt ne 0.0
            ng:f32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 1, 256, 256)
            ] 0.0
            nh:f16[64,1,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] ng
            ni:f32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 1, 256, 256)
            ] -10000.0
            nj:f16[64,1,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] ni
            nk:f16[64,1,256,256] = select_n nf nj nh
            nl:f32[] = sqrt 64.0
            nm:f16[] = convert_element_type[new_dtype=float16 weak_type=False] nl
            nn:f16[64,256,12,64] = div mq nm
            no:f16[64,12,256,256] = dot_general[
              dimension_numbers=(((3,), (3,)), ((0, 2), (0, 2)))
              precision=None
              preferred_element_type=None
            ] nn mr
            np:f16[64,12,256,256] = add no nk
            nq:f16[64,12,256] = reduce_max[axes=(3,)] np
            nr:f16[64,12,256,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 12, 256, 1)
            ] nq
            ns:f16[64,12,256,1] = stop_gradient nr
            nt:f16[64,12,256,256] = sub np ns
            nu:f16[64,12,256,256] = exp nt
            nv:f32[64,12,256,256] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] nu
            nw:f32[64,12,256] = reduce_sum[axes=(3,)] nv
            nx:f32[64,12,256,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 12, 256, 1)
            ] nw
            ny:f16[64,12,256,1] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] nx
            nz:f16[64,12,256,256] = div nu ny
            oa:f16[64,12,256,1] = integer_pow[y=-2] ny
            ob:f16[64,12,64,256] = dot_general[
              dimension_numbers=(((1,), (3,)), ((0, 2), (0, 1)))
              precision=None
              preferred_element_type=None
            ] ms nz
            oc:f16[64,256,12,64] = transpose[permutation=(0, 3, 1, 2)] ob
            od:f16[64,256,768] = reshape[
              dimensions=None
              new_sizes=(64, 256, 768)
            ] oc
            oe:f16[768,768] = transpose[permutation=(1, 0)] kj
            of:f16[64,256,768] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] od oe
            og:f16[1,1,768] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 768)
            ] kk
            oh:f16[64,256,768] = add of og
            oi:f16[64,256,768] = add oh kd
            oj:f32[64,256,768] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] oi
            ok:f32[64,256] = reduce_sum[axes=(2,)] oj
            ol:f32[64,256] = div ok 768.0
            om:f32[64,256,768] = integer_pow[y=2] oj
            on:f32[64,256,768] = integer_pow[y=1] oj
            oo:f32[64,256,768] = mul 2.0 on
            op:f32[64,256] = reduce_sum[axes=(2,)] om
            oq:f32[64,256] = div op 768.0
            or:f32[64,256] = integer_pow[y=2] ol
            os:f32[64,256] = integer_pow[y=1] ol
            ot:f32[64,256] = mul 2.0 os
            ou:f32[64,256] = sub oq or
            ov:f32[64,256] = max 0.0 ou
            ow:bool[64,256] = eq ou ov
            ox:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            oy:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 0.0
            oz:f32[64,256] = select_n ow oy ox
            pa:bool[64,256] = eq 0.0 ov
            pb:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 2.0
            pc:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            pd:f32[64,256] = select_n pa pc pb
            pe:f32[64,256] = div oz pd
            pf:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] ol
            pg:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] ov
            ph:f32[64,256,768] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] oi
            pi:f32[64,256,768] = sub ph pf
            pj:f32[64,256,1] = add pg 9.999999747378752e-06
            pk:f32[64,256,1] = rsqrt pj
            pl:f32[64,256,1] = div pk pj
            pm:f32[64,256,1] = mul -0.5 pl
            pn:f16[1,1,768] = reshape[dimensions=None new_sizes=(1, 1, 768)] kl
            po:f32[1,1,768] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] pn
            pp:f32[64,256,768] = mul pk po
            pq:f32[64,256,768] = mul pi pp
            pr:f16[1,1,768] = reshape[dimensions=None new_sizes=(1, 1, 768)] km
            ps:f32[1,1,768] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] pr
            pt:f32[64,256,768] = add pq ps
            pu:f16[64,256,768] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] pt
            pv:f16[768,3072] = transpose[permutation=(1, 0)] kn
            pw:f16[64,256,3072] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] pu pv
            px:f16[1,1,3072] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 3072)
            ] ko
            py:f16[64,256,3072] = add pw px
            pz:f16[64,256,3072] = integer_pow[y=3] py
            qa:f16[64,256,3072] = integer_pow[y=2] py
            qb:f16[64,256,3072] = mul 3.0 qa
            qc:f16[64,256,3072] = mul 0.044708251953125 pz
            qd:f16[64,256,3072] = add py qc
            qe:f16[64,256,3072] = mul 0.7978515625 qd
            qf:f16[64,256,3072] = tanh qe
            qg:f16[64,256,3072] = sub 1.0 qf
            qh:f16[64,256,3072] = add 1.0 qf
            qi:f16[64,256,3072] = mul 0.5 qh
            qj:f16[64,256,3072] = mul py qi
            qk:f16[3072,768] = transpose[permutation=(1, 0)] kp
            ql:f16[64,256,768] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] qj qk
            qm:f16[1,1,768] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 768)
            ] kq
            qn:f16[64,256,768] = add ql qm
            qo:f16[64,256,768] = add oi qn
          in (qo, qj, qk, py, qg, qf, qb, qi, pu, pv, pi, pk, po, pm, pe, ot, oo,
            pp, od, oe, ms, oa, nu, ny, nn, mr, nm, nz, mc, mj, lq, ls, lw, lu, lm,
            lb, kw, lx) }
        name=10
      ] gn go gp gq gr gs gt gu gv gw gx gy gz ha
      qp:f16[64,256,768] qq:f16[64,256,3072] qr:f16[3072,768] qs:f16[64,256,3072]
        qt:f16[64,256,3072] qu:f16[64,256,3072] qv:f16[64,256,3072] qw:f16[64,256,3072]
        qx:f16[64,256,768] qy:f16[768,3072] qz:f32[64,256,768] ra:f32[64,256,1] rb:f32[1,1,768]
        rc:f32[64,256,1] rd:f32[64,256] re:f32[64,256] rf:f32[64,256,768] rg:f32[64,256,768]
        rh:f16[64,256,768] ri:f16[768,768] rj:f16[64,256,12,64] rk:f16[64,12,256,1]
        rl:f16[64,12,256,256] rm:f16[64,12,256,1] rn:f16[64,256,12,64] ro:f16[64,256,12,64]
        rp:f16[] rq:f16[64,12,256,256] rr:f16[64,256,768] rs:f16[768,2304] rt:f32[64,256,768]
        ru:f32[64,256,1] rv:f32[1,1,768] rw:f32[64,256,1] rx:f32[64,256] ry:f32[64,256]
        rz:f32[64,256,768] sa:f32[64,256,768] = named_call[
        call_jaxpr={ lambda ; sb:f16[64,256,768] sc:f16[768] sd:f16[768] se:f16[2304,768]
            sf:f16[2304] sg:i32[64,256] sh:f16[768,768] si:f16[768] sj:f16[768] sk:f16[768]
            sl:f16[3072,768] sm:f16[3072] sn:f16[768,3072] so:f16[768]. let
            sp:f32[64,256,768] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] sb
            sq:f32[64,256] = reduce_sum[axes=(2,)] sp
            sr:f32[64,256] = div sq 768.0
            ss:f32[64,256,768] = integer_pow[y=2] sp
            st:f32[64,256,768] = integer_pow[y=1] sp
            su:f32[64,256,768] = mul 2.0 st
            sv:f32[64,256] = reduce_sum[axes=(2,)] ss
            sw:f32[64,256] = div sv 768.0
            sx:f32[64,256] = integer_pow[y=2] sr
            sy:f32[64,256] = integer_pow[y=1] sr
            sz:f32[64,256] = mul 2.0 sy
            ta:f32[64,256] = sub sw sx
            tb:f32[64,256] = max 0.0 ta
            tc:bool[64,256] = eq ta tb
            td:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            te:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 0.0
            tf:f32[64,256] = select_n tc te td
            tg:bool[64,256] = eq 0.0 tb
            th:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 2.0
            ti:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            tj:f32[64,256] = select_n tg ti th
            tk:f32[64,256] = div tf tj
            tl:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] sr
            tm:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] tb
            tn:f32[64,256,768] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] sb
            to:f32[64,256,768] = sub tn tl
            tp:f32[64,256,1] = add tm 9.999999747378752e-06
            tq:f32[64,256,1] = rsqrt tp
            tr:f32[64,256,1] = div tq tp
            ts:f32[64,256,1] = mul -0.5 tr
            tt:f16[1,1,768] = reshape[dimensions=None new_sizes=(1, 1, 768)] sc
            tu:f32[1,1,768] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] tt
            tv:f32[64,256,768] = mul tq tu
            tw:f32[64,256,768] = mul to tv
            tx:f16[1,1,768] = reshape[dimensions=None new_sizes=(1, 1, 768)] sd
            ty:f32[1,1,768] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] tx
            tz:f32[64,256,768] = add tw ty
            ua:f16[64,256,768] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] tz
            ub:i32[1024] = iota[dimension=0 dtype=int32 shape=(1024,)] 
            uc:i32[1,1024] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 1024)
            ] ub
            ud:i32[1,1024,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(1, 1024, 1)
            ] uc
            ue:i32[1,1,1024] = broadcast_in_dim[
              broadcast_dimensions=(0, 2)
              shape=(1, 1, 1024)
            ] uc
            uf:bool[1,1024,1024] = ge ud ue
            ug:bool[1,1,1024,1024] = broadcast_in_dim[
              broadcast_dimensions=(0, 2, 3)
              shape=(1, 1, 1024, 1024)
            ] uf
            uh:f16[768,2304] = transpose[permutation=(1, 0)] se
            ui:f16[64,256,2304] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] ua uh
            uj:f16[1,1,2304] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 2304)
            ] sf
            uk:f16[64,256,2304] = add ui uj
            ul:f16[64,256,768] = slice[
              limit_indices=(64, 256, 768)
              start_indices=(0, 0, 0)
              strides=None
            ] uk
            um:f16[64,256,768] = slice[
              limit_indices=(64, 256, 1536)
              start_indices=(0, 0, 768)
              strides=None
            ] uk
            un:f16[64,256,768] = slice[
              limit_indices=(64, 256, 2304)
              start_indices=(0, 0, 1536)
              strides=None
            ] uk
            uo:f16[64,256,12,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 12, 64)
            ] ul
            up:f16[64,256,12,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 12, 64)
            ] um
            uq:f16[64,256,12,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 12, 64)
            ] un
            ur:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
            us:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
            ut:i32[2] = concatenate[dimension=0] ur us
            uu:bool[1,1,256,256] = gather[
              dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2, 3), collapsed_slice_dims=(), start_index_map=(2, 3))
              fill_value=None
              indices_are_sorted=True
              mode=GatherScatterMode.PROMISE_IN_BOUNDS
              slice_sizes=(1, 1, 256, 256)
              unique_indices=True
            ] ug ut
            uv:bool[1,256,256] = squeeze[dimensions=(0,)] uu
            uw:bool[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(64, 1, 256, 256)
            ] uv
            ux:i32[64,1,1,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 3)
              shape=(64, 1, 1, 256)
            ] sg
            uy:i32[64,1,256] = squeeze[dimensions=(2,)] ux
            uz:i32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 3)
              shape=(64, 1, 256, 256)
            ] uy
            va:bool[64,1,256,256] = ne uz 0
            vb:bool[64,1,256,256] = and va uw
            vc:f32[64,1,256,256] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] vb
            vd:bool[64,1,256,256] = gt vc 0.0
            ve:f32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 1, 256, 256)
            ] 0.0
            vf:f16[64,1,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] ve
            vg:f32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 1, 256, 256)
            ] -10000.0
            vh:f16[64,1,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] vg
            vi:f16[64,1,256,256] = select_n vd vh vf
            vj:f32[] = sqrt 64.0
            vk:f16[] = convert_element_type[new_dtype=float16 weak_type=False] vj
            vl:f16[64,256,12,64] = div uo vk
            vm:f16[64,12,256,256] = dot_general[
              dimension_numbers=(((3,), (3,)), ((0, 2), (0, 2)))
              precision=None
              preferred_element_type=None
            ] vl up
            vn:f16[64,12,256,256] = add vm vi
            vo:f16[64,12,256] = reduce_max[axes=(3,)] vn
            vp:f16[64,12,256,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 12, 256, 1)
            ] vo
            vq:f16[64,12,256,1] = stop_gradient vp
            vr:f16[64,12,256,256] = sub vn vq
            vs:f16[64,12,256,256] = exp vr
            vt:f32[64,12,256,256] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] vs
            vu:f32[64,12,256] = reduce_sum[axes=(3,)] vt
            vv:f32[64,12,256,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 12, 256, 1)
            ] vu
            vw:f16[64,12,256,1] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] vv
            vx:f16[64,12,256,256] = div vs vw
            vy:f16[64,12,256,1] = integer_pow[y=-2] vw
            vz:f16[64,12,64,256] = dot_general[
              dimension_numbers=(((1,), (3,)), ((0, 2), (0, 1)))
              precision=None
              preferred_element_type=None
            ] uq vx
            wa:f16[64,256,12,64] = transpose[permutation=(0, 3, 1, 2)] vz
            wb:f16[64,256,768] = reshape[
              dimensions=None
              new_sizes=(64, 256, 768)
            ] wa
            wc:f16[768,768] = transpose[permutation=(1, 0)] sh
            wd:f16[64,256,768] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] wb wc
            we:f16[1,1,768] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 768)
            ] si
            wf:f16[64,256,768] = add wd we
            wg:f16[64,256,768] = add wf sb
            wh:f32[64,256,768] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] wg
            wi:f32[64,256] = reduce_sum[axes=(2,)] wh
            wj:f32[64,256] = div wi 768.0
            wk:f32[64,256,768] = integer_pow[y=2] wh
            wl:f32[64,256,768] = integer_pow[y=1] wh
            wm:f32[64,256,768] = mul 2.0 wl
            wn:f32[64,256] = reduce_sum[axes=(2,)] wk
            wo:f32[64,256] = div wn 768.0
            wp:f32[64,256] = integer_pow[y=2] wj
            wq:f32[64,256] = integer_pow[y=1] wj
            wr:f32[64,256] = mul 2.0 wq
            ws:f32[64,256] = sub wo wp
            wt:f32[64,256] = max 0.0 ws
            wu:bool[64,256] = eq ws wt
            wv:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            ww:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 0.0
            wx:f32[64,256] = select_n wu ww wv
            wy:bool[64,256] = eq 0.0 wt
            wz:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 2.0
            xa:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            xb:f32[64,256] = select_n wy xa wz
            xc:f32[64,256] = div wx xb
            xd:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] wj
            xe:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] wt
            xf:f32[64,256,768] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] wg
            xg:f32[64,256,768] = sub xf xd
            xh:f32[64,256,1] = add xe 9.999999747378752e-06
            xi:f32[64,256,1] = rsqrt xh
            xj:f32[64,256,1] = div xi xh
            xk:f32[64,256,1] = mul -0.5 xj
            xl:f16[1,1,768] = reshape[dimensions=None new_sizes=(1, 1, 768)] sj
            xm:f32[1,1,768] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] xl
            xn:f32[64,256,768] = mul xi xm
            xo:f32[64,256,768] = mul xg xn
            xp:f16[1,1,768] = reshape[dimensions=None new_sizes=(1, 1, 768)] sk
            xq:f32[1,1,768] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] xp
            xr:f32[64,256,768] = add xo xq
            xs:f16[64,256,768] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] xr
            xt:f16[768,3072] = transpose[permutation=(1, 0)] sl
            xu:f16[64,256,3072] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] xs xt
            xv:f16[1,1,3072] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 3072)
            ] sm
            xw:f16[64,256,3072] = add xu xv
            xx:f16[64,256,3072] = integer_pow[y=3] xw
            xy:f16[64,256,3072] = integer_pow[y=2] xw
            xz:f16[64,256,3072] = mul 3.0 xy
            ya:f16[64,256,3072] = mul 0.044708251953125 xx
            yb:f16[64,256,3072] = add xw ya
            yc:f16[64,256,3072] = mul 0.7978515625 yb
            yd:f16[64,256,3072] = tanh yc
            ye:f16[64,256,3072] = sub 1.0 yd
            yf:f16[64,256,3072] = add 1.0 yd
            yg:f16[64,256,3072] = mul 0.5 yf
            yh:f16[64,256,3072] = mul xw yg
            yi:f16[3072,768] = transpose[permutation=(1, 0)] sn
            yj:f16[64,256,768] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] yh yi
            yk:f16[1,1,768] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 768)
            ] so
            yl:f16[64,256,768] = add yj yk
            ym:f16[64,256,768] = add wg yl
          in (ym, yh, yi, xw, ye, yd, xz, yg, xs, xt, xg, xi, xm, xk, xc, wr, wm,
            xn, wb, wc, uq, vy, vs, vw, vl, up, vk, vx, ua, uh, to, tq, tu, ts, tk,
            sz, su, tv) }
        name=11
      ] ir hb hc hd he gs hf hg hh hi hj hk hl hm
      yn:f16[64,256,768] yo:f16[64,256,768] yp:f16[768,768] yq:f16[64,256,12,64]
        yr:f16[64,12,256,1] ys:f16[64,12,256,256] yt:f16[64,12,256,1] yu:f16[64,256,12,64]
        yv:f16[64,256,12,64] yw:f16[] yx:f16[64,12,256,256] yy:f16[64,256,768] yz:f16[768,2304]
        za:f32[64,256,768] zb:f32[64,256,1] zc:f32[1,1,768] zd:f32[64,256,1] ze:f32[64,256]
        zf:f32[64,256] zg:f32[64,256,768] zh:f32[64,256,768] = named_call[
        call_jaxpr={ lambda ; zi:f16[64,256,768] zj:f16[768] zk:f16[768] zl:f16[2304,768]
            zm:f16[2304] zn:i32[64,256] zo:f16[768,768] zp:f16[768]. let
            zq:f32[64,256,768] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] zi
            zr:f32[64,256] = reduce_sum[axes=(2,)] zq
            zs:f32[64,256] = div zr 768.0
            zt:f32[64,256,768] = integer_pow[y=2] zq
            zu:f32[64,256,768] = integer_pow[y=1] zq
            zv:f32[64,256,768] = mul 2.0 zu
            zw:f32[64,256] = reduce_sum[axes=(2,)] zt
            zx:f32[64,256] = div zw 768.0
            zy:f32[64,256] = integer_pow[y=2] zs
            zz:f32[64,256] = integer_pow[y=1] zs
            baa:f32[64,256] = mul 2.0 zz
            bab:f32[64,256] = sub zx zy
            bac:f32[64,256] = max 0.0 bab
            bad:bool[64,256] = eq bab bac
            bae:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            baf:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 0.0
            bag:f32[64,256] = select_n bad baf bae
            bah:bool[64,256] = eq 0.0 bac
            bai:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 2.0
            baj:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            bak:f32[64,256] = select_n bah baj bai
            bal:f32[64,256] = div bag bak
            bam:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] zs
            ban:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] bac
            bao:f32[64,256,768] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] zi
            bap:f32[64,256,768] = sub bao bam
            baq:f32[64,256,1] = add ban 9.999999747378752e-06
            bar:f32[64,256,1] = rsqrt baq
            bas:f32[64,256,1] = div bar baq
            bat:f32[64,256,1] = mul -0.5 bas
            bau:f16[1,1,768] = reshape[dimensions=None new_sizes=(1, 1, 768)] zj
            bav:f32[1,1,768] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bau
            baw:f32[64,256,768] = mul bar bav
            bax:f32[64,256,768] = mul bap baw
            bay:f16[1,1,768] = reshape[dimensions=None new_sizes=(1, 1, 768)] zk
            baz:f32[1,1,768] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bay
            bba:f32[64,256,768] = add bax baz
            bbb:f16[64,256,768] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bba
            bbc:i32[1024] = iota[dimension=0 dtype=int32 shape=(1024,)] 
            bbd:i32[1,1024] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 1024)
            ] bbc
            bbe:i32[1,1024,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(1, 1024, 1)
            ] bbd
            bbf:i32[1,1,1024] = broadcast_in_dim[
              broadcast_dimensions=(0, 2)
              shape=(1, 1, 1024)
            ] bbd
            bbg:bool[1,1024,1024] = ge bbe bbf
            bbh:bool[1,1,1024,1024] = broadcast_in_dim[
              broadcast_dimensions=(0, 2, 3)
              shape=(1, 1, 1024, 1024)
            ] bbg
            bbi:f16[768,2304] = transpose[permutation=(1, 0)] zl
            bbj:f16[64,256,2304] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] bbb bbi
            bbk:f16[1,1,2304] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 2304)
            ] zm
            bbl:f16[64,256,2304] = add bbj bbk
            bbm:f16[64,256,768] = slice[
              limit_indices=(64, 256, 768)
              start_indices=(0, 0, 0)
              strides=None
            ] bbl
            bbn:f16[64,256,768] = slice[
              limit_indices=(64, 256, 1536)
              start_indices=(0, 0, 768)
              strides=None
            ] bbl
            bbo:f16[64,256,768] = slice[
              limit_indices=(64, 256, 2304)
              start_indices=(0, 0, 1536)
              strides=None
            ] bbl
            bbp:f16[64,256,12,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 12, 64)
            ] bbm
            bbq:f16[64,256,12,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 12, 64)
            ] bbn
            bbr:f16[64,256,12,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 12, 64)
            ] bbo
            bbs:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
            bbt:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
            bbu:i32[2] = concatenate[dimension=0] bbs bbt
            bbv:bool[1,1,256,256] = gather[
              dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2, 3), collapsed_slice_dims=(), start_index_map=(2, 3))
              fill_value=None
              indices_are_sorted=True
              mode=GatherScatterMode.PROMISE_IN_BOUNDS
              slice_sizes=(1, 1, 256, 256)
              unique_indices=True
            ] bbh bbu
            bbw:bool[1,256,256] = squeeze[dimensions=(0,)] bbv
            bbx:bool[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(64, 1, 256, 256)
            ] bbw
            bby:i32[64,1,1,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 3)
              shape=(64, 1, 1, 256)
            ] zn
            bbz:i32[64,1,256] = squeeze[dimensions=(2,)] bby
            bca:i32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 3)
              shape=(64, 1, 256, 256)
            ] bbz
            bcb:bool[64,1,256,256] = ne bca 0
            bcc:bool[64,1,256,256] = and bcb bbx
            bcd:f32[64,1,256,256] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bcc
            bce:bool[64,1,256,256] = gt bcd 0.0
            bcf:f32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 1, 256, 256)
            ] 0.0
            bcg:f16[64,1,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bcf
            bch:f32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 1, 256, 256)
            ] -10000.0
            bci:f16[64,1,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bch
            bcj:f16[64,1,256,256] = select_n bce bci bcg
            bck:f32[] = sqrt 64.0
            bcl:f16[] = convert_element_type[new_dtype=float16 weak_type=False] bck
            bcm:f16[64,256,12,64] = div bbp bcl
            bcn:f16[64,12,256,256] = dot_general[
              dimension_numbers=(((3,), (3,)), ((0, 2), (0, 2)))
              precision=None
              preferred_element_type=None
            ] bcm bbq
            bco:f16[64,12,256,256] = add bcn bcj
            bcp:f16[64,12,256] = reduce_max[axes=(3,)] bco
            bcq:f16[64,12,256,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 12, 256, 1)
            ] bcp
            bcr:f16[64,12,256,1] = stop_gradient bcq
            bcs:f16[64,12,256,256] = sub bco bcr
            bct:f16[64,12,256,256] = exp bcs
            bcu:f32[64,12,256,256] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bct
            bcv:f32[64,12,256] = reduce_sum[axes=(3,)] bcu
            bcw:f32[64,12,256,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 12, 256, 1)
            ] bcv
            bcx:f16[64,12,256,1] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bcw
            bcy:f16[64,12,256,256] = div bct bcx
            bcz:f16[64,12,256,1] = integer_pow[y=-2] bcx
            bda:f16[64,12,64,256] = dot_general[
              dimension_numbers=(((1,), (3,)), ((0, 2), (0, 1)))
              precision=None
              preferred_element_type=None
            ] bbr bcy
            bdb:f16[64,256,12,64] = transpose[permutation=(0, 3, 1, 2)] bda
            bdc:f16[64,256,768] = reshape[
              dimensions=None
              new_sizes=(64, 256, 768)
            ] bdb
            bdd:f16[768,768] = transpose[permutation=(1, 0)] zo
            bde:f16[64,256,768] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] bdc bdd
            bdf:f16[1,1,768] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 768)
            ] zp
            bdg:f16[64,256,768] = add bde bdf
            bdh:f16[64,256,768] = add bdg zi
          in (bdh, bdc, bdd, bbr, bcz, bct, bcx, bcm, bbq, bcl, bcy, bbb, bbi, bap,
            bar, bav, bat, bal, baa, zv, baw) }
        name=12
      ] qp hn ho hp hq gs hr hs
      bdi:f16[64,256,768] bdj:f16[64,256,768] bdk:f16[768,768] bdl:f16[64,256,12,64]
        bdm:f16[64,12,256,1] bdn:f16[64,12,256,256] bdo:f16[64,12,256,1] bdp:f16[64,256,12,64]
        bdq:f16[64,256,12,64] bdr:f16[] bds:f16[64,12,256,256] bdt:f16[64,256,768]
        bdu:f16[768,2304] bdv:f32[64,256,768] bdw:f32[64,256,1] bdx:f32[1,1,768]
        bdy:f32[64,256,1] bdz:f32[64,256] bea:f32[64,256] beb:f32[64,256,768] bec:f32[64,256,768]
        bed:f16[64,256,3072] bee:f16[3072,768] bef:f16[64,256,3072] beg:f16[64,256,3072]
        beh:f16[64,256,3072] bei:f16[64,256,3072] bej:f16[64,256,3072] bek:f16[64,256,768]
        bel:f16[768,3072] bem:f32[64,256,768] ben:f32[64,256,1] beo:f32[1,1,768]
        bep:f32[64,256,1] beq:f32[64,256] ber:f32[64,256] bes:f32[64,256,768] bet:f32[64,256,768] = named_call[
        call_jaxpr={ lambda ; beu:f16[64,256,768] bev:f16[768] bew:f16[768] bex:f16[3072,768]
            bey:f16[3072] bez:f16[768,3072] bfa:f16[768] bfb:f16[768] bfc:f16[768]
            bfd:f16[2304,768] bfe:f16[2304] bff:i32[64,256] bfg:f16[768,768] bfh:f16[768]. let
            bfi:f32[64,256,768] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] beu
            bfj:f32[64,256] = reduce_sum[axes=(2,)] bfi
            bfk:f32[64,256] = div bfj 768.0
            bfl:f32[64,256,768] = integer_pow[y=2] bfi
            bfm:f32[64,256,768] = integer_pow[y=1] bfi
            bfn:f32[64,256,768] = mul 2.0 bfm
            bfo:f32[64,256] = reduce_sum[axes=(2,)] bfl
            bfp:f32[64,256] = div bfo 768.0
            bfq:f32[64,256] = integer_pow[y=2] bfk
            bfr:f32[64,256] = integer_pow[y=1] bfk
            bfs:f32[64,256] = mul 2.0 bfr
            bft:f32[64,256] = sub bfp bfq
            bfu:f32[64,256] = max 0.0 bft
            bfv:bool[64,256] = eq bft bfu
            bfw:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            bfx:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 0.0
            bfy:f32[64,256] = select_n bfv bfx bfw
            bfz:bool[64,256] = eq 0.0 bfu
            bga:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 2.0
            bgb:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            bgc:f32[64,256] = select_n bfz bgb bga
            bgd:f32[64,256] = div bfy bgc
            bge:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] bfk
            bgf:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] bfu
            bgg:f32[64,256,768] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] beu
            bgh:f32[64,256,768] = sub bgg bge
            bgi:f32[64,256,1] = add bgf 9.999999747378752e-06
            bgj:f32[64,256,1] = rsqrt bgi
            bgk:f32[64,256,1] = div bgj bgi
            bgl:f32[64,256,1] = mul -0.5 bgk
            bgm:f16[1,1,768] = reshape[dimensions=None new_sizes=(1, 1, 768)] bev
            bgn:f32[1,1,768] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bgm
            bgo:f32[64,256,768] = mul bgj bgn
            bgp:f32[64,256,768] = mul bgh bgo
            bgq:f16[1,1,768] = reshape[dimensions=None new_sizes=(1, 1, 768)] bew
            bgr:f32[1,1,768] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bgq
            bgs:f32[64,256,768] = add bgp bgr
            bgt:f16[64,256,768] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bgs
            bgu:f16[768,3072] = transpose[permutation=(1, 0)] bex
            bgv:f16[64,256,3072] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] bgt bgu
            bgw:f16[1,1,3072] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 3072)
            ] bey
            bgx:f16[64,256,3072] = add bgv bgw
            bgy:f16[64,256,3072] = integer_pow[y=3] bgx
            bgz:f16[64,256,3072] = integer_pow[y=2] bgx
            bha:f16[64,256,3072] = mul 3.0 bgz
            bhb:f16[64,256,3072] = mul 0.044708251953125 bgy
            bhc:f16[64,256,3072] = add bgx bhb
            bhd:f16[64,256,3072] = mul 0.7978515625 bhc
            bhe:f16[64,256,3072] = tanh bhd
            bhf:f16[64,256,3072] = sub 1.0 bhe
            bhg:f16[64,256,3072] = add 1.0 bhe
            bhh:f16[64,256,3072] = mul 0.5 bhg
            bhi:f16[64,256,3072] = mul bgx bhh
            bhj:f16[3072,768] = transpose[permutation=(1, 0)] bez
            bhk:f16[64,256,768] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] bhi bhj
            bhl:f16[1,1,768] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 768)
            ] bfa
            bhm:f16[64,256,768] = add bhk bhl
            bhn:f16[64,256,768] = add beu bhm
            bho:f32[64,256,768] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bhn
            bhp:f32[64,256] = reduce_sum[axes=(2,)] bho
            bhq:f32[64,256] = div bhp 768.0
            bhr:f32[64,256,768] = integer_pow[y=2] bho
            bhs:f32[64,256,768] = integer_pow[y=1] bho
            bht:f32[64,256,768] = mul 2.0 bhs
            bhu:f32[64,256] = reduce_sum[axes=(2,)] bhr
            bhv:f32[64,256] = div bhu 768.0
            bhw:f32[64,256] = integer_pow[y=2] bhq
            bhx:f32[64,256] = integer_pow[y=1] bhq
            bhy:f32[64,256] = mul 2.0 bhx
            bhz:f32[64,256] = sub bhv bhw
            bia:f32[64,256] = max 0.0 bhz
            bib:bool[64,256] = eq bhz bia
            bic:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            bid:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 0.0
            bie:f32[64,256] = select_n bib bid bic
            bif:bool[64,256] = eq 0.0 bia
            big:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 2.0
            bih:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            bii:f32[64,256] = select_n bif bih big
            bij:f32[64,256] = div bie bii
            bik:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] bhq
            bil:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] bia
            bim:f32[64,256,768] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bhn
            bin:f32[64,256,768] = sub bim bik
            bio:f32[64,256,1] = add bil 9.999999747378752e-06
            bip:f32[64,256,1] = rsqrt bio
            biq:f32[64,256,1] = div bip bio
            bir:f32[64,256,1] = mul -0.5 biq
            bis:f16[1,1,768] = reshape[dimensions=None new_sizes=(1, 1, 768)] bfb
            bit:f32[1,1,768] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bis
            biu:f32[64,256,768] = mul bip bit
            biv:f32[64,256,768] = mul bin biu
            biw:f16[1,1,768] = reshape[dimensions=None new_sizes=(1, 1, 768)] bfc
            bix:f32[1,1,768] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] biw
            biy:f32[64,256,768] = add biv bix
            biz:f16[64,256,768] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] biy
            bja:i32[1024] = iota[dimension=0 dtype=int32 shape=(1024,)] 
            bjb:i32[1,1024] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 1024)
            ] bja
            bjc:i32[1,1024,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(1, 1024, 1)
            ] bjb
            bjd:i32[1,1,1024] = broadcast_in_dim[
              broadcast_dimensions=(0, 2)
              shape=(1, 1, 1024)
            ] bjb
            bje:bool[1,1024,1024] = ge bjc bjd
            bjf:bool[1,1,1024,1024] = broadcast_in_dim[
              broadcast_dimensions=(0, 2, 3)
              shape=(1, 1, 1024, 1024)
            ] bje
            bjg:f16[768,2304] = transpose[permutation=(1, 0)] bfd
            bjh:f16[64,256,2304] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] biz bjg
            bji:f16[1,1,2304] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 2304)
            ] bfe
            bjj:f16[64,256,2304] = add bjh bji
            bjk:f16[64,256,768] = slice[
              limit_indices=(64, 256, 768)
              start_indices=(0, 0, 0)
              strides=None
            ] bjj
            bjl:f16[64,256,768] = slice[
              limit_indices=(64, 256, 1536)
              start_indices=(0, 0, 768)
              strides=None
            ] bjj
            bjm:f16[64,256,768] = slice[
              limit_indices=(64, 256, 2304)
              start_indices=(0, 0, 1536)
              strides=None
            ] bjj
            bjn:f16[64,256,12,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 12, 64)
            ] bjk
            bjo:f16[64,256,12,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 12, 64)
            ] bjl
            bjp:f16[64,256,12,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 12, 64)
            ] bjm
            bjq:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
            bjr:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
            bjs:i32[2] = concatenate[dimension=0] bjq bjr
            bjt:bool[1,1,256,256] = gather[
              dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2, 3), collapsed_slice_dims=(), start_index_map=(2, 3))
              fill_value=None
              indices_are_sorted=True
              mode=GatherScatterMode.PROMISE_IN_BOUNDS
              slice_sizes=(1, 1, 256, 256)
              unique_indices=True
            ] bjf bjs
            bju:bool[1,256,256] = squeeze[dimensions=(0,)] bjt
            bjv:bool[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(64, 1, 256, 256)
            ] bju
            bjw:i32[64,1,1,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 3)
              shape=(64, 1, 1, 256)
            ] bff
            bjx:i32[64,1,256] = squeeze[dimensions=(2,)] bjw
            bjy:i32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 3)
              shape=(64, 1, 256, 256)
            ] bjx
            bjz:bool[64,1,256,256] = ne bjy 0
            bka:bool[64,1,256,256] = and bjz bjv
            bkb:f32[64,1,256,256] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bka
            bkc:bool[64,1,256,256] = gt bkb 0.0
            bkd:f32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 1, 256, 256)
            ] 0.0
            bke:f16[64,1,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bkd
            bkf:f32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 1, 256, 256)
            ] -10000.0
            bkg:f16[64,1,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bkf
            bkh:f16[64,1,256,256] = select_n bkc bkg bke
            bki:f32[] = sqrt 64.0
            bkj:f16[] = convert_element_type[new_dtype=float16 weak_type=False] bki
            bkk:f16[64,256,12,64] = div bjn bkj
            bkl:f16[64,12,256,256] = dot_general[
              dimension_numbers=(((3,), (3,)), ((0, 2), (0, 2)))
              precision=None
              preferred_element_type=None
            ] bkk bjo
            bkm:f16[64,12,256,256] = add bkl bkh
            bkn:f16[64,12,256] = reduce_max[axes=(3,)] bkm
            bko:f16[64,12,256,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 12, 256, 1)
            ] bkn
            bkp:f16[64,12,256,1] = stop_gradient bko
            bkq:f16[64,12,256,256] = sub bkm bkp
            bkr:f16[64,12,256,256] = exp bkq
            bks:f32[64,12,256,256] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bkr
            bkt:f32[64,12,256] = reduce_sum[axes=(3,)] bks
            bku:f32[64,12,256,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 12, 256, 1)
            ] bkt
            bkv:f16[64,12,256,1] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bku
            bkw:f16[64,12,256,256] = div bkr bkv
            bkx:f16[64,12,256,1] = integer_pow[y=-2] bkv
            bky:f16[64,12,64,256] = dot_general[
              dimension_numbers=(((1,), (3,)), ((0, 2), (0, 1)))
              precision=None
              preferred_element_type=None
            ] bjp bkw
            bkz:f16[64,256,12,64] = transpose[permutation=(0, 3, 1, 2)] bky
            bla:f16[64,256,768] = reshape[
              dimensions=None
              new_sizes=(64, 256, 768)
            ] bkz
            blb:f16[768,768] = transpose[permutation=(1, 0)] bfg
            blc:f16[64,256,768] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] bla blb
            bld:f16[1,1,768] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 768)
            ] bfh
            ble:f16[64,256,768] = add blc bld
            blf:f16[64,256,768] = add ble bhn
          in (blf, bla, blb, bjp, bkx, bkr, bkv, bkk, bjo, bkj, bkw, biz, bjg, bin,
            bip, bit, bir, bij, bhy, bht, biu, bhi, bhj, bgx, bhf, bhe, bha, bhh,
            bgt, bgu, bgh, bgj, bgn, bgl, bgd, bfs, bfn, bgo) }
        name=13
      ] yn ht hu hv hw hx hy hz ia ib ic gs id ie
      blg:f16[64,256,768] blh:f16[64,256,768] bli:f16[768,768] blj:f16[64,256,12,64]
        blk:f16[64,12,256,1] bll:f16[64,12,256,256] blm:f16[64,12,256,1] bln:f16[64,256,12,64]
        blo:f16[64,256,12,64] blp:f16[] blq:f16[64,12,256,256] blr:f16[64,256,768]
        bls:f16[768,2304] blt:f32[64,256,768] blu:f32[64,256,1] blv:f32[1,1,768]
        blw:f32[64,256,1] blx:f32[64,256] bly:f32[64,256] blz:f32[64,256,768] bma:f32[64,256,768]
        bmb:f16[64,256,3072] bmc:f16[3072,768] bmd:f16[64,256,3072] bme:f16[64,256,3072]
        bmf:f16[64,256,3072] bmg:f16[64,256,3072] bmh:f16[64,256,3072] bmi:f16[64,256,768]
        bmj:f16[768,3072] bmk:f32[64,256,768] bml:f32[64,256,1] bmm:f32[1,1,768]
        bmn:f32[64,256,1] bmo:f32[64,256] bmp:f32[64,256] bmq:f32[64,256,768] bmr:f32[64,256,768] = named_call[
        call_jaxpr={ lambda ; bms:f16[64,256,768] bmt:f16[768] bmu:f16[768] bmv:f16[3072,768]
            bmw:f16[3072] bmx:f16[768,3072] bmy:f16[768] bmz:f16[768] bna:f16[768]
            bnb:f16[2304,768] bnc:f16[2304] bnd:i32[64,256] bne:f16[768,768] bnf:f16[768]. let
            bng:f32[64,256,768] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bms
            bnh:f32[64,256] = reduce_sum[axes=(2,)] bng
            bni:f32[64,256] = div bnh 768.0
            bnj:f32[64,256,768] = integer_pow[y=2] bng
            bnk:f32[64,256,768] = integer_pow[y=1] bng
            bnl:f32[64,256,768] = mul 2.0 bnk
            bnm:f32[64,256] = reduce_sum[axes=(2,)] bnj
            bnn:f32[64,256] = div bnm 768.0
            bno:f32[64,256] = integer_pow[y=2] bni
            bnp:f32[64,256] = integer_pow[y=1] bni
            bnq:f32[64,256] = mul 2.0 bnp
            bnr:f32[64,256] = sub bnn bno
            bns:f32[64,256] = max 0.0 bnr
            bnt:bool[64,256] = eq bnr bns
            bnu:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            bnv:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 0.0
            bnw:f32[64,256] = select_n bnt bnv bnu
            bnx:bool[64,256] = eq 0.0 bns
            bny:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 2.0
            bnz:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            boa:f32[64,256] = select_n bnx bnz bny
            bob:f32[64,256] = div bnw boa
            boc:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] bni
            bod:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] bns
            boe:f32[64,256,768] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bms
            bof:f32[64,256,768] = sub boe boc
            bog:f32[64,256,1] = add bod 9.999999747378752e-06
            boh:f32[64,256,1] = rsqrt bog
            boi:f32[64,256,1] = div boh bog
            boj:f32[64,256,1] = mul -0.5 boi
            bok:f16[1,1,768] = reshape[dimensions=None new_sizes=(1, 1, 768)] bmt
            bol:f32[1,1,768] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bok
            bom:f32[64,256,768] = mul boh bol
            bon:f32[64,256,768] = mul bof bom
            boo:f16[1,1,768] = reshape[dimensions=None new_sizes=(1, 1, 768)] bmu
            bop:f32[1,1,768] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] boo
            boq:f32[64,256,768] = add bon bop
            bor:f16[64,256,768] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] boq
            bos:f16[768,3072] = transpose[permutation=(1, 0)] bmv
            bot:f16[64,256,3072] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] bor bos
            bou:f16[1,1,3072] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 3072)
            ] bmw
            bov:f16[64,256,3072] = add bot bou
            bow:f16[64,256,3072] = integer_pow[y=3] bov
            box:f16[64,256,3072] = integer_pow[y=2] bov
            boy:f16[64,256,3072] = mul 3.0 box
            boz:f16[64,256,3072] = mul 0.044708251953125 bow
            bpa:f16[64,256,3072] = add bov boz
            bpb:f16[64,256,3072] = mul 0.7978515625 bpa
            bpc:f16[64,256,3072] = tanh bpb
            bpd:f16[64,256,3072] = sub 1.0 bpc
            bpe:f16[64,256,3072] = add 1.0 bpc
            bpf:f16[64,256,3072] = mul 0.5 bpe
            bpg:f16[64,256,3072] = mul bov bpf
            bph:f16[3072,768] = transpose[permutation=(1, 0)] bmx
            bpi:f16[64,256,768] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] bpg bph
            bpj:f16[1,1,768] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 768)
            ] bmy
            bpk:f16[64,256,768] = add bpi bpj
            bpl:f16[64,256,768] = add bms bpk
            bpm:f32[64,256,768] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bpl
            bpn:f32[64,256] = reduce_sum[axes=(2,)] bpm
            bpo:f32[64,256] = div bpn 768.0
            bpp:f32[64,256,768] = integer_pow[y=2] bpm
            bpq:f32[64,256,768] = integer_pow[y=1] bpm
            bpr:f32[64,256,768] = mul 2.0 bpq
            bps:f32[64,256] = reduce_sum[axes=(2,)] bpp
            bpt:f32[64,256] = div bps 768.0
            bpu:f32[64,256] = integer_pow[y=2] bpo
            bpv:f32[64,256] = integer_pow[y=1] bpo
            bpw:f32[64,256] = mul 2.0 bpv
            bpx:f32[64,256] = sub bpt bpu
            bpy:f32[64,256] = max 0.0 bpx
            bpz:bool[64,256] = eq bpx bpy
            bqa:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            bqb:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 0.0
            bqc:f32[64,256] = select_n bpz bqb bqa
            bqd:bool[64,256] = eq 0.0 bpy
            bqe:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 2.0
            bqf:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            bqg:f32[64,256] = select_n bqd bqf bqe
            bqh:f32[64,256] = div bqc bqg
            bqi:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] bpo
            bqj:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] bpy
            bqk:f32[64,256,768] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bpl
            bql:f32[64,256,768] = sub bqk bqi
            bqm:f32[64,256,1] = add bqj 9.999999747378752e-06
            bqn:f32[64,256,1] = rsqrt bqm
            bqo:f32[64,256,1] = div bqn bqm
            bqp:f32[64,256,1] = mul -0.5 bqo
            bqq:f16[1,1,768] = reshape[dimensions=None new_sizes=(1, 1, 768)] bmz
            bqr:f32[1,1,768] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bqq
            bqs:f32[64,256,768] = mul bqn bqr
            bqt:f32[64,256,768] = mul bql bqs
            bqu:f16[1,1,768] = reshape[dimensions=None new_sizes=(1, 1, 768)] bna
            bqv:f32[1,1,768] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bqu
            bqw:f32[64,256,768] = add bqt bqv
            bqx:f16[64,256,768] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bqw
            bqy:i32[1024] = iota[dimension=0 dtype=int32 shape=(1024,)] 
            bqz:i32[1,1024] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 1024)
            ] bqy
            bra:i32[1,1024,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(1, 1024, 1)
            ] bqz
            brb:i32[1,1,1024] = broadcast_in_dim[
              broadcast_dimensions=(0, 2)
              shape=(1, 1, 1024)
            ] bqz
            brc:bool[1,1024,1024] = ge bra brb
            brd:bool[1,1,1024,1024] = broadcast_in_dim[
              broadcast_dimensions=(0, 2, 3)
              shape=(1, 1, 1024, 1024)
            ] brc
            bre:f16[768,2304] = transpose[permutation=(1, 0)] bnb
            brf:f16[64,256,2304] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] bqx bre
            brg:f16[1,1,2304] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 2304)
            ] bnc
            brh:f16[64,256,2304] = add brf brg
            bri:f16[64,256,768] = slice[
              limit_indices=(64, 256, 768)
              start_indices=(0, 0, 0)
              strides=None
            ] brh
            brj:f16[64,256,768] = slice[
              limit_indices=(64, 256, 1536)
              start_indices=(0, 0, 768)
              strides=None
            ] brh
            brk:f16[64,256,768] = slice[
              limit_indices=(64, 256, 2304)
              start_indices=(0, 0, 1536)
              strides=None
            ] brh
            brl:f16[64,256,12,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 12, 64)
            ] bri
            brm:f16[64,256,12,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 12, 64)
            ] brj
            brn:f16[64,256,12,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 12, 64)
            ] brk
            bro:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
            brp:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
            brq:i32[2] = concatenate[dimension=0] bro brp
            brr:bool[1,1,256,256] = gather[
              dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2, 3), collapsed_slice_dims=(), start_index_map=(2, 3))
              fill_value=None
              indices_are_sorted=True
              mode=GatherScatterMode.PROMISE_IN_BOUNDS
              slice_sizes=(1, 1, 256, 256)
              unique_indices=True
            ] brd brq
            brs:bool[1,256,256] = squeeze[dimensions=(0,)] brr
            brt:bool[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(64, 1, 256, 256)
            ] brs
            bru:i32[64,1,1,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 3)
              shape=(64, 1, 1, 256)
            ] bnd
            brv:i32[64,1,256] = squeeze[dimensions=(2,)] bru
            brw:i32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 3)
              shape=(64, 1, 256, 256)
            ] brv
            brx:bool[64,1,256,256] = ne brw 0
            bry:bool[64,1,256,256] = and brx brt
            brz:f32[64,1,256,256] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bry
            bsa:bool[64,1,256,256] = gt brz 0.0
            bsb:f32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 1, 256, 256)
            ] 0.0
            bsc:f16[64,1,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bsb
            bsd:f32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 1, 256, 256)
            ] -10000.0
            bse:f16[64,1,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bsd
            bsf:f16[64,1,256,256] = select_n bsa bse bsc
            bsg:f32[] = sqrt 64.0
            bsh:f16[] = convert_element_type[new_dtype=float16 weak_type=False] bsg
            bsi:f16[64,256,12,64] = div brl bsh
            bsj:f16[64,12,256,256] = dot_general[
              dimension_numbers=(((3,), (3,)), ((0, 2), (0, 2)))
              precision=None
              preferred_element_type=None
            ] bsi brm
            bsk:f16[64,12,256,256] = add bsj bsf
            bsl:f16[64,12,256] = reduce_max[axes=(3,)] bsk
            bsm:f16[64,12,256,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 12, 256, 1)
            ] bsl
            bsn:f16[64,12,256,1] = stop_gradient bsm
            bso:f16[64,12,256,256] = sub bsk bsn
            bsp:f16[64,12,256,256] = exp bso
            bsq:f32[64,12,256,256] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bsp
            bsr:f32[64,12,256] = reduce_sum[axes=(3,)] bsq
            bss:f32[64,12,256,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 12, 256, 1)
            ] bsr
            bst:f16[64,12,256,1] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bss
            bsu:f16[64,12,256,256] = div bsp bst
            bsv:f16[64,12,256,1] = integer_pow[y=-2] bst
            bsw:f16[64,12,64,256] = dot_general[
              dimension_numbers=(((1,), (3,)), ((0, 2), (0, 1)))
              precision=None
              preferred_element_type=None
            ] brn bsu
            bsx:f16[64,256,12,64] = transpose[permutation=(0, 3, 1, 2)] bsw
            bsy:f16[64,256,768] = reshape[
              dimensions=None
              new_sizes=(64, 256, 768)
            ] bsx
            bsz:f16[768,768] = transpose[permutation=(1, 0)] bne
            bta:f16[64,256,768] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] bsy bsz
            btb:f16[1,1,768] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 768)
            ] bnf
            btc:f16[64,256,768] = add bta btb
            btd:f16[64,256,768] = add btc bpl
          in (btd, bsy, bsz, brn, bsv, bsp, bst, bsi, brm, bsh, bsu, bqx, bre, bql,
            bqn, bqr, bqp, bqh, bpw, bpr, bqs, bpg, bph, bov, bpd, bpc, boy, bpf,
            bor, bos, bof, boh, bol, boj, bob, bnq, bnl, bom) }
        name=14
      ] bdi if ig ih ii ij ik il im in io gs ip iq
    in (is, it, iu, iv, iw, ix, iy, iz, ja, jb, jc, jd, je, jf, jg, jh, ji, jj, jk,
      jl, jm, jn, jo, jp, jq, jr, js, jt, ju, jv, jw, jx, jy, jz, ka, kb, kc, qq,
      qr, qs, qt, qu, qv, qw, qx, qy, qz, ra, rb, rc, rd, re, rf, rg, rh, ri, rj,
      rk, rl, rm, rn, ro, rp, rq, rr, rs, rt, ru, rv, rw, rx, ry, rz, sa, yo, yp,
      yq, yr, ys, yt, yu, yv, yw, yx, yy, yz, za, zb, zc, zd, ze, zf, zg, zh, bdj,
      bdk, bdl, bdm, bdn, bdo, bdp, bdq, bdr, bds, bdt, bdu, bdv, bdw, bdx, bdy,
      bdz, bea, beb, bec, bed, bee, bef, beg, beh, bei, bej, bek, bel, bem, ben,
      beo, bep, beq, ber, bes, bet, blg, blh, bli, blj, blk, bll, blm, bln, blo,
      blp, blq, blr, bls, blt, blu, blv, blw, blx, bly, blz, bma, bmb, bmc, bmd,
      bme, bmf, bmg, bmh, bmi, bmj, bmk, bml, bmm, bmn, bmo, bmp, bmq, bmr) }
  name=1
] bte btf btg bth bti btj btk btl btm btn bto btp btq btr bts btt btu btv btw btx
  bty btz bua bub buc bud bue buf bug buh bui buj buk bul bum bun buo bup buq bur
  bus but buu buv buw bux buy buz bva bvb bvc bvd bve bvf bvg bvh
eqn: a:f16[64,256,3072] b:f16[3072,768] c:f16[64,256,3072] d:f16[64,256,3072] e:f16[64,256,3072]
  f:f16[64,256,3072] g:f16[64,256,3072] h:f16[64,256,768] i:f16[768,3072] j:f32[64,256,768]
  k:f32[64,256,1] l:f32[1,1,768] m:f32[64,256,1] n:f32[64,256] o:f32[64,256] p:f32[64,256,768]
  q:f32[64,256,768] r:f16[64,256,768] s:f16[768,768] t:f16[64,256,12,64] u:f16[64,12,256,1]
  v:f16[64,12,256,256] w:f16[64,12,256,1] x:f16[64,256,12,64] y:f16[64,256,12,64]
  z:f16[] ba:f16[64,12,256,256] bb:f16[64,256,768] bc:f16[768,2304] bd:f32[64,256,768]
  be:f32[64,256,1] bf:f32[1,1,768] bg:f32[64,256,1] bh:f32[64,256] bi:f32[64,256]
  bj:f32[64,256,768] bk:f32[64,256,768] bl:f16[64,256,3072] bm:f16[3072,768] bn:f16[64,256,3072]
  bo:f16[64,256,3072] bp:f16[64,256,3072] bq:f16[64,256,3072] br:f16[64,256,3072]
  bs:f16[64,256,768] bt:f16[768,3072] bu:f32[64,256,768] bv:f32[64,256,1] bw:f32[1,1,768]
  bx:f32[64,256,1] by:f32[64,256] bz:f32[64,256] ca:f32[64,256,768] cb:f32[64,256,768]
  cc:f16[64,256,768] cd:f16[768,768] ce:f16[64,256,12,64] cf:f16[64,12,256,1] cg:f16[64,12,256,256]
  ch:f16[64,12,256,1] ci:f16[64,256,12,64] cj:f16[64,256,12,64] ck:f16[] cl:f16[64,12,256,256]
  cm:f16[64,256,768] cn:f16[768,2304] co:f32[64,256,768] cp:f32[64,256,1] cq:f32[1,1,768]
  cr:f32[64,256,1] cs:f32[64,256] ct:f32[64,256] cu:f32[64,256,768] cv:f32[64,256,768]
  cw:f16[64,256,768] cx:f16[768,768] cy:f16[64,256,12,64] cz:f16[64,12,256,1] da:f16[64,12,256,256]
  db:f16[64,12,256,1] dc:f16[64,256,12,64] dd:f16[64,256,12,64] de:f16[] df:f16[64,12,256,256]
  dg:f16[64,256,768] dh:f16[768,2304] di:f32[64,256,768] dj:f32[64,256,1] dk:f32[1,1,768]
  dl:f32[64,256,1] dm:f32[64,256] dn:f32[64,256] do:f32[64,256,768] dp:f32[64,256,768]
  dq:f16[64,256,768] dr:f16[768,768] ds:f16[64,256,12,64] dt:f16[64,12,256,1] du:f16[64,12,256,256]
  dv:f16[64,12,256,1] dw:f16[64,256,12,64] dx:f16[64,256,12,64] dy:f16[] dz:f16[64,12,256,256]
  ea:f16[64,256,768] eb:f16[768,2304] ec:f32[64,256,768] ed:f32[64,256,1] ee:f32[1,1,768]
  ef:f32[64,256,1] eg:f32[64,256] eh:f32[64,256] ei:f32[64,256,768] ej:f32[64,256,768]
  ek:f16[64,256,3072] el:f16[3072,768] em:f16[64,256,3072] en:f16[64,256,3072] eo:f16[64,256,3072]
  ep:f16[64,256,3072] eq:f16[64,256,3072] er:f16[64,256,768] es:f16[768,3072] et:f32[64,256,768]
  eu:f32[64,256,1] ev:f32[1,1,768] ew:f32[64,256,1] ex:f32[64,256] ey:f32[64,256]
  ez:f32[64,256,768] fa:f32[64,256,768] fb:f16[64,256,768] fc:f16[64,256,768] fd:f16[768,768]
  fe:f16[64,256,12,64] ff:f16[64,12,256,1] fg:f16[64,12,256,256] fh:f16[64,12,256,1]
  fi:f16[64,256,12,64] fj:f16[64,256,12,64] fk:f16[] fl:f16[64,12,256,256] fm:f16[64,256,768]
  fn:f16[768,2304] fo:f32[64,256,768] fp:f32[64,256,1] fq:f32[1,1,768] fr:f32[64,256,1]
  fs:f32[64,256] ft:f32[64,256] fu:f32[64,256,768] fv:f32[64,256,768] fw:f16[64,256,3072]
  fx:f16[3072,768] fy:f16[64,256,3072] fz:f16[64,256,3072] ga:f16[64,256,3072] gb:f16[64,256,3072]
  gc:f16[64,256,3072] gd:f16[64,256,768] ge:f16[768,3072] gf:f32[64,256,768] gg:f32[64,256,1]
  gh:f32[1,1,768] gi:f32[64,256,1] gj:f32[64,256] gk:f32[64,256] gl:f32[64,256,768]
  gm:f32[64,256,768] = pipeline_marker[mark_type=end name=1] gn go gp gq gr gs gt
  gu gv gw gx gy gz ha hb hc hd he hf hg hh hi hj hk hl hm hn ho hp hq hr hs ht hu
  hv hw hx hy hz ia ib ic id ie if ig ih ii ij ik il im in io ip iq ir is it iu iv
  iw ix iy iz ja jb jc jd je jf jg jh ji jj jk jl jm jn jo jp jq jr js jt ju jv jw
  jx jy jz ka kb kc kd ke kf kg kh ki kj kk kl km kn ko kp kq kr ks kt ku kv kw kx
  ky kz la lb lc ld le lf lg lh li lj lk ll lm ln lo lp lq lr ls lt lu lv lw lx ly
  lz ma mb mc md me mf mg mh mi mj mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz
input_var_mem_size
[bla, cc, cb, by, bx, xu, ca, bz, ce, cd, cg, cf, ci, ch, co, cn, ck, cj, cm, cl, cq, cp, cs, cr, cu, ct, da, cz, cw, cv, cy, cx, dc, db, de, dd, dg, df, dm, dl, di, dh, dk, dj, do, dn, dq, dp, ds, dr, dy, dx, du, dt, dw, dv]
[(64, 256, 768), (768,), (768,), (2304, 768), (2304,), (64, 256), (768, 768), (768,), (768,), (768,), (3072, 768), (3072,), (768, 3072), (768,), (768,), (768,), (2304, 768), (2304,), (768, 768), (768,), (768,), (768,), (3072, 768), (3072,), (768, 3072), (768,), (768,), (768,), (2304, 768), (2304,), (768, 768), (768,), (768,), (768,), (3072, 768), (3072,), (768, 3072), (768,), (768,), (768,), (2304, 768), (2304,), (768, 768), (768,), (768,), (768,), (3072, 768), (3072,), (768, 3072), (768,), (768,), (768,), (2304, 768), (2304,), (768, 768), (768,)]
param_size: 0.04033994674682617 [GiB] 
jaxpr.eqns, len: 3
eqn: a:f16[64,256,768] b:f16[768] c:f16[768] d:f16[3072,768] e:f16[3072] f:f16[768,3072]
  g:f16[768] h:f16[768] i:f16[768] j:f16[2304,768] k:f16[2304] l:i32[64,256] m:f16[768,768]
  n:f16[768] o:f16[768] p:f16[768] q:f16[3072,768] r:f16[3072] s:f16[768,3072] t:f16[768]
  u:f16[768] v:f16[768] w:f16[2304,768] x:f16[2304] y:f16[768,768] z:f16[768] ba:f16[768]
  bb:f16[768] bc:f16[3072,768] bd:f16[3072] be:f16[768,3072] bf:f16[768] bg:f16[768]
  bh:f16[768] bi:f16[2304,768] bj:f16[2304] bk:f16[768,768] bl:f16[768] = pipeline_marker[
  mark_type=start
  name=2
] bm bn bo bp bq br bs bt bu bv bw bx by bz ca cb cc cd ce cf cg ch ci cj ck cl cm
  cn co cp cq cr cs ct cu cv cw cx
eqn: a:f16[64,256,768] b:f16[768,768] c:f16[64,256,12,64] d:f16[64,12,256,1] e:f16[64,12,256,256]
  f:f16[64,12,256,1] g:f16[64,256,12,64] h:f16[64,256,12,64] i:f16[] j:f16[64,12,256,256]
  k:f16[64,256,768] l:f16[768,2304] m:f32[64,256,768] n:f32[64,256,1] o:f32[1,1,768]
  p:f32[64,256,1] q:f32[64,256] r:f32[64,256] s:f32[64,256,768] t:f32[64,256,768]
  u:f16[64,256,3072] v:f16[3072,768] w:f16[64,256,3072] x:f16[64,256,3072] y:f16[64,256,3072]
  z:f16[64,256,3072] ba:f16[64,256,3072] bb:f16[64,256,768] bc:f16[768,3072] bd:f32[64,256,768]
  be:f32[64,256,1] bf:f32[1,1,768] bg:f32[64,256,1] bh:f32[64,256] bi:f32[64,256]
  bj:f32[64,256,768] bk:f32[64,256,768] bl:f16[64,256,768] bm:f16[768,768] bn:f16[64,256,12,64]
  bo:f16[64,12,256,1] bp:f16[64,12,256,256] bq:f16[64,12,256,1] br:f16[64,256,12,64]
  bs:f16[64,256,12,64] bt:f16[] bu:f16[64,12,256,256] bv:f16[64,256,768] bw:f16[768,2304]
  bx:f32[64,256,768] by:f32[64,256,1] bz:f32[1,1,768] ca:f32[64,256,1] cb:f32[64,256]
  cc:f32[64,256] cd:f32[64,256,768] ce:f32[64,256,768] cf:f16[64,256,3072] cg:f16[3072,768]
  ch:f16[64,256,3072] ci:f16[64,256,3072] cj:f16[64,256,3072] ck:f16[64,256,3072]
  cl:f16[64,256,3072] cm:f16[64,256,768] cn:f16[768,3072] co:f32[64,256,768] cp:f32[64,256,1]
  cq:f32[1,1,768] cr:f32[64,256,1] cs:f32[64,256] ct:f32[64,256] cu:f32[64,256,768]
  cv:f32[64,256,768] cw:f16[64,256,768] cx:f16[64,256,768] cy:f16[768,768] cz:f16[64,256,12,64]
  da:f16[64,12,256,1] db:f16[64,12,256,256] dc:f16[64,12,256,1] dd:f16[64,256,12,64]
  de:f16[64,256,12,64] df:f16[] dg:f16[64,12,256,256] dh:f16[64,256,768] di:f16[768,2304]
  dj:f32[64,256,768] dk:f32[64,256,1] dl:f32[1,1,768] dm:f32[64,256,1] dn:f32[64,256]
  do:f32[64,256] dp:f32[64,256,768] dq:f32[64,256,768] dr:f16[64,256,3072] ds:f16[3072,768]
  dt:f16[64,256,3072] du:f16[64,256,3072] dv:f16[64,256,3072] dw:f16[64,256,3072]
  dx:f16[64,256,3072] dy:f16[64,256,768] dz:f16[768,3072] ea:f32[64,256,768] eb:f32[64,256,1]
  ec:f32[1,1,768] ed:f32[64,256,1] ee:f32[64,256] ef:f32[64,256] eg:f32[64,256,768]
  eh:f32[64,256,768] = named_call[
  call_jaxpr={ lambda ; ei:f16[64,256,768] ej:f16[768] ek:f16[768] el:f16[3072,768]
      em:f16[3072] en:f16[768,3072] eo:f16[768] ep:f16[768] eq:f16[768] er:f16[2304,768]
      es:f16[2304] et:i32[64,256] eu:f16[768,768] ev:f16[768] ew:f16[768] ex:f16[768]
      ey:f16[3072,768] ez:f16[3072] fa:f16[768,3072] fb:f16[768] fc:f16[768] fd:f16[768]
      fe:f16[2304,768] ff:f16[2304] fg:f16[768,768] fh:f16[768] fi:f16[768] fj:f16[768]
      fk:f16[3072,768] fl:f16[3072] fm:f16[768,3072] fn:f16[768] fo:f16[768] fp:f16[768]
      fq:f16[2304,768] fr:f16[2304] fs:f16[768,768] ft:f16[768]. let
      fu:f16[64,256,768] fv:f16[64,256,768] fw:f16[768,768] fx:f16[64,256,12,64]
        fy:f16[64,12,256,1] fz:f16[64,12,256,256] ga:f16[64,12,256,1] gb:f16[64,256,12,64]
        gc:f16[64,256,12,64] gd:f16[] ge:f16[64,12,256,256] gf:f16[64,256,768] gg:f16[768,2304]
        gh:f32[64,256,768] gi:f32[64,256,1] gj:f32[1,1,768] gk:f32[64,256,1] gl:f32[64,256]
        gm:f32[64,256] gn:f32[64,256,768] go:f32[64,256,768] gp:f16[64,256,3072]
        gq:f16[3072,768] gr:f16[64,256,3072] gs:f16[64,256,3072] gt:f16[64,256,3072]
        gu:f16[64,256,3072] gv:f16[64,256,3072] gw:f16[64,256,768] gx:f16[768,3072]
        gy:f32[64,256,768] gz:f32[64,256,1] ha:f32[1,1,768] hb:f32[64,256,1] hc:f32[64,256]
        hd:f32[64,256] he:f32[64,256,768] hf:f32[64,256,768] = named_call[
        call_jaxpr={ lambda ; hg:f16[64,256,768] hh:f16[768] hi:f16[768] hj:f16[3072,768]
            hk:f16[3072] hl:f16[768,3072] hm:f16[768] hn:f16[768] ho:f16[768] hp:f16[2304,768]
            hq:f16[2304] hr:i32[64,256] hs:f16[768,768] ht:f16[768]. let
            hu:f32[64,256,768] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] hg
            hv:f32[64,256] = reduce_sum[axes=(2,)] hu
            hw:f32[64,256] = div hv 768.0
            hx:f32[64,256,768] = integer_pow[y=2] hu
            hy:f32[64,256,768] = integer_pow[y=1] hu
            hz:f32[64,256,768] = mul 2.0 hy
            ia:f32[64,256] = reduce_sum[axes=(2,)] hx
            ib:f32[64,256] = div ia 768.0
            ic:f32[64,256] = integer_pow[y=2] hw
            id:f32[64,256] = integer_pow[y=1] hw
            ie:f32[64,256] = mul 2.0 id
            if:f32[64,256] = sub ib ic
            ig:f32[64,256] = max 0.0 if
            ih:bool[64,256] = eq if ig
            ii:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            ij:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 0.0
            ik:f32[64,256] = select_n ih ij ii
            il:bool[64,256] = eq 0.0 ig
            im:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 2.0
            in:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            io:f32[64,256] = select_n il in im
            ip:f32[64,256] = div ik io
            iq:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] hw
            ir:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] ig
            is:f32[64,256,768] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] hg
            it:f32[64,256,768] = sub is iq
            iu:f32[64,256,1] = add ir 9.999999747378752e-06
            iv:f32[64,256,1] = rsqrt iu
            iw:f32[64,256,1] = div iv iu
            ix:f32[64,256,1] = mul -0.5 iw
            iy:f16[1,1,768] = reshape[dimensions=None new_sizes=(1, 1, 768)] hh
            iz:f32[1,1,768] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] iy
            ja:f32[64,256,768] = mul iv iz
            jb:f32[64,256,768] = mul it ja
            jc:f16[1,1,768] = reshape[dimensions=None new_sizes=(1, 1, 768)] hi
            jd:f32[1,1,768] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] jc
            je:f32[64,256,768] = add jb jd
            jf:f16[64,256,768] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] je
            jg:f16[768,3072] = transpose[permutation=(1, 0)] hj
            jh:f16[64,256,3072] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] jf jg
            ji:f16[1,1,3072] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 3072)
            ] hk
            jj:f16[64,256,3072] = add jh ji
            jk:f16[64,256,3072] = integer_pow[y=3] jj
            jl:f16[64,256,3072] = integer_pow[y=2] jj
            jm:f16[64,256,3072] = mul 3.0 jl
            jn:f16[64,256,3072] = mul 0.044708251953125 jk
            jo:f16[64,256,3072] = add jj jn
            jp:f16[64,256,3072] = mul 0.7978515625 jo
            jq:f16[64,256,3072] = tanh jp
            jr:f16[64,256,3072] = sub 1.0 jq
            js:f16[64,256,3072] = add 1.0 jq
            jt:f16[64,256,3072] = mul 0.5 js
            ju:f16[64,256,3072] = mul jj jt
            jv:f16[3072,768] = transpose[permutation=(1, 0)] hl
            jw:f16[64,256,768] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] ju jv
            jx:f16[1,1,768] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 768)
            ] hm
            jy:f16[64,256,768] = add jw jx
            jz:f16[64,256,768] = add hg jy
            ka:f32[64,256,768] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] jz
            kb:f32[64,256] = reduce_sum[axes=(2,)] ka
            kc:f32[64,256] = div kb 768.0
            kd:f32[64,256,768] = integer_pow[y=2] ka
            ke:f32[64,256,768] = integer_pow[y=1] ka
            kf:f32[64,256,768] = mul 2.0 ke
            kg:f32[64,256] = reduce_sum[axes=(2,)] kd
            kh:f32[64,256] = div kg 768.0
            ki:f32[64,256] = integer_pow[y=2] kc
            kj:f32[64,256] = integer_pow[y=1] kc
            kk:f32[64,256] = mul 2.0 kj
            kl:f32[64,256] = sub kh ki
            km:f32[64,256] = max 0.0 kl
            kn:bool[64,256] = eq kl km
            ko:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            kp:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 0.0
            kq:f32[64,256] = select_n kn kp ko
            kr:bool[64,256] = eq 0.0 km
            ks:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 2.0
            kt:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            ku:f32[64,256] = select_n kr kt ks
            kv:f32[64,256] = div kq ku
            kw:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] kc
            kx:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] km
            ky:f32[64,256,768] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] jz
            kz:f32[64,256,768] = sub ky kw
            la:f32[64,256,1] = add kx 9.999999747378752e-06
            lb:f32[64,256,1] = rsqrt la
            lc:f32[64,256,1] = div lb la
            ld:f32[64,256,1] = mul -0.5 lc
            le:f16[1,1,768] = reshape[dimensions=None new_sizes=(1, 1, 768)] hn
            lf:f32[1,1,768] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] le
            lg:f32[64,256,768] = mul lb lf
            lh:f32[64,256,768] = mul kz lg
            li:f16[1,1,768] = reshape[dimensions=None new_sizes=(1, 1, 768)] ho
            lj:f32[1,1,768] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] li
            lk:f32[64,256,768] = add lh lj
            ll:f16[64,256,768] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] lk
            lm:i32[1024] = iota[dimension=0 dtype=int32 shape=(1024,)] 
            ln:i32[1,1024] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 1024)
            ] lm
            lo:i32[1,1024,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(1, 1024, 1)
            ] ln
            lp:i32[1,1,1024] = broadcast_in_dim[
              broadcast_dimensions=(0, 2)
              shape=(1, 1, 1024)
            ] ln
            lq:bool[1,1024,1024] = ge lo lp
            lr:bool[1,1,1024,1024] = broadcast_in_dim[
              broadcast_dimensions=(0, 2, 3)
              shape=(1, 1, 1024, 1024)
            ] lq
            ls:f16[768,2304] = transpose[permutation=(1, 0)] hp
            lt:f16[64,256,2304] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] ll ls
            lu:f16[1,1,2304] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 2304)
            ] hq
            lv:f16[64,256,2304] = add lt lu
            lw:f16[64,256,768] = slice[
              limit_indices=(64, 256, 768)
              start_indices=(0, 0, 0)
              strides=None
            ] lv
            lx:f16[64,256,768] = slice[
              limit_indices=(64, 256, 1536)
              start_indices=(0, 0, 768)
              strides=None
            ] lv
            ly:f16[64,256,768] = slice[
              limit_indices=(64, 256, 2304)
              start_indices=(0, 0, 1536)
              strides=None
            ] lv
            lz:f16[64,256,12,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 12, 64)
            ] lw
            ma:f16[64,256,12,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 12, 64)
            ] lx
            mb:f16[64,256,12,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 12, 64)
            ] ly
            mc:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
            md:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
            me:i32[2] = concatenate[dimension=0] mc md
            mf:bool[1,1,256,256] = gather[
              dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2, 3), collapsed_slice_dims=(), start_index_map=(2, 3))
              fill_value=None
              indices_are_sorted=True
              mode=GatherScatterMode.PROMISE_IN_BOUNDS
              slice_sizes=(1, 1, 256, 256)
              unique_indices=True
            ] lr me
            mg:bool[1,256,256] = squeeze[dimensions=(0,)] mf
            mh:bool[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(64, 1, 256, 256)
            ] mg
            mi:i32[64,1,1,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 3)
              shape=(64, 1, 1, 256)
            ] hr
            mj:i32[64,1,256] = squeeze[dimensions=(2,)] mi
            mk:i32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 3)
              shape=(64, 1, 256, 256)
            ] mj
            ml:bool[64,1,256,256] = ne mk 0
            mm:bool[64,1,256,256] = and ml mh
            mn:f32[64,1,256,256] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] mm
            mo:bool[64,1,256,256] = gt mn 0.0
            mp:f32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 1, 256, 256)
            ] 0.0
            mq:f16[64,1,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] mp
            mr:f32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 1, 256, 256)
            ] -10000.0
            ms:f16[64,1,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] mr
            mt:f16[64,1,256,256] = select_n mo ms mq
            mu:f32[] = sqrt 64.0
            mv:f16[] = convert_element_type[new_dtype=float16 weak_type=False] mu
            mw:f16[64,256,12,64] = div lz mv
            mx:f16[64,12,256,256] = dot_general[
              dimension_numbers=(((3,), (3,)), ((0, 2), (0, 2)))
              precision=None
              preferred_element_type=None
            ] mw ma
            my:f16[64,12,256,256] = add mx mt
            mz:f16[64,12,256] = reduce_max[axes=(3,)] my
            na:f16[64,12,256,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 12, 256, 1)
            ] mz
            nb:f16[64,12,256,1] = stop_gradient na
            nc:f16[64,12,256,256] = sub my nb
            nd:f16[64,12,256,256] = exp nc
            ne:f32[64,12,256,256] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] nd
            nf:f32[64,12,256] = reduce_sum[axes=(3,)] ne
            ng:f32[64,12,256,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 12, 256, 1)
            ] nf
            nh:f16[64,12,256,1] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] ng
            ni:f16[64,12,256,256] = div nd nh
            nj:f16[64,12,256,1] = integer_pow[y=-2] nh
            nk:f16[64,12,64,256] = dot_general[
              dimension_numbers=(((1,), (3,)), ((0, 2), (0, 1)))
              precision=None
              preferred_element_type=None
            ] mb ni
            nl:f16[64,256,12,64] = transpose[permutation=(0, 3, 1, 2)] nk
            nm:f16[64,256,768] = reshape[
              dimensions=None
              new_sizes=(64, 256, 768)
            ] nl
            nn:f16[768,768] = transpose[permutation=(1, 0)] hs
            no:f16[64,256,768] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] nm nn
            np:f16[1,1,768] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 768)
            ] ht
            nq:f16[64,256,768] = add no np
            nr:f16[64,256,768] = add nq jz
          in (nr, nm, nn, mb, nj, nd, nh, mw, ma, mv, ni, ll, ls, kz, lb, lf, ld,
            kv, kk, kf, lg, ju, jv, jj, jr, jq, jm, jt, jf, jg, it, iv, iz, ix, ip,
            ie, hz, ja) }
        name=20
      ] ei ej ek el em en eo ep eq er es et eu ev
      ns:f16[64,256,768] nt:f16[64,256,768] nu:f16[768,768] nv:f16[64,256,12,64]
        nw:f16[64,12,256,1] nx:f16[64,12,256,256] ny:f16[64,12,256,1] nz:f16[64,256,12,64]
        oa:f16[64,256,12,64] ob:f16[] oc:f16[64,12,256,256] od:f16[64,256,768] oe:f16[768,2304]
        of:f32[64,256,768] og:f32[64,256,1] oh:f32[1,1,768] oi:f32[64,256,1] oj:f32[64,256]
        ok:f32[64,256] ol:f32[64,256,768] om:f32[64,256,768] on:f16[64,256,3072]
        oo:f16[3072,768] op:f16[64,256,3072] oq:f16[64,256,3072] or:f16[64,256,3072]
        os:f16[64,256,3072] ot:f16[64,256,3072] ou:f16[64,256,768] ov:f16[768,3072]
        ow:f32[64,256,768] ox:f32[64,256,1] oy:f32[1,1,768] oz:f32[64,256,1] pa:f32[64,256]
        pb:f32[64,256] pc:f32[64,256,768] pd:f32[64,256,768] = named_call[
        call_jaxpr={ lambda ; pe:f16[64,256,768] pf:f16[768] pg:f16[768] ph:f16[3072,768]
            pi:f16[3072] pj:f16[768,3072] pk:f16[768] pl:f16[768] pm:f16[768] pn:f16[2304,768]
            po:f16[2304] pp:i32[64,256] pq:f16[768,768] pr:f16[768]. let
            ps:f32[64,256,768] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] pe
            pt:f32[64,256] = reduce_sum[axes=(2,)] ps
            pu:f32[64,256] = div pt 768.0
            pv:f32[64,256,768] = integer_pow[y=2] ps
            pw:f32[64,256,768] = integer_pow[y=1] ps
            px:f32[64,256,768] = mul 2.0 pw
            py:f32[64,256] = reduce_sum[axes=(2,)] pv
            pz:f32[64,256] = div py 768.0
            qa:f32[64,256] = integer_pow[y=2] pu
            qb:f32[64,256] = integer_pow[y=1] pu
            qc:f32[64,256] = mul 2.0 qb
            qd:f32[64,256] = sub pz qa
            qe:f32[64,256] = max 0.0 qd
            qf:bool[64,256] = eq qd qe
            qg:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            qh:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 0.0
            qi:f32[64,256] = select_n qf qh qg
            qj:bool[64,256] = eq 0.0 qe
            qk:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 2.0
            ql:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            qm:f32[64,256] = select_n qj ql qk
            qn:f32[64,256] = div qi qm
            qo:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] pu
            qp:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] qe
            qq:f32[64,256,768] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] pe
            qr:f32[64,256,768] = sub qq qo
            qs:f32[64,256,1] = add qp 9.999999747378752e-06
            qt:f32[64,256,1] = rsqrt qs
            qu:f32[64,256,1] = div qt qs
            qv:f32[64,256,1] = mul -0.5 qu
            qw:f16[1,1,768] = reshape[dimensions=None new_sizes=(1, 1, 768)] pf
            qx:f32[1,1,768] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] qw
            qy:f32[64,256,768] = mul qt qx
            qz:f32[64,256,768] = mul qr qy
            ra:f16[1,1,768] = reshape[dimensions=None new_sizes=(1, 1, 768)] pg
            rb:f32[1,1,768] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] ra
            rc:f32[64,256,768] = add qz rb
            rd:f16[64,256,768] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] rc
            re:f16[768,3072] = transpose[permutation=(1, 0)] ph
            rf:f16[64,256,3072] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] rd re
            rg:f16[1,1,3072] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 3072)
            ] pi
            rh:f16[64,256,3072] = add rf rg
            ri:f16[64,256,3072] = integer_pow[y=3] rh
            rj:f16[64,256,3072] = integer_pow[y=2] rh
            rk:f16[64,256,3072] = mul 3.0 rj
            rl:f16[64,256,3072] = mul 0.044708251953125 ri
            rm:f16[64,256,3072] = add rh rl
            rn:f16[64,256,3072] = mul 0.7978515625 rm
            ro:f16[64,256,3072] = tanh rn
            rp:f16[64,256,3072] = sub 1.0 ro
            rq:f16[64,256,3072] = add 1.0 ro
            rr:f16[64,256,3072] = mul 0.5 rq
            rs:f16[64,256,3072] = mul rh rr
            rt:f16[3072,768] = transpose[permutation=(1, 0)] pj
            ru:f16[64,256,768] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] rs rt
            rv:f16[1,1,768] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 768)
            ] pk
            rw:f16[64,256,768] = add ru rv
            rx:f16[64,256,768] = add pe rw
            ry:f32[64,256,768] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] rx
            rz:f32[64,256] = reduce_sum[axes=(2,)] ry
            sa:f32[64,256] = div rz 768.0
            sb:f32[64,256,768] = integer_pow[y=2] ry
            sc:f32[64,256,768] = integer_pow[y=1] ry
            sd:f32[64,256,768] = mul 2.0 sc
            se:f32[64,256] = reduce_sum[axes=(2,)] sb
            sf:f32[64,256] = div se 768.0
            sg:f32[64,256] = integer_pow[y=2] sa
            sh:f32[64,256] = integer_pow[y=1] sa
            si:f32[64,256] = mul 2.0 sh
            sj:f32[64,256] = sub sf sg
            sk:f32[64,256] = max 0.0 sj
            sl:bool[64,256] = eq sj sk
            sm:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            sn:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 0.0
            so:f32[64,256] = select_n sl sn sm
            sp:bool[64,256] = eq 0.0 sk
            sq:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 2.0
            sr:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            ss:f32[64,256] = select_n sp sr sq
            st:f32[64,256] = div so ss
            su:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] sa
            sv:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] sk
            sw:f32[64,256,768] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] rx
            sx:f32[64,256,768] = sub sw su
            sy:f32[64,256,1] = add sv 9.999999747378752e-06
            sz:f32[64,256,1] = rsqrt sy
            ta:f32[64,256,1] = div sz sy
            tb:f32[64,256,1] = mul -0.5 ta
            tc:f16[1,1,768] = reshape[dimensions=None new_sizes=(1, 1, 768)] pl
            td:f32[1,1,768] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] tc
            te:f32[64,256,768] = mul sz td
            tf:f32[64,256,768] = mul sx te
            tg:f16[1,1,768] = reshape[dimensions=None new_sizes=(1, 1, 768)] pm
            th:f32[1,1,768] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] tg
            ti:f32[64,256,768] = add tf th
            tj:f16[64,256,768] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] ti
            tk:i32[1024] = iota[dimension=0 dtype=int32 shape=(1024,)] 
            tl:i32[1,1024] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 1024)
            ] tk
            tm:i32[1,1024,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(1, 1024, 1)
            ] tl
            tn:i32[1,1,1024] = broadcast_in_dim[
              broadcast_dimensions=(0, 2)
              shape=(1, 1, 1024)
            ] tl
            to:bool[1,1024,1024] = ge tm tn
            tp:bool[1,1,1024,1024] = broadcast_in_dim[
              broadcast_dimensions=(0, 2, 3)
              shape=(1, 1, 1024, 1024)
            ] to
            tq:f16[768,2304] = transpose[permutation=(1, 0)] pn
            tr:f16[64,256,2304] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] tj tq
            ts:f16[1,1,2304] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 2304)
            ] po
            tt:f16[64,256,2304] = add tr ts
            tu:f16[64,256,768] = slice[
              limit_indices=(64, 256, 768)
              start_indices=(0, 0, 0)
              strides=None
            ] tt
            tv:f16[64,256,768] = slice[
              limit_indices=(64, 256, 1536)
              start_indices=(0, 0, 768)
              strides=None
            ] tt
            tw:f16[64,256,768] = slice[
              limit_indices=(64, 256, 2304)
              start_indices=(0, 0, 1536)
              strides=None
            ] tt
            tx:f16[64,256,12,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 12, 64)
            ] tu
            ty:f16[64,256,12,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 12, 64)
            ] tv
            tz:f16[64,256,12,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 12, 64)
            ] tw
            ua:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
            ub:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
            uc:i32[2] = concatenate[dimension=0] ua ub
            ud:bool[1,1,256,256] = gather[
              dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2, 3), collapsed_slice_dims=(), start_index_map=(2, 3))
              fill_value=None
              indices_are_sorted=True
              mode=GatherScatterMode.PROMISE_IN_BOUNDS
              slice_sizes=(1, 1, 256, 256)
              unique_indices=True
            ] tp uc
            ue:bool[1,256,256] = squeeze[dimensions=(0,)] ud
            uf:bool[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(64, 1, 256, 256)
            ] ue
            ug:i32[64,1,1,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 3)
              shape=(64, 1, 1, 256)
            ] pp
            uh:i32[64,1,256] = squeeze[dimensions=(2,)] ug
            ui:i32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 3)
              shape=(64, 1, 256, 256)
            ] uh
            uj:bool[64,1,256,256] = ne ui 0
            uk:bool[64,1,256,256] = and uj uf
            ul:f32[64,1,256,256] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] uk
            um:bool[64,1,256,256] = gt ul 0.0
            un:f32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 1, 256, 256)
            ] 0.0
            uo:f16[64,1,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] un
            up:f32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 1, 256, 256)
            ] -10000.0
            uq:f16[64,1,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] up
            ur:f16[64,1,256,256] = select_n um uq uo
            us:f32[] = sqrt 64.0
            ut:f16[] = convert_element_type[new_dtype=float16 weak_type=False] us
            uu:f16[64,256,12,64] = div tx ut
            uv:f16[64,12,256,256] = dot_general[
              dimension_numbers=(((3,), (3,)), ((0, 2), (0, 2)))
              precision=None
              preferred_element_type=None
            ] uu ty
            uw:f16[64,12,256,256] = add uv ur
            ux:f16[64,12,256] = reduce_max[axes=(3,)] uw
            uy:f16[64,12,256,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 12, 256, 1)
            ] ux
            uz:f16[64,12,256,1] = stop_gradient uy
            va:f16[64,12,256,256] = sub uw uz
            vb:f16[64,12,256,256] = exp va
            vc:f32[64,12,256,256] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] vb
            vd:f32[64,12,256] = reduce_sum[axes=(3,)] vc
            ve:f32[64,12,256,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 12, 256, 1)
            ] vd
            vf:f16[64,12,256,1] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] ve
            vg:f16[64,12,256,256] = div vb vf
            vh:f16[64,12,256,1] = integer_pow[y=-2] vf
            vi:f16[64,12,64,256] = dot_general[
              dimension_numbers=(((1,), (3,)), ((0, 2), (0, 1)))
              precision=None
              preferred_element_type=None
            ] tz vg
            vj:f16[64,256,12,64] = transpose[permutation=(0, 3, 1, 2)] vi
            vk:f16[64,256,768] = reshape[
              dimensions=None
              new_sizes=(64, 256, 768)
            ] vj
            vl:f16[768,768] = transpose[permutation=(1, 0)] pq
            vm:f16[64,256,768] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] vk vl
            vn:f16[1,1,768] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 768)
            ] pr
            vo:f16[64,256,768] = add vm vn
            vp:f16[64,256,768] = add vo rx
          in (vp, vk, vl, tz, vh, vb, vf, uu, ty, ut, vg, tj, tq, sx, sz, td, tb,
            st, si, sd, te, rs, rt, rh, rp, ro, rk, rr, rd, re, qr, qt, qx, qv, qn,
            qc, px, qy) }
        name=21
      ] fu ew ex ey ez fa fb fc fd fe ff et fg fh
      vq:f16[64,256,768] vr:f16[64,256,768] vs:f16[768,768] vt:f16[64,256,12,64]
        vu:f16[64,12,256,1] vv:f16[64,12,256,256] vw:f16[64,12,256,1] vx:f16[64,256,12,64]
        vy:f16[64,256,12,64] vz:f16[] wa:f16[64,12,256,256] wb:f16[64,256,768] wc:f16[768,2304]
        wd:f32[64,256,768] we:f32[64,256,1] wf:f32[1,1,768] wg:f32[64,256,1] wh:f32[64,256]
        wi:f32[64,256] wj:f32[64,256,768] wk:f32[64,256,768] wl:f16[64,256,3072]
        wm:f16[3072,768] wn:f16[64,256,3072] wo:f16[64,256,3072] wp:f16[64,256,3072]
        wq:f16[64,256,3072] wr:f16[64,256,3072] ws:f16[64,256,768] wt:f16[768,3072]
        wu:f32[64,256,768] wv:f32[64,256,1] ww:f32[1,1,768] wx:f32[64,256,1] wy:f32[64,256]
        wz:f32[64,256] xa:f32[64,256,768] xb:f32[64,256,768] = named_call[
        call_jaxpr={ lambda ; xc:f16[64,256,768] xd:f16[768] xe:f16[768] xf:f16[3072,768]
            xg:f16[3072] xh:f16[768,3072] xi:f16[768] xj:f16[768] xk:f16[768] xl:f16[2304,768]
            xm:f16[2304] xn:i32[64,256] xo:f16[768,768] xp:f16[768]. let
            xq:f32[64,256,768] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] xc
            xr:f32[64,256] = reduce_sum[axes=(2,)] xq
            xs:f32[64,256] = div xr 768.0
            xt:f32[64,256,768] = integer_pow[y=2] xq
            xu:f32[64,256,768] = integer_pow[y=1] xq
            xv:f32[64,256,768] = mul 2.0 xu
            xw:f32[64,256] = reduce_sum[axes=(2,)] xt
            xx:f32[64,256] = div xw 768.0
            xy:f32[64,256] = integer_pow[y=2] xs
            xz:f32[64,256] = integer_pow[y=1] xs
            ya:f32[64,256] = mul 2.0 xz
            yb:f32[64,256] = sub xx xy
            yc:f32[64,256] = max 0.0 yb
            yd:bool[64,256] = eq yb yc
            ye:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            yf:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 0.0
            yg:f32[64,256] = select_n yd yf ye
            yh:bool[64,256] = eq 0.0 yc
            yi:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 2.0
            yj:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            yk:f32[64,256] = select_n yh yj yi
            yl:f32[64,256] = div yg yk
            ym:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] xs
            yn:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] yc
            yo:f32[64,256,768] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] xc
            yp:f32[64,256,768] = sub yo ym
            yq:f32[64,256,1] = add yn 9.999999747378752e-06
            yr:f32[64,256,1] = rsqrt yq
            ys:f32[64,256,1] = div yr yq
            yt:f32[64,256,1] = mul -0.5 ys
            yu:f16[1,1,768] = reshape[dimensions=None new_sizes=(1, 1, 768)] xd
            yv:f32[1,1,768] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] yu
            yw:f32[64,256,768] = mul yr yv
            yx:f32[64,256,768] = mul yp yw
            yy:f16[1,1,768] = reshape[dimensions=None new_sizes=(1, 1, 768)] xe
            yz:f32[1,1,768] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] yy
            za:f32[64,256,768] = add yx yz
            zb:f16[64,256,768] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] za
            zc:f16[768,3072] = transpose[permutation=(1, 0)] xf
            zd:f16[64,256,3072] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] zb zc
            ze:f16[1,1,3072] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 3072)
            ] xg
            zf:f16[64,256,3072] = add zd ze
            zg:f16[64,256,3072] = integer_pow[y=3] zf
            zh:f16[64,256,3072] = integer_pow[y=2] zf
            zi:f16[64,256,3072] = mul 3.0 zh
            zj:f16[64,256,3072] = mul 0.044708251953125 zg
            zk:f16[64,256,3072] = add zf zj
            zl:f16[64,256,3072] = mul 0.7978515625 zk
            zm:f16[64,256,3072] = tanh zl
            zn:f16[64,256,3072] = sub 1.0 zm
            zo:f16[64,256,3072] = add 1.0 zm
            zp:f16[64,256,3072] = mul 0.5 zo
            zq:f16[64,256,3072] = mul zf zp
            zr:f16[3072,768] = transpose[permutation=(1, 0)] xh
            zs:f16[64,256,768] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] zq zr
            zt:f16[1,1,768] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 768)
            ] xi
            zu:f16[64,256,768] = add zs zt
            zv:f16[64,256,768] = add xc zu
            zw:f32[64,256,768] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] zv
            zx:f32[64,256] = reduce_sum[axes=(2,)] zw
            zy:f32[64,256] = div zx 768.0
            zz:f32[64,256,768] = integer_pow[y=2] zw
            baa:f32[64,256,768] = integer_pow[y=1] zw
            bab:f32[64,256,768] = mul 2.0 baa
            bac:f32[64,256] = reduce_sum[axes=(2,)] zz
            bad:f32[64,256] = div bac 768.0
            bae:f32[64,256] = integer_pow[y=2] zy
            baf:f32[64,256] = integer_pow[y=1] zy
            bag:f32[64,256] = mul 2.0 baf
            bah:f32[64,256] = sub bad bae
            bai:f32[64,256] = max 0.0 bah
            baj:bool[64,256] = eq bah bai
            bak:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            bal:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 0.0
            bam:f32[64,256] = select_n baj bal bak
            ban:bool[64,256] = eq 0.0 bai
            bao:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 2.0
            bap:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            baq:f32[64,256] = select_n ban bap bao
            bar:f32[64,256] = div bam baq
            bas:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] zy
            bat:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] bai
            bau:f32[64,256,768] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] zv
            bav:f32[64,256,768] = sub bau bas
            baw:f32[64,256,1] = add bat 9.999999747378752e-06
            bax:f32[64,256,1] = rsqrt baw
            bay:f32[64,256,1] = div bax baw
            baz:f32[64,256,1] = mul -0.5 bay
            bba:f16[1,1,768] = reshape[dimensions=None new_sizes=(1, 1, 768)] xj
            bbb:f32[1,1,768] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bba
            bbc:f32[64,256,768] = mul bax bbb
            bbd:f32[64,256,768] = mul bav bbc
            bbe:f16[1,1,768] = reshape[dimensions=None new_sizes=(1, 1, 768)] xk
            bbf:f32[1,1,768] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bbe
            bbg:f32[64,256,768] = add bbd bbf
            bbh:f16[64,256,768] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bbg
            bbi:i32[1024] = iota[dimension=0 dtype=int32 shape=(1024,)] 
            bbj:i32[1,1024] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 1024)
            ] bbi
            bbk:i32[1,1024,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(1, 1024, 1)
            ] bbj
            bbl:i32[1,1,1024] = broadcast_in_dim[
              broadcast_dimensions=(0, 2)
              shape=(1, 1, 1024)
            ] bbj
            bbm:bool[1,1024,1024] = ge bbk bbl
            bbn:bool[1,1,1024,1024] = broadcast_in_dim[
              broadcast_dimensions=(0, 2, 3)
              shape=(1, 1, 1024, 1024)
            ] bbm
            bbo:f16[768,2304] = transpose[permutation=(1, 0)] xl
            bbp:f16[64,256,2304] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] bbh bbo
            bbq:f16[1,1,2304] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 2304)
            ] xm
            bbr:f16[64,256,2304] = add bbp bbq
            bbs:f16[64,256,768] = slice[
              limit_indices=(64, 256, 768)
              start_indices=(0, 0, 0)
              strides=None
            ] bbr
            bbt:f16[64,256,768] = slice[
              limit_indices=(64, 256, 1536)
              start_indices=(0, 0, 768)
              strides=None
            ] bbr
            bbu:f16[64,256,768] = slice[
              limit_indices=(64, 256, 2304)
              start_indices=(0, 0, 1536)
              strides=None
            ] bbr
            bbv:f16[64,256,12,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 12, 64)
            ] bbs
            bbw:f16[64,256,12,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 12, 64)
            ] bbt
            bbx:f16[64,256,12,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 12, 64)
            ] bbu
            bby:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
            bbz:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
            bca:i32[2] = concatenate[dimension=0] bby bbz
            bcb:bool[1,1,256,256] = gather[
              dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2, 3), collapsed_slice_dims=(), start_index_map=(2, 3))
              fill_value=None
              indices_are_sorted=True
              mode=GatherScatterMode.PROMISE_IN_BOUNDS
              slice_sizes=(1, 1, 256, 256)
              unique_indices=True
            ] bbn bca
            bcc:bool[1,256,256] = squeeze[dimensions=(0,)] bcb
            bcd:bool[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(64, 1, 256, 256)
            ] bcc
            bce:i32[64,1,1,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 3)
              shape=(64, 1, 1, 256)
            ] xn
            bcf:i32[64,1,256] = squeeze[dimensions=(2,)] bce
            bcg:i32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 3)
              shape=(64, 1, 256, 256)
            ] bcf
            bch:bool[64,1,256,256] = ne bcg 0
            bci:bool[64,1,256,256] = and bch bcd
            bcj:f32[64,1,256,256] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bci
            bck:bool[64,1,256,256] = gt bcj 0.0
            bcl:f32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 1, 256, 256)
            ] 0.0
            bcm:f16[64,1,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bcl
            bcn:f32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 1, 256, 256)
            ] -10000.0
            bco:f16[64,1,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bcn
            bcp:f16[64,1,256,256] = select_n bck bco bcm
            bcq:f32[] = sqrt 64.0
            bcr:f16[] = convert_element_type[new_dtype=float16 weak_type=False] bcq
            bcs:f16[64,256,12,64] = div bbv bcr
            bct:f16[64,12,256,256] = dot_general[
              dimension_numbers=(((3,), (3,)), ((0, 2), (0, 2)))
              precision=None
              preferred_element_type=None
            ] bcs bbw
            bcu:f16[64,12,256,256] = add bct bcp
            bcv:f16[64,12,256] = reduce_max[axes=(3,)] bcu
            bcw:f16[64,12,256,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 12, 256, 1)
            ] bcv
            bcx:f16[64,12,256,1] = stop_gradient bcw
            bcy:f16[64,12,256,256] = sub bcu bcx
            bcz:f16[64,12,256,256] = exp bcy
            bda:f32[64,12,256,256] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bcz
            bdb:f32[64,12,256] = reduce_sum[axes=(3,)] bda
            bdc:f32[64,12,256,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 12, 256, 1)
            ] bdb
            bdd:f16[64,12,256,1] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bdc
            bde:f16[64,12,256,256] = div bcz bdd
            bdf:f16[64,12,256,1] = integer_pow[y=-2] bdd
            bdg:f16[64,12,64,256] = dot_general[
              dimension_numbers=(((1,), (3,)), ((0, 2), (0, 1)))
              precision=None
              preferred_element_type=None
            ] bbx bde
            bdh:f16[64,256,12,64] = transpose[permutation=(0, 3, 1, 2)] bdg
            bdi:f16[64,256,768] = reshape[
              dimensions=None
              new_sizes=(64, 256, 768)
            ] bdh
            bdj:f16[768,768] = transpose[permutation=(1, 0)] xo
            bdk:f16[64,256,768] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] bdi bdj
            bdl:f16[1,1,768] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 768)
            ] xp
            bdm:f16[64,256,768] = add bdk bdl
            bdn:f16[64,256,768] = add bdm zv
          in (bdn, bdi, bdj, bbx, bdf, bcz, bdd, bcs, bbw, bcr, bde, bbh, bbo, bav,
            bax, bbb, baz, bar, bag, bab, bbc, zq, zr, zf, zn, zm, zi, zp, zb, zc,
            yp, yr, yv, yt, yl, ya, xv, yw) }
        name=22
      ] ns fi fj fk fl fm fn fo fp fq fr et fs ft
    in (fv, fw, fx, fy, fz, ga, gb, gc, gd, ge, gf, gg, gh, gi, gj, gk, gl, gm, gn,
      go, gp, gq, gr, gs, gt, gu, gv, gw, gx, gy, gz, ha, hb, hc, hd, he, hf, nt,
      nu, nv, nw, nx, ny, nz, oa, ob, oc, od, oe, of, og, oh, oi, oj, ok, ol, om,
      on, oo, op, oq, or, os, ot, ou, ov, ow, ox, oy, oz, pa, pb, pc, pd, vq, vr,
      vs, vt, vu, vv, vw, vx, vy, vz, wa, wb, wc, wd, we, wf, wg, wh, wi, wj, wk,
      wl, wm, wn, wo, wp, wq, wr, ws, wt, wu, wv, ww, wx, wy, wz, xa, xb) }
  name=2
] bdo bdp bdq bdr bds bdt bdu bdv bdw bdx bdy bdz bea beb bec bed bee bef beg beh
  bei bej bek bel bem ben beo bep beq ber bes bet beu bev bew bex bey bez
eqn: a:f16[64,256,768] b:f16[768,768] c:f16[64,256,12,64] d:f16[64,12,256,1] e:f16[64,12,256,256]
  f:f16[64,12,256,1] g:f16[64,256,12,64] h:f16[64,256,12,64] i:f16[] j:f16[64,12,256,256]
  k:f16[64,256,768] l:f16[768,2304] m:f32[64,256,768] n:f32[64,256,1] o:f32[1,1,768]
  p:f32[64,256,1] q:f32[64,256] r:f32[64,256] s:f32[64,256,768] t:f32[64,256,768]
  u:f16[64,256,3072] v:f16[3072,768] w:f16[64,256,3072] x:f16[64,256,3072] y:f16[64,256,3072]
  z:f16[64,256,3072] ba:f16[64,256,3072] bb:f16[64,256,768] bc:f16[768,3072] bd:f32[64,256,768]
  be:f32[64,256,1] bf:f32[1,1,768] bg:f32[64,256,1] bh:f32[64,256] bi:f32[64,256]
  bj:f32[64,256,768] bk:f32[64,256,768] bl:f16[64,256,768] bm:f16[768,768] bn:f16[64,256,12,64]
  bo:f16[64,12,256,1] bp:f16[64,12,256,256] bq:f16[64,12,256,1] br:f16[64,256,12,64]
  bs:f16[64,256,12,64] bt:f16[] bu:f16[64,12,256,256] bv:f16[64,256,768] bw:f16[768,2304]
  bx:f32[64,256,768] by:f32[64,256,1] bz:f32[1,1,768] ca:f32[64,256,1] cb:f32[64,256]
  cc:f32[64,256] cd:f32[64,256,768] ce:f32[64,256,768] cf:f16[64,256,3072] cg:f16[3072,768]
  ch:f16[64,256,3072] ci:f16[64,256,3072] cj:f16[64,256,3072] ck:f16[64,256,3072]
  cl:f16[64,256,3072] cm:f16[64,256,768] cn:f16[768,3072] co:f32[64,256,768] cp:f32[64,256,1]
  cq:f32[1,1,768] cr:f32[64,256,1] cs:f32[64,256] ct:f32[64,256] cu:f32[64,256,768]
  cv:f32[64,256,768] cw:f16[64,256,768] cx:f16[64,256,768] cy:f16[768,768] cz:f16[64,256,12,64]
  da:f16[64,12,256,1] db:f16[64,12,256,256] dc:f16[64,12,256,1] dd:f16[64,256,12,64]
  de:f16[64,256,12,64] df:f16[] dg:f16[64,12,256,256] dh:f16[64,256,768] di:f16[768,2304]
  dj:f32[64,256,768] dk:f32[64,256,1] dl:f32[1,1,768] dm:f32[64,256,1] dn:f32[64,256]
  do:f32[64,256] dp:f32[64,256,768] dq:f32[64,256,768] dr:f16[64,256,3072] ds:f16[3072,768]
  dt:f16[64,256,3072] du:f16[64,256,3072] dv:f16[64,256,3072] dw:f16[64,256,3072]
  dx:f16[64,256,3072] dy:f16[64,256,768] dz:f16[768,3072] ea:f32[64,256,768] eb:f32[64,256,1]
  ec:f32[1,1,768] ed:f32[64,256,1] ee:f32[64,256] ef:f32[64,256] eg:f32[64,256,768]
  eh:f32[64,256,768] = pipeline_marker[mark_type=end name=2] ei ej ek el em en eo
  ep eq er es et eu ev ew ex ey ez fa fb fc fd fe ff fg fh fi fj fk fl fm fn fo fp
  fq fr fs ft fu fv fw fx fy fz ga gb gc gd ge gf gg gh gi gj gk gl gm gn go gp gq
  gr gs gt gu gv gw gx gy gz ha hb hc hd he hf hg hh hi hj hk hl hm hn ho hp hq hr
  hs ht hu hv hw hx hy hz ia ib ic id ie if ig ih ii ij ik il im in io ip
input_var_mem_size
[cpq, ea, dz, ec, eb, ee, ed, ek, ej, eg, ef, xu, ei, eh, em, el, eo, en, eq, ep, ew, ev, es, er, eu, et, ey, ex, fa, ez, fc, fb, fi, fh, fe, fd, fg, ff]
[(64, 256, 768), (768,), (768,), (3072, 768), (3072,), (768, 3072), (768,), (768,), (768,), (2304, 768), (2304,), (64, 256), (768, 768), (768,), (768,), (768,), (3072, 768), (3072,), (768, 3072), (768,), (768,), (768,), (2304, 768), (2304,), (768, 768), (768,), (768,), (768,), (3072, 768), (3072,), (768, 3072), (768,), (768,), (768,), (2304, 768), (2304,), (768, 768), (768,)]
param_size: 0.03153729438781738 [GiB] 
jaxpr.eqns, len: 3
eqn: a:f32[] b:f16[64,256,768] c:f16[768] d:f16[768] e:f16[3072,768] f:f16[3072] g:f16[768,3072]
  h:f16[768] i:f16[768] j:f16[768] k:f16[2304,768] l:f16[2304] m:i32[64,256] n:f16[768,768]
  o:f16[768] p:f16[768] q:f16[768] r:f16[3072,768] s:f16[3072] t:f16[768,3072] u:f16[768]
  v:f16[768] w:f16[768] x:f16[2304,768] y:f16[2304] z:f16[768,768] ba:f16[768] bb:f16[768]
  bc:f16[768] bd:f16[3072,768] be:f16[3072] bf:f16[768,3072] bg:f16[768] bh:f16[768]
  bi:f16[768] bj:f16[50257,768] bk:f16[64,256] bl:f32[] = pipeline_marker[
  mark_type=start
  name=3
] bm bn bo bp bq br bs bt bu bv bw bx by bz ca cb cc cd ce cf cg ch ci cj ck cl cm
  cn co cp cq cr cs ct cu cv cw cx
eqn: a:f32[] b:f16[64,256,768] c:f16[768,768] d:f16[64,256,12,64] e:f16[64,12,256,1] f:f16[64,12,256,256]
  g:f16[64,12,256,1] h:f16[64,256,12,64] i:f16[64,256,12,64] j:f16[] k:f16[64,12,256,256]
  l:f16[64,256,768] m:f16[768,2304] n:f32[64,256,768] o:f32[64,256,1] p:f32[1,1,768]
  q:f32[64,256,1] r:f32[64,256] s:f32[64,256] t:f32[64,256,768] u:f32[64,256,768]
  v:f16[64,256,3072] w:f16[3072,768] x:f16[64,256,3072] y:f16[64,256,3072] z:f16[64,256,3072]
  ba:f16[64,256,3072] bb:f16[64,256,3072] bc:f16[64,256,768] bd:f16[768,3072] be:f32[64,256,768]
  bf:f32[64,256,1] bg:f32[1,1,768] bh:f32[64,256,1] bi:f32[64,256] bj:f32[64,256]
  bk:f32[64,256,768] bl:f32[64,256,768] bm:f16[64,256,768] bn:f16[768,768] bo:f16[64,256,12,64]
  bp:f16[64,12,256,1] bq:f16[64,12,256,256] br:f16[64,12,256,1] bs:f16[64,256,12,64]
  bt:f16[64,256,12,64] bu:f16[] bv:f16[64,12,256,256] bw:f16[64,256,768] bx:f16[768,2304]
  by:f32[64,256,768] bz:f32[64,256,1] ca:f32[1,1,768] cb:f32[64,256,1] cc:f32[64,256]
  cd:f32[64,256] ce:f32[64,256,768] cf:f32[64,256,768] cg:f16[64,256,3072] ch:f16[3072,768]
  ci:f16[64,256,3072] cj:f16[64,256,3072] ck:f16[64,256,3072] cl:f16[64,256,3072]
  cm:f16[64,256,3072] cn:f16[64,256,768] co:f16[768,3072] cp:f32[64,256,768] cq:f32[64,256,1]
  cr:f32[1,1,768] cs:f32[64,256,1] ct:f32[64,256] cu:f32[64,256] cv:f32[64,256,768]
  cw:f32[64,256,768] cx:f32[] cy:f32[64,255,50257] cz:f16[64,255,1] da:f16[64,255,50257]
  db:i32[1] dc:f16[64,256,768] dd:f16[768,50257] de:f32[64,256,768] df:f32[64,256,1]
  dg:f32[1,1,768] dh:f32[64,256,1] di:f32[64,256] dj:f32[64,256] dk:f32[64,256,768]
  dl:f32[64,256,768] dm:f16[64,256,3072] dn:f16[3072,768] do:f16[64,256,3072] dp:f16[64,256,3072]
  dq:f16[64,256,3072] dr:f16[64,256,3072] ds:f16[64,256,3072] dt:f16[64,256,768]
  du:f16[768,3072] dv:f32[64,256,768] dw:f32[64,256,1] dx:f32[1,1,768] dy:f32[64,256,1]
  dz:f32[64,256] ea:f32[64,256] eb:f32[64,256,768] ec:f32[64,256,768] = named_call[
  call_jaxpr={ lambda ; ed:f32[] ee:f16[64,256,768] ef:f16[768] eg:f16[768] eh:f16[3072,768]
      ei:f16[3072] ej:f16[768,3072] ek:f16[768] el:f16[768] em:f16[768] en:f16[2304,768]
      eo:f16[2304] ep:i32[64,256] eq:f16[768,768] er:f16[768] es:f16[768] et:f16[768]
      eu:f16[3072,768] ev:f16[3072] ew:f16[768,3072] ex:f16[768] ey:f16[768] ez:f16[768]
      fa:f16[2304,768] fb:f16[2304] fc:f16[768,768] fd:f16[768] fe:f16[768] ff:f16[768]
      fg:f16[3072,768] fh:f16[3072] fi:f16[768,3072] fj:f16[768] fk:f16[768] fl:f16[768]
      fm:f16[50257,768] fn:f16[64,256] fo:f32[]. let
      fp:f16[64,256,768] fq:f16[64,256,768] fr:f16[768,768] fs:f16[64,256,12,64]
        ft:f16[64,12,256,1] fu:f16[64,12,256,256] fv:f16[64,12,256,1] fw:f16[64,256,12,64]
        fx:f16[64,256,12,64] fy:f16[] fz:f16[64,12,256,256] ga:f16[64,256,768] gb:f16[768,2304]
        gc:f32[64,256,768] gd:f32[64,256,1] ge:f32[1,1,768] gf:f32[64,256,1] gg:f32[64,256]
        gh:f32[64,256] gi:f32[64,256,768] gj:f32[64,256,768] gk:f16[64,256,3072]
        gl:f16[3072,768] gm:f16[64,256,3072] gn:f16[64,256,3072] go:f16[64,256,3072]
        gp:f16[64,256,3072] gq:f16[64,256,3072] gr:f16[64,256,768] gs:f16[768,3072]
        gt:f32[64,256,768] gu:f32[64,256,1] gv:f32[1,1,768] gw:f32[64,256,1] gx:f32[64,256]
        gy:f32[64,256] gz:f32[64,256,768] ha:f32[64,256,768] = named_call[
        call_jaxpr={ lambda ; hb:f16[64,256,768] hc:f16[768] hd:f16[768] he:f16[3072,768]
            hf:f16[3072] hg:f16[768,3072] hh:f16[768] hi:f16[768] hj:f16[768] hk:f16[2304,768]
            hl:f16[2304] hm:i32[64,256] hn:f16[768,768] ho:f16[768]. let
            hp:f32[64,256,768] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] hb
            hq:f32[64,256] = reduce_sum[axes=(2,)] hp
            hr:f32[64,256] = div hq 768.0
            hs:f32[64,256,768] = integer_pow[y=2] hp
            ht:f32[64,256,768] = integer_pow[y=1] hp
            hu:f32[64,256,768] = mul 2.0 ht
            hv:f32[64,256] = reduce_sum[axes=(2,)] hs
            hw:f32[64,256] = div hv 768.0
            hx:f32[64,256] = integer_pow[y=2] hr
            hy:f32[64,256] = integer_pow[y=1] hr
            hz:f32[64,256] = mul 2.0 hy
            ia:f32[64,256] = sub hw hx
            ib:f32[64,256] = max 0.0 ia
            ic:bool[64,256] = eq ia ib
            id:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            ie:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 0.0
            if:f32[64,256] = select_n ic ie id
            ig:bool[64,256] = eq 0.0 ib
            ih:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 2.0
            ii:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            ij:f32[64,256] = select_n ig ii ih
            ik:f32[64,256] = div if ij
            il:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] hr
            im:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] ib
            in:f32[64,256,768] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] hb
            io:f32[64,256,768] = sub in il
            ip:f32[64,256,1] = add im 9.999999747378752e-06
            iq:f32[64,256,1] = rsqrt ip
            ir:f32[64,256,1] = div iq ip
            is:f32[64,256,1] = mul -0.5 ir
            it:f16[1,1,768] = reshape[dimensions=None new_sizes=(1, 1, 768)] hc
            iu:f32[1,1,768] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] it
            iv:f32[64,256,768] = mul iq iu
            iw:f32[64,256,768] = mul io iv
            ix:f16[1,1,768] = reshape[dimensions=None new_sizes=(1, 1, 768)] hd
            iy:f32[1,1,768] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] ix
            iz:f32[64,256,768] = add iw iy
            ja:f16[64,256,768] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] iz
            jb:f16[768,3072] = transpose[permutation=(1, 0)] he
            jc:f16[64,256,3072] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] ja jb
            jd:f16[1,1,3072] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 3072)
            ] hf
            je:f16[64,256,3072] = add jc jd
            jf:f16[64,256,3072] = integer_pow[y=3] je
            jg:f16[64,256,3072] = integer_pow[y=2] je
            jh:f16[64,256,3072] = mul 3.0 jg
            ji:f16[64,256,3072] = mul 0.044708251953125 jf
            jj:f16[64,256,3072] = add je ji
            jk:f16[64,256,3072] = mul 0.7978515625 jj
            jl:f16[64,256,3072] = tanh jk
            jm:f16[64,256,3072] = sub 1.0 jl
            jn:f16[64,256,3072] = add 1.0 jl
            jo:f16[64,256,3072] = mul 0.5 jn
            jp:f16[64,256,3072] = mul je jo
            jq:f16[3072,768] = transpose[permutation=(1, 0)] hg
            jr:f16[64,256,768] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] jp jq
            js:f16[1,1,768] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 768)
            ] hh
            jt:f16[64,256,768] = add jr js
            ju:f16[64,256,768] = add hb jt
            jv:f32[64,256,768] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] ju
            jw:f32[64,256] = reduce_sum[axes=(2,)] jv
            jx:f32[64,256] = div jw 768.0
            jy:f32[64,256,768] = integer_pow[y=2] jv
            jz:f32[64,256,768] = integer_pow[y=1] jv
            ka:f32[64,256,768] = mul 2.0 jz
            kb:f32[64,256] = reduce_sum[axes=(2,)] jy
            kc:f32[64,256] = div kb 768.0
            kd:f32[64,256] = integer_pow[y=2] jx
            ke:f32[64,256] = integer_pow[y=1] jx
            kf:f32[64,256] = mul 2.0 ke
            kg:f32[64,256] = sub kc kd
            kh:f32[64,256] = max 0.0 kg
            ki:bool[64,256] = eq kg kh
            kj:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            kk:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 0.0
            kl:f32[64,256] = select_n ki kk kj
            km:bool[64,256] = eq 0.0 kh
            kn:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 2.0
            ko:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            kp:f32[64,256] = select_n km ko kn
            kq:f32[64,256] = div kl kp
            kr:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] jx
            ks:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] kh
            kt:f32[64,256,768] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] ju
            ku:f32[64,256,768] = sub kt kr
            kv:f32[64,256,1] = add ks 9.999999747378752e-06
            kw:f32[64,256,1] = rsqrt kv
            kx:f32[64,256,1] = div kw kv
            ky:f32[64,256,1] = mul -0.5 kx
            kz:f16[1,1,768] = reshape[dimensions=None new_sizes=(1, 1, 768)] hi
            la:f32[1,1,768] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] kz
            lb:f32[64,256,768] = mul kw la
            lc:f32[64,256,768] = mul ku lb
            ld:f16[1,1,768] = reshape[dimensions=None new_sizes=(1, 1, 768)] hj
            le:f32[1,1,768] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] ld
            lf:f32[64,256,768] = add lc le
            lg:f16[64,256,768] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] lf
            lh:i32[1024] = iota[dimension=0 dtype=int32 shape=(1024,)] 
            li:i32[1,1024] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 1024)
            ] lh
            lj:i32[1,1024,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(1, 1024, 1)
            ] li
            lk:i32[1,1,1024] = broadcast_in_dim[
              broadcast_dimensions=(0, 2)
              shape=(1, 1, 1024)
            ] li
            ll:bool[1,1024,1024] = ge lj lk
            lm:bool[1,1,1024,1024] = broadcast_in_dim[
              broadcast_dimensions=(0, 2, 3)
              shape=(1, 1, 1024, 1024)
            ] ll
            ln:f16[768,2304] = transpose[permutation=(1, 0)] hk
            lo:f16[64,256,2304] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] lg ln
            lp:f16[1,1,2304] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 2304)
            ] hl
            lq:f16[64,256,2304] = add lo lp
            lr:f16[64,256,768] = slice[
              limit_indices=(64, 256, 768)
              start_indices=(0, 0, 0)
              strides=None
            ] lq
            ls:f16[64,256,768] = slice[
              limit_indices=(64, 256, 1536)
              start_indices=(0, 0, 768)
              strides=None
            ] lq
            lt:f16[64,256,768] = slice[
              limit_indices=(64, 256, 2304)
              start_indices=(0, 0, 1536)
              strides=None
            ] lq
            lu:f16[64,256,12,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 12, 64)
            ] lr
            lv:f16[64,256,12,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 12, 64)
            ] ls
            lw:f16[64,256,12,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 12, 64)
            ] lt
            lx:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
            ly:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
            lz:i32[2] = concatenate[dimension=0] lx ly
            ma:bool[1,1,256,256] = gather[
              dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2, 3), collapsed_slice_dims=(), start_index_map=(2, 3))
              fill_value=None
              indices_are_sorted=True
              mode=GatherScatterMode.PROMISE_IN_BOUNDS
              slice_sizes=(1, 1, 256, 256)
              unique_indices=True
            ] lm lz
            mb:bool[1,256,256] = squeeze[dimensions=(0,)] ma
            mc:bool[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(64, 1, 256, 256)
            ] mb
            md:i32[64,1,1,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 3)
              shape=(64, 1, 1, 256)
            ] hm
            me:i32[64,1,256] = squeeze[dimensions=(2,)] md
            mf:i32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 3)
              shape=(64, 1, 256, 256)
            ] me
            mg:bool[64,1,256,256] = ne mf 0
            mh:bool[64,1,256,256] = and mg mc
            mi:f32[64,1,256,256] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] mh
            mj:bool[64,1,256,256] = gt mi 0.0
            mk:f32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 1, 256, 256)
            ] 0.0
            ml:f16[64,1,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] mk
            mm:f32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 1, 256, 256)
            ] -10000.0
            mn:f16[64,1,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] mm
            mo:f16[64,1,256,256] = select_n mj mn ml
            mp:f32[] = sqrt 64.0
            mq:f16[] = convert_element_type[new_dtype=float16 weak_type=False] mp
            mr:f16[64,256,12,64] = div lu mq
            ms:f16[64,12,256,256] = dot_general[
              dimension_numbers=(((3,), (3,)), ((0, 2), (0, 2)))
              precision=None
              preferred_element_type=None
            ] mr lv
            mt:f16[64,12,256,256] = add ms mo
            mu:f16[64,12,256] = reduce_max[axes=(3,)] mt
            mv:f16[64,12,256,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 12, 256, 1)
            ] mu
            mw:f16[64,12,256,1] = stop_gradient mv
            mx:f16[64,12,256,256] = sub mt mw
            my:f16[64,12,256,256] = exp mx
            mz:f32[64,12,256,256] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] my
            na:f32[64,12,256] = reduce_sum[axes=(3,)] mz
            nb:f32[64,12,256,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 12, 256, 1)
            ] na
            nc:f16[64,12,256,1] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] nb
            nd:f16[64,12,256,256] = div my nc
            ne:f16[64,12,256,1] = integer_pow[y=-2] nc
            nf:f16[64,12,64,256] = dot_general[
              dimension_numbers=(((1,), (3,)), ((0, 2), (0, 1)))
              precision=None
              preferred_element_type=None
            ] lw nd
            ng:f16[64,256,12,64] = transpose[permutation=(0, 3, 1, 2)] nf
            nh:f16[64,256,768] = reshape[
              dimensions=None
              new_sizes=(64, 256, 768)
            ] ng
            ni:f16[768,768] = transpose[permutation=(1, 0)] hn
            nj:f16[64,256,768] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] nh ni
            nk:f16[1,1,768] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 768)
            ] ho
            nl:f16[64,256,768] = add nj nk
            nm:f16[64,256,768] = add nl ju
          in (nm, nh, ni, lw, ne, my, nc, mr, lv, mq, nd, lg, ln, ku, kw, la, ky,
            kq, kf, ka, lb, jp, jq, je, jm, jl, jh, jo, ja, jb, io, iq, iu, is, ik,
            hz, hu, iv) }
        name=30
      ] ee ef eg eh ei ej ek el em en eo ep eq er
      nn:f16[64,256,768] no:f16[64,256,768] np:f16[768,768] nq:f16[64,256,12,64]
        nr:f16[64,12,256,1] ns:f16[64,12,256,256] nt:f16[64,12,256,1] nu:f16[64,256,12,64]
        nv:f16[64,256,12,64] nw:f16[] nx:f16[64,12,256,256] ny:f16[64,256,768] nz:f16[768,2304]
        oa:f32[64,256,768] ob:f32[64,256,1] oc:f32[1,1,768] od:f32[64,256,1] oe:f32[64,256]
        of:f32[64,256] og:f32[64,256,768] oh:f32[64,256,768] oi:f16[64,256,3072]
        oj:f16[3072,768] ok:f16[64,256,3072] ol:f16[64,256,3072] om:f16[64,256,3072]
        on:f16[64,256,3072] oo:f16[64,256,3072] op:f16[64,256,768] oq:f16[768,3072]
        or:f32[64,256,768] os:f32[64,256,1] ot:f32[1,1,768] ou:f32[64,256,1] ov:f32[64,256]
        ow:f32[64,256] ox:f32[64,256,768] oy:f32[64,256,768] = named_call[
        call_jaxpr={ lambda ; oz:f16[64,256,768] pa:f16[768] pb:f16[768] pc:f16[3072,768]
            pd:f16[3072] pe:f16[768,3072] pf:f16[768] pg:f16[768] ph:f16[768] pi:f16[2304,768]
            pj:f16[2304] pk:i32[64,256] pl:f16[768,768] pm:f16[768]. let
            pn:f32[64,256,768] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] oz
            po:f32[64,256] = reduce_sum[axes=(2,)] pn
            pp:f32[64,256] = div po 768.0
            pq:f32[64,256,768] = integer_pow[y=2] pn
            pr:f32[64,256,768] = integer_pow[y=1] pn
            ps:f32[64,256,768] = mul 2.0 pr
            pt:f32[64,256] = reduce_sum[axes=(2,)] pq
            pu:f32[64,256] = div pt 768.0
            pv:f32[64,256] = integer_pow[y=2] pp
            pw:f32[64,256] = integer_pow[y=1] pp
            px:f32[64,256] = mul 2.0 pw
            py:f32[64,256] = sub pu pv
            pz:f32[64,256] = max 0.0 py
            qa:bool[64,256] = eq py pz
            qb:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            qc:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 0.0
            qd:f32[64,256] = select_n qa qc qb
            qe:bool[64,256] = eq 0.0 pz
            qf:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 2.0
            qg:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            qh:f32[64,256] = select_n qe qg qf
            qi:f32[64,256] = div qd qh
            qj:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] pp
            qk:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] pz
            ql:f32[64,256,768] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] oz
            qm:f32[64,256,768] = sub ql qj
            qn:f32[64,256,1] = add qk 9.999999747378752e-06
            qo:f32[64,256,1] = rsqrt qn
            qp:f32[64,256,1] = div qo qn
            qq:f32[64,256,1] = mul -0.5 qp
            qr:f16[1,1,768] = reshape[dimensions=None new_sizes=(1, 1, 768)] pa
            qs:f32[1,1,768] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] qr
            qt:f32[64,256,768] = mul qo qs
            qu:f32[64,256,768] = mul qm qt
            qv:f16[1,1,768] = reshape[dimensions=None new_sizes=(1, 1, 768)] pb
            qw:f32[1,1,768] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] qv
            qx:f32[64,256,768] = add qu qw
            qy:f16[64,256,768] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] qx
            qz:f16[768,3072] = transpose[permutation=(1, 0)] pc
            ra:f16[64,256,3072] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] qy qz
            rb:f16[1,1,3072] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 3072)
            ] pd
            rc:f16[64,256,3072] = add ra rb
            rd:f16[64,256,3072] = integer_pow[y=3] rc
            re:f16[64,256,3072] = integer_pow[y=2] rc
            rf:f16[64,256,3072] = mul 3.0 re
            rg:f16[64,256,3072] = mul 0.044708251953125 rd
            rh:f16[64,256,3072] = add rc rg
            ri:f16[64,256,3072] = mul 0.7978515625 rh
            rj:f16[64,256,3072] = tanh ri
            rk:f16[64,256,3072] = sub 1.0 rj
            rl:f16[64,256,3072] = add 1.0 rj
            rm:f16[64,256,3072] = mul 0.5 rl
            rn:f16[64,256,3072] = mul rc rm
            ro:f16[3072,768] = transpose[permutation=(1, 0)] pe
            rp:f16[64,256,768] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] rn ro
            rq:f16[1,1,768] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 768)
            ] pf
            rr:f16[64,256,768] = add rp rq
            rs:f16[64,256,768] = add oz rr
            rt:f32[64,256,768] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] rs
            ru:f32[64,256] = reduce_sum[axes=(2,)] rt
            rv:f32[64,256] = div ru 768.0
            rw:f32[64,256,768] = integer_pow[y=2] rt
            rx:f32[64,256,768] = integer_pow[y=1] rt
            ry:f32[64,256,768] = mul 2.0 rx
            rz:f32[64,256] = reduce_sum[axes=(2,)] rw
            sa:f32[64,256] = div rz 768.0
            sb:f32[64,256] = integer_pow[y=2] rv
            sc:f32[64,256] = integer_pow[y=1] rv
            sd:f32[64,256] = mul 2.0 sc
            se:f32[64,256] = sub sa sb
            sf:f32[64,256] = max 0.0 se
            sg:bool[64,256] = eq se sf
            sh:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            si:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 0.0
            sj:f32[64,256] = select_n sg si sh
            sk:bool[64,256] = eq 0.0 sf
            sl:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 2.0
            sm:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            sn:f32[64,256] = select_n sk sm sl
            so:f32[64,256] = div sj sn
            sp:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] rv
            sq:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] sf
            sr:f32[64,256,768] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] rs
            ss:f32[64,256,768] = sub sr sp
            st:f32[64,256,1] = add sq 9.999999747378752e-06
            su:f32[64,256,1] = rsqrt st
            sv:f32[64,256,1] = div su st
            sw:f32[64,256,1] = mul -0.5 sv
            sx:f16[1,1,768] = reshape[dimensions=None new_sizes=(1, 1, 768)] pg
            sy:f32[1,1,768] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] sx
            sz:f32[64,256,768] = mul su sy
            ta:f32[64,256,768] = mul ss sz
            tb:f16[1,1,768] = reshape[dimensions=None new_sizes=(1, 1, 768)] ph
            tc:f32[1,1,768] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] tb
            td:f32[64,256,768] = add ta tc
            te:f16[64,256,768] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] td
            tf:i32[1024] = iota[dimension=0 dtype=int32 shape=(1024,)] 
            tg:i32[1,1024] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 1024)
            ] tf
            th:i32[1,1024,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(1, 1024, 1)
            ] tg
            ti:i32[1,1,1024] = broadcast_in_dim[
              broadcast_dimensions=(0, 2)
              shape=(1, 1, 1024)
            ] tg
            tj:bool[1,1024,1024] = ge th ti
            tk:bool[1,1,1024,1024] = broadcast_in_dim[
              broadcast_dimensions=(0, 2, 3)
              shape=(1, 1, 1024, 1024)
            ] tj
            tl:f16[768,2304] = transpose[permutation=(1, 0)] pi
            tm:f16[64,256,2304] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] te tl
            tn:f16[1,1,2304] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 2304)
            ] pj
            to:f16[64,256,2304] = add tm tn
            tp:f16[64,256,768] = slice[
              limit_indices=(64, 256, 768)
              start_indices=(0, 0, 0)
              strides=None
            ] to
            tq:f16[64,256,768] = slice[
              limit_indices=(64, 256, 1536)
              start_indices=(0, 0, 768)
              strides=None
            ] to
            tr:f16[64,256,768] = slice[
              limit_indices=(64, 256, 2304)
              start_indices=(0, 0, 1536)
              strides=None
            ] to
            ts:f16[64,256,12,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 12, 64)
            ] tp
            tt:f16[64,256,12,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 12, 64)
            ] tq
            tu:f16[64,256,12,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 12, 64)
            ] tr
            tv:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
            tw:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
            tx:i32[2] = concatenate[dimension=0] tv tw
            ty:bool[1,1,256,256] = gather[
              dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2, 3), collapsed_slice_dims=(), start_index_map=(2, 3))
              fill_value=None
              indices_are_sorted=True
              mode=GatherScatterMode.PROMISE_IN_BOUNDS
              slice_sizes=(1, 1, 256, 256)
              unique_indices=True
            ] tk tx
            tz:bool[1,256,256] = squeeze[dimensions=(0,)] ty
            ua:bool[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(64, 1, 256, 256)
            ] tz
            ub:i32[64,1,1,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 3)
              shape=(64, 1, 1, 256)
            ] pk
            uc:i32[64,1,256] = squeeze[dimensions=(2,)] ub
            ud:i32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 3)
              shape=(64, 1, 256, 256)
            ] uc
            ue:bool[64,1,256,256] = ne ud 0
            uf:bool[64,1,256,256] = and ue ua
            ug:f32[64,1,256,256] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] uf
            uh:bool[64,1,256,256] = gt ug 0.0
            ui:f32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 1, 256, 256)
            ] 0.0
            uj:f16[64,1,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] ui
            uk:f32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 1, 256, 256)
            ] -10000.0
            ul:f16[64,1,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] uk
            um:f16[64,1,256,256] = select_n uh ul uj
            un:f32[] = sqrt 64.0
            uo:f16[] = convert_element_type[new_dtype=float16 weak_type=False] un
            up:f16[64,256,12,64] = div ts uo
            uq:f16[64,12,256,256] = dot_general[
              dimension_numbers=(((3,), (3,)), ((0, 2), (0, 2)))
              precision=None
              preferred_element_type=None
            ] up tt
            ur:f16[64,12,256,256] = add uq um
            us:f16[64,12,256] = reduce_max[axes=(3,)] ur
            ut:f16[64,12,256,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 12, 256, 1)
            ] us
            uu:f16[64,12,256,1] = stop_gradient ut
            uv:f16[64,12,256,256] = sub ur uu
            uw:f16[64,12,256,256] = exp uv
            ux:f32[64,12,256,256] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] uw
            uy:f32[64,12,256] = reduce_sum[axes=(3,)] ux
            uz:f32[64,12,256,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 12, 256, 1)
            ] uy
            va:f16[64,12,256,1] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] uz
            vb:f16[64,12,256,256] = div uw va
            vc:f16[64,12,256,1] = integer_pow[y=-2] va
            vd:f16[64,12,64,256] = dot_general[
              dimension_numbers=(((1,), (3,)), ((0, 2), (0, 1)))
              precision=None
              preferred_element_type=None
            ] tu vb
            ve:f16[64,256,12,64] = transpose[permutation=(0, 3, 1, 2)] vd
            vf:f16[64,256,768] = reshape[
              dimensions=None
              new_sizes=(64, 256, 768)
            ] ve
            vg:f16[768,768] = transpose[permutation=(1, 0)] pl
            vh:f16[64,256,768] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] vf vg
            vi:f16[1,1,768] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 768)
            ] pm
            vj:f16[64,256,768] = add vh vi
            vk:f16[64,256,768] = add vj rs
          in (vk, vf, vg, tu, vc, uw, va, up, tt, uo, vb, te, tl, ss, su, sy, sw,
            so, sd, ry, sz, rn, ro, rc, rk, rj, rf, rm, qy, qz, qm, qo, qs, qq, qi,
            px, ps, qt) }
        name=31
      ] fp es et eu ev ew ex ey ez fa fb ep fc fd
      vl:f32[] vm:f32[] vn:f32[64,255,50257] vo:f16[64,255,1] vp:f16[64,255,50257]
        vq:i32[1] vr:f16[64,256,768] vs:f16[768,50257] vt:f32[64,256,768] vu:f32[64,256,1]
        vv:f32[1,1,768] vw:f32[64,256,1] vx:f32[64,256] vy:f32[64,256] vz:f32[64,256,768]
        wa:f32[64,256,768] wb:f16[64,256,3072] wc:f16[3072,768] wd:f16[64,256,3072]
        we:f16[64,256,3072] wf:f16[64,256,3072] wg:f16[64,256,3072] wh:f16[64,256,3072]
        wi:f16[64,256,768] wj:f16[768,3072] wk:f32[64,256,768] wl:f32[64,256,1] wm:f32[1,1,768]
        wn:f32[64,256,1] wo:f32[64,256] wp:f32[64,256] wq:f32[64,256,768] wr:f32[64,256,768] = named_call[
        call_jaxpr={ lambda ; ws:f16[64,256,768] wt:f16[768] wu:f16[768] wv:f16[3072,768]
            ww:f16[3072] wx:f16[768,3072] wy:f16[768] wz:f16[768] xa:f16[768] xb:f16[50257,768]
            xc:f32[] xd:f16[64,256] xe:f32[]. let
            xf:f32[64,256,768] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] ws
            xg:f32[64,256] = reduce_sum[axes=(2,)] xf
            xh:f32[64,256] = div xg 768.0
            xi:f32[64,256,768] = integer_pow[y=2] xf
            xj:f32[64,256,768] = integer_pow[y=1] xf
            xk:f32[64,256,768] = mul 2.0 xj
            xl:f32[64,256] = reduce_sum[axes=(2,)] xi
            xm:f32[64,256] = div xl 768.0
            xn:f32[64,256] = integer_pow[y=2] xh
            xo:f32[64,256] = integer_pow[y=1] xh
            xp:f32[64,256] = mul 2.0 xo
            xq:f32[64,256] = sub xm xn
            xr:f32[64,256] = max 0.0 xq
            xs:bool[64,256] = eq xq xr
            xt:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            xu:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 0.0
            xv:f32[64,256] = select_n xs xu xt
            xw:bool[64,256] = eq 0.0 xr
            xx:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 2.0
            xy:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            xz:f32[64,256] = select_n xw xy xx
            ya:f32[64,256] = div xv xz
            yb:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] xh
            yc:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] xr
            yd:f32[64,256,768] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] ws
            ye:f32[64,256,768] = sub yd yb
            yf:f32[64,256,1] = add yc 9.999999747378752e-06
            yg:f32[64,256,1] = rsqrt yf
            yh:f32[64,256,1] = div yg yf
            yi:f32[64,256,1] = mul -0.5 yh
            yj:f16[1,1,768] = reshape[dimensions=None new_sizes=(1, 1, 768)] wt
            yk:f32[1,1,768] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] yj
            yl:f32[64,256,768] = mul yg yk
            ym:f32[64,256,768] = mul ye yl
            yn:f16[1,1,768] = reshape[dimensions=None new_sizes=(1, 1, 768)] wu
            yo:f32[1,1,768] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] yn
            yp:f32[64,256,768] = add ym yo
            yq:f16[64,256,768] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] yp
            yr:f16[768,3072] = transpose[permutation=(1, 0)] wv
            ys:f16[64,256,3072] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] yq yr
            yt:f16[1,1,3072] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 3072)
            ] ww
            yu:f16[64,256,3072] = add ys yt
            yv:f16[64,256,3072] = integer_pow[y=3] yu
            yw:f16[64,256,3072] = integer_pow[y=2] yu
            yx:f16[64,256,3072] = mul 3.0 yw
            yy:f16[64,256,3072] = mul 0.044708251953125 yv
            yz:f16[64,256,3072] = add yu yy
            za:f16[64,256,3072] = mul 0.7978515625 yz
            zb:f16[64,256,3072] = tanh za
            zc:f16[64,256,3072] = sub 1.0 zb
            zd:f16[64,256,3072] = add 1.0 zb
            ze:f16[64,256,3072] = mul 0.5 zd
            zf:f16[64,256,3072] = mul yu ze
            zg:f16[3072,768] = transpose[permutation=(1, 0)] wx
            zh:f16[64,256,768] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] zf zg
            zi:f16[1,1,768] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 768)
            ] wy
            zj:f16[64,256,768] = add zh zi
            zk:f16[64,256,768] = add ws zj
            zl:f32[64,256,768] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] zk
            zm:f32[64,256] = reduce_sum[axes=(2,)] zl
            zn:f32[64,256] = div zm 768.0
            zo:f32[64,256,768] = integer_pow[y=2] zl
            zp:f32[64,256,768] = integer_pow[y=1] zl
            zq:f32[64,256,768] = mul 2.0 zp
            zr:f32[64,256] = reduce_sum[axes=(2,)] zo
            zs:f32[64,256] = div zr 768.0
            zt:f32[64,256] = integer_pow[y=2] zn
            zu:f32[64,256] = integer_pow[y=1] zn
            zv:f32[64,256] = mul 2.0 zu
            zw:f32[64,256] = sub zs zt
            zx:f32[64,256] = max 0.0 zw
            zy:bool[64,256] = eq zw zx
            zz:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            baa:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 0.0
            bab:f32[64,256] = select_n zy baa zz
            bac:bool[64,256] = eq 0.0 zx
            bad:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 2.0
            bae:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            baf:f32[64,256] = select_n bac bae bad
            bag:f32[64,256] = div bab baf
            bah:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] zn
            bai:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] zx
            baj:f32[64,256,768] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] zk
            bak:f32[64,256,768] = sub baj bah
            bal:f32[64,256,1] = add bai 9.999999747378752e-06
            bam:f32[64,256,1] = rsqrt bal
            ban:f32[64,256,1] = div bam bal
            bao:f32[64,256,1] = mul -0.5 ban
            bap:f16[1,1,768] = reshape[dimensions=None new_sizes=(1, 1, 768)] wz
            baq:f32[1,1,768] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bap
            bar:f32[64,256,768] = mul bam baq
            bas:f32[64,256,768] = mul bak bar
            bat:f16[1,1,768] = reshape[dimensions=None new_sizes=(1, 1, 768)] xa
            bau:f32[1,1,768] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bat
            bav:f32[64,256,768] = add bas bau
            baw:f16[64,256,768] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bav
            bax:f16[768,50257] = transpose[permutation=(1, 0)] xb
            bay:f16[64,256,50257] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] baw bax
            baz:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
            bba:f16[64,255,50257] = gather[
              dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(), start_index_map=(1,))
              fill_value=None
              indices_are_sorted=True
              mode=GatherScatterMode.PROMISE_IN_BOUNDS
              slice_sizes=(64, 255, 50257)
              unique_indices=True
            ] bay baz
            bbb:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 1
            bbc:f16[64,255] = gather[
              dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(), start_index_map=(1,))
              fill_value=None
              indices_are_sorted=True
              mode=GatherScatterMode.PROMISE_IN_BOUNDS
              slice_sizes=(64, 255)
              unique_indices=True
            ] xd bbb
            bbd:f16[64,255,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 255, 1)
            ] bbc
            bbe:i32[50257] = iota[dimension=0 dtype=int32 shape=(50257,)] 
            bbf:i32[1,1,50257] = reshape[
              dimensions=None
              new_sizes=(1, 1, 50257)
            ] bbe
            bbg:f16[1,1,50257] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bbf
            bbh:bool[64,255,50257] = eq bbd bbg
            bbi:f32[64,255,50257] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 255, 50257)
            ] 1.0
            bbj:f32[64,255,50257] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 255, 50257)
            ] 0.0
            bbk:f32[64,255,50257] = select_n bbh bbj bbi
            bbl:f32[64,255,50257] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bbk
            bbm:f16[64,255] = reduce_max[axes=(2,)] bba
            bbn:f16[64,255,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 255, 1)
            ] bbm
            bbo:f16[64,255,1] = stop_gradient bbn
            bbp:f16[64,255,50257] = sub bba bbo
            bbq:f16[64,255,50257] = exp bbp
            bbr:f32[64,255,50257] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bbq
            bbs:f32[64,255] = reduce_sum[axes=(2,)] bbr
            bbt:f32[64,255,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 255, 1)
            ] bbs
            bbu:f16[64,255,1] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bbt
            bbv:f16[64,255,1] = log bbu
            bbw:f16[64,255,50257] = sub bbp bbv
            bbx:f32[64,255,50257] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bbw
            bby:f32[64,255,50257] = mul bbl bbx
            bbz:f32[64,255] = reduce_sum[axes=(2,)] bby
            bca:f32[64,255] = neg bbz
            bcb:f32[] = reduce_sum[axes=(0, 1)] bca
            bcc:f32[] = div bcb 16320.0
            bcd:f32[] = convert_element_type[new_dtype=float32 weak_type=False] xe
            bce:f32[] = mul bcd bcc
            bcf:f32[] = add xc bce
          in (bcf, bcd, bbl, bbu, bbq, baz, baw, bax, bak, bam, baq, bao, bag, zv,
            zq, bar, zf, zg, yu, zc, zb, yx, ze, yq, yr, ye, yg, yk, yi, ya, xp,
            xk, yl) }
        name=32
      ] nn fe ff fg fh fi fj fk fl fm ed fn fo
    in (vl, fq, fr, fs, ft, fu, fv, fw, fx, fy, fz, ga, gb, gc, gd, ge, gf, gg, gh,
      gi, gj, gk, gl, gm, gn, go, gp, gq, gr, gs, gt, gu, gv, gw, gx, gy, gz, ha,
      no, np, nq, nr, ns, nt, nu, nv, nw, nx, ny, nz, oa, ob, oc, od, oe, of, og,
      oh, oi, oj, ok, ol, om, on, oo, op, oq, or, os, ot, ou, ov, ow, ox, oy, vm,
      vn, vo, vp, vq, vr, vs, vt, vu, vv, vw, vx, vy, vz, wa, wb, wc, wd, we, wf,
      wg, wh, wi, wj, wk, wl, wm, wn, wo, wp, wq, wr) }
  name=3
] bcg bch bci bcj bck bcl bcm bcn bco bcp bcq bcr bcs bct bcu bcv bcw bcx bcy bcz
  bda bdb bdc bdd bde bdf bdg bdh bdi bdj bdk bdl bdm bdn bdo bdp bdq bdr
eqn: a:f32[] b:f16[64,256,768] c:f16[768,768] d:f16[64,256,12,64] e:f16[64,12,256,1] f:f16[64,12,256,256]
  g:f16[64,12,256,1] h:f16[64,256,12,64] i:f16[64,256,12,64] j:f16[] k:f16[64,12,256,256]
  l:f16[64,256,768] m:f16[768,2304] n:f32[64,256,768] o:f32[64,256,1] p:f32[1,1,768]
  q:f32[64,256,1] r:f32[64,256] s:f32[64,256] t:f32[64,256,768] u:f32[64,256,768]
  v:f16[64,256,3072] w:f16[3072,768] x:f16[64,256,3072] y:f16[64,256,3072] z:f16[64,256,3072]
  ba:f16[64,256,3072] bb:f16[64,256,3072] bc:f16[64,256,768] bd:f16[768,3072] be:f32[64,256,768]
  bf:f32[64,256,1] bg:f32[1,1,768] bh:f32[64,256,1] bi:f32[64,256] bj:f32[64,256]
  bk:f32[64,256,768] bl:f32[64,256,768] bm:f16[64,256,768] bn:f16[768,768] bo:f16[64,256,12,64]
  bp:f16[64,12,256,1] bq:f16[64,12,256,256] br:f16[64,12,256,1] bs:f16[64,256,12,64]
  bt:f16[64,256,12,64] bu:f16[] bv:f16[64,12,256,256] bw:f16[64,256,768] bx:f16[768,2304]
  by:f32[64,256,768] bz:f32[64,256,1] ca:f32[1,1,768] cb:f32[64,256,1] cc:f32[64,256]
  cd:f32[64,256] ce:f32[64,256,768] cf:f32[64,256,768] cg:f16[64,256,3072] ch:f16[3072,768]
  ci:f16[64,256,3072] cj:f16[64,256,3072] ck:f16[64,256,3072] cl:f16[64,256,3072]
  cm:f16[64,256,3072] cn:f16[64,256,768] co:f16[768,3072] cp:f32[64,256,768] cq:f32[64,256,1]
  cr:f32[1,1,768] cs:f32[64,256,1] ct:f32[64,256] cu:f32[64,256] cv:f32[64,256,768]
  cw:f32[64,256,768] cx:f32[] cy:f32[64,255,50257] cz:f16[64,255,1] da:f16[64,255,50257]
  db:i32[1] dc:f16[64,256,768] dd:f16[768,50257] de:f32[64,256,768] df:f32[64,256,1]
  dg:f32[1,1,768] dh:f32[64,256,1] di:f32[64,256] dj:f32[64,256] dk:f32[64,256,768]
  dl:f32[64,256,768] dm:f16[64,256,3072] dn:f16[3072,768] do:f16[64,256,3072] dp:f16[64,256,3072]
  dq:f16[64,256,3072] dr:f16[64,256,3072] ds:f16[64,256,3072] dt:f16[64,256,768]
  du:f16[768,3072] dv:f32[64,256,768] dw:f32[64,256,1] dx:f32[1,1,768] dy:f32[64,256,1]
  dz:f32[64,256] ea:f32[64,256] eb:f32[64,256,768] ec:f32[64,256,768] = pipeline_marker[
  mark_type=end
  name=3
] ed ee ef eg eh ei ej ek el em en eo ep eq er es et eu ev ew ex ey ez fa fb fc fd
  fe ff fg fh fi fj fk fl fm fn fo fp fq fr fs ft fu fv fw fx fy fz ga gb gc gd ge
  gf gg gh gi gj gk gl gm gn go gp gq gr gs gt gu gv gw gx gy gz ha hb hc hd he hf
  hg hh hi hj hk hl hm hn ho hp hq hr hs ht hu hv hw hx hy hz ia ib ic id ie if
input_var_mem_size
[qjo, djm, fk, fj, fm, fl, fo, fn, be, bd, ba, z, xu, bc, bb, bg, bf, bi, bh, bk, bj, bq, bp, bm, bl, bo, bn, bs, br, bu, bt, bw, bv, fq, fp, fs, xb, wy]
[(), (64, 256, 768), (768,), (768,), (3072, 768), (3072,), (768, 3072), (768,), (768,), (768,), (2304, 768), (2304,), (64, 256), (768, 768), (768,), (768,), (768,), (3072, 768), (3072,), (768, 3072), (768,), (768,), (768,), (2304, 768), (2304,), (768, 768), (768,), (768,), (768,), (3072, 768), (3072,), (768, 3072), (768,), (768,), (768,), (50257, 768), (64, 256), ()]
param_size: 0.06529903598129749 [GiB] 
jaxpr.eqns, len: 3
eqn: a:f16[50257,768] b:f16[768] c:f16[768] d:f16[768] e:f16[768,3072] f:f16[3072] g:f16[3072,768]
  h:f16[768] i:f16[768] j:f16[768] k:f16[768,768] l:f16[2304] m:f16[2304,768] n:f16[768]
  o:f16[768] p:f16[768] q:f16[768,3072] r:f16[3072] s:f16[3072,768] t:f16[768] u:f16[768]
  v:f16[768] w:f16[768,768] x:f16[2304] y:f16[2304,768] z:f16[768] ba:f16[768] bb:f16[768]
  bc:f16[768,3072] bd:f16[3072] be:f16[3072,768] bf:f16[768] bg:f16[768] bh:f32[]
  bi:f32[64,255,50257] bj:f16[64,255,1] bk:f16[64,255,50257] bl:i32[1] bm:f16[64,256,768]
  bn:f16[768,50257] bo:f32[64,256,768] bp:f32[64,256,1] bq:f32[1,1,768] br:f32[64,256,1]
  bs:f32[64,256] bt:f32[64,256] bu:f32[64,256,768] bv:f32[64,256,768] bw:f16[64,256,3072]
  bx:f16[3072,768] by:f16[64,256,3072] bz:f16[64,256,3072] ca:f16[64,256,3072] cb:f16[64,256,3072]
  cc:f16[64,256,3072] cd:f16[64,256,768] ce:f16[768,3072] cf:f32[64,256,768] cg:f32[64,256,1]
  ch:f32[1,1,768] ci:f32[64,256,1] cj:f32[64,256] ck:f32[64,256] cl:f32[64,256,768]
  cm:f32[64,256,768] cn:f16[64,256,768] co:f16[768,768] cp:f16[64,256,12,64] cq:f16[64,12,256,1]
  cr:f16[64,12,256,256] cs:f16[64,12,256,1] ct:f16[64,256,12,64] cu:f16[64,256,12,64]
  cv:f16[] cw:f16[64,12,256,256] cx:f16[64,256,768] cy:f16[768,2304] cz:f32[64,256,768]
  da:f32[64,256,1] db:f32[1,1,768] dc:f32[64,256,1] dd:f32[64,256] de:f32[64,256]
  df:f32[64,256,768] dg:f32[64,256,768] dh:f16[64,256,3072] di:f16[3072,768] dj:f16[64,256,3072]
  dk:f16[64,256,3072] dl:f16[64,256,3072] dm:f16[64,256,3072] dn:f16[64,256,3072]
  do:f16[64,256,768] dp:f16[768,3072] dq:f32[64,256,768] dr:f32[64,256,1] ds:f32[1,1,768]
  dt:f32[64,256,1] du:f32[64,256] dv:f32[64,256] dw:f32[64,256,768] dx:f32[64,256,768]
  dy:f16[64,256,768] dz:f16[768,768] ea:f16[64,256,12,64] eb:f16[64,12,256,1] ec:f16[64,12,256,256]
  ed:f16[64,12,256,1] ee:f16[64,256,12,64] ef:f16[64,256,12,64] eg:f16[] eh:f16[64,12,256,256]
  ei:f16[64,256,768] ej:f16[768,2304] ek:f32[64,256,768] el:f32[64,256,1] em:f32[1,1,768]
  en:f32[64,256,1] eo:f32[64,256] ep:f32[64,256] eq:f32[64,256,768] er:f32[64,256,768]
  es:f16[64,256,3072] et:f16[3072,768] eu:f16[64,256,3072] ev:f16[64,256,3072] ew:f16[64,256,3072]
  ex:f16[64,256,3072] ey:f16[64,256,3072] ez:f16[64,256,768] fa:f16[768,3072] fb:f32[64,256,768]
  fc:f32[64,256,1] fd:f32[1,1,768] fe:f32[64,256,1] ff:f32[64,256] fg:f32[64,256]
  fh:f32[64,256,768] fi:f32[64,256,768] = pipeline_marker[
  mark_type=start
  name=4
] fj fk fl fm fn fo fp fq fr fs ft fu fv fw fx fy fz ga gb gc gd ge gf gg gh gi gj
  gk gl gm gn go gp gq gr gs gt gu gv gw gx gy gz ha hb hc hd he hf hg hh hi hj hk
  hl hm hn ho hp hq hr hs ht hu hv hw hx hy hz ia ib ic id ie if ig ih ii ij ik il
  im in io ip iq ir is it iu iv iw ix iy iz ja jb jc jd je jf jg jh ji jj jk jl jm
  jn jo jp jq jr js jt ju jv jw jx jy jz ka kb kc kd ke kf kg kh ki kj kk kl km kn
  ko kp kq kr
eqn: a:f16[50257,768] b:f16[768] c:f16[768] d:f16[768] e:f16[768,3072] f:f16[3072] g:f16[3072,768]
  h:f16[768] i:f16[768] j:f16[768] k:f16[768,768] l:f16[2304] m:f16[2304,768] n:f16[768]
  o:f16[768] p:f16[768] q:f16[768,3072] r:f16[3072] s:f16[3072,768] t:f16[768] u:f16[768]
  v:f16[768] w:f16[768,768] x:f16[2304] y:f16[2304,768] z:f16[768] ba:f16[768] bb:f16[768]
  bc:f16[768,3072] bd:f16[3072] be:f16[3072,768] bf:f16[768] bg:f16[768] bh:f16[64,256,768] = named_call[
  call_jaxpr={ lambda ; bi:f16[50257,768] bj:f16[768] bk:f16[768] bl:f16[768] bm:f16[768,3072]
      bn:f16[3072] bo:f16[3072,768] bp:f16[768] bq:f16[768] br:f16[768] bs:f16[768,768]
      bt:f16[2304] bu:f16[2304,768] bv:f16[768] bw:f16[768] bx:f16[768] by:f16[768,3072]
      bz:f16[3072] ca:f16[3072,768] cb:f16[768] cc:f16[768] cd:f16[768] ce:f16[768,768]
      cf:f16[2304] cg:f16[2304,768] ch:f16[768] ci:f16[768] cj:f16[768] ck:f16[768,3072]
      cl:f16[3072] cm:f16[3072,768] cn:f16[768] co:f16[768] cp:f32[] cq:f32[64,255,50257]
      cr:f16[64,255,1] cs:f16[64,255,50257] ct:i32[1] cu:f16[64,256,768] cv:f16[768,50257]
      cw:f32[64,256,768] cx:f32[64,256,1] cy:f32[1,1,768] cz:f32[64,256,1] da:f32[64,256]
      db:f32[64,256] dc:f32[64,256,768] dd:f32[64,256,768] de:f16[64,256,3072] df:f16[3072,768]
      dg:f16[64,256,3072] dh:f16[64,256,3072] di:f16[64,256,3072] dj:f16[64,256,3072]
      dk:f16[64,256,3072] dl:f16[64,256,768] dm:f16[768,3072] dn:f32[64,256,768]
      do:f32[64,256,1] dp:f32[1,1,768] dq:f32[64,256,1] dr:f32[64,256] ds:f32[64,256]
      dt:f32[64,256,768] du:f32[64,256,768] dv:f16[64,256,768] dw:f16[768,768] dx:f16[64,256,12,64]
      dy:f16[64,12,256,1] dz:f16[64,12,256,256] ea:f16[64,12,256,1] eb:f16[64,256,12,64]
      ec:f16[64,256,12,64] ed:f16[] ee:f16[64,12,256,256] ef:f16[64,256,768] eg:f16[768,2304]
      eh:f32[64,256,768] ei:f32[64,256,1] ej:f32[1,1,768] ek:f32[64,256,1] el:f32[64,256]
      em:f32[64,256] en:f32[64,256,768] eo:f32[64,256,768] ep:f16[64,256,3072] eq:f16[3072,768]
      er:f16[64,256,3072] es:f16[64,256,3072] et:f16[64,256,3072] eu:f16[64,256,3072]
      ev:f16[64,256,3072] ew:f16[64,256,768] ex:f16[768,3072] ey:f32[64,256,768]
      ez:f32[64,256,1] fa:f32[1,1,768] fb:f32[64,256,1] fc:f32[64,256] fd:f32[64,256]
      fe:f32[64,256,768] ff:f32[64,256,768] fg:f16[64,256,768] fh:f16[768,768] fi:f16[64,256,12,64]
      fj:f16[64,12,256,1] fk:f16[64,12,256,256] fl:f16[64,12,256,1] fm:f16[64,256,12,64]
      fn:f16[64,256,12,64] fo:f16[] fp:f16[64,12,256,256] fq:f16[64,256,768] fr:f16[768,2304]
      fs:f32[64,256,768] ft:f32[64,256,1] fu:f32[1,1,768] fv:f32[64,256,1] fw:f32[64,256]
      fx:f32[64,256] fy:f32[64,256,768] fz:f32[64,256,768] ga:f16[64,256,3072] gb:f16[3072,768]
      gc:f16[64,256,3072] gd:f16[64,256,3072] ge:f16[64,256,3072] gf:f16[64,256,3072]
      gg:f16[64,256,3072] gh:f16[64,256,768] gi:f16[768,3072] gj:f32[64,256,768]
      gk:f32[64,256,1] gl:f32[1,1,768] gm:f32[64,256,1] gn:f32[64,256] go:f32[64,256]
      gp:f32[64,256,768] gq:f32[64,256,768]. let
      gr:f16[64,256,768] gs:f16[50257,768] gt:f16[768] gu:f16[768] gv:f16[768] gw:f16[768,3072]
        gx:f16[3072] gy:f16[3072,768] gz:f16[768] ha:f16[768] = named_call[
        call_jaxpr={ lambda ; hb:f16[50257,768] hc:f16[768] hd:f16[768] he:f16[768]
            hf:f16[768,3072] hg:f16[3072] hh:f16[3072,768] hi:f16[768] hj:f16[768]
            hk:f32[] hl:f32[64,255,50257] hm:f16[64,255,1] hn:f16[64,255,50257] ho:i32[1]
            hp:f16[64,256,768] hq:f16[768,50257] hr:f32[64,256,768] hs:f32[64,256,1]
            ht:f32[1,1,768] hu:f32[64,256,1] hv:f32[64,256] hw:f32[64,256] hx:f32[64,256,768]
            hy:f32[64,256,768] hz:f16[64,256,3072] ia:f16[3072,768] ib:f16[64,256,3072]
            ic:f16[64,256,3072] id:f16[64,256,3072] ie:f16[64,256,3072] if:f16[64,256,3072]
            ig:f16[64,256,768] ih:f16[768,3072] ii:f32[64,256,768] ij:f32[64,256,1]
            ik:f32[1,1,768] il:f32[64,256,1] im:f32[64,256] in:f32[64,256] io:f32[64,256,768]
            ip:f32[64,256,768]. let
            iq:f32[] = mul hk 1.0
            ir:f32[] = div iq 16320.0
            is:f32[64,255] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 255)
            ] ir
            it:f32[64,255] = neg is
            iu:f32[64,255,50257] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 255, 50257)
            ] it
            iv:f32[64,255,50257] = mul hl iu
            iw:f16[64,255,50257] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] iv
            ix:f16[64,255,50257] = neg iw
            iy:f16[64,255] = reduce_sum[axes=(2,)] ix
            iz:f16[64,255,1] = reshape[dimensions=None new_sizes=(64, 255, 1)] iy
            ja:f16[64,255,1] = div iz hm
            jb:f32[64,255,1] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] ja
            jc:f32[64,255] = reduce_sum[axes=(2,)] jb
            jd:f32[64,255,50257] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 255, 50257)
            ] jc
            je:f16[64,255,50257] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] jd
            jf:f16[64,255,50257] = mul je hn
            jg:f16[64,255,50257] = add_any iw jf
            jh:f16[64,256,50257] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256, 50257)
            ] 0.0
            ji:f16[64,256,50257] = scatter-add[
              dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 2), inserted_window_dims=(), scatter_dims_to_operand_dims=(1,))
              indices_are_sorted=True
              mode=GatherScatterMode.PROMISE_IN_BOUNDS
              unique_indices=True
              update_consts=()
              update_jaxpr={ lambda ; jj:f16[] jk:f16[]. let
                  jl:f16[] = add jj jk
                in (jl,) }
            ] jh ho jg
            jm:f16[50257,768] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] ji hp
            jn:f16[768,50257] = transpose[permutation=(1, 0)] jm
            jo:f16[50257,768] = transpose[permutation=(1, 0)] jn
            jp:f16[64,256,768] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] ji hq
            jq:f32[64,256,768] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] jp
            jr:f32[768] = reduce_sum[axes=(0, 1)] jq
            js:f32[1,1,768] = reshape[dimensions=None new_sizes=(1, 1, 768)] jr
            jt:f16[1,1,768] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] js
            ju:f16[768] = reshape[dimensions=None new_sizes=(768,)] jt
            jv:f32[64,256,768] = mul hr jq
            jw:f32[64,256,768] = mul hs jv
            jx:f32[768] = reduce_sum[axes=(0, 1)] jw
            jy:f32[1,1,768] = reshape[dimensions=None new_sizes=(1, 1, 768)] jx
            jz:f16[1,1,768] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] jy
            ka:f16[768] = reshape[dimensions=None new_sizes=(768,)] jz
            kb:f32[64,256,768] = mul jv ht
            kc:f32[64,256] = reduce_sum[axes=(2,)] kb
            kd:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] kc
            ke:f32[64,256,1] = mul kd hu
            kf:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] ke
            kg:f32[64,256] = mul kf hv
            kh:f32[64,256] = neg kg
            ki:f32[64,256] = mul kh hw
            kj:f32[64,256] = div kg 768.0
            kk:f32[64,256,768] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 768)
            ] kj
            kl:f32[64,256,768] = mul kk hx
            km:f32[64,256,768] = mul jq hy
            kn:f32[64,256,768] = neg km
            ko:f32[64,256] = reduce_sum[axes=(2,)] kn
            kp:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] ko
            kq:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] kp
            kr:f32[64,256] = add_any ki kq
            ks:f32[64,256] = div kr 768.0
            kt:f32[64,256,768] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 768)
            ] ks
            ku:f32[64,256,768] = add_any kl kt
            kv:f16[64,256,768] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] ku
            kw:f16[64,256,768] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] km
            kx:f16[64,256,768] = add_any kv kw
            ky:f16[768] = reduce_sum[axes=(0, 1)] kx
            kz:f16[1,1,768] = reshape[dimensions=None new_sizes=(1, 1, 768)] ky
            la:f16[768] = reduce_sum[axes=(0, 1)] kz
            lb:f16[768,3072] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] kx hz
            lc:f16[3072,768] = transpose[permutation=(1, 0)] lb
            ld:f16[768,3072] = transpose[permutation=(1, 0)] lc
            le:f16[64,256,3072] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] kx ia
            lf:f16[64,256,3072] = mul ib le
            lg:f16[64,256,3072] = mul 0.5 lf
            lh:f16[64,256,3072] = mul lg ic
            li:f16[64,256,3072] = mul lh id
            lj:f16[64,256,3072] = add_any lh li
            lk:f16[64,256,3072] = mul 0.7978515625 lj
            ll:f16[64,256,3072] = mul 0.044708251953125 lk
            lm:f16[64,256,3072] = mul ll ie
            ln:f16[64,256,3072] = add_any lk lm
            lo:f16[64,256,3072] = mul le if
            lp:f16[64,256,3072] = add_any ln lo
            lq:f16[3072] = reduce_sum[axes=(0, 1)] lp
            lr:f16[1,1,3072] = reshape[dimensions=None new_sizes=(1, 1, 3072)] lq
            ls:f16[3072] = reduce_sum[axes=(0, 1)] lr
            lt:f16[3072,768] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] lp ig
            lu:f16[768,3072] = transpose[permutation=(1, 0)] lt
            lv:f16[3072,768] = transpose[permutation=(1, 0)] lu
            lw:f16[64,256,768] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] lp ih
            lx:f32[64,256,768] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] lw
            ly:f32[768] = reduce_sum[axes=(0, 1)] lx
            lz:f32[1,1,768] = reshape[dimensions=None new_sizes=(1, 1, 768)] ly
            ma:f16[1,1,768] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] lz
            mb:f16[768] = reshape[dimensions=None new_sizes=(768,)] ma
            mc:f32[64,256,768] = mul ii lx
            md:f32[64,256,768] = mul ij mc
            me:f32[768] = reduce_sum[axes=(0, 1)] md
            mf:f32[1,1,768] = reshape[dimensions=None new_sizes=(1, 1, 768)] me
            mg:f16[1,1,768] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] mf
            mh:f16[768] = reshape[dimensions=None new_sizes=(768,)] mg
            mi:f32[64,256,768] = mul mc ik
            mj:f32[64,256] = reduce_sum[axes=(2,)] mi
            mk:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] mj
            ml:f32[64,256,1] = mul mk il
            mm:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] ml
            mn:f32[64,256] = mul mm im
            mo:f32[64,256] = neg mn
            mp:f32[64,256] = mul mo in
            mq:f32[64,256] = div mn 768.0
            mr:f32[64,256,768] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 768)
            ] mq
            ms:f32[64,256,768] = mul mr io
            mt:f32[64,256,768] = mul lx ip
            mu:f32[64,256,768] = neg mt
            mv:f32[64,256] = reduce_sum[axes=(2,)] mu
            mw:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] mv
            mx:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] mw
            my:f32[64,256] = add_any mp mx
            mz:f32[64,256] = div my 768.0
            na:f32[64,256,768] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 768)
            ] mz
            nb:f32[64,256,768] = add_any ms na
            nc:f16[64,256,768] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] nb
            nd:f16[64,256,768] = add_any kx nc
            ne:f16[64,256,768] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] mt
            nf:f16[64,256,768] = add_any nd ne
            ng:f16[50257,768] = add hb jo
            nh:f16[768] = add hc ju
            ni:f16[768] = add hd ka
            nj:f16[768] = add he la
            nk:f16[768,3072] = add hf ld
            nl:f16[3072] = add hg ls
            nm:f16[3072,768] = add hh lv
            nn:f16[768] = add hi mb
            no:f16[768] = add hj mh
          in (nf, ng, nh, ni, nj, nk, nl, nm, nn, no) }
        name=40
      ] bi bj bk bl bm bn bo bp bq cp cq cr cs ct cu cv cw cx cy cz da db dc dd de
        df dg dh di dj dk dl dm dn do dp dq dr ds dt du
      np:f16[64,256,768] nq:f16[768] nr:f16[768,768] ns:f16[2304] nt:f16[2304,768]
        nu:f16[768] nv:f16[768] nw:f16[768] nx:f16[768,3072] ny:f16[3072] nz:f16[3072,768]
        oa:f16[768] ob:f16[768] = named_call[
        call_jaxpr={ lambda ; oc:f16[64,256,768] od:f16[768] oe:f16[768,768] of:f16[2304]
            og:f16[2304,768] oh:f16[768] oi:f16[768] oj:f16[768] ok:f16[768,3072]
            ol:f16[3072] om:f16[3072,768] on:f16[768] oo:f16[768] op:f16[64,256,768]
            oq:f16[768,768] or:f16[64,256,12,64] os:f16[64,12,256,1] ot:f16[64,12,256,256]
            ou:f16[64,12,256,1] ov:f16[64,256,12,64] ow:f16[64,256,12,64] ox:f16[]
            oy:f16[64,12,256,256] oz:f16[64,256,768] pa:f16[768,2304] pb:f32[64,256,768]
            pc:f32[64,256,1] pd:f32[1,1,768] pe:f32[64,256,1] pf:f32[64,256] pg:f32[64,256]
            ph:f32[64,256,768] pi:f32[64,256,768] pj:f16[64,256,3072] pk:f16[3072,768]
            pl:f16[64,256,3072] pm:f16[64,256,3072] pn:f16[64,256,3072] po:f16[64,256,3072]
            pp:f16[64,256,3072] pq:f16[64,256,768] pr:f16[768,3072] ps:f32[64,256,768]
            pt:f32[64,256,1] pu:f32[1,1,768] pv:f32[64,256,1] pw:f32[64,256] px:f32[64,256]
            py:f32[64,256,768] pz:f32[64,256,768]. let
            qa:f16[768] = reduce_sum[axes=(0, 1)] oc
            qb:f16[1,1,768] = reshape[dimensions=None new_sizes=(1, 1, 768)] qa
            qc:f16[768] = reduce_sum[axes=(0, 1)] qb
            qd:f16[768,768] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] oc op
            qe:f16[768,768] = transpose[permutation=(1, 0)] qd
            qf:f16[768,768] = transpose[permutation=(1, 0)] qe
            qg:f16[64,256,768] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] oc oq
            qh:f16[64,256,12,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 12, 64)
            ] qg
            qi:f16[64,12,64,256] = transpose[permutation=(0, 2, 3, 1)] qh
            qj:f16[64,12,256,256] = dot_general[
              dimension_numbers=(((2,), (3,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] qi or
            qk:f16[64,12,256,256] = mul qj os
            ql:f16[64,12,256,256] = mul qk ot
            qm:f16[64,12,256] = reduce_sum[axes=(3,)] ql
            qn:f16[64,12,256,1] = reshape[
              dimensions=None
              new_sizes=(64, 12, 256, 1)
            ] qm
            qo:f16[64,12,256,1] = neg qn
            qp:f32[64,12,256,1] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] qo
            qq:f32[64,12,256] = reduce_sum[axes=(3,)] qp
            qr:f32[64,12,256,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 12, 256, 256)
            ] qq
            qs:f16[64,12,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] qr
            qt:f16[64,12,256,256] = div qj ou
            qu:f16[64,12,256,256] = add_any qs qt
            qv:f16[64,12,256,256] = mul qu ot
            qw:f16[64,12,256,64] = dot_general[
              dimension_numbers=(((2,), (1,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] qv ov
            qx:f16[64,256,12,64] = transpose[permutation=(0, 2, 1, 3)] qw
            qy:f16[64,256,768] = reshape[
              dimensions=None
              new_sizes=(64, 256, 768)
            ] qx
            qz:f16[64,256,2304] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (768, 768, 0))
            ] qy 0.0
            ra:f16[64,12,256,64] = dot_general[
              dimension_numbers=(((3,), (1,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] qv ow
            rb:f16[64,256,12,64] = transpose[permutation=(0, 2, 1, 3)] ra
            rc:f16[64,256,12,64] = div rb ox
            rd:f16[64,256,768] = reshape[
              dimensions=None
              new_sizes=(64, 256, 768)
            ] rc
            re:f16[64,256,2304] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (0, 1536, 0))
            ] rd 0.0
            rf:f16[64,256,2304] = add_any qz re
            rg:f16[64,12,64,256] = dot_general[
              dimension_numbers=(((3,), (2,)), ((0, 1), (0, 1)))
              precision=None
              preferred_element_type=None
            ] qi oy
            rh:f16[64,256,12,64] = transpose[permutation=(0, 3, 1, 2)] rg
            ri:f16[64,256,768] = reshape[
              dimensions=None
              new_sizes=(64, 256, 768)
            ] rh
            rj:f16[64,256,2304] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (1536, 0, 0))
            ] ri 0.0
            rk:f16[64,256,2304] = add_any rf rj
            rl:f16[2304] = reduce_sum[axes=(0, 1)] rk
            rm:f16[1,1,2304] = reshape[dimensions=None new_sizes=(1, 1, 2304)] rl
            rn:f16[2304] = reduce_sum[axes=(0, 1)] rm
            ro:f16[2304,768] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] rk oz
            rp:f16[768,2304] = transpose[permutation=(1, 0)] ro
            rq:f16[2304,768] = transpose[permutation=(1, 0)] rp
            rr:f16[64,256,768] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] rk pa
            rs:f32[64,256,768] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] rr
            rt:f32[768] = reduce_sum[axes=(0, 1)] rs
            ru:f32[1,1,768] = reshape[dimensions=None new_sizes=(1, 1, 768)] rt
            rv:f16[1,1,768] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] ru
            rw:f16[768] = reshape[dimensions=None new_sizes=(768,)] rv
            rx:f32[64,256,768] = mul pb rs
            ry:f32[64,256,768] = mul pc rx
            rz:f32[768] = reduce_sum[axes=(0, 1)] ry
            sa:f32[1,1,768] = reshape[dimensions=None new_sizes=(1, 1, 768)] rz
            sb:f16[1,1,768] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] sa
            sc:f16[768] = reshape[dimensions=None new_sizes=(768,)] sb
            sd:f32[64,256,768] = mul rx pd
            se:f32[64,256] = reduce_sum[axes=(2,)] sd
            sf:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] se
            sg:f32[64,256,1] = mul sf pe
            sh:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] sg
            si:f32[64,256] = mul sh pf
            sj:f32[64,256] = neg si
            sk:f32[64,256] = mul sj pg
            sl:f32[64,256] = div si 768.0
            sm:f32[64,256,768] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 768)
            ] sl
            sn:f32[64,256,768] = mul sm ph
            so:f32[64,256,768] = mul rs pi
            sp:f32[64,256,768] = neg so
            sq:f32[64,256] = reduce_sum[axes=(2,)] sp
            sr:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] sq
            ss:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] sr
            st:f32[64,256] = add_any sk ss
            su:f32[64,256] = div st 768.0
            sv:f32[64,256,768] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 768)
            ] su
            sw:f32[64,256,768] = add_any sn sv
            sx:f16[64,256,768] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] sw
            sy:f16[64,256,768] = add_any oc sx
            sz:f16[64,256,768] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] so
            ta:f16[64,256,768] = add_any sy sz
            tb:f16[768] = reduce_sum[axes=(0, 1)] ta
            tc:f16[1,1,768] = reshape[dimensions=None new_sizes=(1, 1, 768)] tb
            td:f16[768] = reduce_sum[axes=(0, 1)] tc
            te:f16[768,3072] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] ta pj
            tf:f16[3072,768] = transpose[permutation=(1, 0)] te
            tg:f16[768,3072] = transpose[permutation=(1, 0)] tf
            th:f16[64,256,3072] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] ta pk
            ti:f16[64,256,3072] = mul pl th
            tj:f16[64,256,3072] = mul 0.5 ti
            tk:f16[64,256,3072] = mul tj pm
            tl:f16[64,256,3072] = mul tk pn
            tm:f16[64,256,3072] = add_any tk tl
            tn:f16[64,256,3072] = mul 0.7978515625 tm
            to:f16[64,256,3072] = mul 0.044708251953125 tn
            tp:f16[64,256,3072] = mul to po
            tq:f16[64,256,3072] = add_any tn tp
            tr:f16[64,256,3072] = mul th pp
            ts:f16[64,256,3072] = add_any tq tr
            tt:f16[3072] = reduce_sum[axes=(0, 1)] ts
            tu:f16[1,1,3072] = reshape[dimensions=None new_sizes=(1, 1, 3072)] tt
            tv:f16[3072] = reduce_sum[axes=(0, 1)] tu
            tw:f16[3072,768] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] ts pq
            tx:f16[768,3072] = transpose[permutation=(1, 0)] tw
            ty:f16[3072,768] = transpose[permutation=(1, 0)] tx
            tz:f16[64,256,768] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] ts pr
            ua:f32[64,256,768] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] tz
            ub:f32[768] = reduce_sum[axes=(0, 1)] ua
            uc:f32[1,1,768] = reshape[dimensions=None new_sizes=(1, 1, 768)] ub
            ud:f16[1,1,768] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] uc
            ue:f16[768] = reshape[dimensions=None new_sizes=(768,)] ud
            uf:f32[64,256,768] = mul ps ua
            ug:f32[64,256,768] = mul pt uf
            uh:f32[768] = reduce_sum[axes=(0, 1)] ug
            ui:f32[1,1,768] = reshape[dimensions=None new_sizes=(1, 1, 768)] uh
            uj:f16[1,1,768] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] ui
            uk:f16[768] = reshape[dimensions=None new_sizes=(768,)] uj
            ul:f32[64,256,768] = mul uf pu
            um:f32[64,256] = reduce_sum[axes=(2,)] ul
            un:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] um
            uo:f32[64,256,1] = mul un pv
            up:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] uo
            uq:f32[64,256] = mul up pw
            ur:f32[64,256] = neg uq
            us:f32[64,256] = mul ur px
            ut:f32[64,256] = div uq 768.0
            uu:f32[64,256,768] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 768)
            ] ut
            uv:f32[64,256,768] = mul uu py
            uw:f32[64,256,768] = mul ua pz
            ux:f32[64,256,768] = neg uw
            uy:f32[64,256] = reduce_sum[axes=(2,)] ux
            uz:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] uy
            va:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] uz
            vb:f32[64,256] = add_any us va
            vc:f32[64,256] = div vb 768.0
            vd:f32[64,256,768] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 768)
            ] vc
            ve:f32[64,256,768] = add_any uv vd
            vf:f16[64,256,768] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] ve
            vg:f16[64,256,768] = add_any ta vf
            vh:f16[64,256,768] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] uw
            vi:f16[64,256,768] = add_any vg vh
            vj:f16[768] = add od qc
            vk:f16[768,768] = add oe qf
            vl:f16[2304] = add of rn
            vm:f16[2304,768] = add og rq
            vn:f16[768] = add oh rw
            vo:f16[768] = add oi sc
            vp:f16[768] = add oj td
            vq:f16[768,3072] = add ok tg
            vr:f16[3072] = add ol tv
            vs:f16[3072,768] = add om ty
            vt:f16[768] = add on ue
            vu:f16[768] = add oo uk
          in (vi, vj, vk, vl, vm, vn, vo, vp, vq, vr, vs, vt, vu) }
        name=41
      ] gr br bs bt bu bv bw bx by bz ca cb cc dv dw dx dy dz ea eb ec ed ee ef eg
        eh ei ej ek el em en eo ep eq er es et eu ev ew ex ey ez fa fb fc fd fe ff
      vv:f16[64,256,768] vw:f16[768] vx:f16[768,768] vy:f16[2304] vz:f16[2304,768]
        wa:f16[768] wb:f16[768] wc:f16[768] wd:f16[768,3072] we:f16[3072] wf:f16[3072,768]
        wg:f16[768] wh:f16[768] = named_call[
        call_jaxpr={ lambda ; wi:f16[64,256,768] wj:f16[768] wk:f16[768,768] wl:f16[2304]
            wm:f16[2304,768] wn:f16[768] wo:f16[768] wp:f16[768] wq:f16[768,3072]
            wr:f16[3072] ws:f16[3072,768] wt:f16[768] wu:f16[768] wv:f16[64,256,768]
            ww:f16[768,768] wx:f16[64,256,12,64] wy:f16[64,12,256,1] wz:f16[64,12,256,256]
            xa:f16[64,12,256,1] xb:f16[64,256,12,64] xc:f16[64,256,12,64] xd:f16[]
            xe:f16[64,12,256,256] xf:f16[64,256,768] xg:f16[768,2304] xh:f32[64,256,768]
            xi:f32[64,256,1] xj:f32[1,1,768] xk:f32[64,256,1] xl:f32[64,256] xm:f32[64,256]
            xn:f32[64,256,768] xo:f32[64,256,768] xp:f16[64,256,3072] xq:f16[3072,768]
            xr:f16[64,256,3072] xs:f16[64,256,3072] xt:f16[64,256,3072] xu:f16[64,256,3072]
            xv:f16[64,256,3072] xw:f16[64,256,768] xx:f16[768,3072] xy:f32[64,256,768]
            xz:f32[64,256,1] ya:f32[1,1,768] yb:f32[64,256,1] yc:f32[64,256] yd:f32[64,256]
            ye:f32[64,256,768] yf:f32[64,256,768]. let
            yg:f16[768] = reduce_sum[axes=(0, 1)] wi
            yh:f16[1,1,768] = reshape[dimensions=None new_sizes=(1, 1, 768)] yg
            yi:f16[768] = reduce_sum[axes=(0, 1)] yh
            yj:f16[768,768] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] wi wv
            yk:f16[768,768] = transpose[permutation=(1, 0)] yj
            yl:f16[768,768] = transpose[permutation=(1, 0)] yk
            ym:f16[64,256,768] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] wi ww
            yn:f16[64,256,12,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 12, 64)
            ] ym
            yo:f16[64,12,64,256] = transpose[permutation=(0, 2, 3, 1)] yn
            yp:f16[64,12,256,256] = dot_general[
              dimension_numbers=(((2,), (3,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] yo wx
            yq:f16[64,12,256,256] = mul yp wy
            yr:f16[64,12,256,256] = mul yq wz
            ys:f16[64,12,256] = reduce_sum[axes=(3,)] yr
            yt:f16[64,12,256,1] = reshape[
              dimensions=None
              new_sizes=(64, 12, 256, 1)
            ] ys
            yu:f16[64,12,256,1] = neg yt
            yv:f32[64,12,256,1] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] yu
            yw:f32[64,12,256] = reduce_sum[axes=(3,)] yv
            yx:f32[64,12,256,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 12, 256, 256)
            ] yw
            yy:f16[64,12,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] yx
            yz:f16[64,12,256,256] = div yp xa
            za:f16[64,12,256,256] = add_any yy yz
            zb:f16[64,12,256,256] = mul za wz
            zc:f16[64,12,256,64] = dot_general[
              dimension_numbers=(((2,), (1,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] zb xb
            zd:f16[64,256,12,64] = transpose[permutation=(0, 2, 1, 3)] zc
            ze:f16[64,256,768] = reshape[
              dimensions=None
              new_sizes=(64, 256, 768)
            ] zd
            zf:f16[64,256,2304] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (768, 768, 0))
            ] ze 0.0
            zg:f16[64,12,256,64] = dot_general[
              dimension_numbers=(((3,), (1,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] zb xc
            zh:f16[64,256,12,64] = transpose[permutation=(0, 2, 1, 3)] zg
            zi:f16[64,256,12,64] = div zh xd
            zj:f16[64,256,768] = reshape[
              dimensions=None
              new_sizes=(64, 256, 768)
            ] zi
            zk:f16[64,256,2304] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (0, 1536, 0))
            ] zj 0.0
            zl:f16[64,256,2304] = add_any zf zk
            zm:f16[64,12,64,256] = dot_general[
              dimension_numbers=(((3,), (2,)), ((0, 1), (0, 1)))
              precision=None
              preferred_element_type=None
            ] yo xe
            zn:f16[64,256,12,64] = transpose[permutation=(0, 3, 1, 2)] zm
            zo:f16[64,256,768] = reshape[
              dimensions=None
              new_sizes=(64, 256, 768)
            ] zn
            zp:f16[64,256,2304] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (1536, 0, 0))
            ] zo 0.0
            zq:f16[64,256,2304] = add_any zl zp
            zr:f16[2304] = reduce_sum[axes=(0, 1)] zq
            zs:f16[1,1,2304] = reshape[dimensions=None new_sizes=(1, 1, 2304)] zr
            zt:f16[2304] = reduce_sum[axes=(0, 1)] zs
            zu:f16[2304,768] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] zq xf
            zv:f16[768,2304] = transpose[permutation=(1, 0)] zu
            zw:f16[2304,768] = transpose[permutation=(1, 0)] zv
            zx:f16[64,256,768] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] zq xg
            zy:f32[64,256,768] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] zx
            zz:f32[768] = reduce_sum[axes=(0, 1)] zy
            baa:f32[1,1,768] = reshape[dimensions=None new_sizes=(1, 1, 768)] zz
            bab:f16[1,1,768] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] baa
            bac:f16[768] = reshape[dimensions=None new_sizes=(768,)] bab
            bad:f32[64,256,768] = mul xh zy
            bae:f32[64,256,768] = mul xi bad
            baf:f32[768] = reduce_sum[axes=(0, 1)] bae
            bag:f32[1,1,768] = reshape[dimensions=None new_sizes=(1, 1, 768)] baf
            bah:f16[1,1,768] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bag
            bai:f16[768] = reshape[dimensions=None new_sizes=(768,)] bah
            baj:f32[64,256,768] = mul bad xj
            bak:f32[64,256] = reduce_sum[axes=(2,)] baj
            bal:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] bak
            bam:f32[64,256,1] = mul bal xk
            ban:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] bam
            bao:f32[64,256] = mul ban xl
            bap:f32[64,256] = neg bao
            baq:f32[64,256] = mul bap xm
            bar:f32[64,256] = div bao 768.0
            bas:f32[64,256,768] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 768)
            ] bar
            bat:f32[64,256,768] = mul bas xn
            bau:f32[64,256,768] = mul zy xo
            bav:f32[64,256,768] = neg bau
            baw:f32[64,256] = reduce_sum[axes=(2,)] bav
            bax:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] baw
            bay:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] bax
            baz:f32[64,256] = add_any baq bay
            bba:f32[64,256] = div baz 768.0
            bbb:f32[64,256,768] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 768)
            ] bba
            bbc:f32[64,256,768] = add_any bat bbb
            bbd:f16[64,256,768] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bbc
            bbe:f16[64,256,768] = add_any wi bbd
            bbf:f16[64,256,768] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bau
            bbg:f16[64,256,768] = add_any bbe bbf
            bbh:f16[768] = reduce_sum[axes=(0, 1)] bbg
            bbi:f16[1,1,768] = reshape[dimensions=None new_sizes=(1, 1, 768)] bbh
            bbj:f16[768] = reduce_sum[axes=(0, 1)] bbi
            bbk:f16[768,3072] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] bbg xp
            bbl:f16[3072,768] = transpose[permutation=(1, 0)] bbk
            bbm:f16[768,3072] = transpose[permutation=(1, 0)] bbl
            bbn:f16[64,256,3072] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] bbg xq
            bbo:f16[64,256,3072] = mul xr bbn
            bbp:f16[64,256,3072] = mul 0.5 bbo
            bbq:f16[64,256,3072] = mul bbp xs
            bbr:f16[64,256,3072] = mul bbq xt
            bbs:f16[64,256,3072] = add_any bbq bbr
            bbt:f16[64,256,3072] = mul 0.7978515625 bbs
            bbu:f16[64,256,3072] = mul 0.044708251953125 bbt
            bbv:f16[64,256,3072] = mul bbu xu
            bbw:f16[64,256,3072] = add_any bbt bbv
            bbx:f16[64,256,3072] = mul bbn xv
            bby:f16[64,256,3072] = add_any bbw bbx
            bbz:f16[3072] = reduce_sum[axes=(0, 1)] bby
            bca:f16[1,1,3072] = reshape[dimensions=None new_sizes=(1, 1, 3072)] bbz
            bcb:f16[3072] = reduce_sum[axes=(0, 1)] bca
            bcc:f16[3072,768] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] bby xw
            bcd:f16[768,3072] = transpose[permutation=(1, 0)] bcc
            bce:f16[3072,768] = transpose[permutation=(1, 0)] bcd
            bcf:f16[64,256,768] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] bby xx
            bcg:f32[64,256,768] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bcf
            bch:f32[768] = reduce_sum[axes=(0, 1)] bcg
            bci:f32[1,1,768] = reshape[dimensions=None new_sizes=(1, 1, 768)] bch
            bcj:f16[1,1,768] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bci
            bck:f16[768] = reshape[dimensions=None new_sizes=(768,)] bcj
            bcl:f32[64,256,768] = mul xy bcg
            bcm:f32[64,256,768] = mul xz bcl
            bcn:f32[768] = reduce_sum[axes=(0, 1)] bcm
            bco:f32[1,1,768] = reshape[dimensions=None new_sizes=(1, 1, 768)] bcn
            bcp:f16[1,1,768] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bco
            bcq:f16[768] = reshape[dimensions=None new_sizes=(768,)] bcp
            bcr:f32[64,256,768] = mul bcl ya
            bcs:f32[64,256] = reduce_sum[axes=(2,)] bcr
            bct:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] bcs
            bcu:f32[64,256,1] = mul bct yb
            bcv:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] bcu
            bcw:f32[64,256] = mul bcv yc
            bcx:f32[64,256] = neg bcw
            bcy:f32[64,256] = mul bcx yd
            bcz:f32[64,256] = div bcw 768.0
            bda:f32[64,256,768] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 768)
            ] bcz
            bdb:f32[64,256,768] = mul bda ye
            bdc:f32[64,256,768] = mul bcg yf
            bdd:f32[64,256,768] = neg bdc
            bde:f32[64,256] = reduce_sum[axes=(2,)] bdd
            bdf:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] bde
            bdg:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] bdf
            bdh:f32[64,256] = add_any bcy bdg
            bdi:f32[64,256] = div bdh 768.0
            bdj:f32[64,256,768] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 768)
            ] bdi
            bdk:f32[64,256,768] = add_any bdb bdj
            bdl:f16[64,256,768] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bdk
            bdm:f16[64,256,768] = add_any bbg bdl
            bdn:f16[64,256,768] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bdc
            bdo:f16[64,256,768] = add_any bdm bdn
            bdp:f16[768] = add wj yi
            bdq:f16[768,768] = add wk yl
            bdr:f16[2304] = add wl zt
            bds:f16[2304,768] = add wm zw
            bdt:f16[768] = add wn bac
            bdu:f16[768] = add wo bai
            bdv:f16[768] = add wp bbj
            bdw:f16[768,3072] = add wq bbm
            bdx:f16[3072] = add wr bcb
            bdy:f16[3072,768] = add ws bce
            bdz:f16[768] = add wt bck
            bea:f16[768] = add wu bcq
          in (bdo, bdp, bdq, bdr, bds, bdt, bdu, bdv, bdw, bdx, bdy, bdz, bea) }
        name=42
      ] np cd ce cf cg ch ci cj ck cl cm cn co fg fh fi fj fk fl fm fn fo fp fq fr
        fs ft fu fv fw fx fy fz ga gb gc gd ge gf gg gh gi gj gk gl gm gn go gp gq
    in (gs, gt, gu, gv, gw, gx, gy, gz, ha, nq, nr, ns, nt, nu, nv, nw, nx, ny, nz,
      oa, ob, vw, vx, vy, vz, wa, wb, wc, wd, we, wf, wg, wh, vv) }
  name=4
] beb bec bed bee bef beg beh bei bej bek bel bem ben beo bep beq ber bes bet beu
  bev bew bex bey bez bfa bfb bfc bfd bfe bff bfg bfh bfi bfj bfk bfl bfm bfn bfo
  bfp bfq bfr bfs bft bfu bfv bfw bfx bfy bfz bga bgb bgc bgd bge bgf bgg bgh bgi
  bgj bgk bgl bgm bgn bgo bgp bgq bgr bgs bgt bgu bgv bgw bgx bgy bgz bha bhb bhc
  bhd bhe bhf bhg bhh bhi bhj bhk bhl bhm bhn bho bhp bhq bhr bhs bht bhu bhv bhw
  bhx bhy bhz bia bib bic bid bie bif big bih bii bij bik bil bim bin bio bip biq
  bir bis bit biu biv biw bix biy biz bja bjb bjc bjd bje bjf bjg bjh bji bjj
eqn: a:f16[50257,768] b:f16[768] c:f16[768] d:f16[768] e:f16[768,3072] f:f16[3072] g:f16[3072,768]
  h:f16[768] i:f16[768] j:f16[768] k:f16[768,768] l:f16[2304] m:f16[2304,768] n:f16[768]
  o:f16[768] p:f16[768] q:f16[768,3072] r:f16[3072] s:f16[3072,768] t:f16[768] u:f16[768]
  v:f16[768] w:f16[768,768] x:f16[2304] y:f16[2304,768] z:f16[768] ba:f16[768] bb:f16[768]
  bc:f16[768,3072] bd:f16[3072] be:f16[3072,768] bf:f16[768] bg:f16[768] bh:f16[64,256,768] = pipeline_marker[
  mark_type=end
  name=4
] bi bj bk bl bm bn bo bp bq br bs bt bu bv bw bx by bz ca cb cc cd ce cf cg ch ci
  cj ck cl cm cn co cp
input_var_mem_size
[qpg, qpd, qpe, qlj, qlk, qlh, qli, qlf, qlg, qlb, qlc, qkz, qla, qld, qle, qkx, qky, qkv, qkw, qkt, qku, qkp, qkq, qkn, qko, qkr, qks, qpb, qpc, qoz, qpa, qox, qoy, ece, ebj, ebv, ebr, eax, eau, eav, eai, eak, eao, eam, eae, dzt, dzo, eap, dzd, dze, dys, dza, dyz, dyv, dzc, dyo, dyp, dyc, dye, dyi, dyg, dxy, dxn, dxi, dyj, dwm, dwn, duy, dwj, dwd, dwh, dvt, dux, dvs, dwi, dui, dup, dtw, dty, duc, dua, dts, dth, dtc, dud, dsr, dss, dsg, dso, dsn, dsj, dsq, dsc, dsd, drq, drs, drw, dru, drm, drb, dqw, drx, dpw, dpx, doi, dpt, dpn, dpr, dpd, doh, dpc, dps, dns, dnz, dng, dni, dnm, dnk, dnc, dmr, dmm, dnn, dmb, dmc, dlq, dly, dlx, dlt, dma, dlm, dln, dla, dlc, dlg, dle, dkw, dkl, dkg, dlh]
[(50257, 768), (768,), (768,), (768,), (768, 3072), (3072,), (3072, 768), (768,), (768,), (768,), (768, 768), (2304,), (2304, 768), (768,), (768,), (768,), (768, 3072), (3072,), (3072, 768), (768,), (768,), (768,), (768, 768), (2304,), (2304, 768), (768,), (768,), (768,), (768, 3072), (3072,), (3072, 768), (768,), (768,), (), (64, 255, 50257), (64, 255, 1), (64, 255, 50257), (1,), (64, 256, 768), (768, 50257), (64, 256, 768), (64, 256, 1), (1, 1, 768), (64, 256, 1), (64, 256), (64, 256), (64, 256, 768), (64, 256, 768), (64, 256, 3072), (3072, 768), (64, 256, 3072), (64, 256, 3072), (64, 256, 3072), (64, 256, 3072), (64, 256, 3072), (64, 256, 768), (768, 3072), (64, 256, 768), (64, 256, 1), (1, 1, 768), (64, 256, 1), (64, 256), (64, 256), (64, 256, 768), (64, 256, 768), (64, 256, 768), (768, 768), (64, 256, 12, 64), (64, 12, 256, 1), (64, 12, 256, 256), (64, 12, 256, 1), (64, 256, 12, 64), (64, 256, 12, 64), (), (64, 12, 256, 256), (64, 256, 768), (768, 2304), (64, 256, 768), (64, 256, 1), (1, 1, 768), (64, 256, 1), (64, 256), (64, 256), (64, 256, 768), (64, 256, 768), (64, 256, 3072), (3072, 768), (64, 256, 3072), (64, 256, 3072), (64, 256, 3072), (64, 256, 3072), (64, 256, 3072), (64, 256, 768), (768, 3072), (64, 256, 768), (64, 256, 1), (1, 1, 768), (64, 256, 1), (64, 256), (64, 256), (64, 256, 768), (64, 256, 768), (64, 256, 768), (768, 768), (64, 256, 12, 64), (64, 12, 256, 1), (64, 12, 256, 256), (64, 12, 256, 1), (64, 256, 12, 64), (64, 256, 12, 64), (), (64, 12, 256, 256), (64, 256, 768), (768, 2304), (64, 256, 768), (64, 256, 1), (1, 1, 768), (64, 256, 1), (64, 256), (64, 256), (64, 256, 768), (64, 256, 768), (64, 256, 3072), (3072, 768), (64, 256, 3072), (64, 256, 3072), (64, 256, 3072), (64, 256, 3072), (64, 256, 3072), (64, 256, 768), (768, 3072), (64, 256, 768), (64, 256, 1), (1, 1, 768), (64, 256, 1), (64, 256), (64, 256), (64, 256, 768), (64, 256, 768)]
param_size: 3.0421734489500523 [GiB] 
jaxpr.eqns, len: 3
eqn: a:f16[768] b:f16[768,768] c:f16[2304] d:f16[2304,768] e:f16[768] f:f16[768] g:f16[768]
  h:f16[768,3072] i:f16[3072] j:f16[3072,768] k:f16[768] l:f16[768] m:f16[768] n:f16[768,768]
  o:f16[2304] p:f16[2304,768] q:f16[768] r:f16[768] s:f16[768] t:f16[768,3072] u:f16[3072]
  v:f16[3072,768] w:f16[768] x:f16[768] y:f16[768] z:f16[768,768] ba:f16[2304] bb:f16[2304,768]
  bc:f16[768] bd:f16[768] be:f16[768] bf:f16[768,3072] bg:f16[3072] bh:f16[3072,768]
  bi:f16[768] bj:f16[768] bk:f16[64,256,768] bl:f16[64,256,768] bm:f16[768,768] bn:f16[64,256,12,64]
  bo:f16[64,12,256,1] bp:f16[64,12,256,256] bq:f16[64,12,256,1] br:f16[64,256,12,64]
  bs:f16[64,256,12,64] bt:f16[] bu:f16[64,12,256,256] bv:f16[64,256,768] bw:f16[768,2304]
  bx:f32[64,256,768] by:f32[64,256,1] bz:f32[1,1,768] ca:f32[64,256,1] cb:f32[64,256]
  cc:f32[64,256] cd:f32[64,256,768] ce:f32[64,256,768] cf:f16[64,256,3072] cg:f16[3072,768]
  ch:f16[64,256,3072] ci:f16[64,256,3072] cj:f16[64,256,3072] ck:f16[64,256,3072]
  cl:f16[64,256,3072] cm:f16[64,256,768] cn:f16[768,3072] co:f32[64,256,768] cp:f32[64,256,1]
  cq:f32[1,1,768] cr:f32[64,256,1] cs:f32[64,256] ct:f32[64,256] cu:f32[64,256,768]
  cv:f32[64,256,768] cw:f16[64,256,768] cx:f16[768,768] cy:f16[64,256,12,64] cz:f16[64,12,256,1]
  da:f16[64,12,256,256] db:f16[64,12,256,1] dc:f16[64,256,12,64] dd:f16[64,256,12,64]
  de:f16[] df:f16[64,12,256,256] dg:f16[64,256,768] dh:f16[768,2304] di:f32[64,256,768]
  dj:f32[64,256,1] dk:f32[1,1,768] dl:f32[64,256,1] dm:f32[64,256] dn:f32[64,256]
  do:f32[64,256,768] dp:f32[64,256,768] dq:f16[64,256,3072] dr:f16[3072,768] ds:f16[64,256,3072]
  dt:f16[64,256,3072] du:f16[64,256,3072] dv:f16[64,256,3072] dw:f16[64,256,3072]
  dx:f16[64,256,768] dy:f16[768,3072] dz:f32[64,256,768] ea:f32[64,256,1] eb:f32[1,1,768]
  ec:f32[64,256,1] ed:f32[64,256] ee:f32[64,256] ef:f32[64,256,768] eg:f32[64,256,768]
  eh:f16[64,256,768] ei:f16[768,768] ej:f16[64,256,12,64] ek:f16[64,12,256,1] el:f16[64,12,256,256]
  em:f16[64,12,256,1] en:f16[64,256,12,64] eo:f16[64,256,12,64] ep:f16[] eq:f16[64,12,256,256]
  er:f16[64,256,768] es:f16[768,2304] et:f32[64,256,768] eu:f32[64,256,1] ev:f32[1,1,768]
  ew:f32[64,256,1] ex:f32[64,256] ey:f32[64,256] ez:f32[64,256,768] fa:f32[64,256,768]
  fb:f16[64,256,3072] fc:f16[3072,768] fd:f16[64,256,3072] fe:f16[64,256,3072] ff:f16[64,256,3072]
  fg:f16[64,256,3072] fh:f16[64,256,3072] fi:f16[64,256,768] fj:f16[768,3072] fk:f32[64,256,768]
  fl:f32[64,256,1] fm:f32[1,1,768] fn:f32[64,256,1] fo:f32[64,256] fp:f32[64,256]
  fq:f32[64,256,768] fr:f32[64,256,768] = pipeline_marker[
  mark_type=start
  name=5
] fs ft fu fv fw fx fy fz ga gb gc gd ge gf gg gh gi gj gk gl gm gn go gp gq gr gs
  gt gu gv gw gx gy gz ha hb hc hd he hf hg hh hi hj hk hl hm hn ho hp hq hr hs ht
  hu hv hw hx hy hz ia ib ic id ie if ig ih ii ij ik il im in io ip iq ir is it iu
  iv iw ix iy iz ja jb jc jd je jf jg jh ji jj jk jl jm jn jo jp jq jr js jt ju jv
  jw jx jy jz ka kb kc kd ke kf kg kh ki kj kk kl km kn ko kp kq kr ks kt ku kv kw
  kx ky kz la lb lc ld le lf lg lh li lj
eqn: a:f16[768] b:f16[768,768] c:f16[2304] d:f16[2304,768] e:f16[768] f:f16[768] g:f16[768]
  h:f16[768,3072] i:f16[3072] j:f16[3072,768] k:f16[768] l:f16[768] m:f16[768] n:f16[768,768]
  o:f16[2304] p:f16[2304,768] q:f16[768] r:f16[768] s:f16[768] t:f16[768,3072] u:f16[3072]
  v:f16[3072,768] w:f16[768] x:f16[768] y:f16[768] z:f16[768,768] ba:f16[2304] bb:f16[2304,768]
  bc:f16[768] bd:f16[768] be:f16[768] bf:f16[768,3072] bg:f16[3072] bh:f16[3072,768]
  bi:f16[768] bj:f16[768] bk:f16[64,256,768] = named_call[
  call_jaxpr={ lambda ; bl:f16[768] bm:f16[768,768] bn:f16[2304] bo:f16[2304,768]
      bp:f16[768] bq:f16[768] br:f16[768] bs:f16[768,3072] bt:f16[3072] bu:f16[3072,768]
      bv:f16[768] bw:f16[768] bx:f16[768] by:f16[768,768] bz:f16[2304] ca:f16[2304,768]
      cb:f16[768] cc:f16[768] cd:f16[768] ce:f16[768,3072] cf:f16[3072] cg:f16[3072,768]
      ch:f16[768] ci:f16[768] cj:f16[768] ck:f16[768,768] cl:f16[2304] cm:f16[2304,768]
      cn:f16[768] co:f16[768] cp:f16[768] cq:f16[768,3072] cr:f16[3072] cs:f16[3072,768]
      ct:f16[768] cu:f16[768] cv:f16[64,256,768] cw:f16[64,256,768] cx:f16[768,768]
      cy:f16[64,256,12,64] cz:f16[64,12,256,1] da:f16[64,12,256,256] db:f16[64,12,256,1]
      dc:f16[64,256,12,64] dd:f16[64,256,12,64] de:f16[] df:f16[64,12,256,256] dg:f16[64,256,768]
      dh:f16[768,2304] di:f32[64,256,768] dj:f32[64,256,1] dk:f32[1,1,768] dl:f32[64,256,1]
      dm:f32[64,256] dn:f32[64,256] do:f32[64,256,768] dp:f32[64,256,768] dq:f16[64,256,3072]
      dr:f16[3072,768] ds:f16[64,256,3072] dt:f16[64,256,3072] du:f16[64,256,3072]
      dv:f16[64,256,3072] dw:f16[64,256,3072] dx:f16[64,256,768] dy:f16[768,3072]
      dz:f32[64,256,768] ea:f32[64,256,1] eb:f32[1,1,768] ec:f32[64,256,1] ed:f32[64,256]
      ee:f32[64,256] ef:f32[64,256,768] eg:f32[64,256,768] eh:f16[64,256,768] ei:f16[768,768]
      ej:f16[64,256,12,64] ek:f16[64,12,256,1] el:f16[64,12,256,256] em:f16[64,12,256,1]
      en:f16[64,256,12,64] eo:f16[64,256,12,64] ep:f16[] eq:f16[64,12,256,256] er:f16[64,256,768]
      es:f16[768,2304] et:f32[64,256,768] eu:f32[64,256,1] ev:f32[1,1,768] ew:f32[64,256,1]
      ex:f32[64,256] ey:f32[64,256] ez:f32[64,256,768] fa:f32[64,256,768] fb:f16[64,256,3072]
      fc:f16[3072,768] fd:f16[64,256,3072] fe:f16[64,256,3072] ff:f16[64,256,3072]
      fg:f16[64,256,3072] fh:f16[64,256,3072] fi:f16[64,256,768] fj:f16[768,3072]
      fk:f32[64,256,768] fl:f32[64,256,1] fm:f32[1,1,768] fn:f32[64,256,1] fo:f32[64,256]
      fp:f32[64,256] fq:f32[64,256,768] fr:f32[64,256,768] fs:f16[64,256,768] ft:f16[768,768]
      fu:f16[64,256,12,64] fv:f16[64,12,256,1] fw:f16[64,12,256,256] fx:f16[64,12,256,1]
      fy:f16[64,256,12,64] fz:f16[64,256,12,64] ga:f16[] gb:f16[64,12,256,256] gc:f16[64,256,768]
      gd:f16[768,2304] ge:f32[64,256,768] gf:f32[64,256,1] gg:f32[1,1,768] gh:f32[64,256,1]
      gi:f32[64,256] gj:f32[64,256] gk:f32[64,256,768] gl:f32[64,256,768] gm:f16[64,256,3072]
      gn:f16[3072,768] go:f16[64,256,3072] gp:f16[64,256,3072] gq:f16[64,256,3072]
      gr:f16[64,256,3072] gs:f16[64,256,3072] gt:f16[64,256,768] gu:f16[768,3072]
      gv:f32[64,256,768] gw:f32[64,256,1] gx:f32[1,1,768] gy:f32[64,256,1] gz:f32[64,256]
      ha:f32[64,256] hb:f32[64,256,768] hc:f32[64,256,768]. let
      hd:f16[64,256,768] he:f16[768] hf:f16[768,768] hg:f16[2304] hh:f16[2304,768]
        hi:f16[768] hj:f16[768] hk:f16[768] hl:f16[768,3072] hm:f16[3072] hn:f16[3072,768]
        ho:f16[768] hp:f16[768] = named_call[
        call_jaxpr={ lambda ; hq:f16[64,256,768] hr:f16[768] hs:f16[768,768] ht:f16[2304]
            hu:f16[2304,768] hv:f16[768] hw:f16[768] hx:f16[768] hy:f16[768,3072]
            hz:f16[3072] ia:f16[3072,768] ib:f16[768] ic:f16[768] id:f16[64,256,768]
            ie:f16[768,768] if:f16[64,256,12,64] ig:f16[64,12,256,1] ih:f16[64,12,256,256]
            ii:f16[64,12,256,1] ij:f16[64,256,12,64] ik:f16[64,256,12,64] il:f16[]
            im:f16[64,12,256,256] in:f16[64,256,768] io:f16[768,2304] ip:f32[64,256,768]
            iq:f32[64,256,1] ir:f32[1,1,768] is:f32[64,256,1] it:f32[64,256] iu:f32[64,256]
            iv:f32[64,256,768] iw:f32[64,256,768] ix:f16[64,256,3072] iy:f16[3072,768]
            iz:f16[64,256,3072] ja:f16[64,256,3072] jb:f16[64,256,3072] jc:f16[64,256,3072]
            jd:f16[64,256,3072] je:f16[64,256,768] jf:f16[768,3072] jg:f32[64,256,768]
            jh:f32[64,256,1] ji:f32[1,1,768] jj:f32[64,256,1] jk:f32[64,256] jl:f32[64,256]
            jm:f32[64,256,768] jn:f32[64,256,768]. let
            jo:f16[768] = reduce_sum[axes=(0, 1)] hq
            jp:f16[1,1,768] = reshape[dimensions=None new_sizes=(1, 1, 768)] jo
            jq:f16[768] = reduce_sum[axes=(0, 1)] jp
            jr:f16[768,768] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] hq id
            js:f16[768,768] = transpose[permutation=(1, 0)] jr
            jt:f16[768,768] = transpose[permutation=(1, 0)] js
            ju:f16[64,256,768] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] hq ie
            jv:f16[64,256,12,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 12, 64)
            ] ju
            jw:f16[64,12,64,256] = transpose[permutation=(0, 2, 3, 1)] jv
            jx:f16[64,12,256,256] = dot_general[
              dimension_numbers=(((2,), (3,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] jw if
            jy:f16[64,12,256,256] = mul jx ig
            jz:f16[64,12,256,256] = mul jy ih
            ka:f16[64,12,256] = reduce_sum[axes=(3,)] jz
            kb:f16[64,12,256,1] = reshape[
              dimensions=None
              new_sizes=(64, 12, 256, 1)
            ] ka
            kc:f16[64,12,256,1] = neg kb
            kd:f32[64,12,256,1] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] kc
            ke:f32[64,12,256] = reduce_sum[axes=(3,)] kd
            kf:f32[64,12,256,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 12, 256, 256)
            ] ke
            kg:f16[64,12,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] kf
            kh:f16[64,12,256,256] = div jx ii
            ki:f16[64,12,256,256] = add_any kg kh
            kj:f16[64,12,256,256] = mul ki ih
            kk:f16[64,12,256,64] = dot_general[
              dimension_numbers=(((2,), (1,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] kj ij
            kl:f16[64,256,12,64] = transpose[permutation=(0, 2, 1, 3)] kk
            km:f16[64,256,768] = reshape[
              dimensions=None
              new_sizes=(64, 256, 768)
            ] kl
            kn:f16[64,256,2304] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (768, 768, 0))
            ] km 0.0
            ko:f16[64,12,256,64] = dot_general[
              dimension_numbers=(((3,), (1,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] kj ik
            kp:f16[64,256,12,64] = transpose[permutation=(0, 2, 1, 3)] ko
            kq:f16[64,256,12,64] = div kp il
            kr:f16[64,256,768] = reshape[
              dimensions=None
              new_sizes=(64, 256, 768)
            ] kq
            ks:f16[64,256,2304] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (0, 1536, 0))
            ] kr 0.0
            kt:f16[64,256,2304] = add_any kn ks
            ku:f16[64,12,64,256] = dot_general[
              dimension_numbers=(((3,), (2,)), ((0, 1), (0, 1)))
              precision=None
              preferred_element_type=None
            ] jw im
            kv:f16[64,256,12,64] = transpose[permutation=(0, 3, 1, 2)] ku
            kw:f16[64,256,768] = reshape[
              dimensions=None
              new_sizes=(64, 256, 768)
            ] kv
            kx:f16[64,256,2304] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (1536, 0, 0))
            ] kw 0.0
            ky:f16[64,256,2304] = add_any kt kx
            kz:f16[2304] = reduce_sum[axes=(0, 1)] ky
            la:f16[1,1,2304] = reshape[dimensions=None new_sizes=(1, 1, 2304)] kz
            lb:f16[2304] = reduce_sum[axes=(0, 1)] la
            lc:f16[2304,768] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] ky in
            ld:f16[768,2304] = transpose[permutation=(1, 0)] lc
            le:f16[2304,768] = transpose[permutation=(1, 0)] ld
            lf:f16[64,256,768] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] ky io
            lg:f32[64,256,768] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] lf
            lh:f32[768] = reduce_sum[axes=(0, 1)] lg
            li:f32[1,1,768] = reshape[dimensions=None new_sizes=(1, 1, 768)] lh
            lj:f16[1,1,768] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] li
            lk:f16[768] = reshape[dimensions=None new_sizes=(768,)] lj
            ll:f32[64,256,768] = mul ip lg
            lm:f32[64,256,768] = mul iq ll
            ln:f32[768] = reduce_sum[axes=(0, 1)] lm
            lo:f32[1,1,768] = reshape[dimensions=None new_sizes=(1, 1, 768)] ln
            lp:f16[1,1,768] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] lo
            lq:f16[768] = reshape[dimensions=None new_sizes=(768,)] lp
            lr:f32[64,256,768] = mul ll ir
            ls:f32[64,256] = reduce_sum[axes=(2,)] lr
            lt:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] ls
            lu:f32[64,256,1] = mul lt is
            lv:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] lu
            lw:f32[64,256] = mul lv it
            lx:f32[64,256] = neg lw
            ly:f32[64,256] = mul lx iu
            lz:f32[64,256] = div lw 768.0
            ma:f32[64,256,768] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 768)
            ] lz
            mb:f32[64,256,768] = mul ma iv
            mc:f32[64,256,768] = mul lg iw
            md:f32[64,256,768] = neg mc
            me:f32[64,256] = reduce_sum[axes=(2,)] md
            mf:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] me
            mg:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] mf
            mh:f32[64,256] = add_any ly mg
            mi:f32[64,256] = div mh 768.0
            mj:f32[64,256,768] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 768)
            ] mi
            mk:f32[64,256,768] = add_any mb mj
            ml:f16[64,256,768] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] mk
            mm:f16[64,256,768] = add_any hq ml
            mn:f16[64,256,768] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] mc
            mo:f16[64,256,768] = add_any mm mn
            mp:f16[768] = reduce_sum[axes=(0, 1)] mo
            mq:f16[1,1,768] = reshape[dimensions=None new_sizes=(1, 1, 768)] mp
            mr:f16[768] = reduce_sum[axes=(0, 1)] mq
            ms:f16[768,3072] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] mo ix
            mt:f16[3072,768] = transpose[permutation=(1, 0)] ms
            mu:f16[768,3072] = transpose[permutation=(1, 0)] mt
            mv:f16[64,256,3072] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] mo iy
            mw:f16[64,256,3072] = mul iz mv
            mx:f16[64,256,3072] = mul 0.5 mw
            my:f16[64,256,3072] = mul mx ja
            mz:f16[64,256,3072] = mul my jb
            na:f16[64,256,3072] = add_any my mz
            nb:f16[64,256,3072] = mul 0.7978515625 na
            nc:f16[64,256,3072] = mul 0.044708251953125 nb
            nd:f16[64,256,3072] = mul nc jc
            ne:f16[64,256,3072] = add_any nb nd
            nf:f16[64,256,3072] = mul mv jd
            ng:f16[64,256,3072] = add_any ne nf
            nh:f16[3072] = reduce_sum[axes=(0, 1)] ng
            ni:f16[1,1,3072] = reshape[dimensions=None new_sizes=(1, 1, 3072)] nh
            nj:f16[3072] = reduce_sum[axes=(0, 1)] ni
            nk:f16[3072,768] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] ng je
            nl:f16[768,3072] = transpose[permutation=(1, 0)] nk
            nm:f16[3072,768] = transpose[permutation=(1, 0)] nl
            nn:f16[64,256,768] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] ng jf
            no:f32[64,256,768] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] nn
            np:f32[768] = reduce_sum[axes=(0, 1)] no
            nq:f32[1,1,768] = reshape[dimensions=None new_sizes=(1, 1, 768)] np
            nr:f16[1,1,768] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] nq
            ns:f16[768] = reshape[dimensions=None new_sizes=(768,)] nr
            nt:f32[64,256,768] = mul jg no
            nu:f32[64,256,768] = mul jh nt
            nv:f32[768] = reduce_sum[axes=(0, 1)] nu
            nw:f32[1,1,768] = reshape[dimensions=None new_sizes=(1, 1, 768)] nv
            nx:f16[1,1,768] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] nw
            ny:f16[768] = reshape[dimensions=None new_sizes=(768,)] nx
            nz:f32[64,256,768] = mul nt ji
            oa:f32[64,256] = reduce_sum[axes=(2,)] nz
            ob:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] oa
            oc:f32[64,256,1] = mul ob jj
            od:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] oc
            oe:f32[64,256] = mul od jk
            of:f32[64,256] = neg oe
            og:f32[64,256] = mul of jl
            oh:f32[64,256] = div oe 768.0
            oi:f32[64,256,768] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 768)
            ] oh
            oj:f32[64,256,768] = mul oi jm
            ok:f32[64,256,768] = mul no jn
            ol:f32[64,256,768] = neg ok
            om:f32[64,256] = reduce_sum[axes=(2,)] ol
            on:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] om
            oo:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] on
            op:f32[64,256] = add_any og oo
            oq:f32[64,256] = div op 768.0
            or:f32[64,256,768] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 768)
            ] oq
            os:f32[64,256,768] = add_any oj or
            ot:f16[64,256,768] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] os
            ou:f16[64,256,768] = add_any mo ot
            ov:f16[64,256,768] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] ok
            ow:f16[64,256,768] = add_any ou ov
            ox:f16[768] = add hr jq
            oy:f16[768,768] = add hs jt
            oz:f16[2304] = add ht lb
            pa:f16[2304,768] = add hu le
            pb:f16[768] = add hv lk
            pc:f16[768] = add hw lq
            pd:f16[768] = add hx mr
            pe:f16[768,3072] = add hy mu
            pf:f16[3072] = add hz nj
            pg:f16[3072,768] = add ia nm
            ph:f16[768] = add ib ns
            pi:f16[768] = add ic ny
          in (ow, ox, oy, oz, pa, pb, pc, pd, pe, pf, pg, ph, pi) }
        name=50
      ] cv bl bm bn bo bp bq br bs bt bu bv bw cw cx cy cz da db dc dd de df dg dh
        di dj dk dl dm dn do dp dq dr ds dt du dv dw dx dy dz ea eb ec ed ee ef eg
      pj:f16[64,256,768] pk:f16[768] pl:f16[768,768] pm:f16[2304] pn:f16[2304,768]
        po:f16[768] pp:f16[768] pq:f16[768] pr:f16[768,3072] ps:f16[3072] pt:f16[3072,768]
        pu:f16[768] pv:f16[768] = named_call[
        call_jaxpr={ lambda ; pw:f16[64,256,768] px:f16[768] py:f16[768,768] pz:f16[2304]
            qa:f16[2304,768] qb:f16[768] qc:f16[768] qd:f16[768] qe:f16[768,3072]
            qf:f16[3072] qg:f16[3072,768] qh:f16[768] qi:f16[768] qj:f16[64,256,768]
            qk:f16[768,768] ql:f16[64,256,12,64] qm:f16[64,12,256,1] qn:f16[64,12,256,256]
            qo:f16[64,12,256,1] qp:f16[64,256,12,64] qq:f16[64,256,12,64] qr:f16[]
            qs:f16[64,12,256,256] qt:f16[64,256,768] qu:f16[768,2304] qv:f32[64,256,768]
            qw:f32[64,256,1] qx:f32[1,1,768] qy:f32[64,256,1] qz:f32[64,256] ra:f32[64,256]
            rb:f32[64,256,768] rc:f32[64,256,768] rd:f16[64,256,3072] re:f16[3072,768]
            rf:f16[64,256,3072] rg:f16[64,256,3072] rh:f16[64,256,3072] ri:f16[64,256,3072]
            rj:f16[64,256,3072] rk:f16[64,256,768] rl:f16[768,3072] rm:f32[64,256,768]
            rn:f32[64,256,1] ro:f32[1,1,768] rp:f32[64,256,1] rq:f32[64,256] rr:f32[64,256]
            rs:f32[64,256,768] rt:f32[64,256,768]. let
            ru:f16[768] = reduce_sum[axes=(0, 1)] pw
            rv:f16[1,1,768] = reshape[dimensions=None new_sizes=(1, 1, 768)] ru
            rw:f16[768] = reduce_sum[axes=(0, 1)] rv
            rx:f16[768,768] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] pw qj
            ry:f16[768,768] = transpose[permutation=(1, 0)] rx
            rz:f16[768,768] = transpose[permutation=(1, 0)] ry
            sa:f16[64,256,768] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] pw qk
            sb:f16[64,256,12,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 12, 64)
            ] sa
            sc:f16[64,12,64,256] = transpose[permutation=(0, 2, 3, 1)] sb
            sd:f16[64,12,256,256] = dot_general[
              dimension_numbers=(((2,), (3,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] sc ql
            se:f16[64,12,256,256] = mul sd qm
            sf:f16[64,12,256,256] = mul se qn
            sg:f16[64,12,256] = reduce_sum[axes=(3,)] sf
            sh:f16[64,12,256,1] = reshape[
              dimensions=None
              new_sizes=(64, 12, 256, 1)
            ] sg
            si:f16[64,12,256,1] = neg sh
            sj:f32[64,12,256,1] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] si
            sk:f32[64,12,256] = reduce_sum[axes=(3,)] sj
            sl:f32[64,12,256,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 12, 256, 256)
            ] sk
            sm:f16[64,12,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] sl
            sn:f16[64,12,256,256] = div sd qo
            so:f16[64,12,256,256] = add_any sm sn
            sp:f16[64,12,256,256] = mul so qn
            sq:f16[64,12,256,64] = dot_general[
              dimension_numbers=(((2,), (1,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] sp qp
            sr:f16[64,256,12,64] = transpose[permutation=(0, 2, 1, 3)] sq
            ss:f16[64,256,768] = reshape[
              dimensions=None
              new_sizes=(64, 256, 768)
            ] sr
            st:f16[64,256,2304] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (768, 768, 0))
            ] ss 0.0
            su:f16[64,12,256,64] = dot_general[
              dimension_numbers=(((3,), (1,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] sp qq
            sv:f16[64,256,12,64] = transpose[permutation=(0, 2, 1, 3)] su
            sw:f16[64,256,12,64] = div sv qr
            sx:f16[64,256,768] = reshape[
              dimensions=None
              new_sizes=(64, 256, 768)
            ] sw
            sy:f16[64,256,2304] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (0, 1536, 0))
            ] sx 0.0
            sz:f16[64,256,2304] = add_any st sy
            ta:f16[64,12,64,256] = dot_general[
              dimension_numbers=(((3,), (2,)), ((0, 1), (0, 1)))
              precision=None
              preferred_element_type=None
            ] sc qs
            tb:f16[64,256,12,64] = transpose[permutation=(0, 3, 1, 2)] ta
            tc:f16[64,256,768] = reshape[
              dimensions=None
              new_sizes=(64, 256, 768)
            ] tb
            td:f16[64,256,2304] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (1536, 0, 0))
            ] tc 0.0
            te:f16[64,256,2304] = add_any sz td
            tf:f16[2304] = reduce_sum[axes=(0, 1)] te
            tg:f16[1,1,2304] = reshape[dimensions=None new_sizes=(1, 1, 2304)] tf
            th:f16[2304] = reduce_sum[axes=(0, 1)] tg
            ti:f16[2304,768] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] te qt
            tj:f16[768,2304] = transpose[permutation=(1, 0)] ti
            tk:f16[2304,768] = transpose[permutation=(1, 0)] tj
            tl:f16[64,256,768] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] te qu
            tm:f32[64,256,768] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] tl
            tn:f32[768] = reduce_sum[axes=(0, 1)] tm
            to:f32[1,1,768] = reshape[dimensions=None new_sizes=(1, 1, 768)] tn
            tp:f16[1,1,768] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] to
            tq:f16[768] = reshape[dimensions=None new_sizes=(768,)] tp
            tr:f32[64,256,768] = mul qv tm
            ts:f32[64,256,768] = mul qw tr
            tt:f32[768] = reduce_sum[axes=(0, 1)] ts
            tu:f32[1,1,768] = reshape[dimensions=None new_sizes=(1, 1, 768)] tt
            tv:f16[1,1,768] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] tu
            tw:f16[768] = reshape[dimensions=None new_sizes=(768,)] tv
            tx:f32[64,256,768] = mul tr qx
            ty:f32[64,256] = reduce_sum[axes=(2,)] tx
            tz:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] ty
            ua:f32[64,256,1] = mul tz qy
            ub:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] ua
            uc:f32[64,256] = mul ub qz
            ud:f32[64,256] = neg uc
            ue:f32[64,256] = mul ud ra
            uf:f32[64,256] = div uc 768.0
            ug:f32[64,256,768] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 768)
            ] uf
            uh:f32[64,256,768] = mul ug rb
            ui:f32[64,256,768] = mul tm rc
            uj:f32[64,256,768] = neg ui
            uk:f32[64,256] = reduce_sum[axes=(2,)] uj
            ul:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] uk
            um:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] ul
            un:f32[64,256] = add_any ue um
            uo:f32[64,256] = div un 768.0
            up:f32[64,256,768] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 768)
            ] uo
            uq:f32[64,256,768] = add_any uh up
            ur:f16[64,256,768] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] uq
            us:f16[64,256,768] = add_any pw ur
            ut:f16[64,256,768] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] ui
            uu:f16[64,256,768] = add_any us ut
            uv:f16[768] = reduce_sum[axes=(0, 1)] uu
            uw:f16[1,1,768] = reshape[dimensions=None new_sizes=(1, 1, 768)] uv
            ux:f16[768] = reduce_sum[axes=(0, 1)] uw
            uy:f16[768,3072] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] uu rd
            uz:f16[3072,768] = transpose[permutation=(1, 0)] uy
            va:f16[768,3072] = transpose[permutation=(1, 0)] uz
            vb:f16[64,256,3072] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] uu re
            vc:f16[64,256,3072] = mul rf vb
            vd:f16[64,256,3072] = mul 0.5 vc
            ve:f16[64,256,3072] = mul vd rg
            vf:f16[64,256,3072] = mul ve rh
            vg:f16[64,256,3072] = add_any ve vf
            vh:f16[64,256,3072] = mul 0.7978515625 vg
            vi:f16[64,256,3072] = mul 0.044708251953125 vh
            vj:f16[64,256,3072] = mul vi ri
            vk:f16[64,256,3072] = add_any vh vj
            vl:f16[64,256,3072] = mul vb rj
            vm:f16[64,256,3072] = add_any vk vl
            vn:f16[3072] = reduce_sum[axes=(0, 1)] vm
            vo:f16[1,1,3072] = reshape[dimensions=None new_sizes=(1, 1, 3072)] vn
            vp:f16[3072] = reduce_sum[axes=(0, 1)] vo
            vq:f16[3072,768] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] vm rk
            vr:f16[768,3072] = transpose[permutation=(1, 0)] vq
            vs:f16[3072,768] = transpose[permutation=(1, 0)] vr
            vt:f16[64,256,768] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] vm rl
            vu:f32[64,256,768] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] vt
            vv:f32[768] = reduce_sum[axes=(0, 1)] vu
            vw:f32[1,1,768] = reshape[dimensions=None new_sizes=(1, 1, 768)] vv
            vx:f16[1,1,768] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] vw
            vy:f16[768] = reshape[dimensions=None new_sizes=(768,)] vx
            vz:f32[64,256,768] = mul rm vu
            wa:f32[64,256,768] = mul rn vz
            wb:f32[768] = reduce_sum[axes=(0, 1)] wa
            wc:f32[1,1,768] = reshape[dimensions=None new_sizes=(1, 1, 768)] wb
            wd:f16[1,1,768] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] wc
            we:f16[768] = reshape[dimensions=None new_sizes=(768,)] wd
            wf:f32[64,256,768] = mul vz ro
            wg:f32[64,256] = reduce_sum[axes=(2,)] wf
            wh:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] wg
            wi:f32[64,256,1] = mul wh rp
            wj:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] wi
            wk:f32[64,256] = mul wj rq
            wl:f32[64,256] = neg wk
            wm:f32[64,256] = mul wl rr
            wn:f32[64,256] = div wk 768.0
            wo:f32[64,256,768] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 768)
            ] wn
            wp:f32[64,256,768] = mul wo rs
            wq:f32[64,256,768] = mul vu rt
            wr:f32[64,256,768] = neg wq
            ws:f32[64,256] = reduce_sum[axes=(2,)] wr
            wt:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] ws
            wu:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] wt
            wv:f32[64,256] = add_any wm wu
            ww:f32[64,256] = div wv 768.0
            wx:f32[64,256,768] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 768)
            ] ww
            wy:f32[64,256,768] = add_any wp wx
            wz:f16[64,256,768] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] wy
            xa:f16[64,256,768] = add_any uu wz
            xb:f16[64,256,768] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] wq
            xc:f16[64,256,768] = add_any xa xb
            xd:f16[768] = add px rw
            xe:f16[768,768] = add py rz
            xf:f16[2304] = add pz th
            xg:f16[2304,768] = add qa tk
            xh:f16[768] = add qb tq
            xi:f16[768] = add qc tw
            xj:f16[768] = add qd ux
            xk:f16[768,3072] = add qe va
            xl:f16[3072] = add qf vp
            xm:f16[3072,768] = add qg vs
            xn:f16[768] = add qh vy
            xo:f16[768] = add qi we
          in (xc, xd, xe, xf, xg, xh, xi, xj, xk, xl, xm, xn, xo) }
        name=51
      ] hd bx by bz ca cb cc cd ce cf cg ch ci eh ei ej ek el em en eo ep eq er es
        et eu ev ew ex ey ez fa fb fc fd fe ff fg fh fi fj fk fl fm fn fo fp fq fr
      xp:f16[64,256,768] xq:f16[768] xr:f16[768,768] xs:f16[2304] xt:f16[2304,768]
        xu:f16[768] xv:f16[768] xw:f16[768] xx:f16[768,3072] xy:f16[3072] xz:f16[3072,768]
        ya:f16[768] yb:f16[768] = named_call[
        call_jaxpr={ lambda ; yc:f16[64,256,768] yd:f16[768] ye:f16[768,768] yf:f16[2304]
            yg:f16[2304,768] yh:f16[768] yi:f16[768] yj:f16[768] yk:f16[768,3072]
            yl:f16[3072] ym:f16[3072,768] yn:f16[768] yo:f16[768] yp:f16[64,256,768]
            yq:f16[768,768] yr:f16[64,256,12,64] ys:f16[64,12,256,1] yt:f16[64,12,256,256]
            yu:f16[64,12,256,1] yv:f16[64,256,12,64] yw:f16[64,256,12,64] yx:f16[]
            yy:f16[64,12,256,256] yz:f16[64,256,768] za:f16[768,2304] zb:f32[64,256,768]
            zc:f32[64,256,1] zd:f32[1,1,768] ze:f32[64,256,1] zf:f32[64,256] zg:f32[64,256]
            zh:f32[64,256,768] zi:f32[64,256,768] zj:f16[64,256,3072] zk:f16[3072,768]
            zl:f16[64,256,3072] zm:f16[64,256,3072] zn:f16[64,256,3072] zo:f16[64,256,3072]
            zp:f16[64,256,3072] zq:f16[64,256,768] zr:f16[768,3072] zs:f32[64,256,768]
            zt:f32[64,256,1] zu:f32[1,1,768] zv:f32[64,256,1] zw:f32[64,256] zx:f32[64,256]
            zy:f32[64,256,768] zz:f32[64,256,768]. let
            baa:f16[768] = reduce_sum[axes=(0, 1)] yc
            bab:f16[1,1,768] = reshape[dimensions=None new_sizes=(1, 1, 768)] baa
            bac:f16[768] = reduce_sum[axes=(0, 1)] bab
            bad:f16[768,768] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] yc yp
            bae:f16[768,768] = transpose[permutation=(1, 0)] bad
            baf:f16[768,768] = transpose[permutation=(1, 0)] bae
            bag:f16[64,256,768] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] yc yq
            bah:f16[64,256,12,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 12, 64)
            ] bag
            bai:f16[64,12,64,256] = transpose[permutation=(0, 2, 3, 1)] bah
            baj:f16[64,12,256,256] = dot_general[
              dimension_numbers=(((2,), (3,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] bai yr
            bak:f16[64,12,256,256] = mul baj ys
            bal:f16[64,12,256,256] = mul bak yt
            bam:f16[64,12,256] = reduce_sum[axes=(3,)] bal
            ban:f16[64,12,256,1] = reshape[
              dimensions=None
              new_sizes=(64, 12, 256, 1)
            ] bam
            bao:f16[64,12,256,1] = neg ban
            bap:f32[64,12,256,1] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bao
            baq:f32[64,12,256] = reduce_sum[axes=(3,)] bap
            bar:f32[64,12,256,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 12, 256, 256)
            ] baq
            bas:f16[64,12,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bar
            bat:f16[64,12,256,256] = div baj yu
            bau:f16[64,12,256,256] = add_any bas bat
            bav:f16[64,12,256,256] = mul bau yt
            baw:f16[64,12,256,64] = dot_general[
              dimension_numbers=(((2,), (1,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] bav yv
            bax:f16[64,256,12,64] = transpose[permutation=(0, 2, 1, 3)] baw
            bay:f16[64,256,768] = reshape[
              dimensions=None
              new_sizes=(64, 256, 768)
            ] bax
            baz:f16[64,256,2304] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (768, 768, 0))
            ] bay 0.0
            bba:f16[64,12,256,64] = dot_general[
              dimension_numbers=(((3,), (1,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] bav yw
            bbb:f16[64,256,12,64] = transpose[permutation=(0, 2, 1, 3)] bba
            bbc:f16[64,256,12,64] = div bbb yx
            bbd:f16[64,256,768] = reshape[
              dimensions=None
              new_sizes=(64, 256, 768)
            ] bbc
            bbe:f16[64,256,2304] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (0, 1536, 0))
            ] bbd 0.0
            bbf:f16[64,256,2304] = add_any baz bbe
            bbg:f16[64,12,64,256] = dot_general[
              dimension_numbers=(((3,), (2,)), ((0, 1), (0, 1)))
              precision=None
              preferred_element_type=None
            ] bai yy
            bbh:f16[64,256,12,64] = transpose[permutation=(0, 3, 1, 2)] bbg
            bbi:f16[64,256,768] = reshape[
              dimensions=None
              new_sizes=(64, 256, 768)
            ] bbh
            bbj:f16[64,256,2304] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (1536, 0, 0))
            ] bbi 0.0
            bbk:f16[64,256,2304] = add_any bbf bbj
            bbl:f16[2304] = reduce_sum[axes=(0, 1)] bbk
            bbm:f16[1,1,2304] = reshape[dimensions=None new_sizes=(1, 1, 2304)] bbl
            bbn:f16[2304] = reduce_sum[axes=(0, 1)] bbm
            bbo:f16[2304,768] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] bbk yz
            bbp:f16[768,2304] = transpose[permutation=(1, 0)] bbo
            bbq:f16[2304,768] = transpose[permutation=(1, 0)] bbp
            bbr:f16[64,256,768] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] bbk za
            bbs:f32[64,256,768] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bbr
            bbt:f32[768] = reduce_sum[axes=(0, 1)] bbs
            bbu:f32[1,1,768] = reshape[dimensions=None new_sizes=(1, 1, 768)] bbt
            bbv:f16[1,1,768] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bbu
            bbw:f16[768] = reshape[dimensions=None new_sizes=(768,)] bbv
            bbx:f32[64,256,768] = mul zb bbs
            bby:f32[64,256,768] = mul zc bbx
            bbz:f32[768] = reduce_sum[axes=(0, 1)] bby
            bca:f32[1,1,768] = reshape[dimensions=None new_sizes=(1, 1, 768)] bbz
            bcb:f16[1,1,768] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bca
            bcc:f16[768] = reshape[dimensions=None new_sizes=(768,)] bcb
            bcd:f32[64,256,768] = mul bbx zd
            bce:f32[64,256] = reduce_sum[axes=(2,)] bcd
            bcf:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] bce
            bcg:f32[64,256,1] = mul bcf ze
            bch:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] bcg
            bci:f32[64,256] = mul bch zf
            bcj:f32[64,256] = neg bci
            bck:f32[64,256] = mul bcj zg
            bcl:f32[64,256] = div bci 768.0
            bcm:f32[64,256,768] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 768)
            ] bcl
            bcn:f32[64,256,768] = mul bcm zh
            bco:f32[64,256,768] = mul bbs zi
            bcp:f32[64,256,768] = neg bco
            bcq:f32[64,256] = reduce_sum[axes=(2,)] bcp
            bcr:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] bcq
            bcs:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] bcr
            bct:f32[64,256] = add_any bck bcs
            bcu:f32[64,256] = div bct 768.0
            bcv:f32[64,256,768] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 768)
            ] bcu
            bcw:f32[64,256,768] = add_any bcn bcv
            bcx:f16[64,256,768] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bcw
            bcy:f16[64,256,768] = add_any yc bcx
            bcz:f16[64,256,768] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bco
            bda:f16[64,256,768] = add_any bcy bcz
            bdb:f16[768] = reduce_sum[axes=(0, 1)] bda
            bdc:f16[1,1,768] = reshape[dimensions=None new_sizes=(1, 1, 768)] bdb
            bdd:f16[768] = reduce_sum[axes=(0, 1)] bdc
            bde:f16[768,3072] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] bda zj
            bdf:f16[3072,768] = transpose[permutation=(1, 0)] bde
            bdg:f16[768,3072] = transpose[permutation=(1, 0)] bdf
            bdh:f16[64,256,3072] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] bda zk
            bdi:f16[64,256,3072] = mul zl bdh
            bdj:f16[64,256,3072] = mul 0.5 bdi
            bdk:f16[64,256,3072] = mul bdj zm
            bdl:f16[64,256,3072] = mul bdk zn
            bdm:f16[64,256,3072] = add_any bdk bdl
            bdn:f16[64,256,3072] = mul 0.7978515625 bdm
            bdo:f16[64,256,3072] = mul 0.044708251953125 bdn
            bdp:f16[64,256,3072] = mul bdo zo
            bdq:f16[64,256,3072] = add_any bdn bdp
            bdr:f16[64,256,3072] = mul bdh zp
            bds:f16[64,256,3072] = add_any bdq bdr
            bdt:f16[3072] = reduce_sum[axes=(0, 1)] bds
            bdu:f16[1,1,3072] = reshape[dimensions=None new_sizes=(1, 1, 3072)] bdt
            bdv:f16[3072] = reduce_sum[axes=(0, 1)] bdu
            bdw:f16[3072,768] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] bds zq
            bdx:f16[768,3072] = transpose[permutation=(1, 0)] bdw
            bdy:f16[3072,768] = transpose[permutation=(1, 0)] bdx
            bdz:f16[64,256,768] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] bds zr
            bea:f32[64,256,768] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bdz
            beb:f32[768] = reduce_sum[axes=(0, 1)] bea
            bec:f32[1,1,768] = reshape[dimensions=None new_sizes=(1, 1, 768)] beb
            bed:f16[1,1,768] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bec
            bee:f16[768] = reshape[dimensions=None new_sizes=(768,)] bed
            bef:f32[64,256,768] = mul zs bea
            beg:f32[64,256,768] = mul zt bef
            beh:f32[768] = reduce_sum[axes=(0, 1)] beg
            bei:f32[1,1,768] = reshape[dimensions=None new_sizes=(1, 1, 768)] beh
            bej:f16[1,1,768] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bei
            bek:f16[768] = reshape[dimensions=None new_sizes=(768,)] bej
            bel:f32[64,256,768] = mul bef zu
            bem:f32[64,256] = reduce_sum[axes=(2,)] bel
            ben:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] bem
            beo:f32[64,256,1] = mul ben zv
            bep:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] beo
            beq:f32[64,256] = mul bep zw
            ber:f32[64,256] = neg beq
            bes:f32[64,256] = mul ber zx
            bet:f32[64,256] = div beq 768.0
            beu:f32[64,256,768] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 768)
            ] bet
            bev:f32[64,256,768] = mul beu zy
            bew:f32[64,256,768] = mul bea zz
            bex:f32[64,256,768] = neg bew
            bey:f32[64,256] = reduce_sum[axes=(2,)] bex
            bez:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] bey
            bfa:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] bez
            bfb:f32[64,256] = add_any bes bfa
            bfc:f32[64,256] = div bfb 768.0
            bfd:f32[64,256,768] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 768)
            ] bfc
            bfe:f32[64,256,768] = add_any bev bfd
            bff:f16[64,256,768] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bfe
            bfg:f16[64,256,768] = add_any bda bff
            bfh:f16[64,256,768] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bew
            bfi:f16[64,256,768] = add_any bfg bfh
            bfj:f16[768] = add yd bac
            bfk:f16[768,768] = add ye baf
            bfl:f16[2304] = add yf bbn
            bfm:f16[2304,768] = add yg bbq
            bfn:f16[768] = add yh bbw
            bfo:f16[768] = add yi bcc
            bfp:f16[768] = add yj bdd
            bfq:f16[768,3072] = add yk bdg
            bfr:f16[3072] = add yl bdv
            bfs:f16[3072,768] = add ym bdy
            bft:f16[768] = add yn bee
            bfu:f16[768] = add yo bek
          in (bfi, bfj, bfk, bfl, bfm, bfn, bfo, bfp, bfq, bfr, bfs, bft, bfu) }
        name=52
      ] pj cj ck cl cm cn co cp cq cr cs ct cu fs ft fu fv fw fx fy fz ga gb gc gd
        ge gf gg gh gi gj gk gl gm gn go gp gq gr gs gt gu gv gw gx gy gz ha hb hc
    in (he, hf, hg, hh, hi, hj, hk, hl, hm, hn, ho, hp, pk, pl, pm, pn, po, pp, pq,
      pr, ps, pt, pu, pv, xq, xr, xs, xt, xu, xv, xw, xx, xy, xz, ya, yb, xp) }
  name=5
] bfv bfw bfx bfy bfz bga bgb bgc bgd bge bgf bgg bgh bgi bgj bgk bgl bgm bgn bgo
  bgp bgq bgr bgs bgt bgu bgv bgw bgx bgy bgz bha bhb bhc bhd bhe bhf bhg bhh bhi
  bhj bhk bhl bhm bhn bho bhp bhq bhr bhs bht bhu bhv bhw bhx bhy bhz bia bib bic
  bid bie bif big bih bii bij bik bil bim bin bio bip biq bir bis bit biu biv biw
  bix biy biz bja bjb bjc bjd bje bjf bjg bjh bji bjj bjk bjl bjm bjn bjo bjp bjq
  bjr bjs bjt bju bjv bjw bjx bjy bjz bka bkb bkc bkd bke bkf bkg bkh bki bkj bkk
  bkl bkm bkn bko bkp bkq bkr bks bkt bku bkv bkw bkx bky bkz bla blb blc bld ble
  blf blg blh bli blj blk bll blm
eqn: a:f16[768] b:f16[768,768] c:f16[2304] d:f16[2304,768] e:f16[768] f:f16[768] g:f16[768]
  h:f16[768,3072] i:f16[3072] j:f16[3072,768] k:f16[768] l:f16[768] m:f16[768] n:f16[768,768]
  o:f16[2304] p:f16[2304,768] q:f16[768] r:f16[768] s:f16[768] t:f16[768,3072] u:f16[3072]
  v:f16[3072,768] w:f16[768] x:f16[768] y:f16[768] z:f16[768,768] ba:f16[2304] bb:f16[2304,768]
  bc:f16[768] bd:f16[768] be:f16[768] bf:f16[768,3072] bg:f16[3072] bh:f16[3072,768]
  bi:f16[768] bj:f16[768] bk:f16[64,256,768] = pipeline_marker[
  mark_type=end
  name=5
] bl bm bn bo bp bq br bs bt bu bv bw bx by bz ca cb cc cd ce cf cg ch ci cj ck cl
  cm cn co cp cq cr cs ct cu cv
input_var_mem_size
[qot, qou, qor, qos, qov, qow, qop, qoq, qon, qoo, qol, qom, qoh, qoi, qof, qog, qoj, qok, qod, qoe, qob, qoc, qnz, qoa, qnv, qnw, qnt, qnu, qnx, qny, qnr, qns, qnp, qnq, qnn, qno, esm, djg, djh, dhs, djd, dix, djb, din, dhr, dim, djc, dhc, dhj, dgq, dgs, dgw, dgu, dgm, dgb, dfw, dgx, dfl, dfm, dfa, dfi, dfh, dfd, dfk, dew, dex, dek, dem, deq, deo, deg, ddv, ddq, der, dcq, dcr, dbc, dcn, dch, dcl, dbx, dbb, dbw, dcm, dam, dat, daa, dac, dag, dae, czw, czl, czg, dah, cyv, cyw, cyk, cys, cyr, cyn, cyu, cyg, cyh, cxu, cxw, cya, cxy, cxq, cxf, cxa, cyb, cwa, cwb, cum, cvx, cvr, cvv, cvh, cul, cvg, cvw, ctw, cud, ctk, ctm, ctq, cto, ctg, csv, csq, ctr, csf, csg, cru, csc, csb, crx, cse, crq, crr, cre, crg, crk, cri, cra, cqp, cqk, crl]
[(768,), (768, 768), (2304,), (2304, 768), (768,), (768,), (768,), (768, 3072), (3072,), (3072, 768), (768,), (768,), (768,), (768, 768), (2304,), (2304, 768), (768,), (768,), (768,), (768, 3072), (3072,), (3072, 768), (768,), (768,), (768,), (768, 768), (2304,), (2304, 768), (768,), (768,), (768,), (768, 3072), (3072,), (3072, 768), (768,), (768,), (64, 256, 768), (64, 256, 768), (768, 768), (64, 256, 12, 64), (64, 12, 256, 1), (64, 12, 256, 256), (64, 12, 256, 1), (64, 256, 12, 64), (64, 256, 12, 64), (), (64, 12, 256, 256), (64, 256, 768), (768, 2304), (64, 256, 768), (64, 256, 1), (1, 1, 768), (64, 256, 1), (64, 256), (64, 256), (64, 256, 768), (64, 256, 768), (64, 256, 3072), (3072, 768), (64, 256, 3072), (64, 256, 3072), (64, 256, 3072), (64, 256, 3072), (64, 256, 3072), (64, 256, 768), (768, 3072), (64, 256, 768), (64, 256, 1), (1, 1, 768), (64, 256, 1), (64, 256), (64, 256), (64, 256, 768), (64, 256, 768), (64, 256, 768), (768, 768), (64, 256, 12, 64), (64, 12, 256, 1), (64, 12, 256, 256), (64, 12, 256, 1), (64, 256, 12, 64), (64, 256, 12, 64), (), (64, 12, 256, 256), (64, 256, 768), (768, 2304), (64, 256, 768), (64, 256, 1), (1, 1, 768), (64, 256, 1), (64, 256), (64, 256), (64, 256, 768), (64, 256, 768), (64, 256, 3072), (3072, 768), (64, 256, 3072), (64, 256, 3072), (64, 256, 3072), (64, 256, 3072), (64, 256, 3072), (64, 256, 768), (768, 3072), (64, 256, 768), (64, 256, 1), (1, 1, 768), (64, 256, 1), (64, 256), (64, 256), (64, 256, 768), (64, 256, 768), (64, 256, 768), (768, 768), (64, 256, 12, 64), (64, 12, 256, 1), (64, 12, 256, 256), (64, 12, 256, 1), (64, 256, 12, 64), (64, 256, 12, 64), (), (64, 12, 256, 256), (64, 256, 768), (768, 2304), (64, 256, 768), (64, 256, 1), (1, 1, 768), (64, 256, 1), (64, 256), (64, 256), (64, 256, 768), (64, 256, 768), (64, 256, 3072), (3072, 768), (64, 256, 3072), (64, 256, 3072), (64, 256, 3072), (64, 256, 3072), (64, 256, 3072), (64, 256, 768), (768, 3072), (64, 256, 768), (64, 256, 1), (1, 1, 768), (64, 256, 1), (64, 256), (64, 256), (64, 256, 768), (64, 256, 768)]
param_size: 1.5996415643021464 [GiB] 
jaxpr.eqns, len: 3
eqn: a:f16[768] b:f16[768,768] c:f16[2304] d:f16[2304,768] e:f16[768] f:f16[768] g:f16[768]
  h:f16[768,3072] i:f16[3072] j:f16[3072,768] k:f16[768] l:f16[768] m:f16[768] n:f16[768,768]
  o:f16[2304] p:f16[2304,768] q:f16[768] r:f16[768] s:f16[768] t:f16[768,3072] u:f16[3072]
  v:f16[3072,768] w:f16[768] x:f16[768] y:f16[768] z:f16[768,768] ba:f16[2304] bb:f16[2304,768]
  bc:f16[768] bd:f16[768] be:f16[768] bf:f16[768,3072] bg:f16[3072] bh:f16[3072,768]
  bi:f16[768] bj:f16[768] bk:f16[768] bl:f16[768,768] bm:f16[2304] bn:f16[2304,768]
  bo:f16[768] bp:f16[768] bq:f16[768] br:f16[768,3072] bs:f16[3072] bt:f16[3072,768]
  bu:f16[768] bv:f16[768] bw:f16[768] bx:f16[768,768] by:f16[2304] bz:f16[2304,768]
  ca:f16[768] cb:f16[768] cc:f16[64,256,768] cd:f16[64,256,768] ce:f16[768,768] cf:f16[64,256,12,64]
  cg:f16[64,12,256,1] ch:f16[64,12,256,256] ci:f16[64,12,256,1] cj:f16[64,256,12,64]
  ck:f16[64,256,12,64] cl:f16[] cm:f16[64,12,256,256] cn:f16[64,256,768] co:f16[768,2304]
  cp:f32[64,256,768] cq:f32[64,256,1] cr:f32[1,1,768] cs:f32[64,256,1] ct:f32[64,256]
  cu:f32[64,256] cv:f32[64,256,768] cw:f32[64,256,768] cx:f16[64,256,3072] cy:f16[3072,768]
  cz:f16[64,256,3072] da:f16[64,256,3072] db:f16[64,256,3072] dc:f16[64,256,3072]
  dd:f16[64,256,3072] de:f16[64,256,768] df:f16[768,3072] dg:f32[64,256,768] dh:f32[64,256,1]
  di:f32[1,1,768] dj:f32[64,256,1] dk:f32[64,256] dl:f32[64,256] dm:f32[64,256,768]
  dn:f32[64,256,768] do:f16[64,256,768] dp:f16[768,768] dq:f16[64,256,12,64] dr:f16[64,12,256,1]
  ds:f16[64,12,256,256] dt:f16[64,12,256,1] du:f16[64,256,12,64] dv:f16[64,256,12,64]
  dw:f16[] dx:f16[64,12,256,256] dy:f16[64,256,768] dz:f16[768,2304] ea:f32[64,256,768]
  eb:f32[64,256,1] ec:f32[1,1,768] ed:f32[64,256,1] ee:f32[64,256] ef:f32[64,256]
  eg:f32[64,256,768] eh:f32[64,256,768] ei:f16[64,256,3072] ej:f16[3072,768] ek:f16[64,256,3072]
  el:f16[64,256,3072] em:f16[64,256,3072] en:f16[64,256,3072] eo:f16[64,256,3072]
  ep:f16[64,256,768] eq:f16[768,3072] er:f32[64,256,768] es:f32[64,256,1] et:f32[1,1,768]
  eu:f32[64,256,1] ev:f32[64,256] ew:f32[64,256] ex:f32[64,256,768] ey:f32[64,256,768]
  ez:f16[64,256,768] fa:f16[768,768] fb:f16[64,256,12,64] fc:f16[64,12,256,1] fd:f16[64,12,256,256]
  fe:f16[64,12,256,1] ff:f16[64,256,12,64] fg:f16[64,256,12,64] fh:f16[] fi:f16[64,12,256,256]
  fj:f16[64,256,768] fk:f16[768,2304] fl:f32[64,256,768] fm:f32[64,256,1] fn:f32[1,1,768]
  fo:f32[64,256,1] fp:f32[64,256] fq:f32[64,256] fr:f32[64,256,768] fs:f32[64,256,768]
  ft:f16[64,256,3072] fu:f16[3072,768] fv:f16[64,256,3072] fw:f16[64,256,3072] fx:f16[64,256,3072]
  fy:f16[64,256,3072] fz:f16[64,256,3072] ga:f16[64,256,768] gb:f16[768,3072] gc:f32[64,256,768]
  gd:f32[64,256,1] ge:f32[1,1,768] gf:f32[64,256,1] gg:f32[64,256] gh:f32[64,256]
  gi:f32[64,256,768] gj:f32[64,256,768] gk:f16[64,256,768] gl:f16[768,768] gm:f16[64,256,12,64]
  gn:f16[64,12,256,1] go:f16[64,12,256,256] gp:f16[64,12,256,1] gq:f16[64,256,12,64]
  gr:f16[64,256,12,64] gs:f16[] gt:f16[64,12,256,256] gu:f16[64,256,768] gv:f16[768,2304]
  gw:f32[64,256,768] gx:f32[64,256,1] gy:f32[1,1,768] gz:f32[64,256,1] ha:f32[64,256]
  hb:f32[64,256] hc:f32[64,256,768] hd:f32[64,256,768] he:f16[64,256,3072] hf:f16[3072,768]
  hg:f16[64,256,3072] hh:f16[64,256,3072] hi:f16[64,256,3072] hj:f16[64,256,3072]
  hk:f16[64,256,3072] hl:f16[64,256,768] hm:f16[768,3072] hn:f32[64,256,768] ho:f32[64,256,1]
  hp:f32[1,1,768] hq:f32[64,256,1] hr:f32[64,256] hs:f32[64,256] ht:f32[64,256,768]
  hu:f32[64,256,768] hv:f16[64,256,768] hw:f16[768,768] hx:f16[64,256,12,64] hy:f16[64,12,256,1]
  hz:f16[64,12,256,256] ia:f16[64,12,256,1] ib:f16[64,256,12,64] ic:f16[64,256,12,64]
  id:f16[] ie:f16[64,12,256,256] if:f16[64,256,768] ig:f16[768,2304] ih:f32[64,256,768]
  ii:f32[64,256,1] ij:f32[1,1,768] ik:f32[64,256,1] il:f32[64,256] im:f32[64,256]
  in:f32[64,256,768] io:f32[64,256,768] = pipeline_marker[
  mark_type=start
  name=6
] ip iq ir is it iu iv iw ix iy iz ja jb jc jd je jf jg jh ji jj jk jl jm jn jo jp
  jq jr js jt ju jv jw jx jy jz ka kb kc kd ke kf kg kh ki kj kk kl km kn ko kp kq
  kr ks kt ku kv kw kx ky kz la lb lc ld le lf lg lh li lj lk ll lm ln lo lp lq lr
  ls lt lu lv lw lx ly lz ma mb mc md me mf mg mh mi mj mk ml mm mn mo mp mq mr ms
  mt mu mv mw mx my mz na nb nc nd ne nf ng nh ni nj nk nl nm nn no np nq nr ns nt
  nu nv nw nx ny nz oa ob oc od oe of og oh oi oj ok ol om on oo op oq or os ot ou
  ov ow ox oy oz pa pb pc pd pe pf pg ph pi pj pk pl pm pn po pp pq pr ps pt pu pv
  pw px py pz qa qb qc qd qe qf qg qh qi qj qk ql qm qn qo qp qq qr qs qt qu qv qw
  qx qy qz ra rb rc rd
eqn: a:f16[768] b:f16[768,768] c:f16[2304] d:f16[2304,768] e:f16[768] f:f16[768] g:f16[768]
  h:f16[768,3072] i:f16[3072] j:f16[3072,768] k:f16[768] l:f16[768] m:f16[768] n:f16[768,768]
  o:f16[2304] p:f16[2304,768] q:f16[768] r:f16[768] s:f16[768] t:f16[768,3072] u:f16[3072]
  v:f16[3072,768] w:f16[768] x:f16[768] y:f16[768] z:f16[768,768] ba:f16[2304] bb:f16[2304,768]
  bc:f16[768] bd:f16[768] be:f16[768] bf:f16[768,3072] bg:f16[3072] bh:f16[3072,768]
  bi:f16[768] bj:f16[768] bk:f16[768] bl:f16[768,768] bm:f16[2304] bn:f16[2304,768]
  bo:f16[768] bp:f16[768] bq:f16[768] br:f16[768,3072] bs:f16[3072] bt:f16[3072,768]
  bu:f16[768] bv:f16[768] bw:f16[768] bx:f16[768,768] by:f16[2304] bz:f16[2304,768]
  ca:f16[768] cb:f16[768] cc:f16[64,256,768] = named_call[
  call_jaxpr={ lambda ; cd:f16[768] ce:f16[768,768] cf:f16[2304] cg:f16[2304,768]
      ch:f16[768] ci:f16[768] cj:f16[768] ck:f16[768,3072] cl:f16[3072] cm:f16[3072,768]
      cn:f16[768] co:f16[768] cp:f16[768] cq:f16[768,768] cr:f16[2304] cs:f16[2304,768]
      ct:f16[768] cu:f16[768] cv:f16[768] cw:f16[768,3072] cx:f16[3072] cy:f16[3072,768]
      cz:f16[768] da:f16[768] db:f16[768] dc:f16[768,768] dd:f16[2304] de:f16[2304,768]
      df:f16[768] dg:f16[768] dh:f16[768] di:f16[768,3072] dj:f16[3072] dk:f16[3072,768]
      dl:f16[768] dm:f16[768] dn:f16[768] do:f16[768,768] dp:f16[2304] dq:f16[2304,768]
      dr:f16[768] ds:f16[768] dt:f16[768] du:f16[768,3072] dv:f16[3072] dw:f16[3072,768]
      dx:f16[768] dy:f16[768] dz:f16[768] ea:f16[768,768] eb:f16[2304] ec:f16[2304,768]
      ed:f16[768] ee:f16[768] ef:f16[64,256,768] eg:f16[64,256,768] eh:f16[768,768]
      ei:f16[64,256,12,64] ej:f16[64,12,256,1] ek:f16[64,12,256,256] el:f16[64,12,256,1]
      em:f16[64,256,12,64] en:f16[64,256,12,64] eo:f16[] ep:f16[64,12,256,256] eq:f16[64,256,768]
      er:f16[768,2304] es:f32[64,256,768] et:f32[64,256,1] eu:f32[1,1,768] ev:f32[64,256,1]
      ew:f32[64,256] ex:f32[64,256] ey:f32[64,256,768] ez:f32[64,256,768] fa:f16[64,256,3072]
      fb:f16[3072,768] fc:f16[64,256,3072] fd:f16[64,256,3072] fe:f16[64,256,3072]
      ff:f16[64,256,3072] fg:f16[64,256,3072] fh:f16[64,256,768] fi:f16[768,3072]
      fj:f32[64,256,768] fk:f32[64,256,1] fl:f32[1,1,768] fm:f32[64,256,1] fn:f32[64,256]
      fo:f32[64,256] fp:f32[64,256,768] fq:f32[64,256,768] fr:f16[64,256,768] fs:f16[768,768]
      ft:f16[64,256,12,64] fu:f16[64,12,256,1] fv:f16[64,12,256,256] fw:f16[64,12,256,1]
      fx:f16[64,256,12,64] fy:f16[64,256,12,64] fz:f16[] ga:f16[64,12,256,256] gb:f16[64,256,768]
      gc:f16[768,2304] gd:f32[64,256,768] ge:f32[64,256,1] gf:f32[1,1,768] gg:f32[64,256,1]
      gh:f32[64,256] gi:f32[64,256] gj:f32[64,256,768] gk:f32[64,256,768] gl:f16[64,256,3072]
      gm:f16[3072,768] gn:f16[64,256,3072] go:f16[64,256,3072] gp:f16[64,256,3072]
      gq:f16[64,256,3072] gr:f16[64,256,3072] gs:f16[64,256,768] gt:f16[768,3072]
      gu:f32[64,256,768] gv:f32[64,256,1] gw:f32[1,1,768] gx:f32[64,256,1] gy:f32[64,256]
      gz:f32[64,256] ha:f32[64,256,768] hb:f32[64,256,768] hc:f16[64,256,768] hd:f16[768,768]
      he:f16[64,256,12,64] hf:f16[64,12,256,1] hg:f16[64,12,256,256] hh:f16[64,12,256,1]
      hi:f16[64,256,12,64] hj:f16[64,256,12,64] hk:f16[] hl:f16[64,12,256,256] hm:f16[64,256,768]
      hn:f16[768,2304] ho:f32[64,256,768] hp:f32[64,256,1] hq:f32[1,1,768] hr:f32[64,256,1]
      hs:f32[64,256] ht:f32[64,256] hu:f32[64,256,768] hv:f32[64,256,768] hw:f16[64,256,3072]
      hx:f16[3072,768] hy:f16[64,256,3072] hz:f16[64,256,3072] ia:f16[64,256,3072]
      ib:f16[64,256,3072] ic:f16[64,256,3072] id:f16[64,256,768] ie:f16[768,3072]
      if:f32[64,256,768] ig:f32[64,256,1] ih:f32[1,1,768] ii:f32[64,256,1] ij:f32[64,256]
      ik:f32[64,256] il:f32[64,256,768] im:f32[64,256,768] in:f16[64,256,768] io:f16[768,768]
      ip:f16[64,256,12,64] iq:f16[64,12,256,1] ir:f16[64,12,256,256] is:f16[64,12,256,1]
      it:f16[64,256,12,64] iu:f16[64,256,12,64] iv:f16[] iw:f16[64,12,256,256] ix:f16[64,256,768]
      iy:f16[768,2304] iz:f32[64,256,768] ja:f32[64,256,1] jb:f32[1,1,768] jc:f32[64,256,1]
      jd:f32[64,256] je:f32[64,256] jf:f32[64,256,768] jg:f32[64,256,768] jh:f16[64,256,3072]
      ji:f16[3072,768] jj:f16[64,256,3072] jk:f16[64,256,3072] jl:f16[64,256,3072]
      jm:f16[64,256,3072] jn:f16[64,256,3072] jo:f16[64,256,768] jp:f16[768,3072]
      jq:f32[64,256,768] jr:f32[64,256,1] js:f32[1,1,768] jt:f32[64,256,1] ju:f32[64,256]
      jv:f32[64,256] jw:f32[64,256,768] jx:f32[64,256,768] jy:f16[64,256,768] jz:f16[768,768]
      ka:f16[64,256,12,64] kb:f16[64,12,256,1] kc:f16[64,12,256,256] kd:f16[64,12,256,1]
      ke:f16[64,256,12,64] kf:f16[64,256,12,64] kg:f16[] kh:f16[64,12,256,256] ki:f16[64,256,768]
      kj:f16[768,2304] kk:f32[64,256,768] kl:f32[64,256,1] km:f32[1,1,768] kn:f32[64,256,1]
      ko:f32[64,256] kp:f32[64,256] kq:f32[64,256,768] kr:f32[64,256,768]. let
      ks:f16[64,256,768] kt:f16[768] ku:f16[768,768] kv:f16[2304] kw:f16[2304,768]
        kx:f16[768] ky:f16[768] kz:f16[768] la:f16[768,3072] lb:f16[3072] lc:f16[3072,768]
        ld:f16[768] le:f16[768] = named_call[
        call_jaxpr={ lambda ; lf:f16[64,256,768] lg:f16[768] lh:f16[768,768] li:f16[2304]
            lj:f16[2304,768] lk:f16[768] ll:f16[768] lm:f16[768] ln:f16[768,3072]
            lo:f16[3072] lp:f16[3072,768] lq:f16[768] lr:f16[768] ls:f16[64,256,768]
            lt:f16[768,768] lu:f16[64,256,12,64] lv:f16[64,12,256,1] lw:f16[64,12,256,256]
            lx:f16[64,12,256,1] ly:f16[64,256,12,64] lz:f16[64,256,12,64] ma:f16[]
            mb:f16[64,12,256,256] mc:f16[64,256,768] md:f16[768,2304] me:f32[64,256,768]
            mf:f32[64,256,1] mg:f32[1,1,768] mh:f32[64,256,1] mi:f32[64,256] mj:f32[64,256]
            mk:f32[64,256,768] ml:f32[64,256,768] mm:f16[64,256,3072] mn:f16[3072,768]
            mo:f16[64,256,3072] mp:f16[64,256,3072] mq:f16[64,256,3072] mr:f16[64,256,3072]
            ms:f16[64,256,3072] mt:f16[64,256,768] mu:f16[768,3072] mv:f32[64,256,768]
            mw:f32[64,256,1] mx:f32[1,1,768] my:f32[64,256,1] mz:f32[64,256] na:f32[64,256]
            nb:f32[64,256,768] nc:f32[64,256,768]. let
            nd:f16[768] = reduce_sum[axes=(0, 1)] lf
            ne:f16[1,1,768] = reshape[dimensions=None new_sizes=(1, 1, 768)] nd
            nf:f16[768] = reduce_sum[axes=(0, 1)] ne
            ng:f16[768,768] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] lf ls
            nh:f16[768,768] = transpose[permutation=(1, 0)] ng
            ni:f16[768,768] = transpose[permutation=(1, 0)] nh
            nj:f16[64,256,768] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] lf lt
            nk:f16[64,256,12,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 12, 64)
            ] nj
            nl:f16[64,12,64,256] = transpose[permutation=(0, 2, 3, 1)] nk
            nm:f16[64,12,256,256] = dot_general[
              dimension_numbers=(((2,), (3,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] nl lu
            nn:f16[64,12,256,256] = mul nm lv
            no:f16[64,12,256,256] = mul nn lw
            np:f16[64,12,256] = reduce_sum[axes=(3,)] no
            nq:f16[64,12,256,1] = reshape[
              dimensions=None
              new_sizes=(64, 12, 256, 1)
            ] np
            nr:f16[64,12,256,1] = neg nq
            ns:f32[64,12,256,1] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] nr
            nt:f32[64,12,256] = reduce_sum[axes=(3,)] ns
            nu:f32[64,12,256,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 12, 256, 256)
            ] nt
            nv:f16[64,12,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] nu
            nw:f16[64,12,256,256] = div nm lx
            nx:f16[64,12,256,256] = add_any nv nw
            ny:f16[64,12,256,256] = mul nx lw
            nz:f16[64,12,256,64] = dot_general[
              dimension_numbers=(((2,), (1,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] ny ly
            oa:f16[64,256,12,64] = transpose[permutation=(0, 2, 1, 3)] nz
            ob:f16[64,256,768] = reshape[
              dimensions=None
              new_sizes=(64, 256, 768)
            ] oa
            oc:f16[64,256,2304] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (768, 768, 0))
            ] ob 0.0
            od:f16[64,12,256,64] = dot_general[
              dimension_numbers=(((3,), (1,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] ny lz
            oe:f16[64,256,12,64] = transpose[permutation=(0, 2, 1, 3)] od
            of:f16[64,256,12,64] = div oe ma
            og:f16[64,256,768] = reshape[
              dimensions=None
              new_sizes=(64, 256, 768)
            ] of
            oh:f16[64,256,2304] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (0, 1536, 0))
            ] og 0.0
            oi:f16[64,256,2304] = add_any oc oh
            oj:f16[64,12,64,256] = dot_general[
              dimension_numbers=(((3,), (2,)), ((0, 1), (0, 1)))
              precision=None
              preferred_element_type=None
            ] nl mb
            ok:f16[64,256,12,64] = transpose[permutation=(0, 3, 1, 2)] oj
            ol:f16[64,256,768] = reshape[
              dimensions=None
              new_sizes=(64, 256, 768)
            ] ok
            om:f16[64,256,2304] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (1536, 0, 0))
            ] ol 0.0
            on:f16[64,256,2304] = add_any oi om
            oo:f16[2304] = reduce_sum[axes=(0, 1)] on
            op:f16[1,1,2304] = reshape[dimensions=None new_sizes=(1, 1, 2304)] oo
            oq:f16[2304] = reduce_sum[axes=(0, 1)] op
            or:f16[2304,768] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] on mc
            os:f16[768,2304] = transpose[permutation=(1, 0)] or
            ot:f16[2304,768] = transpose[permutation=(1, 0)] os
            ou:f16[64,256,768] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] on md
            ov:f32[64,256,768] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] ou
            ow:f32[768] = reduce_sum[axes=(0, 1)] ov
            ox:f32[1,1,768] = reshape[dimensions=None new_sizes=(1, 1, 768)] ow
            oy:f16[1,1,768] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] ox
            oz:f16[768] = reshape[dimensions=None new_sizes=(768,)] oy
            pa:f32[64,256,768] = mul me ov
            pb:f32[64,256,768] = mul mf pa
            pc:f32[768] = reduce_sum[axes=(0, 1)] pb
            pd:f32[1,1,768] = reshape[dimensions=None new_sizes=(1, 1, 768)] pc
            pe:f16[1,1,768] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] pd
            pf:f16[768] = reshape[dimensions=None new_sizes=(768,)] pe
            pg:f32[64,256,768] = mul pa mg
            ph:f32[64,256] = reduce_sum[axes=(2,)] pg
            pi:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] ph
            pj:f32[64,256,1] = mul pi mh
            pk:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] pj
            pl:f32[64,256] = mul pk mi
            pm:f32[64,256] = neg pl
            pn:f32[64,256] = mul pm mj
            po:f32[64,256] = div pl 768.0
            pp:f32[64,256,768] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 768)
            ] po
            pq:f32[64,256,768] = mul pp mk
            pr:f32[64,256,768] = mul ov ml
            ps:f32[64,256,768] = neg pr
            pt:f32[64,256] = reduce_sum[axes=(2,)] ps
            pu:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] pt
            pv:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] pu
            pw:f32[64,256] = add_any pn pv
            px:f32[64,256] = div pw 768.0
            py:f32[64,256,768] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 768)
            ] px
            pz:f32[64,256,768] = add_any pq py
            qa:f16[64,256,768] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] pz
            qb:f16[64,256,768] = add_any lf qa
            qc:f16[64,256,768] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] pr
            qd:f16[64,256,768] = add_any qb qc
            qe:f16[768] = reduce_sum[axes=(0, 1)] qd
            qf:f16[1,1,768] = reshape[dimensions=None new_sizes=(1, 1, 768)] qe
            qg:f16[768] = reduce_sum[axes=(0, 1)] qf
            qh:f16[768,3072] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] qd mm
            qi:f16[3072,768] = transpose[permutation=(1, 0)] qh
            qj:f16[768,3072] = transpose[permutation=(1, 0)] qi
            qk:f16[64,256,3072] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] qd mn
            ql:f16[64,256,3072] = mul mo qk
            qm:f16[64,256,3072] = mul 0.5 ql
            qn:f16[64,256,3072] = mul qm mp
            qo:f16[64,256,3072] = mul qn mq
            qp:f16[64,256,3072] = add_any qn qo
            qq:f16[64,256,3072] = mul 0.7978515625 qp
            qr:f16[64,256,3072] = mul 0.044708251953125 qq
            qs:f16[64,256,3072] = mul qr mr
            qt:f16[64,256,3072] = add_any qq qs
            qu:f16[64,256,3072] = mul qk ms
            qv:f16[64,256,3072] = add_any qt qu
            qw:f16[3072] = reduce_sum[axes=(0, 1)] qv
            qx:f16[1,1,3072] = reshape[dimensions=None new_sizes=(1, 1, 3072)] qw
            qy:f16[3072] = reduce_sum[axes=(0, 1)] qx
            qz:f16[3072,768] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] qv mt
            ra:f16[768,3072] = transpose[permutation=(1, 0)] qz
            rb:f16[3072,768] = transpose[permutation=(1, 0)] ra
            rc:f16[64,256,768] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] qv mu
            rd:f32[64,256,768] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] rc
            re:f32[768] = reduce_sum[axes=(0, 1)] rd
            rf:f32[1,1,768] = reshape[dimensions=None new_sizes=(1, 1, 768)] re
            rg:f16[1,1,768] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] rf
            rh:f16[768] = reshape[dimensions=None new_sizes=(768,)] rg
            ri:f32[64,256,768] = mul mv rd
            rj:f32[64,256,768] = mul mw ri
            rk:f32[768] = reduce_sum[axes=(0, 1)] rj
            rl:f32[1,1,768] = reshape[dimensions=None new_sizes=(1, 1, 768)] rk
            rm:f16[1,1,768] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] rl
            rn:f16[768] = reshape[dimensions=None new_sizes=(768,)] rm
            ro:f32[64,256,768] = mul ri mx
            rp:f32[64,256] = reduce_sum[axes=(2,)] ro
            rq:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] rp
            rr:f32[64,256,1] = mul rq my
            rs:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] rr
            rt:f32[64,256] = mul rs mz
            ru:f32[64,256] = neg rt
            rv:f32[64,256] = mul ru na
            rw:f32[64,256] = div rt 768.0
            rx:f32[64,256,768] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 768)
            ] rw
            ry:f32[64,256,768] = mul rx nb
            rz:f32[64,256,768] = mul rd nc
            sa:f32[64,256,768] = neg rz
            sb:f32[64,256] = reduce_sum[axes=(2,)] sa
            sc:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] sb
            sd:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] sc
            se:f32[64,256] = add_any rv sd
            sf:f32[64,256] = div se 768.0
            sg:f32[64,256,768] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 768)
            ] sf
            sh:f32[64,256,768] = add_any ry sg
            si:f16[64,256,768] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] sh
            sj:f16[64,256,768] = add_any qd si
            sk:f16[64,256,768] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] rz
            sl:f16[64,256,768] = add_any sj sk
            sm:f16[768] = add lg nf
            sn:f16[768,768] = add lh ni
            so:f16[2304] = add li oq
            sp:f16[2304,768] = add lj ot
            sq:f16[768] = add lk oz
            sr:f16[768] = add ll pf
            ss:f16[768] = add lm qg
            st:f16[768,3072] = add ln qj
            su:f16[3072] = add lo qy
            sv:f16[3072,768] = add lp rb
            sw:f16[768] = add lq rh
            sx:f16[768] = add lr rn
          in (sl, sm, sn, so, sp, sq, sr, ss, st, su, sv, sw, sx) }
        name=60
      ] ef cd ce cf cg ch ci cj ck cl cm cn co eg eh ei ej ek el em en eo ep eq er
        es et eu ev ew ex ey ez fa fb fc fd fe ff fg fh fi fj fk fl fm fn fo fp fq
      sy:f16[64,256,768] sz:f16[768] ta:f16[768,768] tb:f16[2304] tc:f16[2304,768]
        td:f16[768] te:f16[768] tf:f16[768] tg:f16[768,3072] th:f16[3072] ti:f16[3072,768]
        tj:f16[768] tk:f16[768] = named_call[
        call_jaxpr={ lambda ; tl:f16[64,256,768] tm:f16[768] tn:f16[768,768] to:f16[2304]
            tp:f16[2304,768] tq:f16[768] tr:f16[768] ts:f16[768] tt:f16[768,3072]
            tu:f16[3072] tv:f16[3072,768] tw:f16[768] tx:f16[768] ty:f16[64,256,768]
            tz:f16[768,768] ua:f16[64,256,12,64] ub:f16[64,12,256,1] uc:f16[64,12,256,256]
            ud:f16[64,12,256,1] ue:f16[64,256,12,64] uf:f16[64,256,12,64] ug:f16[]
            uh:f16[64,12,256,256] ui:f16[64,256,768] uj:f16[768,2304] uk:f32[64,256,768]
            ul:f32[64,256,1] um:f32[1,1,768] un:f32[64,256,1] uo:f32[64,256] up:f32[64,256]
            uq:f32[64,256,768] ur:f32[64,256,768] us:f16[64,256,3072] ut:f16[3072,768]
            uu:f16[64,256,3072] uv:f16[64,256,3072] uw:f16[64,256,3072] ux:f16[64,256,3072]
            uy:f16[64,256,3072] uz:f16[64,256,768] va:f16[768,3072] vb:f32[64,256,768]
            vc:f32[64,256,1] vd:f32[1,1,768] ve:f32[64,256,1] vf:f32[64,256] vg:f32[64,256]
            vh:f32[64,256,768] vi:f32[64,256,768]. let
            vj:f16[768] = reduce_sum[axes=(0, 1)] tl
            vk:f16[1,1,768] = reshape[dimensions=None new_sizes=(1, 1, 768)] vj
            vl:f16[768] = reduce_sum[axes=(0, 1)] vk
            vm:f16[768,768] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] tl ty
            vn:f16[768,768] = transpose[permutation=(1, 0)] vm
            vo:f16[768,768] = transpose[permutation=(1, 0)] vn
            vp:f16[64,256,768] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] tl tz
            vq:f16[64,256,12,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 12, 64)
            ] vp
            vr:f16[64,12,64,256] = transpose[permutation=(0, 2, 3, 1)] vq
            vs:f16[64,12,256,256] = dot_general[
              dimension_numbers=(((2,), (3,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] vr ua
            vt:f16[64,12,256,256] = mul vs ub
            vu:f16[64,12,256,256] = mul vt uc
            vv:f16[64,12,256] = reduce_sum[axes=(3,)] vu
            vw:f16[64,12,256,1] = reshape[
              dimensions=None
              new_sizes=(64, 12, 256, 1)
            ] vv
            vx:f16[64,12,256,1] = neg vw
            vy:f32[64,12,256,1] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] vx
            vz:f32[64,12,256] = reduce_sum[axes=(3,)] vy
            wa:f32[64,12,256,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 12, 256, 256)
            ] vz
            wb:f16[64,12,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] wa
            wc:f16[64,12,256,256] = div vs ud
            wd:f16[64,12,256,256] = add_any wb wc
            we:f16[64,12,256,256] = mul wd uc
            wf:f16[64,12,256,64] = dot_general[
              dimension_numbers=(((2,), (1,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] we ue
            wg:f16[64,256,12,64] = transpose[permutation=(0, 2, 1, 3)] wf
            wh:f16[64,256,768] = reshape[
              dimensions=None
              new_sizes=(64, 256, 768)
            ] wg
            wi:f16[64,256,2304] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (768, 768, 0))
            ] wh 0.0
            wj:f16[64,12,256,64] = dot_general[
              dimension_numbers=(((3,), (1,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] we uf
            wk:f16[64,256,12,64] = transpose[permutation=(0, 2, 1, 3)] wj
            wl:f16[64,256,12,64] = div wk ug
            wm:f16[64,256,768] = reshape[
              dimensions=None
              new_sizes=(64, 256, 768)
            ] wl
            wn:f16[64,256,2304] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (0, 1536, 0))
            ] wm 0.0
            wo:f16[64,256,2304] = add_any wi wn
            wp:f16[64,12,64,256] = dot_general[
              dimension_numbers=(((3,), (2,)), ((0, 1), (0, 1)))
              precision=None
              preferred_element_type=None
            ] vr uh
            wq:f16[64,256,12,64] = transpose[permutation=(0, 3, 1, 2)] wp
            wr:f16[64,256,768] = reshape[
              dimensions=None
              new_sizes=(64, 256, 768)
            ] wq
            ws:f16[64,256,2304] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (1536, 0, 0))
            ] wr 0.0
            wt:f16[64,256,2304] = add_any wo ws
            wu:f16[2304] = reduce_sum[axes=(0, 1)] wt
            wv:f16[1,1,2304] = reshape[dimensions=None new_sizes=(1, 1, 2304)] wu
            ww:f16[2304] = reduce_sum[axes=(0, 1)] wv
            wx:f16[2304,768] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] wt ui
            wy:f16[768,2304] = transpose[permutation=(1, 0)] wx
            wz:f16[2304,768] = transpose[permutation=(1, 0)] wy
            xa:f16[64,256,768] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] wt uj
            xb:f32[64,256,768] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] xa
            xc:f32[768] = reduce_sum[axes=(0, 1)] xb
            xd:f32[1,1,768] = reshape[dimensions=None new_sizes=(1, 1, 768)] xc
            xe:f16[1,1,768] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] xd
            xf:f16[768] = reshape[dimensions=None new_sizes=(768,)] xe
            xg:f32[64,256,768] = mul uk xb
            xh:f32[64,256,768] = mul ul xg
            xi:f32[768] = reduce_sum[axes=(0, 1)] xh
            xj:f32[1,1,768] = reshape[dimensions=None new_sizes=(1, 1, 768)] xi
            xk:f16[1,1,768] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] xj
            xl:f16[768] = reshape[dimensions=None new_sizes=(768,)] xk
            xm:f32[64,256,768] = mul xg um
            xn:f32[64,256] = reduce_sum[axes=(2,)] xm
            xo:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] xn
            xp:f32[64,256,1] = mul xo un
            xq:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] xp
            xr:f32[64,256] = mul xq uo
            xs:f32[64,256] = neg xr
            xt:f32[64,256] = mul xs up
            xu:f32[64,256] = div xr 768.0
            xv:f32[64,256,768] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 768)
            ] xu
            xw:f32[64,256,768] = mul xv uq
            xx:f32[64,256,768] = mul xb ur
            xy:f32[64,256,768] = neg xx
            xz:f32[64,256] = reduce_sum[axes=(2,)] xy
            ya:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] xz
            yb:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] ya
            yc:f32[64,256] = add_any xt yb
            yd:f32[64,256] = div yc 768.0
            ye:f32[64,256,768] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 768)
            ] yd
            yf:f32[64,256,768] = add_any xw ye
            yg:f16[64,256,768] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] yf
            yh:f16[64,256,768] = add_any tl yg
            yi:f16[64,256,768] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] xx
            yj:f16[64,256,768] = add_any yh yi
            yk:f16[768] = reduce_sum[axes=(0, 1)] yj
            yl:f16[1,1,768] = reshape[dimensions=None new_sizes=(1, 1, 768)] yk
            ym:f16[768] = reduce_sum[axes=(0, 1)] yl
            yn:f16[768,3072] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] yj us
            yo:f16[3072,768] = transpose[permutation=(1, 0)] yn
            yp:f16[768,3072] = transpose[permutation=(1, 0)] yo
            yq:f16[64,256,3072] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] yj ut
            yr:f16[64,256,3072] = mul uu yq
            ys:f16[64,256,3072] = mul 0.5 yr
            yt:f16[64,256,3072] = mul ys uv
            yu:f16[64,256,3072] = mul yt uw
            yv:f16[64,256,3072] = add_any yt yu
            yw:f16[64,256,3072] = mul 0.7978515625 yv
            yx:f16[64,256,3072] = mul 0.044708251953125 yw
            yy:f16[64,256,3072] = mul yx ux
            yz:f16[64,256,3072] = add_any yw yy
            za:f16[64,256,3072] = mul yq uy
            zb:f16[64,256,3072] = add_any yz za
            zc:f16[3072] = reduce_sum[axes=(0, 1)] zb
            zd:f16[1,1,3072] = reshape[dimensions=None new_sizes=(1, 1, 3072)] zc
            ze:f16[3072] = reduce_sum[axes=(0, 1)] zd
            zf:f16[3072,768] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] zb uz
            zg:f16[768,3072] = transpose[permutation=(1, 0)] zf
            zh:f16[3072,768] = transpose[permutation=(1, 0)] zg
            zi:f16[64,256,768] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] zb va
            zj:f32[64,256,768] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] zi
            zk:f32[768] = reduce_sum[axes=(0, 1)] zj
            zl:f32[1,1,768] = reshape[dimensions=None new_sizes=(1, 1, 768)] zk
            zm:f16[1,1,768] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] zl
            zn:f16[768] = reshape[dimensions=None new_sizes=(768,)] zm
            zo:f32[64,256,768] = mul vb zj
            zp:f32[64,256,768] = mul vc zo
            zq:f32[768] = reduce_sum[axes=(0, 1)] zp
            zr:f32[1,1,768] = reshape[dimensions=None new_sizes=(1, 1, 768)] zq
            zs:f16[1,1,768] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] zr
            zt:f16[768] = reshape[dimensions=None new_sizes=(768,)] zs
            zu:f32[64,256,768] = mul zo vd
            zv:f32[64,256] = reduce_sum[axes=(2,)] zu
            zw:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] zv
            zx:f32[64,256,1] = mul zw ve
            zy:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] zx
            zz:f32[64,256] = mul zy vf
            baa:f32[64,256] = neg zz
            bab:f32[64,256] = mul baa vg
            bac:f32[64,256] = div zz 768.0
            bad:f32[64,256,768] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 768)
            ] bac
            bae:f32[64,256,768] = mul bad vh
            baf:f32[64,256,768] = mul zj vi
            bag:f32[64,256,768] = neg baf
            bah:f32[64,256] = reduce_sum[axes=(2,)] bag
            bai:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] bah
            baj:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] bai
            bak:f32[64,256] = add_any bab baj
            bal:f32[64,256] = div bak 768.0
            bam:f32[64,256,768] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 768)
            ] bal
            ban:f32[64,256,768] = add_any bae bam
            bao:f16[64,256,768] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] ban
            bap:f16[64,256,768] = add_any yj bao
            baq:f16[64,256,768] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] baf
            bar:f16[64,256,768] = add_any bap baq
            bas:f16[768] = add tm vl
            bat:f16[768,768] = add tn vo
            bau:f16[2304] = add to ww
            bav:f16[2304,768] = add tp wz
            baw:f16[768] = add tq xf
            bax:f16[768] = add tr xl
            bay:f16[768] = add ts ym
            baz:f16[768,3072] = add tt yp
            bba:f16[3072] = add tu ze
            bbb:f16[3072,768] = add tv zh
            bbc:f16[768] = add tw zn
            bbd:f16[768] = add tx zt
          in (bar, bas, bat, bau, bav, baw, bax, bay, baz, bba, bbb, bbc, bbd) }
        name=61
      ] ks cp cq cr cs ct cu cv cw cx cy cz da fr fs ft fu fv fw fx fy fz ga gb gc
        gd ge gf gg gh gi gj gk gl gm gn go gp gq gr gs gt gu gv gw gx gy gz ha hb
      bbe:f16[64,256,768] bbf:f16[768] bbg:f16[768,768] bbh:f16[2304] bbi:f16[2304,768]
        bbj:f16[768] bbk:f16[768] = named_call[
        call_jaxpr={ lambda ; bbl:f16[64,256,768] bbm:f16[768] bbn:f16[768,768] bbo:f16[2304]
            bbp:f16[2304,768] bbq:f16[768] bbr:f16[768] bbs:f16[64,256,768] bbt:f16[768,768]
            bbu:f16[64,256,12,64] bbv:f16[64,12,256,1] bbw:f16[64,12,256,256] bbx:f16[64,12,256,1]
            bby:f16[64,256,12,64] bbz:f16[64,256,12,64] bca:f16[] bcb:f16[64,12,256,256]
            bcc:f16[64,256,768] bcd:f16[768,2304] bce:f32[64,256,768] bcf:f32[64,256,1]
            bcg:f32[1,1,768] bch:f32[64,256,1] bci:f32[64,256] bcj:f32[64,256] bck:f32[64,256,768]
            bcl:f32[64,256,768]. let
            bcm:f16[768] = reduce_sum[axes=(0, 1)] bbl
            bcn:f16[1,1,768] = reshape[dimensions=None new_sizes=(1, 1, 768)] bcm
            bco:f16[768] = reduce_sum[axes=(0, 1)] bcn
            bcp:f16[768,768] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] bbl bbs
            bcq:f16[768,768] = transpose[permutation=(1, 0)] bcp
            bcr:f16[768,768] = transpose[permutation=(1, 0)] bcq
            bcs:f16[64,256,768] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] bbl bbt
            bct:f16[64,256,12,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 12, 64)
            ] bcs
            bcu:f16[64,12,64,256] = transpose[permutation=(0, 2, 3, 1)] bct
            bcv:f16[64,12,256,256] = dot_general[
              dimension_numbers=(((2,), (3,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] bcu bbu
            bcw:f16[64,12,256,256] = mul bcv bbv
            bcx:f16[64,12,256,256] = mul bcw bbw
            bcy:f16[64,12,256] = reduce_sum[axes=(3,)] bcx
            bcz:f16[64,12,256,1] = reshape[
              dimensions=None
              new_sizes=(64, 12, 256, 1)
            ] bcy
            bda:f16[64,12,256,1] = neg bcz
            bdb:f32[64,12,256,1] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bda
            bdc:f32[64,12,256] = reduce_sum[axes=(3,)] bdb
            bdd:f32[64,12,256,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 12, 256, 256)
            ] bdc
            bde:f16[64,12,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bdd
            bdf:f16[64,12,256,256] = div bcv bbx
            bdg:f16[64,12,256,256] = add_any bde bdf
            bdh:f16[64,12,256,256] = mul bdg bbw
            bdi:f16[64,12,256,64] = dot_general[
              dimension_numbers=(((2,), (1,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] bdh bby
            bdj:f16[64,256,12,64] = transpose[permutation=(0, 2, 1, 3)] bdi
            bdk:f16[64,256,768] = reshape[
              dimensions=None
              new_sizes=(64, 256, 768)
            ] bdj
            bdl:f16[64,256,2304] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (768, 768, 0))
            ] bdk 0.0
            bdm:f16[64,12,256,64] = dot_general[
              dimension_numbers=(((3,), (1,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] bdh bbz
            bdn:f16[64,256,12,64] = transpose[permutation=(0, 2, 1, 3)] bdm
            bdo:f16[64,256,12,64] = div bdn bca
            bdp:f16[64,256,768] = reshape[
              dimensions=None
              new_sizes=(64, 256, 768)
            ] bdo
            bdq:f16[64,256,2304] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (0, 1536, 0))
            ] bdp 0.0
            bdr:f16[64,256,2304] = add_any bdl bdq
            bds:f16[64,12,64,256] = dot_general[
              dimension_numbers=(((3,), (2,)), ((0, 1), (0, 1)))
              precision=None
              preferred_element_type=None
            ] bcu bcb
            bdt:f16[64,256,12,64] = transpose[permutation=(0, 3, 1, 2)] bds
            bdu:f16[64,256,768] = reshape[
              dimensions=None
              new_sizes=(64, 256, 768)
            ] bdt
            bdv:f16[64,256,2304] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (1536, 0, 0))
            ] bdu 0.0
            bdw:f16[64,256,2304] = add_any bdr bdv
            bdx:f16[2304] = reduce_sum[axes=(0, 1)] bdw
            bdy:f16[1,1,2304] = reshape[dimensions=None new_sizes=(1, 1, 2304)] bdx
            bdz:f16[2304] = reduce_sum[axes=(0, 1)] bdy
            bea:f16[2304,768] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] bdw bcc
            beb:f16[768,2304] = transpose[permutation=(1, 0)] bea
            bec:f16[2304,768] = transpose[permutation=(1, 0)] beb
            bed:f16[64,256,768] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] bdw bcd
            bee:f32[64,256,768] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bed
            bef:f32[768] = reduce_sum[axes=(0, 1)] bee
            beg:f32[1,1,768] = reshape[dimensions=None new_sizes=(1, 1, 768)] bef
            beh:f16[1,1,768] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] beg
            bei:f16[768] = reshape[dimensions=None new_sizes=(768,)] beh
            bej:f32[64,256,768] = mul bce bee
            bek:f32[64,256,768] = mul bcf bej
            bel:f32[768] = reduce_sum[axes=(0, 1)] bek
            bem:f32[1,1,768] = reshape[dimensions=None new_sizes=(1, 1, 768)] bel
            ben:f16[1,1,768] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bem
            beo:f16[768] = reshape[dimensions=None new_sizes=(768,)] ben
            bep:f32[64,256,768] = mul bej bcg
            beq:f32[64,256] = reduce_sum[axes=(2,)] bep
            ber:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] beq
            bes:f32[64,256,1] = mul ber bch
            bet:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] bes
            beu:f32[64,256] = mul bet bci
            bev:f32[64,256] = neg beu
            bew:f32[64,256] = mul bev bcj
            bex:f32[64,256] = div beu 768.0
            bey:f32[64,256,768] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 768)
            ] bex
            bez:f32[64,256,768] = mul bey bck
            bfa:f32[64,256,768] = mul bee bcl
            bfb:f32[64,256,768] = neg bfa
            bfc:f32[64,256] = reduce_sum[axes=(2,)] bfb
            bfd:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] bfc
            bfe:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] bfd
            bff:f32[64,256] = add_any bew bfe
            bfg:f32[64,256] = div bff 768.0
            bfh:f32[64,256,768] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 768)
            ] bfg
            bfi:f32[64,256,768] = add_any bez bfh
            bfj:f16[64,256,768] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bfi
            bfk:f16[64,256,768] = add_any bbl bfj
            bfl:f16[64,256,768] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bfa
            bfm:f16[64,256,768] = add_any bfk bfl
            bfn:f16[768] = add bbm bco
            bfo:f16[768,768] = add bbn bcr
            bfp:f16[2304] = add bbo bdz
            bfq:f16[2304,768] = add bbp bec
            bfr:f16[768] = add bbq bei
            bfs:f16[768] = add bbr beo
          in (bfm, bfn, bfo, bfp, bfq, bfr, bfs) }
        name=62
      ] sy db dc dd de df dg hc hd he hf hg hh hi hj hk hl hm hn ho hp hq hr hs ht
        hu hv
      bft:f16[64,256,768] bfu:f16[768] bfv:f16[768,3072] bfw:f16[3072] bfx:f16[3072,768]
        bfy:f16[768] bfz:f16[768] bga:f16[768] bgb:f16[768,768] bgc:f16[2304] bgd:f16[2304,768]
        bge:f16[768] bgf:f16[768] = named_call[
        call_jaxpr={ lambda ; bgg:f16[64,256,768] bgh:f16[768] bgi:f16[768,3072]
            bgj:f16[3072] bgk:f16[3072,768] bgl:f16[768] bgm:f16[768] bgn:f16[768]
            bgo:f16[768,768] bgp:f16[2304] bgq:f16[2304,768] bgr:f16[768] bgs:f16[768]
            bgt:f16[64,256,3072] bgu:f16[3072,768] bgv:f16[64,256,3072] bgw:f16[64,256,3072]
            bgx:f16[64,256,3072] bgy:f16[64,256,3072] bgz:f16[64,256,3072] bha:f16[64,256,768]
            bhb:f16[768,3072] bhc:f32[64,256,768] bhd:f32[64,256,1] bhe:f32[1,1,768]
            bhf:f32[64,256,1] bhg:f32[64,256] bhh:f32[64,256] bhi:f32[64,256,768]
            bhj:f32[64,256,768] bhk:f16[64,256,768] bhl:f16[768,768] bhm:f16[64,256,12,64]
            bhn:f16[64,12,256,1] bho:f16[64,12,256,256] bhp:f16[64,12,256,1] bhq:f16[64,256,12,64]
            bhr:f16[64,256,12,64] bhs:f16[] bht:f16[64,12,256,256] bhu:f16[64,256,768]
            bhv:f16[768,2304] bhw:f32[64,256,768] bhx:f32[64,256,1] bhy:f32[1,1,768]
            bhz:f32[64,256,1] bia:f32[64,256] bib:f32[64,256] bic:f32[64,256,768]
            bid:f32[64,256,768]. let
            bie:f16[768] = reduce_sum[axes=(0, 1)] bgg
            bif:f16[1,1,768] = reshape[dimensions=None new_sizes=(1, 1, 768)] bie
            big:f16[768] = reduce_sum[axes=(0, 1)] bif
            bih:f16[768,3072] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] bgg bgt
            bii:f16[3072,768] = transpose[permutation=(1, 0)] bih
            bij:f16[768,3072] = transpose[permutation=(1, 0)] bii
            bik:f16[64,256,3072] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] bgg bgu
            bil:f16[64,256,3072] = mul bgv bik
            bim:f16[64,256,3072] = mul 0.5 bil
            bin:f16[64,256,3072] = mul bim bgw
            bio:f16[64,256,3072] = mul bin bgx
            bip:f16[64,256,3072] = add_any bin bio
            biq:f16[64,256,3072] = mul 0.7978515625 bip
            bir:f16[64,256,3072] = mul 0.044708251953125 biq
            bis:f16[64,256,3072] = mul bir bgy
            bit:f16[64,256,3072] = add_any biq bis
            biu:f16[64,256,3072] = mul bik bgz
            biv:f16[64,256,3072] = add_any bit biu
            biw:f16[3072] = reduce_sum[axes=(0, 1)] biv
            bix:f16[1,1,3072] = reshape[dimensions=None new_sizes=(1, 1, 3072)] biw
            biy:f16[3072] = reduce_sum[axes=(0, 1)] bix
            biz:f16[3072,768] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] biv bha
            bja:f16[768,3072] = transpose[permutation=(1, 0)] biz
            bjb:f16[3072,768] = transpose[permutation=(1, 0)] bja
            bjc:f16[64,256,768] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] biv bhb
            bjd:f32[64,256,768] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bjc
            bje:f32[768] = reduce_sum[axes=(0, 1)] bjd
            bjf:f32[1,1,768] = reshape[dimensions=None new_sizes=(1, 1, 768)] bje
            bjg:f16[1,1,768] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bjf
            bjh:f16[768] = reshape[dimensions=None new_sizes=(768,)] bjg
            bji:f32[64,256,768] = mul bhc bjd
            bjj:f32[64,256,768] = mul bhd bji
            bjk:f32[768] = reduce_sum[axes=(0, 1)] bjj
            bjl:f32[1,1,768] = reshape[dimensions=None new_sizes=(1, 1, 768)] bjk
            bjm:f16[1,1,768] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bjl
            bjn:f16[768] = reshape[dimensions=None new_sizes=(768,)] bjm
            bjo:f32[64,256,768] = mul bji bhe
            bjp:f32[64,256] = reduce_sum[axes=(2,)] bjo
            bjq:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] bjp
            bjr:f32[64,256,1] = mul bjq bhf
            bjs:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] bjr
            bjt:f32[64,256] = mul bjs bhg
            bju:f32[64,256] = neg bjt
            bjv:f32[64,256] = mul bju bhh
            bjw:f32[64,256] = div bjt 768.0
            bjx:f32[64,256,768] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 768)
            ] bjw
            bjy:f32[64,256,768] = mul bjx bhi
            bjz:f32[64,256,768] = mul bjd bhj
            bka:f32[64,256,768] = neg bjz
            bkb:f32[64,256] = reduce_sum[axes=(2,)] bka
            bkc:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] bkb
            bkd:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] bkc
            bke:f32[64,256] = add_any bjv bkd
            bkf:f32[64,256] = div bke 768.0
            bkg:f32[64,256,768] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 768)
            ] bkf
            bkh:f32[64,256,768] = add_any bjy bkg
            bki:f16[64,256,768] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bkh
            bkj:f16[64,256,768] = add_any bgg bki
            bkk:f16[64,256,768] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bjz
            bkl:f16[64,256,768] = add_any bkj bkk
            bkm:f16[768] = reduce_sum[axes=(0, 1)] bkl
            bkn:f16[1,1,768] = reshape[dimensions=None new_sizes=(1, 1, 768)] bkm
            bko:f16[768] = reduce_sum[axes=(0, 1)] bkn
            bkp:f16[768,768] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] bkl bhk
            bkq:f16[768,768] = transpose[permutation=(1, 0)] bkp
            bkr:f16[768,768] = transpose[permutation=(1, 0)] bkq
            bks:f16[64,256,768] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] bkl bhl
            bkt:f16[64,256,12,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 12, 64)
            ] bks
            bku:f16[64,12,64,256] = transpose[permutation=(0, 2, 3, 1)] bkt
            bkv:f16[64,12,256,256] = dot_general[
              dimension_numbers=(((2,), (3,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] bku bhm
            bkw:f16[64,12,256,256] = mul bkv bhn
            bkx:f16[64,12,256,256] = mul bkw bho
            bky:f16[64,12,256] = reduce_sum[axes=(3,)] bkx
            bkz:f16[64,12,256,1] = reshape[
              dimensions=None
              new_sizes=(64, 12, 256, 1)
            ] bky
            bla:f16[64,12,256,1] = neg bkz
            blb:f32[64,12,256,1] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bla
            blc:f32[64,12,256] = reduce_sum[axes=(3,)] blb
            bld:f32[64,12,256,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 12, 256, 256)
            ] blc
            ble:f16[64,12,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bld
            blf:f16[64,12,256,256] = div bkv bhp
            blg:f16[64,12,256,256] = add_any ble blf
            blh:f16[64,12,256,256] = mul blg bho
            bli:f16[64,12,256,64] = dot_general[
              dimension_numbers=(((2,), (1,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] blh bhq
            blj:f16[64,256,12,64] = transpose[permutation=(0, 2, 1, 3)] bli
            blk:f16[64,256,768] = reshape[
              dimensions=None
              new_sizes=(64, 256, 768)
            ] blj
            bll:f16[64,256,2304] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (768, 768, 0))
            ] blk 0.0
            blm:f16[64,12,256,64] = dot_general[
              dimension_numbers=(((3,), (1,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] blh bhr
            bln:f16[64,256,12,64] = transpose[permutation=(0, 2, 1, 3)] blm
            blo:f16[64,256,12,64] = div bln bhs
            blp:f16[64,256,768] = reshape[
              dimensions=None
              new_sizes=(64, 256, 768)
            ] blo
            blq:f16[64,256,2304] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (0, 1536, 0))
            ] blp 0.0
            blr:f16[64,256,2304] = add_any bll blq
            bls:f16[64,12,64,256] = dot_general[
              dimension_numbers=(((3,), (2,)), ((0, 1), (0, 1)))
              precision=None
              preferred_element_type=None
            ] bku bht
            blt:f16[64,256,12,64] = transpose[permutation=(0, 3, 1, 2)] bls
            blu:f16[64,256,768] = reshape[
              dimensions=None
              new_sizes=(64, 256, 768)
            ] blt
            blv:f16[64,256,2304] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (1536, 0, 0))
            ] blu 0.0
            blw:f16[64,256,2304] = add_any blr blv
            blx:f16[2304] = reduce_sum[axes=(0, 1)] blw
            bly:f16[1,1,2304] = reshape[dimensions=None new_sizes=(1, 1, 2304)] blx
            blz:f16[2304] = reduce_sum[axes=(0, 1)] bly
            bma:f16[2304,768] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] blw bhu
            bmb:f16[768,2304] = transpose[permutation=(1, 0)] bma
            bmc:f16[2304,768] = transpose[permutation=(1, 0)] bmb
            bmd:f16[64,256,768] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] blw bhv
            bme:f32[64,256,768] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bmd
            bmf:f32[768] = reduce_sum[axes=(0, 1)] bme
            bmg:f32[1,1,768] = reshape[dimensions=None new_sizes=(1, 1, 768)] bmf
            bmh:f16[1,1,768] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bmg
            bmi:f16[768] = reshape[dimensions=None new_sizes=(768,)] bmh
            bmj:f32[64,256,768] = mul bhw bme
            bmk:f32[64,256,768] = mul bhx bmj
            bml:f32[768] = reduce_sum[axes=(0, 1)] bmk
            bmm:f32[1,1,768] = reshape[dimensions=None new_sizes=(1, 1, 768)] bml
            bmn:f16[1,1,768] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bmm
            bmo:f16[768] = reshape[dimensions=None new_sizes=(768,)] bmn
            bmp:f32[64,256,768] = mul bmj bhy
            bmq:f32[64,256] = reduce_sum[axes=(2,)] bmp
            bmr:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] bmq
            bms:f32[64,256,1] = mul bmr bhz
            bmt:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] bms
            bmu:f32[64,256] = mul bmt bia
            bmv:f32[64,256] = neg bmu
            bmw:f32[64,256] = mul bmv bib
            bmx:f32[64,256] = div bmu 768.0
            bmy:f32[64,256,768] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 768)
            ] bmx
            bmz:f32[64,256,768] = mul bmy bic
            bna:f32[64,256,768] = mul bme bid
            bnb:f32[64,256,768] = neg bna
            bnc:f32[64,256] = reduce_sum[axes=(2,)] bnb
            bnd:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] bnc
            bne:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] bnd
            bnf:f32[64,256] = add_any bmw bne
            bng:f32[64,256] = div bnf 768.0
            bnh:f32[64,256,768] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 768)
            ] bng
            bni:f32[64,256,768] = add_any bmz bnh
            bnj:f16[64,256,768] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bni
            bnk:f16[64,256,768] = add_any bkl bnj
            bnl:f16[64,256,768] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bna
            bnm:f16[64,256,768] = add_any bnk bnl
            bnn:f16[768] = add bgh big
            bno:f16[768,3072] = add bgi bij
            bnp:f16[3072] = add bgj biy
            bnq:f16[3072,768] = add bgk bjb
            bnr:f16[768] = add bgl bjh
            bns:f16[768] = add bgm bjn
            bnt:f16[768] = add bgn bko
            bnu:f16[768,768] = add bgo bkr
            bnv:f16[2304] = add bgp blz
            bnw:f16[2304,768] = add bgq bmc
            bnx:f16[768] = add bgr bmi
            bny:f16[768] = add bgs bmo
          in (bnm, bnn, bno, bnp, bnq, bnr, bns, bnt, bnu, bnv, bnw, bnx, bny) }
        name=63
      ] bbe dh di dj dk dl dm dn do dp dq dr ds hw hx hy hz ia ib ic id ie if ig
        ih ii ij ik il im in io ip iq ir is it iu iv iw ix iy iz ja jb jc jd je jf
        jg
      bnz:f16[64,256,768] boa:f16[768] bob:f16[768,3072] boc:f16[3072] bod:f16[3072,768]
        boe:f16[768] bof:f16[768] bog:f16[768] boh:f16[768,768] boi:f16[2304] boj:f16[2304,768]
        bok:f16[768] bol:f16[768] = named_call[
        call_jaxpr={ lambda ; bom:f16[64,256,768] bon:f16[768] boo:f16[768,3072]
            bop:f16[3072] boq:f16[3072,768] bor:f16[768] bos:f16[768] bot:f16[768]
            bou:f16[768,768] bov:f16[2304] bow:f16[2304,768] box:f16[768] boy:f16[768]
            boz:f16[64,256,3072] bpa:f16[3072,768] bpb:f16[64,256,3072] bpc:f16[64,256,3072]
            bpd:f16[64,256,3072] bpe:f16[64,256,3072] bpf:f16[64,256,3072] bpg:f16[64,256,768]
            bph:f16[768,3072] bpi:f32[64,256,768] bpj:f32[64,256,1] bpk:f32[1,1,768]
            bpl:f32[64,256,1] bpm:f32[64,256] bpn:f32[64,256] bpo:f32[64,256,768]
            bpp:f32[64,256,768] bpq:f16[64,256,768] bpr:f16[768,768] bps:f16[64,256,12,64]
            bpt:f16[64,12,256,1] bpu:f16[64,12,256,256] bpv:f16[64,12,256,1] bpw:f16[64,256,12,64]
            bpx:f16[64,256,12,64] bpy:f16[] bpz:f16[64,12,256,256] bqa:f16[64,256,768]
            bqb:f16[768,2304] bqc:f32[64,256,768] bqd:f32[64,256,1] bqe:f32[1,1,768]
            bqf:f32[64,256,1] bqg:f32[64,256] bqh:f32[64,256] bqi:f32[64,256,768]
            bqj:f32[64,256,768]. let
            bqk:f16[768] = reduce_sum[axes=(0, 1)] bom
            bql:f16[1,1,768] = reshape[dimensions=None new_sizes=(1, 1, 768)] bqk
            bqm:f16[768] = reduce_sum[axes=(0, 1)] bql
            bqn:f16[768,3072] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] bom boz
            bqo:f16[3072,768] = transpose[permutation=(1, 0)] bqn
            bqp:f16[768,3072] = transpose[permutation=(1, 0)] bqo
            bqq:f16[64,256,3072] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] bom bpa
            bqr:f16[64,256,3072] = mul bpb bqq
            bqs:f16[64,256,3072] = mul 0.5 bqr
            bqt:f16[64,256,3072] = mul bqs bpc
            bqu:f16[64,256,3072] = mul bqt bpd
            bqv:f16[64,256,3072] = add_any bqt bqu
            bqw:f16[64,256,3072] = mul 0.7978515625 bqv
            bqx:f16[64,256,3072] = mul 0.044708251953125 bqw
            bqy:f16[64,256,3072] = mul bqx bpe
            bqz:f16[64,256,3072] = add_any bqw bqy
            bra:f16[64,256,3072] = mul bqq bpf
            brb:f16[64,256,3072] = add_any bqz bra
            brc:f16[3072] = reduce_sum[axes=(0, 1)] brb
            brd:f16[1,1,3072] = reshape[dimensions=None new_sizes=(1, 1, 3072)] brc
            bre:f16[3072] = reduce_sum[axes=(0, 1)] brd
            brf:f16[3072,768] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] brb bpg
            brg:f16[768,3072] = transpose[permutation=(1, 0)] brf
            brh:f16[3072,768] = transpose[permutation=(1, 0)] brg
            bri:f16[64,256,768] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] brb bph
            brj:f32[64,256,768] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bri
            brk:f32[768] = reduce_sum[axes=(0, 1)] brj
            brl:f32[1,1,768] = reshape[dimensions=None new_sizes=(1, 1, 768)] brk
            brm:f16[1,1,768] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] brl
            brn:f16[768] = reshape[dimensions=None new_sizes=(768,)] brm
            bro:f32[64,256,768] = mul bpi brj
            brp:f32[64,256,768] = mul bpj bro
            brq:f32[768] = reduce_sum[axes=(0, 1)] brp
            brr:f32[1,1,768] = reshape[dimensions=None new_sizes=(1, 1, 768)] brq
            brs:f16[1,1,768] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] brr
            brt:f16[768] = reshape[dimensions=None new_sizes=(768,)] brs
            bru:f32[64,256,768] = mul bro bpk
            brv:f32[64,256] = reduce_sum[axes=(2,)] bru
            brw:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] brv
            brx:f32[64,256,1] = mul brw bpl
            bry:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] brx
            brz:f32[64,256] = mul bry bpm
            bsa:f32[64,256] = neg brz
            bsb:f32[64,256] = mul bsa bpn
            bsc:f32[64,256] = div brz 768.0
            bsd:f32[64,256,768] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 768)
            ] bsc
            bse:f32[64,256,768] = mul bsd bpo
            bsf:f32[64,256,768] = mul brj bpp
            bsg:f32[64,256,768] = neg bsf
            bsh:f32[64,256] = reduce_sum[axes=(2,)] bsg
            bsi:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] bsh
            bsj:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] bsi
            bsk:f32[64,256] = add_any bsb bsj
            bsl:f32[64,256] = div bsk 768.0
            bsm:f32[64,256,768] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 768)
            ] bsl
            bsn:f32[64,256,768] = add_any bse bsm
            bso:f16[64,256,768] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bsn
            bsp:f16[64,256,768] = add_any bom bso
            bsq:f16[64,256,768] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bsf
            bsr:f16[64,256,768] = add_any bsp bsq
            bss:f16[768] = reduce_sum[axes=(0, 1)] bsr
            bst:f16[1,1,768] = reshape[dimensions=None new_sizes=(1, 1, 768)] bss
            bsu:f16[768] = reduce_sum[axes=(0, 1)] bst
            bsv:f16[768,768] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] bsr bpq
            bsw:f16[768,768] = transpose[permutation=(1, 0)] bsv
            bsx:f16[768,768] = transpose[permutation=(1, 0)] bsw
            bsy:f16[64,256,768] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] bsr bpr
            bsz:f16[64,256,12,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 12, 64)
            ] bsy
            bta:f16[64,12,64,256] = transpose[permutation=(0, 2, 3, 1)] bsz
            btb:f16[64,12,256,256] = dot_general[
              dimension_numbers=(((2,), (3,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] bta bps
            btc:f16[64,12,256,256] = mul btb bpt
            btd:f16[64,12,256,256] = mul btc bpu
            bte:f16[64,12,256] = reduce_sum[axes=(3,)] btd
            btf:f16[64,12,256,1] = reshape[
              dimensions=None
              new_sizes=(64, 12, 256, 1)
            ] bte
            btg:f16[64,12,256,1] = neg btf
            bth:f32[64,12,256,1] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] btg
            bti:f32[64,12,256] = reduce_sum[axes=(3,)] bth
            btj:f32[64,12,256,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 12, 256, 256)
            ] bti
            btk:f16[64,12,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] btj
            btl:f16[64,12,256,256] = div btb bpv
            btm:f16[64,12,256,256] = add_any btk btl
            btn:f16[64,12,256,256] = mul btm bpu
            bto:f16[64,12,256,64] = dot_general[
              dimension_numbers=(((2,), (1,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] btn bpw
            btp:f16[64,256,12,64] = transpose[permutation=(0, 2, 1, 3)] bto
            btq:f16[64,256,768] = reshape[
              dimensions=None
              new_sizes=(64, 256, 768)
            ] btp
            btr:f16[64,256,2304] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (768, 768, 0))
            ] btq 0.0
            bts:f16[64,12,256,64] = dot_general[
              dimension_numbers=(((3,), (1,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] btn bpx
            btt:f16[64,256,12,64] = transpose[permutation=(0, 2, 1, 3)] bts
            btu:f16[64,256,12,64] = div btt bpy
            btv:f16[64,256,768] = reshape[
              dimensions=None
              new_sizes=(64, 256, 768)
            ] btu
            btw:f16[64,256,2304] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (0, 1536, 0))
            ] btv 0.0
            btx:f16[64,256,2304] = add_any btr btw
            bty:f16[64,12,64,256] = dot_general[
              dimension_numbers=(((3,), (2,)), ((0, 1), (0, 1)))
              precision=None
              preferred_element_type=None
            ] bta bpz
            btz:f16[64,256,12,64] = transpose[permutation=(0, 3, 1, 2)] bty
            bua:f16[64,256,768] = reshape[
              dimensions=None
              new_sizes=(64, 256, 768)
            ] btz
            bub:f16[64,256,2304] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (1536, 0, 0))
            ] bua 0.0
            buc:f16[64,256,2304] = add_any btx bub
            bud:f16[2304] = reduce_sum[axes=(0, 1)] buc
            bue:f16[1,1,2304] = reshape[dimensions=None new_sizes=(1, 1, 2304)] bud
            buf:f16[2304] = reduce_sum[axes=(0, 1)] bue
            bug:f16[2304,768] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] buc bqa
            buh:f16[768,2304] = transpose[permutation=(1, 0)] bug
            bui:f16[2304,768] = transpose[permutation=(1, 0)] buh
            buj:f16[64,256,768] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] buc bqb
            buk:f32[64,256,768] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] buj
            bul:f32[768] = reduce_sum[axes=(0, 1)] buk
            bum:f32[1,1,768] = reshape[dimensions=None new_sizes=(1, 1, 768)] bul
            bun:f16[1,1,768] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bum
            buo:f16[768] = reshape[dimensions=None new_sizes=(768,)] bun
            bup:f32[64,256,768] = mul bqc buk
            buq:f32[64,256,768] = mul bqd bup
            bur:f32[768] = reduce_sum[axes=(0, 1)] buq
            bus:f32[1,1,768] = reshape[dimensions=None new_sizes=(1, 1, 768)] bur
            but:f16[1,1,768] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bus
            buu:f16[768] = reshape[dimensions=None new_sizes=(768,)] but
            buv:f32[64,256,768] = mul bup bqe
            buw:f32[64,256] = reduce_sum[axes=(2,)] buv
            bux:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] buw
            buy:f32[64,256,1] = mul bux bqf
            buz:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] buy
            bva:f32[64,256] = mul buz bqg
            bvb:f32[64,256] = neg bva
            bvc:f32[64,256] = mul bvb bqh
            bvd:f32[64,256] = div bva 768.0
            bve:f32[64,256,768] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 768)
            ] bvd
            bvf:f32[64,256,768] = mul bve bqi
            bvg:f32[64,256,768] = mul buk bqj
            bvh:f32[64,256,768] = neg bvg
            bvi:f32[64,256] = reduce_sum[axes=(2,)] bvh
            bvj:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] bvi
            bvk:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] bvj
            bvl:f32[64,256] = add_any bvc bvk
            bvm:f32[64,256] = div bvl 768.0
            bvn:f32[64,256,768] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 768)
            ] bvm
            bvo:f32[64,256,768] = add_any bvf bvn
            bvp:f16[64,256,768] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bvo
            bvq:f16[64,256,768] = add_any bsr bvp
            bvr:f16[64,256,768] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bvg
            bvs:f16[64,256,768] = add_any bvq bvr
            bvt:f16[768] = add bon bqm
            bvu:f16[768,3072] = add boo bqp
            bvv:f16[3072] = add bop bre
            bvw:f16[3072,768] = add boq brh
            bvx:f16[768] = add bor brn
            bvy:f16[768] = add bos brt
            bvz:f16[768] = add bot bsu
            bwa:f16[768,768] = add bou bsx
            bwb:f16[2304] = add bov buf
            bwc:f16[2304,768] = add bow bui
            bwd:f16[768] = add box buo
            bwe:f16[768] = add boy buu
          in (bvs, bvt, bvu, bvv, bvw, bvx, bvy, bvz, bwa, bwb, bwc, bwd, bwe) }
        name=64
      ] bft dt du dv dw dx dy dz ea eb ec ed ee jh ji jj jk jl jm jn jo jp jq jr
        js jt ju jv jw jx jy jz ka kb kc kd ke kf kg kh ki kj kk kl km kn ko kp kq
        kr
    in (kt, ku, kv, kw, kx, ky, kz, la, lb, lc, ld, le, sz, ta, tb, tc, td, te, tf,
      tg, th, ti, tj, tk, bbf, bbg, bbh, bbi, bbj, bbk, bfu, bfv, bfw, bfx, bfy,
      bfz, bga, bgb, bgc, bgd, bge, bgf, boa, bob, boc, bod, boe, bof, bog, boh,
      boi, boj, bok, bol, bnz) }
  name=6
] bwf bwg bwh bwi bwj bwk bwl bwm bwn bwo bwp bwq bwr bws bwt bwu bwv bww bwx bwy
  bwz bxa bxb bxc bxd bxe bxf bxg bxh bxi bxj bxk bxl bxm bxn bxo bxp bxq bxr bxs
  bxt bxu bxv bxw bxx bxy bxz bya byb byc byd bye byf byg byh byi byj byk byl bym
  byn byo byp byq byr bys byt byu byv byw byx byy byz bza bzb bzc bzd bze bzf bzg
  bzh bzi bzj bzk bzl bzm bzn bzo bzp bzq bzr bzs bzt bzu bzv bzw bzx bzy bzz caa
  cab cac cad cae caf cag cah cai caj cak cal cam can cao cap caq car cas cat cau
  cav caw cax cay caz cba cbb cbc cbd cbe cbf cbg cbh cbi cbj cbk cbl cbm cbn cbo
  cbp cbq cbr cbs cbt cbu cbv cbw cbx cby cbz cca ccb ccc ccd cce ccf ccg cch cci
  ccj cck ccl ccm ccn cco ccp ccq ccr ccs cct ccu ccv ccw ccx ccy ccz cda cdb cdc
  cdd cde cdf cdg cdh cdi cdj cdk cdl cdm cdn cdo cdp cdq cdr cds cdt cdu cdv cdw
  cdx cdy cdz cea ceb cec ced cee cef ceg ceh cei cej cek cel cem cen ceo cep ceq
  cer ces cet
eqn: a:f16[768] b:f16[768,768] c:f16[2304] d:f16[2304,768] e:f16[768] f:f16[768] g:f16[768]
  h:f16[768,3072] i:f16[3072] j:f16[3072,768] k:f16[768] l:f16[768] m:f16[768] n:f16[768,768]
  o:f16[2304] p:f16[2304,768] q:f16[768] r:f16[768] s:f16[768] t:f16[768,3072] u:f16[3072]
  v:f16[3072,768] w:f16[768] x:f16[768] y:f16[768] z:f16[768,768] ba:f16[2304] bb:f16[2304,768]
  bc:f16[768] bd:f16[768] be:f16[768] bf:f16[768,3072] bg:f16[3072] bh:f16[3072,768]
  bi:f16[768] bj:f16[768] bk:f16[768] bl:f16[768,768] bm:f16[2304] bn:f16[2304,768]
  bo:f16[768] bp:f16[768] bq:f16[768] br:f16[768,3072] bs:f16[3072] bt:f16[3072,768]
  bu:f16[768] bv:f16[768] bw:f16[768] bx:f16[768,768] by:f16[2304] bz:f16[2304,768]
  ca:f16[768] cb:f16[768] cc:f16[64,256,768] = pipeline_marker[
  mark_type=end
  name=6
] cd ce cf cg ch ci cj ck cl cm cn co cp cq cr cs ct cu cv cw cx cy cz da db dc dd
  de df dg dh di dj dk dl dm dn do dp dq dr ds dt du dv dw dx dy dz ea eb ec ed ee
  ef
input_var_mem_size
[qnj, qnk, qnh, qni, qnl, qnm, qnf, qng, qnd, qne, qnb, qnc, qmx, qmy, qmv, qmw, qmz, qna, qmt, qmu, qmr, qms, qmp, qmq, qml, qmm, qmj, qmk, qmn, qmo, qmh, qmi, qmf, qmg, qmd, qme, qlz, qma, qlx, qly, qmb, qmc, qlv, qlw, qlt, qlu, qlr, qls, qln, qlo, qll, qlm, qlp, qlq, fkd, cpk, cpl, cnw, cph, cpb, cpf, cor, cnv, coq, cpg, cng, cnn, cmu, cmw, cna, cmy, cmq, cmf, cma, cnb, clp, clq, cle, clm, cll, clh, clo, cla, clb, cko, ckq, cku, cks, ckk, cjz, cju, ckv, ciu, civ, chg, cir, cil, cip, cib, chf, cia, ciq, cgq, cgx, cge, cgg, cgk, cgi, cga, cfp, cfk, cgl, cez, cfa, ceo, cew, cev, cer, cey, cek, cel, cdy, cea, cee, cec, cdu, cdj, cde, cef, cce, ccf, caq, ccb, cbv, cbz, cbl, cap, cbk, cca, caa, cah, bzo, bzq, bzu, bzs, bzk, byz, byu, bzv, bya, byb, bxp, bxx, bxw, bxs, bxz, bxl, bxm, bwz, bxb, bxf, bxd, bwv, bwk, bwf, bxg, bvu, bvv, bug, bvr, bvl, bvp, bvb, buf, bva, bvq, btq, btx, bte, btg, btk, bti, bta, bsp, bsk, btl, brk, brl, bqz, brh, brg, brc, brj, bqv, bqw, bqj, bql, bqp, bqn, bqf, bpu, bpp, bqq, bpe, bpf, bnq, bpb, bov, boz, bol, bnp, bok, bpa, bna, bnh, bmo, bmq, bmu, bms, bmk, blz, blu, bmv]
[(768,), (768, 768), (2304,), (2304, 768), (768,), (768,), (768,), (768, 3072), (3072,), (3072, 768), (768,), (768,), (768,), (768, 768), (2304,), (2304, 768), (768,), (768,), (768,), (768, 3072), (3072,), (3072, 768), (768,), (768,), (768,), (768, 768), (2304,), (2304, 768), (768,), (768,), (768,), (768, 3072), (3072,), (3072, 768), (768,), (768,), (768,), (768, 768), (2304,), (2304, 768), (768,), (768,), (768,), (768, 3072), (3072,), (3072, 768), (768,), (768,), (768,), (768, 768), (2304,), (2304, 768), (768,), (768,), (64, 256, 768), (64, 256, 768), (768, 768), (64, 256, 12, 64), (64, 12, 256, 1), (64, 12, 256, 256), (64, 12, 256, 1), (64, 256, 12, 64), (64, 256, 12, 64), (), (64, 12, 256, 256), (64, 256, 768), (768, 2304), (64, 256, 768), (64, 256, 1), (1, 1, 768), (64, 256, 1), (64, 256), (64, 256), (64, 256, 768), (64, 256, 768), (64, 256, 3072), (3072, 768), (64, 256, 3072), (64, 256, 3072), (64, 256, 3072), (64, 256, 3072), (64, 256, 3072), (64, 256, 768), (768, 3072), (64, 256, 768), (64, 256, 1), (1, 1, 768), (64, 256, 1), (64, 256), (64, 256), (64, 256, 768), (64, 256, 768), (64, 256, 768), (768, 768), (64, 256, 12, 64), (64, 12, 256, 1), (64, 12, 256, 256), (64, 12, 256, 1), (64, 256, 12, 64), (64, 256, 12, 64), (), (64, 12, 256, 256), (64, 256, 768), (768, 2304), (64, 256, 768), (64, 256, 1), (1, 1, 768), (64, 256, 1), (64, 256), (64, 256), (64, 256, 768), (64, 256, 768), (64, 256, 3072), (3072, 768), (64, 256, 3072), (64, 256, 3072), (64, 256, 3072), (64, 256, 3072), (64, 256, 3072), (64, 256, 768), (768, 3072), (64, 256, 768), (64, 256, 1), (1, 1, 768), (64, 256, 1), (64, 256), (64, 256), (64, 256, 768), (64, 256, 768), (64, 256, 768), (768, 768), (64, 256, 12, 64), (64, 12, 256, 1), (64, 12, 256, 256), (64, 12, 256, 1), (64, 256, 12, 64), (64, 256, 12, 64), (), (64, 12, 256, 256), (64, 256, 768), (768, 2304), (64, 256, 768), (64, 256, 1), (1, 1, 768), (64, 256, 1), (64, 256), (64, 256), (64, 256, 768), (64, 256, 768), (64, 256, 3072), (3072, 768), (64, 256, 3072), (64, 256, 3072), (64, 256, 3072), (64, 256, 3072), (64, 256, 3072), (64, 256, 768), (768, 3072), (64, 256, 768), (64, 256, 1), (1, 1, 768), (64, 256, 1), (64, 256), (64, 256), (64, 256, 768), (64, 256, 768), (64, 256, 768), (768, 768), (64, 256, 12, 64), (64, 12, 256, 1), (64, 12, 256, 256), (64, 12, 256, 1), (64, 256, 12, 64), (64, 256, 12, 64), (), (64, 12, 256, 256), (64, 256, 768), (768, 2304), (64, 256, 768), (64, 256, 1), (1, 1, 768), (64, 256, 1), (64, 256), (64, 256), (64, 256, 768), (64, 256, 768), (64, 256, 3072), (3072, 768), (64, 256, 3072), (64, 256, 3072), (64, 256, 3072), (64, 256, 3072), (64, 256, 3072), (64, 256, 768), (768, 3072), (64, 256, 768), (64, 256, 1), (1, 1, 768), (64, 256, 1), (64, 256), (64, 256), (64, 256, 768), (64, 256, 768), (64, 256, 768), (768, 768), (64, 256, 12, 64), (64, 12, 256, 1), (64, 12, 256, 256), (64, 12, 256, 1), (64, 256, 12, 64), (64, 256, 12, 64), (), (64, 12, 256, 256), (64, 256, 768), (768, 2304), (64, 256, 768), (64, 256, 1), (1, 1, 768), (64, 256, 1), (64, 256), (64, 256), (64, 256, 768), (64, 256, 768)]
param_size: 2.3212759541347623 [GiB] 
jaxpr.eqns, len: 3
eqn: a:f16[768] b:f16[768,3072] c:f16[3072] d:f16[3072,768] e:f16[768] f:f16[768] g:f16[768]
  h:f16[768,768] i:f16[2304] j:f16[2304,768] k:f16[768] l:f16[768] m:f16[768] n:f16[768,3072]
  o:f16[3072] p:f16[3072,768] q:f16[768] r:f16[768] s:f16[768] t:f16[768,768] u:f16[2304]
  v:f16[2304,768] w:f16[768] x:f16[768] y:f16[1024,768] z:f16[50257,768] ba:f16[64,256,768]
  bb:f16[64,256,3072] bc:f16[3072,768] bd:f16[64,256,3072] be:f16[64,256,3072] bf:f16[64,256,3072]
  bg:f16[64,256,3072] bh:f16[64,256,3072] bi:f16[64,256,768] bj:f16[768,3072] bk:f32[64,256,768]
  bl:f32[64,256,1] bm:f32[1,1,768] bn:f32[64,256,1] bo:f32[64,256] bp:f32[64,256]
  bq:f32[64,256,768] br:f32[64,256,768] bs:f16[64,256,768] bt:f16[768,768] bu:f16[64,256,12,64]
  bv:f16[64,12,256,1] bw:f16[64,12,256,256] bx:f16[64,12,256,1] by:f16[64,256,12,64]
  bz:f16[64,256,12,64] ca:f16[] cb:f16[64,12,256,256] cc:f16[64,256,768] cd:f16[768,2304]
  ce:f32[64,256,768] cf:f32[64,256,1] cg:f32[1,1,768] ch:f32[64,256,1] ci:f32[64,256]
  cj:f32[64,256] ck:f32[64,256,768] cl:f32[64,256,768] cm:f16[64,256,3072] cn:f16[3072,768]
  co:f16[64,256,3072] cp:f16[64,256,3072] cq:f16[64,256,3072] cr:f16[64,256,3072]
  cs:f16[64,256,3072] ct:f16[64,256,768] cu:f16[768,3072] cv:f32[64,256,768] cw:f32[64,256,1]
  cx:f32[1,1,768] cy:f32[64,256,1] cz:f32[64,256] da:f32[64,256] db:f32[64,256,768]
  dc:f32[64,256,768] dd:f16[64,256,768] de:f16[768,768] df:f16[64,256,12,64] dg:f16[64,12,256,1]
  dh:f16[64,12,256,256] di:f16[64,12,256,1] dj:f16[64,256,12,64] dk:f16[64,256,12,64]
  dl:f16[] dm:f16[64,12,256,256] dn:f16[64,256,768] do:f16[768,2304] dp:f32[64,256,768]
  dq:f32[64,256,1] dr:f32[1,1,768] ds:f32[64,256,1] dt:f32[64,256] du:f32[64,256]
  dv:f32[64,256,768] dw:f32[64,256,768] dx:f16[64,256,1024] dy:f16[64,256,50257] = pipeline_marker[
  mark_type=start
  name=7
] dz ea eb ec ed ee ef eg eh ei ej ek el em en eo ep eq er es et eu ev ew ex ey ez
  fa fb fc fd fe ff fg fh fi fj fk fl fm fn fo fp fq fr fs ft fu fv fw fx fy fz ga
  gb gc gd ge gf gg gh gi gj gk gl gm gn go gp gq gr gs gt gu gv gw gx gy gz ha hb
  hc hd he hf hg hh hi hj hk hl hm hn ho hp hq hr hs ht hu hv hw hx
eqn: a:f16[768] b:f16[768,3072] c:f16[3072] d:f16[3072,768] e:f16[768] f:f16[768] g:f16[768]
  h:f16[768,768] i:f16[2304] j:f16[2304,768] k:f16[768] l:f16[768] m:f16[768] n:f16[768,3072]
  o:f16[3072] p:f16[3072,768] q:f16[768] r:f16[768] s:f16[768] t:f16[768,768] u:f16[2304]
  v:f16[2304,768] w:f16[768] x:f16[768] y:f16[1024,768] z:f16[50257,768] = named_call[
  call_jaxpr={ lambda ; ba:f16[768] bb:f16[768,3072] bc:f16[3072] bd:f16[3072,768]
      be:f16[768] bf:f16[768] bg:f16[768] bh:f16[768,768] bi:f16[2304] bj:f16[2304,768]
      bk:f16[768] bl:f16[768] bm:f16[768] bn:f16[768,3072] bo:f16[3072] bp:f16[3072,768]
      bq:f16[768] br:f16[768] bs:f16[768] bt:f16[768,768] bu:f16[2304] bv:f16[2304,768]
      bw:f16[768] bx:f16[768] by:f16[1024,768] bz:f16[50257,768] ca:f16[64,256,768]
      cb:f16[64,256,3072] cc:f16[3072,768] cd:f16[64,256,3072] ce:f16[64,256,3072]
      cf:f16[64,256,3072] cg:f16[64,256,3072] ch:f16[64,256,3072] ci:f16[64,256,768]
      cj:f16[768,3072] ck:f32[64,256,768] cl:f32[64,256,1] cm:f32[1,1,768] cn:f32[64,256,1]
      co:f32[64,256] cp:f32[64,256] cq:f32[64,256,768] cr:f32[64,256,768] cs:f16[64,256,768]
      ct:f16[768,768] cu:f16[64,256,12,64] cv:f16[64,12,256,1] cw:f16[64,12,256,256]
      cx:f16[64,12,256,1] cy:f16[64,256,12,64] cz:f16[64,256,12,64] da:f16[] db:f16[64,12,256,256]
      dc:f16[64,256,768] dd:f16[768,2304] de:f32[64,256,768] df:f32[64,256,1] dg:f32[1,1,768]
      dh:f32[64,256,1] di:f32[64,256] dj:f32[64,256] dk:f32[64,256,768] dl:f32[64,256,768]
      dm:f16[64,256,3072] dn:f16[3072,768] do:f16[64,256,3072] dp:f16[64,256,3072]
      dq:f16[64,256,3072] dr:f16[64,256,3072] ds:f16[64,256,3072] dt:f16[64,256,768]
      du:f16[768,3072] dv:f32[64,256,768] dw:f32[64,256,1] dx:f32[1,1,768] dy:f32[64,256,1]
      dz:f32[64,256] ea:f32[64,256] eb:f32[64,256,768] ec:f32[64,256,768] ed:f16[64,256,768]
      ee:f16[768,768] ef:f16[64,256,12,64] eg:f16[64,12,256,1] eh:f16[64,12,256,256]
      ei:f16[64,12,256,1] ej:f16[64,256,12,64] ek:f16[64,256,12,64] el:f16[] em:f16[64,12,256,256]
      en:f16[64,256,768] eo:f16[768,2304] ep:f32[64,256,768] eq:f32[64,256,1] er:f32[1,1,768]
      es:f32[64,256,1] et:f32[64,256] eu:f32[64,256] ev:f32[64,256,768] ew:f32[64,256,768]
      ex:f16[64,256,1024] ey:f16[64,256,50257]. let
      ez:f16[64,256,768] fa:f16[768] fb:f16[768,3072] fc:f16[3072] fd:f16[3072,768]
        fe:f16[768] ff:f16[768] fg:f16[768] fh:f16[768,768] fi:f16[2304] fj:f16[2304,768]
        fk:f16[768] fl:f16[768] = named_call[
        call_jaxpr={ lambda ; fm:f16[64,256,768] fn:f16[768] fo:f16[768,3072] fp:f16[3072]
            fq:f16[3072,768] fr:f16[768] fs:f16[768] ft:f16[768] fu:f16[768,768]
            fv:f16[2304] fw:f16[2304,768] fx:f16[768] fy:f16[768] fz:f16[64,256,3072]
            ga:f16[3072,768] gb:f16[64,256,3072] gc:f16[64,256,3072] gd:f16[64,256,3072]
            ge:f16[64,256,3072] gf:f16[64,256,3072] gg:f16[64,256,768] gh:f16[768,3072]
            gi:f32[64,256,768] gj:f32[64,256,1] gk:f32[1,1,768] gl:f32[64,256,1]
            gm:f32[64,256] gn:f32[64,256] go:f32[64,256,768] gp:f32[64,256,768] gq:f16[64,256,768]
            gr:f16[768,768] gs:f16[64,256,12,64] gt:f16[64,12,256,1] gu:f16[64,12,256,256]
            gv:f16[64,12,256,1] gw:f16[64,256,12,64] gx:f16[64,256,12,64] gy:f16[]
            gz:f16[64,12,256,256] ha:f16[64,256,768] hb:f16[768,2304] hc:f32[64,256,768]
            hd:f32[64,256,1] he:f32[1,1,768] hf:f32[64,256,1] hg:f32[64,256] hh:f32[64,256]
            hi:f32[64,256,768] hj:f32[64,256,768]. let
            hk:f16[768] = reduce_sum[axes=(0, 1)] fm
            hl:f16[1,1,768] = reshape[dimensions=None new_sizes=(1, 1, 768)] hk
            hm:f16[768] = reduce_sum[axes=(0, 1)] hl
            hn:f16[768,3072] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] fm fz
            ho:f16[3072,768] = transpose[permutation=(1, 0)] hn
            hp:f16[768,3072] = transpose[permutation=(1, 0)] ho
            hq:f16[64,256,3072] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] fm ga
            hr:f16[64,256,3072] = mul gb hq
            hs:f16[64,256,3072] = mul 0.5 hr
            ht:f16[64,256,3072] = mul hs gc
            hu:f16[64,256,3072] = mul ht gd
            hv:f16[64,256,3072] = add_any ht hu
            hw:f16[64,256,3072] = mul 0.7978515625 hv
            hx:f16[64,256,3072] = mul 0.044708251953125 hw
            hy:f16[64,256,3072] = mul hx ge
            hz:f16[64,256,3072] = add_any hw hy
            ia:f16[64,256,3072] = mul hq gf
            ib:f16[64,256,3072] = add_any hz ia
            ic:f16[3072] = reduce_sum[axes=(0, 1)] ib
            id:f16[1,1,3072] = reshape[dimensions=None new_sizes=(1, 1, 3072)] ic
            ie:f16[3072] = reduce_sum[axes=(0, 1)] id
            if:f16[3072,768] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] ib gg
            ig:f16[768,3072] = transpose[permutation=(1, 0)] if
            ih:f16[3072,768] = transpose[permutation=(1, 0)] ig
            ii:f16[64,256,768] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] ib gh
            ij:f32[64,256,768] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] ii
            ik:f32[768] = reduce_sum[axes=(0, 1)] ij
            il:f32[1,1,768] = reshape[dimensions=None new_sizes=(1, 1, 768)] ik
            im:f16[1,1,768] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] il
            in:f16[768] = reshape[dimensions=None new_sizes=(768,)] im
            io:f32[64,256,768] = mul gi ij
            ip:f32[64,256,768] = mul gj io
            iq:f32[768] = reduce_sum[axes=(0, 1)] ip
            ir:f32[1,1,768] = reshape[dimensions=None new_sizes=(1, 1, 768)] iq
            is:f16[1,1,768] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] ir
            it:f16[768] = reshape[dimensions=None new_sizes=(768,)] is
            iu:f32[64,256,768] = mul io gk
            iv:f32[64,256] = reduce_sum[axes=(2,)] iu
            iw:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] iv
            ix:f32[64,256,1] = mul iw gl
            iy:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] ix
            iz:f32[64,256] = mul iy gm
            ja:f32[64,256] = neg iz
            jb:f32[64,256] = mul ja gn
            jc:f32[64,256] = div iz 768.0
            jd:f32[64,256,768] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 768)
            ] jc
            je:f32[64,256,768] = mul jd go
            jf:f32[64,256,768] = mul ij gp
            jg:f32[64,256,768] = neg jf
            jh:f32[64,256] = reduce_sum[axes=(2,)] jg
            ji:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] jh
            jj:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] ji
            jk:f32[64,256] = add_any jb jj
            jl:f32[64,256] = div jk 768.0
            jm:f32[64,256,768] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 768)
            ] jl
            jn:f32[64,256,768] = add_any je jm
            jo:f16[64,256,768] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] jn
            jp:f16[64,256,768] = add_any fm jo
            jq:f16[64,256,768] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] jf
            jr:f16[64,256,768] = add_any jp jq
            js:f16[768] = reduce_sum[axes=(0, 1)] jr
            jt:f16[1,1,768] = reshape[dimensions=None new_sizes=(1, 1, 768)] js
            ju:f16[768] = reduce_sum[axes=(0, 1)] jt
            jv:f16[768,768] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] jr gq
            jw:f16[768,768] = transpose[permutation=(1, 0)] jv
            jx:f16[768,768] = transpose[permutation=(1, 0)] jw
            jy:f16[64,256,768] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] jr gr
            jz:f16[64,256,12,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 12, 64)
            ] jy
            ka:f16[64,12,64,256] = transpose[permutation=(0, 2, 3, 1)] jz
            kb:f16[64,12,256,256] = dot_general[
              dimension_numbers=(((2,), (3,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] ka gs
            kc:f16[64,12,256,256] = mul kb gt
            kd:f16[64,12,256,256] = mul kc gu
            ke:f16[64,12,256] = reduce_sum[axes=(3,)] kd
            kf:f16[64,12,256,1] = reshape[
              dimensions=None
              new_sizes=(64, 12, 256, 1)
            ] ke
            kg:f16[64,12,256,1] = neg kf
            kh:f32[64,12,256,1] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] kg
            ki:f32[64,12,256] = reduce_sum[axes=(3,)] kh
            kj:f32[64,12,256,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 12, 256, 256)
            ] ki
            kk:f16[64,12,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] kj
            kl:f16[64,12,256,256] = div kb gv
            km:f16[64,12,256,256] = add_any kk kl
            kn:f16[64,12,256,256] = mul km gu
            ko:f16[64,12,256,64] = dot_general[
              dimension_numbers=(((2,), (1,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] kn gw
            kp:f16[64,256,12,64] = transpose[permutation=(0, 2, 1, 3)] ko
            kq:f16[64,256,768] = reshape[
              dimensions=None
              new_sizes=(64, 256, 768)
            ] kp
            kr:f16[64,256,2304] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (768, 768, 0))
            ] kq 0.0
            ks:f16[64,12,256,64] = dot_general[
              dimension_numbers=(((3,), (1,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] kn gx
            kt:f16[64,256,12,64] = transpose[permutation=(0, 2, 1, 3)] ks
            ku:f16[64,256,12,64] = div kt gy
            kv:f16[64,256,768] = reshape[
              dimensions=None
              new_sizes=(64, 256, 768)
            ] ku
            kw:f16[64,256,2304] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (0, 1536, 0))
            ] kv 0.0
            kx:f16[64,256,2304] = add_any kr kw
            ky:f16[64,12,64,256] = dot_general[
              dimension_numbers=(((3,), (2,)), ((0, 1), (0, 1)))
              precision=None
              preferred_element_type=None
            ] ka gz
            kz:f16[64,256,12,64] = transpose[permutation=(0, 3, 1, 2)] ky
            la:f16[64,256,768] = reshape[
              dimensions=None
              new_sizes=(64, 256, 768)
            ] kz
            lb:f16[64,256,2304] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (1536, 0, 0))
            ] la 0.0
            lc:f16[64,256,2304] = add_any kx lb
            ld:f16[2304] = reduce_sum[axes=(0, 1)] lc
            le:f16[1,1,2304] = reshape[dimensions=None new_sizes=(1, 1, 2304)] ld
            lf:f16[2304] = reduce_sum[axes=(0, 1)] le
            lg:f16[2304,768] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] lc ha
            lh:f16[768,2304] = transpose[permutation=(1, 0)] lg
            li:f16[2304,768] = transpose[permutation=(1, 0)] lh
            lj:f16[64,256,768] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] lc hb
            lk:f32[64,256,768] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] lj
            ll:f32[768] = reduce_sum[axes=(0, 1)] lk
            lm:f32[1,1,768] = reshape[dimensions=None new_sizes=(1, 1, 768)] ll
            ln:f16[1,1,768] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] lm
            lo:f16[768] = reshape[dimensions=None new_sizes=(768,)] ln
            lp:f32[64,256,768] = mul hc lk
            lq:f32[64,256,768] = mul hd lp
            lr:f32[768] = reduce_sum[axes=(0, 1)] lq
            ls:f32[1,1,768] = reshape[dimensions=None new_sizes=(1, 1, 768)] lr
            lt:f16[1,1,768] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] ls
            lu:f16[768] = reshape[dimensions=None new_sizes=(768,)] lt
            lv:f32[64,256,768] = mul lp he
            lw:f32[64,256] = reduce_sum[axes=(2,)] lv
            lx:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] lw
            ly:f32[64,256,1] = mul lx hf
            lz:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] ly
            ma:f32[64,256] = mul lz hg
            mb:f32[64,256] = neg ma
            mc:f32[64,256] = mul mb hh
            md:f32[64,256] = div ma 768.0
            me:f32[64,256,768] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 768)
            ] md
            mf:f32[64,256,768] = mul me hi
            mg:f32[64,256,768] = mul lk hj
            mh:f32[64,256,768] = neg mg
            mi:f32[64,256] = reduce_sum[axes=(2,)] mh
            mj:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] mi
            mk:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] mj
            ml:f32[64,256] = add_any mc mk
            mm:f32[64,256] = div ml 768.0
            mn:f32[64,256,768] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 768)
            ] mm
            mo:f32[64,256,768] = add_any mf mn
            mp:f16[64,256,768] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] mo
            mq:f16[64,256,768] = add_any jr mp
            mr:f16[64,256,768] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] mg
            ms:f16[64,256,768] = add_any mq mr
            mt:f16[768] = add fn hm
            mu:f16[768,3072] = add fo hp
            mv:f16[3072] = add fp ie
            mw:f16[3072,768] = add fq ih
            mx:f16[768] = add fr in
            my:f16[768] = add fs it
            mz:f16[768] = add ft ju
            na:f16[768,768] = add fu jx
            nb:f16[2304] = add fv lf
            nc:f16[2304,768] = add fw li
            nd:f16[768] = add fx lo
            ne:f16[768] = add fy lu
          in (ms, mt, mu, mv, mw, mx, my, mz, na, nb, nc, nd, ne) }
        name=70
      ] ca ba bb bc bd be bf bg bh bi bj bk bl cb cc cd ce cf cg ch ci cj ck cl cm
        cn co cp cq cr cs ct cu cv cw cx cy cz da db dc dd de df dg dh di dj dk dl
      nf:f16[64,256,768] ng:f16[768] nh:f16[768,3072] ni:f16[3072] nj:f16[3072,768]
        nk:f16[768] nl:f16[768] nm:f16[768] nn:f16[768,768] no:f16[2304] np:f16[2304,768]
        nq:f16[768] nr:f16[768] = named_call[
        call_jaxpr={ lambda ; ns:f16[64,256,768] nt:f16[768] nu:f16[768,3072] nv:f16[3072]
            nw:f16[3072,768] nx:f16[768] ny:f16[768] nz:f16[768] oa:f16[768,768]
            ob:f16[2304] oc:f16[2304,768] od:f16[768] oe:f16[768] of:f16[64,256,3072]
            og:f16[3072,768] oh:f16[64,256,3072] oi:f16[64,256,3072] oj:f16[64,256,3072]
            ok:f16[64,256,3072] ol:f16[64,256,3072] om:f16[64,256,768] on:f16[768,3072]
            oo:f32[64,256,768] op:f32[64,256,1] oq:f32[1,1,768] or:f32[64,256,1]
            os:f32[64,256] ot:f32[64,256] ou:f32[64,256,768] ov:f32[64,256,768] ow:f16[64,256,768]
            ox:f16[768,768] oy:f16[64,256,12,64] oz:f16[64,12,256,1] pa:f16[64,12,256,256]
            pb:f16[64,12,256,1] pc:f16[64,256,12,64] pd:f16[64,256,12,64] pe:f16[]
            pf:f16[64,12,256,256] pg:f16[64,256,768] ph:f16[768,2304] pi:f32[64,256,768]
            pj:f32[64,256,1] pk:f32[1,1,768] pl:f32[64,256,1] pm:f32[64,256] pn:f32[64,256]
            po:f32[64,256,768] pp:f32[64,256,768]. let
            pq:f16[768] = reduce_sum[axes=(0, 1)] ns
            pr:f16[1,1,768] = reshape[dimensions=None new_sizes=(1, 1, 768)] pq
            ps:f16[768] = reduce_sum[axes=(0, 1)] pr
            pt:f16[768,3072] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] ns of
            pu:f16[3072,768] = transpose[permutation=(1, 0)] pt
            pv:f16[768,3072] = transpose[permutation=(1, 0)] pu
            pw:f16[64,256,3072] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] ns og
            px:f16[64,256,3072] = mul oh pw
            py:f16[64,256,3072] = mul 0.5 px
            pz:f16[64,256,3072] = mul py oi
            qa:f16[64,256,3072] = mul pz oj
            qb:f16[64,256,3072] = add_any pz qa
            qc:f16[64,256,3072] = mul 0.7978515625 qb
            qd:f16[64,256,3072] = mul 0.044708251953125 qc
            qe:f16[64,256,3072] = mul qd ok
            qf:f16[64,256,3072] = add_any qc qe
            qg:f16[64,256,3072] = mul pw ol
            qh:f16[64,256,3072] = add_any qf qg
            qi:f16[3072] = reduce_sum[axes=(0, 1)] qh
            qj:f16[1,1,3072] = reshape[dimensions=None new_sizes=(1, 1, 3072)] qi
            qk:f16[3072] = reduce_sum[axes=(0, 1)] qj
            ql:f16[3072,768] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] qh om
            qm:f16[768,3072] = transpose[permutation=(1, 0)] ql
            qn:f16[3072,768] = transpose[permutation=(1, 0)] qm
            qo:f16[64,256,768] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] qh on
            qp:f32[64,256,768] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] qo
            qq:f32[768] = reduce_sum[axes=(0, 1)] qp
            qr:f32[1,1,768] = reshape[dimensions=None new_sizes=(1, 1, 768)] qq
            qs:f16[1,1,768] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] qr
            qt:f16[768] = reshape[dimensions=None new_sizes=(768,)] qs
            qu:f32[64,256,768] = mul oo qp
            qv:f32[64,256,768] = mul op qu
            qw:f32[768] = reduce_sum[axes=(0, 1)] qv
            qx:f32[1,1,768] = reshape[dimensions=None new_sizes=(1, 1, 768)] qw
            qy:f16[1,1,768] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] qx
            qz:f16[768] = reshape[dimensions=None new_sizes=(768,)] qy
            ra:f32[64,256,768] = mul qu oq
            rb:f32[64,256] = reduce_sum[axes=(2,)] ra
            rc:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] rb
            rd:f32[64,256,1] = mul rc or
            re:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] rd
            rf:f32[64,256] = mul re os
            rg:f32[64,256] = neg rf
            rh:f32[64,256] = mul rg ot
            ri:f32[64,256] = div rf 768.0
            rj:f32[64,256,768] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 768)
            ] ri
            rk:f32[64,256,768] = mul rj ou
            rl:f32[64,256,768] = mul qp ov
            rm:f32[64,256,768] = neg rl
            rn:f32[64,256] = reduce_sum[axes=(2,)] rm
            ro:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] rn
            rp:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] ro
            rq:f32[64,256] = add_any rh rp
            rr:f32[64,256] = div rq 768.0
            rs:f32[64,256,768] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 768)
            ] rr
            rt:f32[64,256,768] = add_any rk rs
            ru:f16[64,256,768] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] rt
            rv:f16[64,256,768] = add_any ns ru
            rw:f16[64,256,768] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] rl
            rx:f16[64,256,768] = add_any rv rw
            ry:f16[768] = reduce_sum[axes=(0, 1)] rx
            rz:f16[1,1,768] = reshape[dimensions=None new_sizes=(1, 1, 768)] ry
            sa:f16[768] = reduce_sum[axes=(0, 1)] rz
            sb:f16[768,768] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] rx ow
            sc:f16[768,768] = transpose[permutation=(1, 0)] sb
            sd:f16[768,768] = transpose[permutation=(1, 0)] sc
            se:f16[64,256,768] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] rx ox
            sf:f16[64,256,12,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 12, 64)
            ] se
            sg:f16[64,12,64,256] = transpose[permutation=(0, 2, 3, 1)] sf
            sh:f16[64,12,256,256] = dot_general[
              dimension_numbers=(((2,), (3,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] sg oy
            si:f16[64,12,256,256] = mul sh oz
            sj:f16[64,12,256,256] = mul si pa
            sk:f16[64,12,256] = reduce_sum[axes=(3,)] sj
            sl:f16[64,12,256,1] = reshape[
              dimensions=None
              new_sizes=(64, 12, 256, 1)
            ] sk
            sm:f16[64,12,256,1] = neg sl
            sn:f32[64,12,256,1] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] sm
            so:f32[64,12,256] = reduce_sum[axes=(3,)] sn
            sp:f32[64,12,256,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 12, 256, 256)
            ] so
            sq:f16[64,12,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] sp
            sr:f16[64,12,256,256] = div sh pb
            ss:f16[64,12,256,256] = add_any sq sr
            st:f16[64,12,256,256] = mul ss pa
            su:f16[64,12,256,64] = dot_general[
              dimension_numbers=(((2,), (1,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] st pc
            sv:f16[64,256,12,64] = transpose[permutation=(0, 2, 1, 3)] su
            sw:f16[64,256,768] = reshape[
              dimensions=None
              new_sizes=(64, 256, 768)
            ] sv
            sx:f16[64,256,2304] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (768, 768, 0))
            ] sw 0.0
            sy:f16[64,12,256,64] = dot_general[
              dimension_numbers=(((3,), (1,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] st pd
            sz:f16[64,256,12,64] = transpose[permutation=(0, 2, 1, 3)] sy
            ta:f16[64,256,12,64] = div sz pe
            tb:f16[64,256,768] = reshape[
              dimensions=None
              new_sizes=(64, 256, 768)
            ] ta
            tc:f16[64,256,2304] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (0, 1536, 0))
            ] tb 0.0
            td:f16[64,256,2304] = add_any sx tc
            te:f16[64,12,64,256] = dot_general[
              dimension_numbers=(((3,), (2,)), ((0, 1), (0, 1)))
              precision=None
              preferred_element_type=None
            ] sg pf
            tf:f16[64,256,12,64] = transpose[permutation=(0, 3, 1, 2)] te
            tg:f16[64,256,768] = reshape[
              dimensions=None
              new_sizes=(64, 256, 768)
            ] tf
            th:f16[64,256,2304] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (1536, 0, 0))
            ] tg 0.0
            ti:f16[64,256,2304] = add_any td th
            tj:f16[2304] = reduce_sum[axes=(0, 1)] ti
            tk:f16[1,1,2304] = reshape[dimensions=None new_sizes=(1, 1, 2304)] tj
            tl:f16[2304] = reduce_sum[axes=(0, 1)] tk
            tm:f16[2304,768] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] ti pg
            tn:f16[768,2304] = transpose[permutation=(1, 0)] tm
            to:f16[2304,768] = transpose[permutation=(1, 0)] tn
            tp:f16[64,256,768] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] ti ph
            tq:f32[64,256,768] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] tp
            tr:f32[768] = reduce_sum[axes=(0, 1)] tq
            ts:f32[1,1,768] = reshape[dimensions=None new_sizes=(1, 1, 768)] tr
            tt:f16[1,1,768] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] ts
            tu:f16[768] = reshape[dimensions=None new_sizes=(768,)] tt
            tv:f32[64,256,768] = mul pi tq
            tw:f32[64,256,768] = mul pj tv
            tx:f32[768] = reduce_sum[axes=(0, 1)] tw
            ty:f32[1,1,768] = reshape[dimensions=None new_sizes=(1, 1, 768)] tx
            tz:f16[1,1,768] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] ty
            ua:f16[768] = reshape[dimensions=None new_sizes=(768,)] tz
            ub:f32[64,256,768] = mul tv pk
            uc:f32[64,256] = reduce_sum[axes=(2,)] ub
            ud:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] uc
            ue:f32[64,256,1] = mul ud pl
            uf:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] ue
            ug:f32[64,256] = mul uf pm
            uh:f32[64,256] = neg ug
            ui:f32[64,256] = mul uh pn
            uj:f32[64,256] = div ug 768.0
            uk:f32[64,256,768] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 768)
            ] uj
            ul:f32[64,256,768] = mul uk po
            um:f32[64,256,768] = mul tq pp
            un:f32[64,256,768] = neg um
            uo:f32[64,256] = reduce_sum[axes=(2,)] un
            up:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] uo
            uq:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] up
            ur:f32[64,256] = add_any ui uq
            us:f32[64,256] = div ur 768.0
            ut:f32[64,256,768] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 768)
            ] us
            uu:f32[64,256,768] = add_any ul ut
            uv:f16[64,256,768] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] uu
            uw:f16[64,256,768] = add_any rx uv
            ux:f16[64,256,768] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] um
            uy:f16[64,256,768] = add_any uw ux
            uz:f16[768] = add nt ps
            va:f16[768,3072] = add nu pv
            vb:f16[3072] = add nv qk
            vc:f16[3072,768] = add nw qn
            vd:f16[768] = add nx qt
            ve:f16[768] = add ny qz
            vf:f16[768] = add nz sa
            vg:f16[768,768] = add oa sd
            vh:f16[2304] = add ob tl
            vi:f16[2304,768] = add oc to
            vj:f16[768] = add od tu
            vk:f16[768] = add oe ua
          in (uy, uz, va, vb, vc, vd, ve, vf, vg, vh, vi, vj, vk) }
        name=71
      ] ez bm bn bo bp bq br bs bt bu bv bw bx dm dn do dp dq dr ds dt du dv dw dx
        dy dz ea eb ec ed ee ef eg eh ei ej ek el em en eo ep eq er es et eu ev ew
      vl:f16[1024,768] vm:f16[50257,768] = named_call[
        call_jaxpr={ lambda ; vn:f16[64,256,768] vo:f16[1024,768] vp:f16[50257,768]
            vq:f16[64,256,1024] vr:f16[64,256,50257]. let
            vs:f16[768,1024] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] vn vq
            vt:f16[1024,768] = transpose[permutation=(1, 0)] vs
            vu:f16[768,50257] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] vn vr
            vv:f16[50257,768] = transpose[permutation=(1, 0)] vu
            vw:f16[1024,768] = add vo vt
            vx:f16[50257,768] = add vp vv
          in (vw, vx) }
        name=72
      ] nf by bz ex ey
    in (fa, fb, fc, fd, fe, ff, fg, fh, fi, fj, fk, fl, ng, nh, ni, nj, nk, nl, nm,
      nn, no, np, nq, nr, vl, vm) }
  name=7
] vy vz wa wb wc wd we wf wg wh wi wj wk wl wm wn wo wp wq wr ws wt wu wv ww wx wy
  wz xa xb xc xd xe xf xg xh xi xj xk xl xm xn xo xp xq xr xs xt xu xv xw xx xy xz
  ya yb yc yd ye yf yg yh yi yj yk yl ym yn yo yp yq yr ys yt yu yv yw yx yy yz za
  zb zc zd ze zf zg zh zi zj zk zl zm zn zo zp zq zr zs zt zu zv zw
eqn: a:f16[768] b:f16[768,3072] c:f16[3072] d:f16[3072,768] e:f16[768] f:f16[768] g:f16[768]
  h:f16[768,768] i:f16[2304] j:f16[2304,768] k:f16[768] l:f16[768] m:f16[768] n:f16[768,3072]
  o:f16[3072] p:f16[3072,768] q:f16[768] r:f16[768] s:f16[768] t:f16[768,768] u:f16[2304]
  v:f16[2304,768] w:f16[768] x:f16[768] y:f16[1024,768] z:f16[50257,768] = pipeline_marker[
  mark_type=end
  name=7
] ba bb bc bd be bf bg bh bi bj bk bl bm bn bo bp bq br bs bt bu bv bw bx by bz
input_var_mem_size
[qkl, qkm, qkj, qkk, qkh, qki, qkd, qke, qkb, qkc, qkf, qkg, qjz, qka, qjx, qjy, qjv, qjw, qjr, qjs, qjp, qjq, qjt, qju, qpf, qph, gla, bku, bkv, bkj, bkr, bkq, bkm, bkt, bkf, bkg, bjt, bjv, bjz, bjx, bjp, bje, biz, bka, bio, bip, bha, bil, bif, bij, bhv, bgz, bhu, bik, bgk, bgr, bfy, bga, bge, bgc, bfu, bfj, bfe, bgf, bee, bef, bdt, beb, bea, bdw, bed, bdp, bdq, bdd, bdf, bdj, bdh, bcz, bco, bcj, bdk, bby, bbz, bak, bbv, bbp, bbt, bbf, baj, bbe, bbu, zu, bab, zi, zk, zo, zm, ze, yt, yo, zp, xq, xl]
[(768,), (768, 3072), (3072,), (3072, 768), (768,), (768,), (768,), (768, 768), (2304,), (2304, 768), (768,), (768,), (768,), (768, 3072), (3072,), (3072, 768), (768,), (768,), (768,), (768, 768), (2304,), (2304, 768), (768,), (768,), (1024, 768), (50257, 768), (64, 256, 768), (64, 256, 3072), (3072, 768), (64, 256, 3072), (64, 256, 3072), (64, 256, 3072), (64, 256, 3072), (64, 256, 3072), (64, 256, 768), (768, 3072), (64, 256, 768), (64, 256, 1), (1, 1, 768), (64, 256, 1), (64, 256), (64, 256), (64, 256, 768), (64, 256, 768), (64, 256, 768), (768, 768), (64, 256, 12, 64), (64, 12, 256, 1), (64, 12, 256, 256), (64, 12, 256, 1), (64, 256, 12, 64), (64, 256, 12, 64), (), (64, 12, 256, 256), (64, 256, 768), (768, 2304), (64, 256, 768), (64, 256, 1), (1, 1, 768), (64, 256, 1), (64, 256), (64, 256), (64, 256, 768), (64, 256, 768), (64, 256, 3072), (3072, 768), (64, 256, 3072), (64, 256, 3072), (64, 256, 3072), (64, 256, 3072), (64, 256, 3072), (64, 256, 768), (768, 3072), (64, 256, 768), (64, 256, 1), (1, 1, 768), (64, 256, 1), (64, 256), (64, 256), (64, 256, 768), (64, 256, 768), (64, 256, 768), (768, 768), (64, 256, 12, 64), (64, 12, 256, 1), (64, 12, 256, 256), (64, 12, 256, 1), (64, 256, 12, 64), (64, 256, 12, 64), (), (64, 12, 256, 256), (64, 256, 768), (768, 2304), (64, 256, 768), (64, 256, 1), (1, 1, 768), (64, 256, 1), (64, 256), (64, 256), (64, 256, 768), (64, 256, 768), (64, 256, 1024), (64, 256, 50257)]
param_size: 1.8894989509135485 [GiB] 
len stages: 8
_compile_split_input_to_microbatches
_get_outs_handler(self, mesh_output_indices, output_spec_list):
launch_on_driver
final_time:  31.209773302078247
launch_on_driver
final_time:  0.01276087760925293
launch_on_driver
final_time:  0.010292291641235352
launch_on_driver
final_time:  0.009231090545654297
launch_on_driver
final_time:  0.009218215942382812
launch_on_driver
final_time:  0.008839607238769531
launch_on_driver
final_time:  0.009429454803466797
launch_on_driver
final_time:  0.009332418441772461
launch_on_driver
final_time:  0.01338958740234375
launch_on_driver
final_time:  0.00964498519897461
launch_on_driver
final_time:  0.009932279586791992
launch_on_driver
final_time:  0.011193990707397461
launch_on_driver
final_time:  0.010757684707641602
launch_on_driver
final_time:  0.013637781143188477
launch_on_driver
final_time:  0.009198904037475586
launch_on_driver
final_time:  0.01086568832397461
launch_on_driver
final_time:  0.012421369552612305
launch_on_driver
final_time:  0.013155221939086914
launch_on_driver
final_time:  0.011105537414550781
launch_on_driver
final_time:  0.011662483215332031
launch_on_driver
final_time:  0.009752035140991211
launch_on_driver
final_time:  0.010921001434326172
launch_on_driver
final_time:  0.011156082153320312
launch_on_driver
final_time:  0.01076364517211914
launch_on_driver
final_time:  0.010231256484985352
launch_on_driver
final_time:  0.009891748428344727
launch_on_driver
final_time:  0.01021885871887207
launch_on_driver
final_time:  0.009760856628417969
launch_on_driver
final_time:  0.010276079177856445
launch_on_driver
final_time:  0.009894609451293945
launch_on_driver
final_time:  0.009923458099365234
launch_on_driver
final_time:  0.011604547500610352
launch_on_driver
final_time:  0.01024627685546875
launch_on_driver
final_time:  0.010370492935180664
launch_on_driver
final_time:  0.010553836822509766
launch_on_driver
final_time:  0.010037899017333984
launch_on_driver
final_time:  0.012695789337158203
launch_on_driver
final_time:  0.010648012161254883
launch_on_driver
final_time:  0.010190010070800781
launch_on_driver
final_time:  0.047318458557128906
launch_on_driver
final_time:  0.014208078384399414
launch_on_driver
final_time:  0.014319658279418945
launch_on_driver
final_time:  0.01393270492553711
launch_on_driver
final_time:  0.012987613677978516
launch_on_driver
final_time:  0.012308120727539062
launch_on_driver
final_time:  0.010664224624633789
launch_on_driver
final_time:  0.009611368179321289
launch_on_driver
final_time:  0.009664773941040039
launch_on_driver
final_time:  0.0097808837890625
launch_on_driver
final_time:  0.009668350219726562
launch_on_driver
final_time:  0.010565042495727539
launch_on_driver
final_time:  0.01021265983581543
launch_on_driver
final_time:  0.011214017868041992
launch_on_driver
final_time:  0.010524988174438477
launch_on_driver
final_time:  0.010506391525268555
launch_on_driver
final_time:  0.011967658996582031
launch_on_driver
final_time:  0.010762929916381836
launch_on_driver
final_time:  0.011126518249511719
launch_on_driver
final_time:  0.010053873062133789
launch_on_driver
final_time:  0.010052680969238281
launch_on_driver
final_time:  0.010081052780151367
launch_on_driver
final_time:  0.011037826538085938
launch_on_driver
final_time:  0.010725975036621094
launch_on_driver
final_time:  0.009863615036010742
launch_on_driver
final_time:  0.01090097427368164
launch_on_driver
final_time:  0.012267112731933594
launch_on_driver
final_time:  0.009918928146362305
launch_on_driver
final_time:  0.010243654251098633
launch_on_driver
final_time:  0.009988069534301758
launch_on_driver
final_time:  0.16398930549621582
launch_on_driver
final_time:  0.012668848037719727
launch_on_driver
final_time:  0.010561704635620117
launch_on_driver
final_time:  0.010606765747070312
launch_on_driver
final_time:  0.009979009628295898
launch_on_driver
final_time:  0.011294126510620117
launch_on_driver
final_time:  0.013315677642822266
launch_on_driver
final_time:  0.009693622589111328
launch_on_driver
final_time:  0.009714841842651367
launch_on_driver
final_time:  0.009598255157470703
launch_on_driver
final_time:  0.009929418563842773
launch_on_driver
final_time:  0.010304927825927734
launch_on_driver
final_time:  0.011789083480834961
launch_on_driver
final_time:  0.00958871841430664
launch_on_driver
final_time:  0.00990915298461914
launch_on_driver
final_time:  0.010442495346069336
launch_on_driver
final_time:  0.010581493377685547
launch_on_driver
final_time:  0.010559320449829102
launch_on_driver
final_time:  0.010140657424926758
launch_on_driver
final_time:  0.011911392211914062
launch_on_driver
final_time:  0.011455535888671875
launch_on_driver
final_time:  0.010199308395385742
launch_on_driver
final_time:  0.01183462142944336
launch_on_driver
final_time:  0.011137008666992188
launch_on_driver
final_time:  0.010810136795043945
launch_on_driver
final_time:  0.01089167594909668
launch_on_driver
final_time:  0.011586904525756836
launch_on_driver
final_time:  0.010563135147094727
launch_on_driver
final_time:  0.009831905364990234
launch_on_driver
final_time:  0.01063990592956543
launch_on_driver
final_time:  0.010149955749511719
launch_on_driver
final_time:  0.01015782356262207
launch_on_driver
final_time:  0.010505437850952148
launch_on_driver
final_time:  0.010307550430297852
launch_on_driver
final_time:  0.010325908660888672
launch_on_driver
final_time:  0.010113716125488281
launch_on_driver
final_time:  0.011489629745483398
launch_on_driver
final_time:  0.011354207992553711
launch_on_driver
final_time:  0.011641979217529297
launch_on_driver
final_time:  0.01235651969909668
launch_on_driver
final_time:  0.010173320770263672
launch_on_driver
final_time:  0.012451171875
launch_on_driver
final_time:  0.010799407958984375
launch_on_driver
final_time:  0.009795427322387695
launch_on_driver
final_time:  0.010255813598632812
launch_on_driver
final_time:  0.01071023941040039
launch_on_driver
final_time:  0.01049494743347168
launch_on_driver
final_time:  0.015752315521240234
launch_on_driver
final_time:  0.018335580825805664
launch_on_driver
final_time:  0.1519453525543213
launch_on_driver
final_time:  0.013085603713989258
launch_on_driver
final_time:  0.016103267669677734
launch_on_driver
final_time:  0.01677846908569336
launch_on_driver
final_time:  0.017047405242919922
launch_on_driver
final_time:  0.015376567840576172
launch_on_driver
final_time:  0.012090921401977539
launch_on_driver
final_time:  0.011793851852416992
launch_on_driver
final_time:  0.011556386947631836
launch_on_driver
final_time:  0.010756969451904297
launch_on_driver
final_time:  0.011501550674438477
launch_on_driver
final_time:  0.011313199996948242
launch_on_driver
final_time:  0.012702465057373047
launch_on_driver
final_time:  0.011776208877563477
launch_on_driver
final_time:  0.012789249420166016
launch_on_driver
final_time:  0.011869192123413086
launch_on_driver
final_time:  0.012444257736206055
launch_on_driver
final_time:  0.011410951614379883
launch_on_driver
final_time:  0.010783672332763672
launch_on_driver
final_time:  0.012230157852172852
launch_on_driver
final_time:  0.020340442657470703
launch_on_driver
final_time:  0.017308712005615234
launch_on_driver
final_time:  0.015770912170410156
launch_on_driver
final_time:  0.012932538986206055
launch_on_driver
final_time:  0.012041807174682617
launch_on_driver
final_time:  0.010579347610473633
launch_on_driver
final_time:  0.011285543441772461
launch_on_driver
final_time:  0.011763811111450195
launch_on_driver
final_time:  0.013215065002441406
launch_on_driver
final_time:  0.015672922134399414
launch_on_driver
final_time:  0.01170206069946289
launch_on_driver
final_time:  0.011283636093139648
launch_on_driver
final_time:  0.01036214828491211
launch_on_driver
final_time:  0.01170206069946289
launch_on_driver
final_time:  0.010530948638916016
launch_on_driver
final_time:  0.011999845504760742
launch_on_driver
final_time:  0.017716169357299805
launch_on_driver
final_time:  0.01131892204284668
launch_on_driver
final_time:  0.010628223419189453
launch_on_driver
final_time:  0.010143280029296875
launch_on_driver
final_time:  0.010640382766723633
launch_on_driver
final_time:  0.011771678924560547
launch_on_driver
final_time:  0.017383337020874023
launch_on_driver
final_time:  0.011984109878540039
launch_on_driver
final_time:  0.010682821273803711
launch_on_driver
final_time:  0.011731386184692383
launch_on_driver
final_time:  0.0106201171875
launch_on_driver
final_time:  0.010500431060791016
launch_on_driver
final_time:  0.3694877624511719
launch_on_driver
final_time:  0.017150402069091797
launch_on_driver
final_time:  0.017334699630737305
launch_on_driver
final_time:  0.012343168258666992
launch_on_driver
final_time:  0.015453338623046875
launch_on_driver
final_time:  0.013541460037231445
launch_on_driver
final_time:  0.0114288330078125
launch_on_driver
final_time:  0.014344453811645508
launch_on_driver
final_time:  0.01667022705078125
launch_on_driver
final_time:  0.012226104736328125
launch_on_driver
final_time:  0.011638641357421875
launch_on_driver
final_time:  0.011620759963989258
launch_on_driver
final_time:  0.012171030044555664
launch_on_driver
final_time:  0.011548280715942383
launch_on_driver
final_time:  0.01235342025756836
launch_on_driver
final_time:  0.013164997100830078
launch_on_driver
final_time:  0.016078948974609375
launch_on_driver
final_time:  0.011229276657104492
launch_on_driver
final_time:  0.010406970977783203
launch_on_driver
final_time:  0.017658710479736328
launch_on_driver
final_time:  0.012497186660766602
launch_on_driver
final_time:  0.011199951171875
launch_on_driver
final_time:  0.010637998580932617
launch_on_driver
final_time:  0.01006627082824707
launch_on_driver
final_time:  0.011059761047363281
launch_on_driver
final_time:  0.01010751724243164
launch_on_driver
final_time:  0.010900020599365234
launch_on_driver
final_time:  0.010262489318847656
launch_on_driver
final_time:  0.009283781051635742
launch_on_driver
final_time:  0.014641761779785156
launch_on_driver
final_time:  0.01591324806213379
launch_on_driver
final_time:  0.012142419815063477
launch_on_driver
final_time:  0.011646032333374023
launch_on_driver
final_time:  0.011979103088378906
launch_on_driver
final_time:  0.011747598648071289
launch_on_driver
final_time:  0.012278079986572266
launch_on_driver
final_time:  0.013395547866821289
launch_on_driver
final_time:  0.011240243911743164
launch_on_driver
final_time:  0.011767864227294922
launch_on_driver
final_time:  0.011676788330078125
launch_on_driver
final_time:  0.011349201202392578
launch_on_driver
final_time:  0.011851310729980469
launch_on_driver
final_time:  0.011474370956420898
launch_on_driver
final_time:  0.011931419372558594
launch_on_driver
final_time:  0.011893272399902344
launch_on_driver
final_time:  0.012406587600708008
launch_on_driver
final_time:  0.011284351348876953
launch_on_driver
final_time:  0.011863946914672852
launch_on_driver
final_time:  0.14033937454223633
launch_on_driver
final_time:  0.016427993774414062
launch_on_driver
final_time:  0.015038728713989258
launch_on_driver
final_time:  0.01330709457397461
launch_on_driver
final_time:  0.013257741928100586
launch_on_driver
final_time:  0.013571023941040039
launch_on_driver
final_time:  0.012762784957885742
launch_on_driver
final_time:  0.01163625717163086
launch_on_driver
final_time:  0.011226654052734375
launch_on_driver
final_time:  0.011213064193725586
launch_on_driver
final_time:  0.011326789855957031
launch_on_driver
final_time:  0.010975837707519531
launch_on_driver
final_time:  0.01090383529663086
launch_on_driver
final_time:  0.010590791702270508
launch_on_driver
final_time:  0.011118888854980469
launch_on_driver
final_time:  0.011847496032714844
launch_on_driver
final_time:  0.011642694473266602
launch_on_driver
final_time:  0.011982917785644531
launch_on_driver
final_time:  0.011559009552001953
launch_on_driver
final_time:  0.01181340217590332
launch_on_driver
final_time:  0.011933088302612305
launch_on_driver
final_time:  0.010380983352661133
launch_on_driver
final_time:  0.013470888137817383
launch_on_driver
final_time:  0.011823892593383789
launch_on_driver
final_time:  0.011174440383911133
launch_on_driver
final_time:  0.010707378387451172
launch_on_driver
final_time:  0.011895895004272461
launch_on_driver
final_time:  0.011154890060424805
launch_on_driver
final_time:  0.011424779891967773
launch_on_driver
final_time:  0.011835336685180664
launch_on_driver
final_time:  0.017939329147338867
launch_on_driver
final_time:  0.01307988166809082
launch_on_driver
final_time:  0.011496305465698242
launch_on_driver
final_time:  0.017540693283081055
launch_on_driver
final_time:  0.01366567611694336
launch_on_driver
final_time:  0.011162757873535156
launch_on_driver
final_time:  0.011563301086425781
launch_on_driver
final_time:  0.01095128059387207
launch_on_driver
final_time:  0.010959148406982422
launch_on_driver
final_time:  0.010550498962402344
launch_on_driver
final_time:  0.017950773239135742
launch_on_driver
final_time:  0.014722108840942383
launch_on_driver
final_time:  0.010695934295654297
launch_on_driver
final_time:  0.010848283767700195
launch_on_driver
final_time:  0.010314464569091797
launch_on_driver
final_time:  0.010592937469482422
launch_on_driver
final_time:  0.010437965393066406
launch_on_driver
final_time:  0.010719537734985352
launch_on_driver
final_time:  0.38214612007141113
launch_on_driver
final_time:  0.015692710876464844
launch_on_driver
final_time:  0.01263570785522461
launch_on_driver
final_time:  0.01153707504272461
launch_on_driver
final_time:  0.011481285095214844
launch_on_driver
final_time:  0.012364625930786133
launch_on_driver
final_time:  0.01089930534362793
launch_on_driver
final_time:  0.011207342147827148
launch_on_driver
final_time:  0.012909173965454102
launch_on_driver
final_time:  0.011605978012084961
launch_on_driver
final_time:  0.010050296783447266
launch_on_driver
final_time:  0.019168615341186523
launch_on_driver
final_time:  0.012746334075927734
launch_on_driver
final_time:  0.011881828308105469
launch_on_driver
final_time:  0.01128840446472168
launch_on_driver
final_time:  0.012166500091552734
launch_on_driver
final_time:  0.011383056640625
launch_on_driver
final_time:  0.011272430419921875
launch_on_driver
final_time:  0.010577201843261719
launch_on_driver
final_time:  0.011571407318115234
launch_on_driver
final_time:  0.010893583297729492
launch_on_driver
final_time:  0.010538816452026367
launch_on_driver
final_time:  0.011089086532592773
launch_on_driver
final_time:  0.010549545288085938
launch_on_driver
final_time:  0.011448383331298828
launch_on_driver
final_time:  0.011276960372924805
launch_on_driver
final_time:  0.01141047477722168
launch_on_driver
final_time:  0.010798215866088867
launch_on_driver
final_time:  0.011140823364257812
launch_on_driver
final_time:  0.01151275634765625
launch_on_driver
final_time:  0.011433124542236328
launch_on_driver
final_time:  0.01222538948059082
launch_on_driver
final_time:  0.011238574981689453
launch_on_driver
final_time:  0.011098861694335938
launch_on_driver
final_time:  0.011578083038330078
launch_on_driver
final_time:  0.010580301284790039
launch_on_driver
final_time:  0.010397195816040039
launch_on_driver
final_time:  0.010628938674926758
launch_on_driver
final_time:  0.010888099670410156
launch_on_driver
final_time:  0.011424541473388672
launch_on_driver
final_time:  0.011260032653808594
launch_on_driver
final_time:  0.011384963989257812
launch_on_driver
final_time:  0.010741472244262695
launch_on_driver
final_time:  0.01250004768371582
launch_on_driver
final_time:  0.011380434036254883
launch_on_driver
final_time:  0.010745048522949219
launch_on_driver
final_time:  0.01195073127746582
launch_on_driver
final_time:  0.010885953903198242
launch_on_driver
final_time:  0.15883421897888184
launch_on_driver
final_time:  0.016942262649536133
launch_on_driver
final_time:  0.013935089111328125
launch_on_driver
final_time:  0.012533187866210938
launch_on_driver
final_time:  0.012429952621459961
launch_on_driver
final_time:  0.012001514434814453
launch_on_driver
final_time:  0.009155511856079102
launch_on_driver
final_time:  0.010147333145141602
launch_on_driver
final_time:  0.01058506965637207
launch_on_driver
final_time:  0.011952877044677734
launch_on_driver
final_time:  0.011984109878540039
launch_on_driver
final_time:  0.010628461837768555
launch_on_driver
final_time:  0.011529922485351562
launch_on_driver
final_time:  0.011831521987915039
launch_on_driver
final_time:  0.011423826217651367
launch_on_driver
final_time:  0.01166081428527832
launch_on_driver
final_time:  0.012449264526367188
launch_on_driver
final_time:  0.015307426452636719
launch_on_driver
final_time:  0.01601266860961914
launch_on_driver
final_time:  0.01495981216430664
launch_on_driver
final_time:  0.014821290969848633
launch_on_driver
final_time:  0.015620231628417969
launch_on_driver
final_time:  0.013317346572875977
launch_on_driver
final_time:  0.016645431518554688
launch_on_driver
final_time:  0.01788806915283203
launch_on_driver
final_time:  0.01542806625366211
launch_on_driver
final_time:  0.015826940536499023
launch_on_driver
final_time:  0.01651763916015625
launch_on_driver
final_time:  0.01560068130493164
launch_on_driver
final_time:  0.01675271987915039
launch_on_driver
final_time:  0.01620030403137207
launch_on_driver
final_time:  0.016211271286010742
launch_on_driver
final_time:  0.01562809944152832
launch_on_driver
final_time:  0.014540672302246094
launch_on_driver
final_time:  0.015138387680053711
launch_on_driver
final_time:  0.01471710205078125
launch_on_driver
final_time:  0.015247344970703125
launch_on_driver
final_time:  0.016527652740478516
launch_on_driver
final_time:  0.014780521392822266
launch_on_driver
final_time:  0.019131898880004883
launch_on_driver
final_time:  0.015503168106079102
launch_on_driver
final_time:  0.016846895217895508
launch_on_driver
final_time:  0.01606273651123047
launch_on_driver
final_time:  0.01620197296142578
launch_on_driver
final_time:  0.016245126724243164
launch_on_driver
final_time:  0.015849828720092773
launch_on_driver
final_time:  0.01571035385131836
launch_on_driver
final_time:  0.01631784439086914
launch_on_driver
final_time:  0.01668405532836914
launch_on_driver
final_time:  0.21217679977416992
launch_on_driver
final_time:  0.01795196533203125
launch_on_driver
final_time:  0.017685651779174805
launch_on_driver
final_time:  0.015410900115966797
launch_on_driver
final_time:  0.017284154891967773
launch_on_driver
final_time:  0.017122507095336914
launch_on_driver
final_time:  0.017037630081176758
launch_on_driver
final_time:  0.018239498138427734
launch_on_driver
final_time:  0.01672077178955078
launch_on_driver
final_time:  0.018674850463867188
launch_on_driver
final_time:  0.01714634895324707
launch_on_driver
final_time:  0.016899824142456055
launch_on_driver
final_time:  0.0178070068359375
launch_on_driver
final_time:  0.018132686614990234
launch_on_driver
final_time:  0.015866756439208984
launch_on_driver
final_time:  0.015132665634155273
launch_on_driver
final_time:  0.016860485076904297
launch_on_driver
final_time:  0.015696287155151367
launch_on_driver
final_time:  0.01845717430114746
launch_on_driver
final_time:  0.016958951950073242
launch_on_driver
final_time:  0.01664447784423828
launch_on_driver
final_time:  0.01566934585571289
launch_on_driver
final_time:  0.017093658447265625
launch_on_driver
final_time:  0.016257524490356445
launch_on_driver
final_time:  0.01618170738220215
launch_on_driver
final_time:  0.016113758087158203
launch_on_driver
final_time:  0.018194198608398438
launch_on_driver
final_time:  0.014678955078125
launch_on_driver
final_time:  0.01709437370300293
launch_on_driver
final_time:  0.01674675941467285
launch_on_driver
final_time:  0.015625953674316406
launch_on_driver
final_time:  0.015418052673339844
launch_on_driver
final_time:  0.015245676040649414
launch_on_driver
final_time:  0.017785310745239258
launch_on_driver
final_time:  0.013895511627197266
launch_on_driver
final_time:  0.016156911849975586
launch_on_driver
final_time:  0.015186071395874023
launch_on_driver
final_time:  0.014479875564575195
launch_on_driver
final_time:  0.015079021453857422
launch_on_driver
final_time:  0.015308618545532227
launch_on_driver
final_time:  0.016814470291137695
launch_on_driver
final_time:  0.013991832733154297
launch_on_driver
final_time:  0.01614975929260254
launch_on_driver
final_time:  0.01734185218811035
launch_on_driver
final_time:  0.016332387924194336
launch_on_driver
final_time:  0.017325878143310547
launch_on_driver
final_time:  0.01719498634338379
launch_on_driver
final_time:  0.015328645706176758
launch_on_driver
final_time:  0.2065129280090332
launch_on_driver
final_time:  0.021145343780517578
launch_on_driver
final_time:  0.02004694938659668
launch_on_driver
final_time:  0.017964601516723633
launch_on_driver
final_time:  0.01628398895263672
launch_on_driver
final_time:  0.01604294776916504
launch_on_driver
final_time:  0.016288280487060547
launch_on_driver
final_time:  0.017287015914916992
launch_on_driver
final_time:  0.017429828643798828
launch_on_driver
final_time:  0.017309188842773438
launch_on_driver
final_time:  0.017239093780517578
launch_on_driver
final_time:  0.017195701599121094
launch_on_driver
final_time:  0.017531871795654297
launch_on_driver
final_time:  0.015224695205688477
launch_on_driver
final_time:  0.017549514770507812
launch_on_driver
final_time:  0.01668095588684082
launch_on_driver
final_time:  0.015505075454711914
launch_on_driver
final_time:  0.016044139862060547
launch_on_driver
final_time:  0.015138387680053711
launch_on_driver
final_time:  0.015848159790039062
launch_on_driver
final_time:  0.013519048690795898
launch_on_driver
final_time:  0.016035795211791992
launch_on_driver
final_time:  0.014749526977539062
launch_on_driver
final_time:  0.015264272689819336
launch_on_driver
final_time:  0.01687765121459961
launch_on_driver
final_time:  0.016064882278442383
launch_on_driver
final_time:  0.0156552791595459
launch_on_driver
final_time:  0.017058610916137695
launch_on_driver
final_time:  0.015208005905151367
launch_on_driver
final_time:  0.018116474151611328
launch_on_driver
final_time:  0.01720428466796875
launch_on_driver
final_time:  0.015389442443847656
launch_on_driver
final_time:  0.01999521255493164
launch_on_driver
final_time:  0.029511451721191406
launch_on_driver
final_time:  0.01913595199584961
launch_on_driver
final_time:  0.016455411911010742
launch_on_driver
final_time:  0.016281604766845703
launch_on_driver
final_time:  0.015733718872070312
launch_on_driver
final_time:  0.02459716796875
launch_on_driver
final_time:  0.015584945678710938
launch_on_driver
final_time:  0.015521049499511719
launch_on_driver
final_time:  0.016052961349487305
launch_on_driver
final_time:  0.016308307647705078
launch_on_driver
final_time:  0.01767730712890625
launch_on_driver
final_time:  0.01623845100402832
launch_on_driver
final_time:  0.01645493507385254
launch_on_driver
final_time:  0.015427350997924805
launch_on_driver
final_time:  0.017469406127929688
launch_on_driver
final_time:  0.20141005516052246
launch_on_driver
final_time:  0.017705202102661133
launch_on_driver
final_time:  0.0158693790435791
launch_on_driver
final_time:  0.014184236526489258
launch_on_driver
final_time:  0.01311945915222168
launch_on_driver
final_time:  0.020744800567626953
launch_on_driver
final_time:  0.01594400405883789
launch_on_driver
final_time:  0.018319129943847656
launch_on_driver
final_time:  0.01511240005493164
launch_on_driver
final_time:  0.025783538818359375
launch_on_driver
final_time:  0.018799543380737305
launch_on_driver
final_time:  0.02242422103881836
launch_on_driver
final_time:  0.015393972396850586
launch_on_driver
final_time:  0.012725830078125
launch_on_driver
final_time:  0.014008283615112305
launch_on_driver
final_time:  0.01377725601196289
launch_on_driver
final_time:  0.013300657272338867
launch_on_driver
final_time:  0.015954017639160156
launch_on_driver
final_time:  0.020410776138305664
launch_on_driver
final_time:  0.01613593101501465
launch_on_driver
final_time:  0.01363062858581543
launch_on_driver
final_time:  0.013961315155029297
launch_on_driver
final_time:  0.014658451080322266
launch_on_driver
final_time:  0.023491859436035156
launch_on_driver
final_time:  0.01627326011657715
launch_on_driver
final_time:  0.016821861267089844
launch_on_driver
final_time:  0.0162503719329834
launch_on_driver
final_time:  0.015288829803466797
launch_on_driver
final_time:  0.016005277633666992
launch_on_driver
final_time:  0.017374277114868164
launch_on_driver
final_time:  0.015032052993774414
launch_on_driver
final_time:  0.01599860191345215
launch_on_driver
final_time:  0.01669764518737793
launch_on_driver
final_time:  0.017154216766357422
launch_on_driver
final_time:  0.017797231674194336
launch_on_driver
final_time:  0.015349388122558594
launch_on_driver
final_time:  0.01629328727722168
launch_on_driver
final_time:  0.014302730560302734
launch_on_driver
final_time:  0.01607537269592285
launch_on_driver
final_time:  0.015873432159423828
launch_on_driver
final_time:  0.015095949172973633
launch_on_driver
final_time:  0.01714801788330078
launch_on_driver
final_time:  0.018860578536987305
launch_on_driver
final_time:  0.01921248435974121
launch_on_driver
final_time:  0.017811298370361328
launch_on_driver
final_time:  0.01457357406616211
launch_on_driver
final_time:  0.024427413940429688
launch_on_driver
final_time:  0.020147085189819336
launch_on_driver
final_time:  0.21976566314697266
launch_on_driver
final_time:  0.025193452835083008
launch_on_driver
final_time:  0.015765905380249023
launch_on_driver
final_time:  0.015181303024291992
launch_on_driver
final_time:  0.014457464218139648
launch_on_driver
final_time:  0.018549680709838867
launch_on_driver
final_time:  0.022834300994873047
launch_on_driver
final_time:  0.02069878578186035
launch_on_driver
final_time:  0.021363019943237305
launch_on_driver
final_time:  0.018702030181884766
launch_on_driver
final_time:  0.015060186386108398
launch_on_driver
final_time:  0.014260053634643555
launch_on_driver
final_time:  0.018881559371948242
launch_on_driver
final_time:  0.0216064453125
launch_on_driver
final_time:  0.013637781143188477
launch_on_driver
final_time:  0.014584779739379883
launch_on_driver
final_time:  0.01888728141784668
launch_on_driver
final_time:  0.014912128448486328
launch_on_driver
final_time:  0.012916803359985352
launch_on_driver
final_time:  0.017741680145263672
launch_on_driver
final_time:  0.030150651931762695
launch_on_driver
final_time:  0.020287513732910156
launch_on_driver
final_time:  0.018781423568725586
launch_on_driver
final_time:  0.01657843589782715
launch_on_driver
final_time:  0.01750922203063965
launch_on_driver
final_time:  0.021823883056640625
launch_on_driver
final_time:  0.018051862716674805
launch_on_driver
final_time:  0.015911340713500977
launch_on_driver
final_time:  0.01833486557006836
launch_on_driver
final_time:  0.02164006233215332
launch_on_driver
final_time:  0.01752781867980957
launch_on_driver
final_time:  0.017643451690673828
launch_on_driver
final_time:  0.015236377716064453
launch_on_driver
final_time:  0.01336669921875
launch_on_driver
final_time:  0.0149078369140625
launch_on_driver
final_time:  0.014850854873657227
launch_on_driver
final_time:  0.016329050064086914
launch_on_driver
final_time:  0.015533208847045898
launch_on_driver
final_time:  0.015314817428588867
launch_on_driver
final_time:  0.016988515853881836
launch_on_driver
final_time:  0.01478886604309082
launch_on_driver
final_time:  0.015619754791259766
launch_on_driver
final_time:  0.01564931869506836
launch_on_driver
final_time:  0.015210151672363281
launch_on_driver
final_time:  0.015520572662353516
launch_on_driver
final_time:  0.015151739120483398
launch_on_driver
final_time:  0.01732015609741211
launch_on_driver
final_time:  0.015367507934570312
launch_on_driver
final_time:  0.20633554458618164
launch_on_driver
final_time:  0.023919105529785156
launch_on_driver
final_time:  0.01798725128173828
launch_on_driver
final_time:  0.018216609954833984
launch_on_driver
final_time:  0.015785932540893555
launch_on_driver
final_time:  0.016362667083740234
launch_on_driver
final_time:  0.016771793365478516
launch_on_driver
final_time:  0.01709127426147461
launch_on_driver
final_time:  0.01525115966796875
launch_on_driver
final_time:  0.017301559448242188
launch_on_driver
final_time:  0.017177820205688477
launch_on_driver
final_time:  0.014541387557983398
launch_on_driver
final_time:  0.018596410751342773
launch_on_driver
final_time:  0.01603388786315918
launch_on_driver
final_time:  0.01685953140258789
launch_on_driver
final_time:  0.015234708786010742
launch_on_driver
final_time:  0.01561284065246582
launch_on_driver
final_time:  0.015941858291625977
launch_on_driver
final_time:  0.015338420867919922
launch_on_driver
final_time:  0.015803098678588867
launch_on_driver
final_time:  0.015681028366088867
launch_on_driver
final_time:  0.01600813865661621
launch_on_driver
final_time:  0.016330957412719727
launch_on_driver
final_time:  0.015502214431762695
launch_on_driver
final_time:  0.01646113395690918
launch_on_driver
final_time:  0.015204906463623047
launch_on_driver
final_time:  0.015092611312866211
launch_on_driver
final_time:  0.017148733139038086
launch_on_driver
final_time:  0.015360593795776367
launch_on_driver
final_time:  0.0180814266204834
launch_on_driver
final_time:  0.015768766403198242
launch_on_driver
final_time:  0.015201330184936523
launch_on_driver
final_time:  0.01576542854309082
launch_on_driver
final_time:  0.017915964126586914
launch_on_driver
final_time:  0.016912221908569336
launch_on_driver
final_time:  0.01875925064086914
launch_on_driver
final_time:  0.01729130744934082
launch_on_driver
final_time:  0.01700758934020996
launch_on_driver
final_time:  0.01580023765563965
launch_on_driver
final_time:  0.016193389892578125
launch_on_driver
final_time:  0.017761945724487305
launch_on_driver
final_time:  0.017722129821777344
launch_on_driver
final_time:  0.01720571517944336
launch_on_driver
final_time:  0.018209457397460938
launch_on_driver
final_time:  0.016914844512939453
launch_on_driver
final_time:  0.01811528205871582
launch_on_driver
final_time:  0.1967175006866455
launch_on_driver
final_time:  0.01626276969909668
launch_on_driver
final_time:  0.017651796340942383
launch_on_driver
final_time:  0.23624515533447266
launch_on_driver
final_time:  0.0159304141998291
launch_on_driver
final_time:  0.022660017013549805
launch_on_driver
final_time:  0.014892578125
launch_on_driver
final_time:  0.014040708541870117
launch_on_driver
final_time:  0.014178752899169922
launch_on_driver
final_time:  0.017737865447998047
launch_on_driver
final_time:  0.019690513610839844
launch_on_driver
final_time:  0.013693571090698242
launch_on_driver
final_time:  0.015899658203125
launch_on_driver
final_time:  0.014937162399291992
launch_on_driver
final_time:  0.014889001846313477
launch_on_driver
final_time:  0.01820826530456543
launch_on_driver
final_time:  0.027013778686523438
launch_on_driver
final_time:  0.017784833908081055
launch_on_driver
final_time:  0.014892101287841797
launch_on_driver
final_time:  0.02213740348815918
launch_on_driver
final_time:  0.01923966407775879
launch_on_driver
final_time:  0.015271902084350586
launch_on_driver
final_time:  0.015601873397827148
launch_on_driver
final_time:  0.017076730728149414
launch_on_driver
final_time:  0.014835357666015625
launch_on_driver
final_time:  0.013657569885253906
launch_on_driver
final_time:  0.014116525650024414
launch_on_driver
final_time:  0.02441549301147461
launch_on_driver
final_time:  0.016962051391601562
launch_on_driver
final_time:  0.021172523498535156
launch_on_driver
final_time:  0.01884317398071289
launch_on_driver
final_time:  0.01675701141357422
launch_on_driver
final_time:  0.015906333923339844
launch_on_driver
final_time:  0.015967845916748047
launch_on_driver
final_time:  0.01609325408935547
launch_on_driver
final_time:  0.015215873718261719
launch_on_driver
final_time:  0.0168154239654541
launch_on_driver
final_time:  0.015559673309326172
launch_on_driver
final_time:  0.015937328338623047
launch_on_driver
final_time:  0.016512632369995117
launch_on_driver
final_time:  0.01594996452331543
launch_on_driver
final_time:  0.01641106605529785
launch_on_driver
final_time:  0.015138626098632812
launch_on_driver
final_time:  0.017409801483154297
launch_on_driver
final_time:  0.015895843505859375
launch_on_driver
final_time:  0.016168594360351562
launch_on_driver
final_time:  0.016312360763549805
launch_on_driver
final_time:  0.015096902847290039
launch_on_driver
final_time:  0.016084909439086914
launch_on_driver
final_time:  0.014870882034301758
launch_on_driver
final_time:  0.014848709106445312
launch_on_driver
final_time:  0.17674589157104492
launch_on_driver
final_time:  0.015402793884277344
launch_on_driver
final_time:  0.014027833938598633
launch_on_driver
final_time:  0.012340784072875977
launch_on_driver
final_time:  0.013610124588012695
launch_on_driver
final_time:  0.012490510940551758
launch_on_driver
final_time:  0.012365341186523438
launch_on_driver
final_time:  0.012758016586303711
launch_on_driver
final_time:  0.011148452758789062
launch_on_driver
final_time:  0.012462377548217773
launch_on_driver
final_time:  0.0184171199798584
launch_on_driver
final_time:  0.012662172317504883
launch_on_driver
final_time:  0.01201176643371582
launch_on_driver
final_time:  0.010629415512084961
launch_on_driver
final_time:  0.01206660270690918
launch_on_driver
final_time:  0.010619878768920898
launch_on_driver
final_time:  0.011758804321289062
launch_on_driver
final_time:  0.011618852615356445
launch_on_driver
final_time:  0.011693954467773438
launch_on_driver
final_time:  0.01199030876159668
launch_on_driver
final_time:  0.011574506759643555
launch_on_driver
final_time:  0.012840986251831055
launch_on_driver
final_time:  0.011626005172729492
launch_on_driver
final_time:  0.012099027633666992
launch_on_driver
final_time:  0.013171195983886719
launch_on_driver
final_time:  0.011691093444824219
launch_on_driver
final_time:  0.01245570182800293
launch_on_driver
final_time:  0.0115203857421875
launch_on_driver
final_time:  0.012191057205200195
launch_on_driver
final_time:  0.012105226516723633
launch_on_driver
final_time:  0.01123356819152832
launch_on_driver
final_time:  0.011968374252319336
launch_on_driver
final_time:  0.012017965316772461
launch_on_driver
final_time:  0.011168479919433594
launch_on_driver
final_time:  0.01076650619506836
launch_on_driver
final_time:  0.010862588882446289
launch_on_driver
final_time:  0.011678695678710938
launch_on_driver
final_time:  0.010670900344848633
launch_on_driver
final_time:  0.01159811019897461
launch_on_driver
final_time:  0.010552167892456055
launch_on_driver
final_time:  0.011220693588256836
launch_on_driver
final_time:  0.011339664459228516
launch_on_driver
final_time:  0.011286258697509766
launch_on_driver
final_time:  0.012027978897094727
launch_on_driver
final_time:  0.010761499404907227
launch_on_driver
final_time:  0.011184453964233398
launch_on_driver
final_time:  0.011308670043945312
launch_on_driver
final_time:  0.010352611541748047
launch_on_driver
final_time:  0.15189337730407715
launch_on_driver
final_time:  0.016031503677368164
launch_on_driver
final_time:  0.013319730758666992
launch_on_driver
final_time:  0.010986804962158203
launch_on_driver
final_time:  0.010800838470458984
launch_on_driver
final_time:  0.012234210968017578
launch_on_driver
final_time:  0.010570287704467773
launch_on_driver
final_time:  0.011721134185791016
launch_on_driver
final_time:  0.010135889053344727
launch_on_driver
final_time:  0.010651111602783203
launch_on_driver
final_time:  0.010733604431152344
launch_on_driver
final_time:  0.010383844375610352
launch_on_driver
final_time:  0.011168241500854492
launch_on_driver
final_time:  0.010660171508789062
launch_on_driver
final_time:  0.011244058609008789
launch_on_driver
final_time:  0.010118961334228516
launch_on_driver
final_time:  0.010708808898925781
launch_on_driver
final_time:  0.010922431945800781
launch_on_driver
final_time:  0.010657787322998047
launch_on_driver
final_time:  0.011077165603637695
launch_on_driver
final_time:  0.01049351692199707
launch_on_driver
final_time:  0.01069188117980957
launch_on_driver
final_time:  0.010920524597167969
launch_on_driver
final_time:  0.010584592819213867
launch_on_driver
final_time:  0.011039257049560547
launch_on_driver
final_time:  0.010748624801635742
launch_on_driver
final_time:  0.011463642120361328
launch_on_driver
final_time:  0.010274648666381836
launch_on_driver
final_time:  0.011351585388183594
launch_on_driver
final_time:  0.01192784309387207
launch_on_driver
final_time:  0.011445999145507812
launch_on_driver
final_time:  0.011955738067626953
launch_on_driver
final_time:  0.011116504669189453
launch_on_driver
final_time:  0.011615991592407227
launch_on_driver
final_time:  0.013631582260131836
launch_on_driver
final_time:  0.011845588684082031
launch_on_driver
final_time:  0.011451482772827148
launch_on_driver
final_time:  0.00937509536743164
launch_on_driver
final_time:  0.012392997741699219
launch_on_driver
final_time:  0.010178804397583008
launch_on_driver
final_time:  0.010411500930786133
launch_on_driver
final_time:  0.01110982894897461
launch_on_driver
final_time:  0.010159015655517578
launch_on_driver
final_time:  0.012312650680541992
launch_on_driver
final_time:  0.010428190231323242
launch_on_driver
final_time:  0.010516166687011719
launch_on_driver
final_time:  0.010839700698852539
launch_on_driver
final_time:  0.009826183319091797
launch_on_driver
final_time:  0.15795445442199707
launch_on_driver
final_time:  0.015141010284423828
launch_on_driver
final_time:  0.012940645217895508
launch_on_driver
final_time:  0.01340484619140625
launch_on_driver
final_time:  0.011176586151123047
launch_on_driver
final_time:  0.011066436767578125
launch_on_driver
final_time:  0.010459661483764648
launch_on_driver
final_time:  0.012197256088256836
launch_on_driver
final_time:  0.009762287139892578
launch_on_driver
final_time:  0.010610103607177734
launch_on_driver
final_time:  0.011026859283447266
launch_on_driver
final_time:  0.010306119918823242
launch_on_driver
final_time:  0.012994766235351562
launch_on_driver
final_time:  0.011267662048339844
launch_on_driver
final_time:  0.011913299560546875
launch_on_driver
final_time:  0.01106882095336914
launch_on_driver
final_time:  0.010896682739257812
launch_on_driver
final_time:  0.010826349258422852
launch_on_driver
final_time:  0.009976387023925781
launch_on_driver
final_time:  0.012293815612792969
launch_on_driver
final_time:  0.011149406433105469
launch_on_driver
final_time:  0.010177135467529297
launch_on_driver
final_time:  0.010878324508666992
launch_on_driver
final_time:  0.010615110397338867
launch_on_driver
final_time:  0.010608673095703125
launch_on_driver
final_time:  0.010411262512207031
launch_on_driver
final_time:  0.010242223739624023
launch_on_driver
final_time:  0.009916067123413086
launch_on_driver
final_time:  0.010190010070800781
launch_on_driver
final_time:  0.010454654693603516
launch_on_driver
final_time:  0.010149717330932617
launch_on_driver
final_time:  0.01076817512512207
launch_on_driver
final_time:  0.01022648811340332
launch_on_driver
final_time:  0.010460853576660156
launch_on_driver
final_time:  0.01110386848449707
launch_on_driver
final_time:  0.010150432586669922
launch_on_driver
final_time:  0.011207103729248047
launch_on_driver
final_time:  0.010077714920043945
launch_on_driver
final_time:  0.01037740707397461
launch_on_driver
final_time:  0.010738611221313477
launch_on_driver
final_time:  0.010465621948242188
launch_on_driver
final_time:  0.010748624801635742
launch_on_driver
final_time:  0.01043248176574707
launch_on_driver
final_time:  0.013154745101928711
launch_on_driver
final_time:  0.013902425765991211
launch_on_driver
final_time:  0.011263370513916016
launch_on_driver
final_time:  0.0115966796875
launch_on_driver
final_time:  0.019858598709106445
launch_on_driver
final_time:  0.1753373146057129
launch_on_driver
final_time:  0.020985126495361328
launch_on_driver
final_time:  0.012590169906616211
launch_on_driver
final_time:  0.011877298355102539
launch_on_driver
final_time:  0.010605096817016602
launch_on_driver
final_time:  0.012462139129638672
launch_on_driver
final_time:  0.010523319244384766
launch_on_driver
final_time:  0.009590864181518555
launch_on_driver
final_time:  0.011155843734741211
launch_on_driver
final_time:  0.010660409927368164
launch_on_driver
final_time:  0.01945781707763672
launch_on_driver
final_time:  0.010891199111938477
launch_on_driver
final_time:  0.011219263076782227
launch_on_driver
final_time:  0.010640859603881836
launch_on_driver
final_time:  0.010870695114135742
launch_on_driver
final_time:  0.011324167251586914
launch_on_driver
final_time:  0.009952306747436523
launch_on_driver
final_time:  0.017609834671020508
launch_on_driver
final_time:  0.01229405403137207
launch_on_driver
final_time:  0.015106201171875
launch_on_driver
final_time:  0.022341489791870117
launch_on_driver
final_time:  0.026164531707763672
launch_on_driver
final_time:  0.015317678451538086
launch_on_driver
final_time:  0.013555288314819336
launch_on_driver
final_time:  0.016753435134887695
launch_on_driver
final_time:  0.015483379364013672
launch_on_driver
final_time:  0.015329360961914062
launch_on_driver
final_time:  0.018460512161254883
launch_on_driver
final_time:  0.01591038703918457
launch_on_driver
final_time:  0.018593549728393555
launch_on_driver
final_time:  0.014866352081298828
launch_on_driver
final_time:  0.017228126525878906
launch_on_driver
final_time:  0.017289161682128906
launch_on_driver
final_time:  0.01253366470336914
launch_on_driver
final_time:  0.012135744094848633
launch_on_driver
final_time:  0.010589599609375
launch_on_driver
final_time:  0.01166391372680664
launch_on_driver
final_time:  0.013272285461425781
launch_on_driver
final_time:  0.011198282241821289
launch_on_driver
final_time:  0.011747360229492188
launch_on_driver
final_time:  0.010922670364379883
launch_on_driver
final_time:  0.011429309844970703
launch_on_driver
final_time:  0.010836362838745117
launch_on_driver
final_time:  0.010338783264160156
launch_on_driver
final_time:  0.01082158088684082
launch_on_driver
final_time:  0.01022648811340332
launch_on_driver
final_time:  0.010688304901123047
launch_on_driver
final_time:  0.011166095733642578
launch_on_driver
final_time:  0.010951042175292969
launch_on_driver
final_time:  0.14168620109558105
launch_on_driver
final_time:  0.012171268463134766
launch_on_driver
final_time:  0.0118408203125
launch_on_driver
final_time:  0.010943412780761719
launch_on_driver
final_time:  0.011476993560791016
launch_on_driver
final_time:  0.010448217391967773
launch_on_driver
final_time:  0.010596752166748047
launch_on_driver
final_time:  0.011149883270263672
launch_on_driver
final_time:  0.00995779037475586
launch_on_driver
final_time:  0.011210441589355469
launch_on_driver
final_time:  0.010617971420288086
launch_on_driver
final_time:  0.010564565658569336
launch_on_driver
final_time:  0.010866403579711914
launch_on_driver
final_time:  0.010661840438842773
launch_on_driver
final_time:  0.019623994827270508
launch_on_driver
final_time:  0.011303424835205078
launch_on_driver
final_time:  0.011219263076782227
launch_on_driver
final_time:  0.010303497314453125
launch_on_driver
final_time:  0.010854959487915039
launch_on_driver
final_time:  0.011094093322753906
launch_on_driver
final_time:  0.010620355606079102
launch_on_driver
final_time:  0.011160612106323242
launch_on_driver
final_time:  0.010684490203857422
launch_on_driver
final_time:  0.010635137557983398
launch_on_driver
final_time:  0.010785102844238281
launch_on_driver
final_time:  0.010493040084838867
launch_on_driver
final_time:  0.0113067626953125
launch_on_driver
final_time:  0.010151863098144531
launch_on_driver
final_time:  0.011198997497558594
launch_on_driver
final_time:  0.010529518127441406
launch_on_driver
final_time:  0.010397672653198242
launch_on_driver
final_time:  0.010938644409179688
launch_on_driver
final_time:  0.018299579620361328
launch_on_driver
final_time:  0.01637887954711914
launch_on_driver
final_time:  0.015011310577392578
launch_on_driver
final_time:  0.017133235931396484
launch_on_driver
final_time:  0.022809743881225586
launch_on_driver
final_time:  0.01715874671936035
launch_on_driver
final_time:  0.013021707534790039
launch_on_driver
final_time:  0.011562108993530273
launch_on_driver
final_time:  0.011693954467773438
launch_on_driver
final_time:  0.01074671745300293
launch_on_driver
final_time:  0.010503053665161133
launch_on_driver
final_time:  0.011953353881835938
launch_on_driver
final_time:  0.010504484176635742
launch_on_driver
final_time:  0.010949134826660156
launch_on_driver
final_time:  0.010813236236572266
launch_on_driver
final_time:  0.010732889175415039
launch_on_driver
final_time:  0.4020059108734131
launch_on_driver
final_time:  0.01607537269592285
launch_on_driver
final_time:  0.013573169708251953
launch_on_driver
final_time:  0.012900352478027344
launch_on_driver
final_time:  0.01122283935546875
launch_on_driver
final_time:  0.010801553726196289
launch_on_driver
final_time:  0.011229515075683594
launch_on_driver
final_time:  0.011832475662231445
launch_on_driver
final_time:  0.011368989944458008
launch_on_driver
final_time:  0.011879205703735352
launch_on_driver
final_time:  0.01090860366821289
launch_on_driver
final_time:  0.01038217544555664
launch_on_driver
final_time:  0.010672807693481445
launch_on_driver
final_time:  0.010341882705688477
launch_on_driver
final_time:  0.010822772979736328
launch_on_driver
final_time:  0.013001680374145508
launch_on_driver
final_time:  0.010703325271606445
launch_on_driver
final_time:  0.010918617248535156
launch_on_driver
final_time:  0.010547399520874023
launch_on_driver
final_time:  0.011991739273071289
launch_on_driver
final_time:  0.011337518692016602
launch_on_driver
final_time:  0.012056589126586914
launch_on_driver
final_time:  0.011330366134643555
launch_on_driver
final_time:  0.011252880096435547
launch_on_driver
final_time:  0.011571168899536133
launch_on_driver
final_time:  0.014066457748413086
launch_on_driver
final_time:  0.01225423812866211
launch_on_driver
final_time:  0.011146306991577148
launch_on_driver
final_time:  0.011298179626464844
launch_on_driver
final_time:  0.011492729187011719
launch_on_driver
final_time:  0.01096963882446289
launch_on_driver
final_time:  0.011655330657958984
launch_on_driver
final_time:  0.011462926864624023
launch_on_driver
final_time:  0.011854887008666992
launch_on_driver
final_time:  0.011497020721435547
launch_on_driver
final_time:  0.009900331497192383
launch_on_driver
final_time:  0.012879133224487305
launch_on_driver
final_time:  0.010218381881713867
launch_on_driver
final_time:  0.010955572128295898
launch_on_driver
final_time:  0.009853601455688477
launch_on_driver
final_time:  0.010451793670654297
launch_on_driver
final_time:  0.010568618774414062
launch_on_driver
final_time:  0.010154008865356445
launch_on_driver
final_time:  0.010655879974365234
launch_on_driver
final_time:  0.010482311248779297
launch_on_driver
final_time:  0.011229991912841797
launch_on_driver
final_time:  0.010716915130615234
launch_on_driver
final_time:  0.014190912246704102
launch_on_driver
final_time:  0.3820066452026367
launch_on_driver
final_time:  0.012183189392089844
launch_on_driver
final_time:  0.013042926788330078
launch_on_driver
final_time:  0.010720014572143555
launch_on_driver
final_time:  0.01346731185913086
launch_on_driver
final_time:  0.01239466667175293
launch_on_driver
final_time:  0.010859489440917969
launch_on_driver
final_time:  0.011806011199951172
launch_on_driver
final_time:  0.011380672454833984
launch_on_driver
final_time:  0.011278390884399414
launch_on_driver
final_time:  0.010324716567993164
launch_on_driver
final_time:  0.010723590850830078
launch_on_driver
final_time:  0.011315584182739258
launch_on_driver
final_time:  0.01056361198425293
launch_on_driver
final_time:  0.01262354850769043
launch_on_driver
final_time:  0.01321101188659668
launch_on_driver
final_time:  0.010131359100341797
launch_on_driver
final_time:  0.012056112289428711
launch_on_driver
final_time:  0.010559797286987305
launch_on_driver
final_time:  0.011250734329223633
launch_on_driver
final_time:  0.011512279510498047
launch_on_driver
final_time:  0.011217355728149414
launch_on_driver
final_time:  0.011539220809936523
launch_on_driver
final_time:  0.01025247573852539
launch_on_driver
final_time:  0.011105537414550781
launch_on_driver
final_time:  0.023847103118896484
launch_on_driver
final_time:  0.02034163475036621
launch_on_driver
final_time:  0.015604496002197266
launch_on_driver
final_time:  0.017749309539794922
launch_on_driver
final_time:  0.016294240951538086
launch_on_driver
final_time:  0.011455297470092773
launch_on_driver
final_time:  0.011803150177001953
launch_on_driver
final_time:  0.010510444641113281
launch_on_driver
final_time:  0.012317657470703125
launch_on_driver
final_time:  0.011717796325683594
launch_on_driver
final_time:  0.01010584831237793
launch_on_driver
final_time:  0.011571884155273438
launch_on_driver
final_time:  0.010817766189575195
launch_on_driver
final_time:  0.012079477310180664
launch_on_driver
final_time:  0.010691642761230469
launch_on_driver
final_time:  0.011304855346679688
launch_on_driver
final_time:  0.011722326278686523
launch_on_driver
final_time:  0.010433435440063477
launch_on_driver
final_time:  0.01193690299987793
launch_on_driver
final_time:  0.011626005172729492
launch_on_driver
final_time:  0.01169443130493164
launch_on_driver
final_time:  0.011142730712890625
launch_on_driver
final_time:  0.010177135467529297
launch_on_driver
final_time:  0.36133766174316406
launch_on_driver
final_time:  0.016695022583007812
launch_on_driver
final_time:  0.010703563690185547
launch_on_driver
final_time:  0.010361909866333008
launch_on_driver
final_time:  0.00957942008972168
launch_on_driver
final_time:  0.009903192520141602
launch_on_driver
final_time:  0.009601116180419922
launch_on_driver
final_time:  0.010478734970092773
launch_on_driver
final_time:  0.010662078857421875
launch_on_driver
final_time:  0.009768009185791016
launch_on_driver
final_time:  0.011677026748657227
launch_on_driver
final_time:  0.01143646240234375
launch_on_driver
final_time:  0.012079954147338867
launch_on_driver
final_time:  0.01053166389465332
launch_on_driver
final_time:  0.011370658874511719
launch_on_driver
final_time:  0.012005329132080078
launch_on_driver
final_time:  0.010431289672851562
launch_on_driver
final_time:  0.011559724807739258
launch_on_driver
final_time:  0.011211395263671875
launch_on_driver
final_time:  0.011754751205444336
launch_on_driver
final_time:  0.010542869567871094
launch_on_driver
final_time:  0.010755538940429688
launch_on_driver
final_time:  0.012115478515625
launch_on_driver
final_time:  0.010927677154541016
launch_on_driver
final_time:  0.012070655822753906
launch_on_driver
final_time:  0.010091543197631836
launch_on_driver
final_time:  0.01665639877319336
launch_on_driver
final_time:  0.011414527893066406
launch_on_driver
final_time:  0.011518716812133789
launch_on_driver
final_time:  0.012296438217163086
launch_on_driver
final_time:  0.011257648468017578
launch_on_driver
final_time:  0.011384248733520508
launch_on_driver
final_time:  0.01121973991394043
launch_on_driver
final_time:  0.01096653938293457
launch_on_driver
final_time:  0.012099981307983398
launch_on_driver
final_time:  0.010530471801757812
launch_on_driver
final_time:  0.01094365119934082
launch_on_driver
final_time:  0.010346174240112305
launch_on_driver
final_time:  0.010481595993041992
launch_on_driver
final_time:  0.011201858520507812
launch_on_driver
final_time:  0.010316133499145508
launch_on_driver
final_time:  0.011132001876831055
launch_on_driver
final_time:  0.009583711624145508
launch_on_driver
final_time:  0.010770082473754883
launch_on_driver
final_time:  0.009999275207519531
launch_on_driver
final_time:  0.010123729705810547
launch_on_driver
final_time:  0.011285543441772461
launch_on_driver
final_time:  0.009929656982421875
launch_on_driver
final_time:  0.15711545944213867
launch_on_driver
final_time:  0.014940023422241211
launch_on_driver
final_time:  0.011968851089477539
launch_on_driver
final_time:  0.010349512100219727
launch_on_driver
final_time:  0.010109663009643555
launch_on_driver
final_time:  0.010986804962158203
launch_on_driver
final_time:  0.01135706901550293
launch_on_driver
final_time:  0.010003328323364258
launch_on_driver
final_time:  0.010753870010375977
launch_on_driver
final_time:  0.009918212890625
launch_on_driver
final_time:  0.010648012161254883
launch_on_driver
final_time:  0.010167598724365234
launch_on_driver
final_time:  0.011105060577392578
launch_on_driver
final_time:  0.009904623031616211
launch_on_driver
final_time:  0.010555505752563477
launch_on_driver
final_time:  0.012124300003051758
launch_on_driver
final_time:  0.011333227157592773
launch_on_driver
final_time:  0.011743545532226562
launch_on_driver
final_time:  0.011115074157714844
launch_on_driver
final_time:  0.011363029479980469
launch_on_driver
final_time:  0.011738777160644531
launch_on_driver
final_time:  0.011363506317138672
launch_on_driver
final_time:  0.01020359992980957
launch_on_driver
final_time:  0.010244131088256836
launch_on_driver
final_time:  0.01808023452758789
launch_on_driver
final_time:  0.017580032348632812
launch_on_driver
final_time:  0.01979660987854004
launch_on_driver
final_time:  0.021771907806396484
launch_on_driver
final_time:  0.017749786376953125
launch_on_driver
final_time:  0.01894354820251465
launch_on_driver
final_time:  0.015546083450317383
launch_on_driver
final_time:  0.017190217971801758
launch_on_driver
final_time:  0.021445274353027344
launch_on_driver
final_time:  0.0186920166015625
launch_on_driver
final_time:  0.018065214157104492
launch_on_driver
final_time:  0.016531944274902344
launch_on_driver
final_time:  0.014984130859375
launch_on_driver
final_time:  0.01882004737854004
launch_on_driver
final_time:  0.01777052879333496
launch_on_driver
final_time:  0.012052774429321289
launch_on_driver
final_time:  0.01069188117980957
launch_on_driver
final_time:  0.010275602340698242
launch_on_driver
final_time:  0.010621309280395508
launch_on_driver
final_time:  0.010550975799560547
launch_on_driver
final_time:  0.01009225845336914
launch_on_driver
final_time:  0.015291929244995117
launch_on_driver
final_time:  0.014094352722167969
launch_on_driver
final_time:  0.012812376022338867
launch_on_driver
final_time:  0.012722015380859375
launch_on_driver
final_time:  0.1618502140045166
launch_on_driver
final_time:  0.012026786804199219
launch_on_driver
final_time:  0.01171255111694336
launch_on_driver
final_time:  0.010751485824584961
launch_on_driver
final_time:  0.011490821838378906
launch_on_driver
final_time:  0.010825634002685547
launch_on_driver
final_time:  0.010671854019165039
launch_on_driver
final_time:  0.011235713958740234
launch_on_driver
final_time:  0.010110855102539062
launch_on_driver
final_time:  0.01089620590209961
launch_on_driver
final_time:  0.011558294296264648
launch_on_driver
final_time:  0.010376453399658203
launch_on_driver
final_time:  0.01103663444519043
launch_on_driver
final_time:  0.010976552963256836
launch_on_driver
final_time:  0.011110782623291016
launch_on_driver
final_time:  0.010975122451782227
launch_on_driver
final_time:  0.010925531387329102
launch_on_driver
final_time:  0.011664867401123047
launch_on_driver
final_time:  0.011075019836425781
launch_on_driver
final_time:  0.011862039566040039
launch_on_driver
final_time:  0.011659383773803711
launch_on_driver
final_time:  0.011701107025146484
launch_on_driver
final_time:  0.01147913932800293
launch_on_driver
final_time:  0.011171340942382812
launch_on_driver
final_time:  0.011185169219970703
launch_on_driver
final_time:  0.010149955749511719
launch_on_driver
final_time:  0.011645793914794922
launch_on_driver
final_time:  0.010930061340332031
launch_on_driver
final_time:  0.011761665344238281
launch_on_driver
final_time:  0.011106014251708984
launch_on_driver
final_time:  0.011335611343383789
launch_on_driver
final_time:  0.011690378189086914
launch_on_driver
final_time:  0.01126408576965332
launch_on_driver
final_time:  0.011382579803466797
launch_on_driver
final_time:  0.010489702224731445
launch_on_driver
final_time:  0.011505126953125
launch_on_driver
final_time:  0.010534048080444336
launch_on_driver
final_time:  0.010926008224487305
launch_on_driver
final_time:  0.023344755172729492
launch_on_driver
final_time:  0.01664876937866211
launch_on_driver
final_time:  0.01829242706298828
launch_on_driver
final_time:  0.013552188873291016
launch_on_driver
final_time:  0.015638351440429688
launch_on_driver
final_time:  0.011754035949707031
launch_on_driver
final_time:  0.009905338287353516
launch_on_driver
final_time:  0.010723590850830078
launch_on_driver
final_time:  0.010135650634765625
launch_on_driver
final_time:  0.010060787200927734
launch_on_driver
final_time:  0.17640209197998047
launch_on_driver
final_time:  0.019985437393188477
launch_on_driver
final_time:  0.012852907180786133
launch_on_driver
final_time:  0.01166987419128418
launch_on_driver
final_time:  0.013599395751953125
launch_on_driver
final_time:  0.012302875518798828
launch_on_driver
final_time:  0.010595083236694336
launch_on_driver
final_time:  0.01242375373840332
launch_on_driver
final_time:  0.010759592056274414
launch_on_driver
final_time:  0.01986837387084961
launch_on_driver
final_time:  0.022597789764404297
launch_on_driver
final_time:  0.02036595344543457
launch_on_driver
final_time:  0.021917343139648438
launch_on_driver
final_time:  0.016546249389648438
launch_on_driver
final_time:  0.012462615966796875
launch_on_driver
final_time:  0.010942935943603516
launch_on_driver
final_time:  0.011588573455810547
launch_on_driver
final_time:  0.012187719345092773
launch_on_driver
final_time:  0.011018753051757812
launch_on_driver
final_time:  0.011943817138671875
launch_on_driver
final_time:  0.010530948638916016
launch_on_driver
final_time:  0.012031316757202148
launch_on_driver
final_time:  0.011060476303100586
launch_on_driver
final_time:  0.010691165924072266
launch_on_driver
final_time:  0.011852264404296875
launch_on_driver
final_time:  0.010617494583129883
launch_on_driver
final_time:  0.010771751403808594
launch_on_driver
final_time:  0.010732650756835938
launch_on_driver
final_time:  0.01110696792602539
launch_on_driver
final_time:  0.011513471603393555
launch_on_driver
final_time:  0.011114120483398438
launch_on_driver
final_time:  0.012135744094848633
launch_on_driver
final_time:  0.011427164077758789
launch_on_driver
final_time:  0.011675834655761719
launch_on_driver
final_time:  0.01165914535522461
launch_on_driver
final_time:  0.016806602478027344
launch_on_driver
final_time:  0.0171663761138916
launch_on_driver
final_time:  0.015420675277709961
launch_on_driver
final_time:  0.017909765243530273
launch_on_driver
final_time:  0.014292240142822266
launch_on_driver
final_time:  0.011250495910644531
launch_on_driver
final_time:  0.01927781105041504
launch_on_driver
final_time:  0.013426542282104492
launch_on_driver
final_time:  0.011981964111328125
launch_on_driver
final_time:  0.011427879333496094
launch_on_driver
final_time:  0.01148366928100586
launch_on_driver
final_time:  0.010757923126220703
launch_on_driver
final_time:  0.012824296951293945
launch_on_driver
final_time:  0.1686420440673828
launch_on_driver
final_time:  0.020840883255004883
launch_on_driver
final_time:  0.02176809310913086
launch_on_driver
final_time:  0.018129348754882812
launch_on_driver
final_time:  0.017573833465576172
launch_on_driver
final_time:  0.01680731773376465
launch_on_driver
final_time:  0.01926112174987793
launch_on_driver
final_time:  0.021971702575683594
launch_on_driver
final_time:  0.018136262893676758
launch_on_driver
final_time:  0.015151739120483398
launch_on_driver
final_time:  0.019098281860351562
launch_on_driver
final_time:  0.016339778900146484
launch_on_driver
final_time:  0.021650075912475586
launch_on_driver
final_time:  0.018861055374145508
launch_on_driver
final_time:  0.016623973846435547
launch_on_driver
final_time:  0.016946792602539062
launch_on_driver
final_time:  0.015440225601196289
launch_on_driver
final_time:  0.012744665145874023
launch_on_driver
final_time:  0.016974449157714844
launch_on_driver
final_time:  0.013306856155395508
launch_on_driver
final_time:  0.012050867080688477
launch_on_driver
final_time:  0.0186917781829834
total execution time: 21.185078859329224 [s] without warmup
Serial execution time. Mean: 0.04366 s, Std: 0.90063 s
Serial execution time. Mean: 0.01818 s, Std: 0.03236 s
