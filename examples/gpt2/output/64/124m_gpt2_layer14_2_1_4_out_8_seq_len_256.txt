trainig_args.mod:  1.5B
[WARNING] Please, check seq_len: 256
get pretrain_model
no model_name_or_path
!!!!!!!!!!!!!!!!!!!Model parameters:  1.450638473033905
stpes_per_epoch:  1966029
train_epochs:  1
Initial compilation. This might take some minutes...
-------------------- Layer slicing stats --------------------
layer_num: 14
 - Number of Jaxpr eqns in each stage:
Layer 0: #eqns=216, flop=4.084 TFlop, #heavy_ops=12
Layer 1: #eqns=484, flop=4.134 TFlop, #heavy_ops=24
Layer 2: #eqns=403, flop=3.772 TFlop, #heavy_ops=20
Layer 3: #eqns=444, flop=3.463 TFlop, #heavy_ops=22
Layer 4: #eqns=484, flop=4.134 TFlop, #heavy_ops=24
Layer 5: #eqns=484, flop=4.134 TFlop, #heavy_ops=24
Layer 6: #eqns=484, flop=4.134 TFlop, #heavy_ops=24
Layer 7: #eqns=484, flop=4.134 TFlop, #heavy_ops=24
Layer 8: #eqns=484, flop=4.134 TFlop, #heavy_ops=24
Layer 9: #eqns=403, flop=3.772 TFlop, #heavy_ops=20
Layer 10: #eqns=484, flop=4.134 TFlop, #heavy_ops=24
Layer 11: #eqns=444, flop=3.463 TFlop, #heavy_ops=22
Layer 12: #eqns=484, flop=4.134 TFlop, #heavy_ops=24
Layer 13: #eqns=97, flop=3.306 TFlop, #heavy_ops=3
 - Invars of each stage:
Layer 0 has inputs:
Layer 1 has inputs:
bes (64, 256, 1600) from layer 0
wo (64, 256) from layer 0
Layer 2 has inputs:
bxe (64, 256, 1600) from layer 1
wo (64, 256) from layer 0
Layer 3 has inputs:
cmo (64, 256, 1600) from layer 2
wo (64, 256) from layer 0
Layer 4 has inputs:
ddm (64, 256, 1600) from layer 3
wo (64, 256) from layer 0
Layer 5 has inputs:
dvy (64, 256, 1600) from layer 4
wo (64, 256) from layer 0
Layer 6 has inputs:
eok (64, 256, 1600) from layer 5
wo (64, 256) from layer 0
Layer 7 has inputs:
fgw (64, 256, 1600) from layer 6
wo (64, 256) from layer 0
Layer 8 has inputs:
fzi (64, 256, 1600) from layer 7
wo (64, 256) from layer 0
Layer 9 has inputs:
gru (64, 256, 1600) from layer 8
wo (64, 256) from layer 0
Layer 10 has inputs:
hhe (64, 256, 1600) from layer 9
wo (64, 256) from layer 0
Layer 11 has inputs:
hzq (64, 256, 1600) from layer 10
wo (64, 256) from layer 0
Layer 12 has inputs:
iqo (64, 256, 1600) from layer 11
wo (64, 256) from layer 0
Layer 13 has inputs:
jja (64, 256, 1600) from layer 12
-------------------------------------------------------------
-------------------- Layer slicing stats --------------------
layer_num: 14
 - Number of Jaxpr eqns in each stage:
Layer 0: #eqns=216, flop=4.084 TFlop, #heavy_ops=12
Layer 1: #eqns=484, flop=4.134 TFlop, #heavy_ops=24
Layer 2: #eqns=403, flop=3.772 TFlop, #heavy_ops=20
Layer 3: #eqns=444, flop=3.463 TFlop, #heavy_ops=22
Layer 4: #eqns=484, flop=4.134 TFlop, #heavy_ops=24
Layer 5: #eqns=484, flop=4.134 TFlop, #heavy_ops=24
Layer 6: #eqns=484, flop=4.134 TFlop, #heavy_ops=24
Layer 7: #eqns=484, flop=4.134 TFlop, #heavy_ops=24
Layer 8: #eqns=484, flop=4.134 TFlop, #heavy_ops=24
Layer 9: #eqns=403, flop=3.772 TFlop, #heavy_ops=20
Layer 10: #eqns=484, flop=4.134 TFlop, #heavy_ops=24
Layer 11: #eqns=444, flop=3.463 TFlop, #heavy_ops=22
Layer 12: #eqns=484, flop=4.134 TFlop, #heavy_ops=24
Layer 13: #eqns=97, flop=3.306 TFlop, #heavy_ops=3
 - Invars of each stage:
Layer 0 has inputs:
Layer 1 has inputs:
bes (64, 256, 1600) from layer 0
wo (64, 256) from layer 0
Layer 2 has inputs:
bxe (64, 256, 1600) from layer 1
wo (64, 256) from layer 0
Layer 3 has inputs:
cmo (64, 256, 1600) from layer 2
wo (64, 256) from layer 0
Layer 4 has inputs:
ddm (64, 256, 1600) from layer 3
wo (64, 256) from layer 0
Layer 5 has inputs:
dvy (64, 256, 1600) from layer 4
wo (64, 256) from layer 0
Layer 6 has inputs:
eok (64, 256, 1600) from layer 5
wo (64, 256) from layer 0
Layer 7 has inputs:
fgw (64, 256, 1600) from layer 6
wo (64, 256) from layer 0
Layer 8 has inputs:
fzi (64, 256, 1600) from layer 7
wo (64, 256) from layer 0
Layer 9 has inputs:
gru (64, 256, 1600) from layer 8
wo (64, 256) from layer 0
Layer 10 has inputs:
hhe (64, 256, 1600) from layer 9
wo (64, 256) from layer 0
Layer 11 has inputs:
hzq (64, 256, 1600) from layer 10
wo (64, 256) from layer 0
Layer 12 has inputs:
iqo (64, 256, 1600) from layer 11
wo (64, 256) from layer 0
Layer 13 has inputs:
jja (64, 256, 1600) from layer 12
-------------------------------------------------------------
-------------------- Layer slicing stats --------------------
layer_num: 14
 - Number of Jaxpr eqns in each stage:
Layer 0: #eqns=216, flop=32.676 TFlop, #heavy_ops=12
Layer 1: #eqns=484, flop=33.071 TFlop, #heavy_ops=24
Layer 2: #eqns=403, flop=30.172 TFlop, #heavy_ops=20
Layer 3: #eqns=444, flop=27.703 TFlop, #heavy_ops=22
Layer 4: #eqns=484, flop=33.071 TFlop, #heavy_ops=24
Layer 5: #eqns=484, flop=33.071 TFlop, #heavy_ops=24
Layer 6: #eqns=484, flop=33.071 TFlop, #heavy_ops=24
Layer 7: #eqns=484, flop=33.071 TFlop, #heavy_ops=24
Layer 8: #eqns=484, flop=33.071 TFlop, #heavy_ops=24
Layer 9: #eqns=403, flop=30.172 TFlop, #heavy_ops=20
Layer 10: #eqns=484, flop=33.071 TFlop, #heavy_ops=24
Layer 11: #eqns=444, flop=27.703 TFlop, #heavy_ops=22
Layer 12: #eqns=484, flop=33.071 TFlop, #heavy_ops=24
Layer 13: #eqns=97, flop=26.448 TFlop, #heavy_ops=3
 - Invars of each stage:
Layer 0 has inputs:
Layer 1 has inputs:
bes (512, 256, 1600) from layer 0
wo (512, 256) from layer 0
Layer 2 has inputs:
bxe (512, 256, 1600) from layer 1
wo (512, 256) from layer 0
Layer 3 has inputs:
cmo (512, 256, 1600) from layer 2
wo (512, 256) from layer 0
Layer 4 has inputs:
ddm (512, 256, 1600) from layer 3
wo (512, 256) from layer 0
Layer 5 has inputs:
dvy (512, 256, 1600) from layer 4
wo (512, 256) from layer 0
Layer 6 has inputs:
eok (512, 256, 1600) from layer 5
wo (512, 256) from layer 0
Layer 7 has inputs:
fgw (512, 256, 1600) from layer 6
wo (512, 256) from layer 0
Layer 8 has inputs:
fzi (512, 256, 1600) from layer 7
wo (512, 256) from layer 0
Layer 9 has inputs:
gru (512, 256, 1600) from layer 8
wo (512, 256) from layer 0
Layer 10 has inputs:
hhe (512, 256, 1600) from layer 9
wo (512, 256) from layer 0
Layer 11 has inputs:
hzq (512, 256, 1600) from layer 10
wo (512, 256) from layer 0
Layer 12 has inputs:
iqo (512, 256, 1600) from layer 11
wo (512, 256) from layer 0
Layer 13 has inputs:
jja (512, 256, 1600) from layer 12
-------------------------------------------------------------
-------------------- Layer slicing stats --------------------
layer_num: 14
 - Number of Jaxpr eqns in each stage:
Layer 0: #eqns=216, flop=32.676 TFlop, #heavy_ops=12
Layer 1: #eqns=484, flop=33.071 TFlop, #heavy_ops=24
Layer 2: #eqns=403, flop=30.172 TFlop, #heavy_ops=20
Layer 3: #eqns=444, flop=27.703 TFlop, #heavy_ops=22
Layer 4: #eqns=484, flop=33.071 TFlop, #heavy_ops=24
Layer 5: #eqns=484, flop=33.071 TFlop, #heavy_ops=24
Layer 6: #eqns=484, flop=33.071 TFlop, #heavy_ops=24
Layer 7: #eqns=484, flop=33.071 TFlop, #heavy_ops=24
Layer 8: #eqns=484, flop=33.071 TFlop, #heavy_ops=24
Layer 9: #eqns=403, flop=30.172 TFlop, #heavy_ops=20
Layer 10: #eqns=484, flop=33.071 TFlop, #heavy_ops=24
Layer 11: #eqns=444, flop=27.703 TFlop, #heavy_ops=22
Layer 12: #eqns=484, flop=33.071 TFlop, #heavy_ops=24
Layer 13: #eqns=97, flop=26.448 TFlop, #heavy_ops=3
 - Invars of each stage:
Layer 0 has inputs:
Layer 1 has inputs:
bes (512, 256, 1600) from layer 0
wo (512, 256) from layer 0
Layer 2 has inputs:
bxe (512, 256, 1600) from layer 1
wo (512, 256) from layer 0
Layer 3 has inputs:
cmo (512, 256, 1600) from layer 2
wo (512, 256) from layer 0
Layer 4 has inputs:
ddm (512, 256, 1600) from layer 3
wo (512, 256) from layer 0
Layer 5 has inputs:
dvy (512, 256, 1600) from layer 4
wo (512, 256) from layer 0
Layer 6 has inputs:
eok (512, 256, 1600) from layer 5
wo (512, 256) from layer 0
Layer 7 has inputs:
fgw (512, 256, 1600) from layer 6
wo (512, 256) from layer 0
Layer 8 has inputs:
fzi (512, 256, 1600) from layer 7
wo (512, 256) from layer 0
Layer 9 has inputs:
gru (512, 256, 1600) from layer 8
wo (512, 256) from layer 0
Layer 10 has inputs:
hhe (512, 256, 1600) from layer 9
wo (512, 256) from layer 0
Layer 11 has inputs:
hzq (512, 256, 1600) from layer 10
wo (512, 256) from layer 0
Layer 12 has inputs:
iqo (512, 256, 1600) from layer 11
wo (512, 256) from layer 0
Layer 13 has inputs:
jja (512, 256, 1600) from layer 12
-------------------------------------------------------------
compile_pipehshard_executable_internal
split_and_process_layers
jaxpr.eqns, len: 3
eqn: a:f16[50257,1600] b:f16[1024,1600] c:f16[1600] d:f16[1600] e:f16[4800,1600] f:f16[4800]
  g:f16[1600,1600] h:f16[1600] i:f16[1600] j:f16[1600] k:f16[6400,1600] l:f16[6400]
  m:f16[1600,6400] n:f16[1600] o:f16[1600] p:f16[1600] q:f16[4800,1600] r:f16[4800]
  s:f16[1600,1600] t:f16[1600] u:f16[64,256] v:f16[64,256] w:f16[64,256] x:f16[1600]
  y:f16[1600] z:f16[6400,1600] ba:f16[6400] bb:f16[1600,6400] bc:f16[1600] bd:f16[1600]
  be:f16[1600] bf:f16[4800,1600] bg:f16[4800] bh:f16[1600,1600] bi:f16[1600] bj:f16[1600]
  bk:f16[1600] bl:f16[6400,1600] bm:f16[6400] bn:f16[1600,6400] bo:f16[1600] bp:f16[1600]
  bq:f16[1600] br:f16[4800,1600] bs:f16[4800] bt:f16[1600,1600] bu:f16[1600] bv:f16[1600]
  bw:f16[1600] bx:f16[6400,1600] by:f16[6400] bz:f16[1600,6400] ca:f16[1600] cb:f16[1600]
  cc:f16[1600] cd:f16[4800,1600] ce:f16[4800] cf:f16[1600,1600] cg:f16[1600] ch:f16[1600]
  ci:f16[1600] cj:f16[6400,1600] ck:f16[6400] cl:f16[1600,6400] cm:f16[1600] cn:f16[1600]
  co:f16[1600] cp:f16[4800,1600] cq:f16[4800] cr:f16[1600,1600] cs:f16[1600] ct:f16[1600]
  cu:f16[1600] cv:f16[6400,1600] cw:f16[6400] cx:f16[1600,6400] cy:f16[1600] cz:f16[1600]
  da:f16[1600] db:f16[4800,1600] dc:f16[4800] dd:f16[1600,1600] de:f16[1600] df:f16[1600]
  dg:f16[1600] dh:f16[6400,1600] di:f16[6400] dj:f16[1600,6400] dk:f16[1600] dl:f16[1600]
  dm:f16[1600] dn:f16[4800,1600] do:f16[4800] dp:f16[1600,1600] dq:f16[1600] dr:f16[1600]
  ds:f16[1600] dt:f16[6400,1600] du:f16[6400] dv:f16[1600,6400] dw:f16[1600] dx:f16[1600]
  dy:f16[1600] dz:f16[4800,1600] ea:f16[4800] eb:f16[1600,1600] ec:f16[1600] ed:f16[1600]
  ee:f16[1600] ef:f16[6400,1600] eg:f16[6400] eh:f16[1600,6400] ei:f16[1600] = pipeline_marker[
  mark_type=start
  name=0
] ej ek el em en eo ep eq er es et eu ev ew ex ey ez fa fb fc fd fe ff fg fh fi fj
  fk fl fm fn fo fp fq fr fs ft fu fv fw fx fy fz ga gb gc gd ge gf gg gh gi gj gk
  gl gm gn go gp gq gr gs gt gu gv gw gx gy gz ha hb hc hd he hf hg hh hi hj hk hl
  hm hn ho hp hq hr hs ht hu hv hw hx hy hz ia ib ic id ie if ig ih ii ij ik il im
  in io ip iq ir
eqn: a:i32[64,256] b:f16[64,256,1600] c:f16[1600,1600] d:f16[64,256,25,64] e:f16[64,25,256,1]
  f:f16[64,25,256,256] g:f16[64,25,256,1] h:f16[64,256,25,64] i:f16[64,256,25,64]
  j:f16[] k:f16[64,25,256,256] l:f16[64,256,1600] m:f16[1600,4800] n:f32[64,256,1600]
  o:f32[64,256,1] p:f32[1,1,1600] q:f32[64,256,1] r:f32[64,256] s:f32[64,256] t:f32[64,256,1600]
  u:f32[64,256,1600] v:f16[64,256,6400] w:f16[6400,1600] x:f16[64,256,6400] y:f16[64,256,6400]
  z:f16[64,256,6400] ba:f16[64,256,6400] bb:f16[64,256,6400] bc:f16[64,256,1600]
  bd:f16[1600,6400] be:f32[64,256,1600] bf:f32[64,256,1] bg:f32[1,1,1600] bh:f32[64,256,1]
  bi:f32[64,256] bj:f32[64,256] bk:f32[64,256,1600] bl:f32[64,256,1600] bm:f16[64,256,1600]
  bn:f16[1600,1600] bo:f16[64,256,25,64] bp:f16[64,25,256,1] bq:f16[64,25,256,256]
  br:f16[64,25,256,1] bs:f16[64,256,25,64] bt:f16[64,256,25,64] bu:f16[] bv:f16[64,25,256,256]
  bw:f16[64,256,1600] bx:f16[1600,4800] by:f32[64,256,1600] bz:f32[64,256,1] ca:f32[1,1,1600]
  cb:f32[64,256,1] cc:f32[64,256] cd:f32[64,256] ce:f32[64,256,1600] cf:f32[64,256,1600]
  cg:f16[64,256,1024] ch:f16[64,256,50257] ci:f16[64,256,1600] cj:f16[1600,1600]
  ck:f16[64,256,25,64] cl:f16[64,25,256,1] cm:f16[64,25,256,256] cn:f16[64,25,256,1]
  co:f16[64,256,25,64] cp:f16[64,256,25,64] cq:f16[] cr:f16[64,25,256,256] cs:f16[64,256,1600]
  ct:f16[1600,4800] cu:f32[64,256,1600] cv:f32[64,256,1] cw:f32[1,1,1600] cx:f32[64,256,1]
  cy:f32[64,256] cz:f32[64,256] da:f32[64,256,1600] db:f32[64,256,1600] dc:f16[64,256,6400]
  dd:f16[6400,1600] de:f16[64,256,6400] df:f16[64,256,6400] dg:f16[64,256,6400] dh:f16[64,256,6400]
  di:f16[64,256,6400] dj:f16[64,256,1600] dk:f16[1600,6400] dl:f32[64,256,1600] dm:f32[64,256,1]
  dn:f32[1,1,1600] do:f32[64,256,1] dp:f32[64,256] dq:f32[64,256] dr:f32[64,256,1600]
  ds:f32[64,256,1600] dt:f16[64,256,1600] du:f16[1600,1600] dv:f16[64,256,25,64]
  dw:f16[64,25,256,1] dx:f16[64,25,256,256] dy:f16[64,25,256,1] dz:f16[64,256,25,64]
  ea:f16[64,256,25,64] eb:f16[] ec:f16[64,25,256,256] ed:f16[64,256,1600] ee:f16[1600,4800]
  ef:f32[64,256,1600] eg:f32[64,256,1] eh:f32[1,1,1600] ei:f32[64,256,1] ej:f32[64,256]
  ek:f32[64,256] el:f32[64,256,1600] em:f32[64,256,1600] en:f16[64,256,6400] eo:f16[6400,1600]
  ep:f16[64,256,6400] eq:f16[64,256,6400] er:f16[64,256,6400] es:f16[64,256,6400]
  et:f16[64,256,6400] eu:f16[64,256,1600] ev:f16[1600,6400] ew:f32[64,256,1600] ex:f32[64,256,1]
  ey:f32[1,1,1600] ez:f32[64,256,1] fa:f32[64,256] fb:f32[64,256] fc:f32[64,256,1600]
  fd:f32[64,256,1600] fe:f16[64,256,1600] ff:f16[1600,1600] fg:f16[64,256,25,64]
  fh:f16[64,25,256,1] fi:f16[64,25,256,256] fj:f16[64,25,256,1] fk:f16[64,256,25,64]
  fl:f16[64,256,25,64] fm:f16[] fn:f16[64,25,256,256] fo:f16[64,256,1600] fp:f16[1600,4800]
  fq:f32[64,256,1600] fr:f32[64,256,1] fs:f32[1,1,1600] ft:f32[64,256,1] fu:f32[64,256]
  fv:f32[64,256] fw:f32[64,256,1600] fx:f32[64,256,1600] fy:f16[64,256,6400] fz:f16[6400,1600]
  ga:f16[64,256,6400] gb:f16[64,256,6400] gc:f16[64,256,6400] gd:f16[64,256,6400]
  ge:f16[64,256,6400] gf:f16[64,256,1600] gg:f16[1600,6400] gh:f32[64,256,1600] gi:f32[64,256,1]
  gj:f32[1,1,1600] gk:f32[64,256,1] gl:f32[64,256] gm:f32[64,256] gn:f32[64,256,1600]
  go:f32[64,256,1600] gp:f16[64,256,1600] gq:f16[1600,1600] gr:f16[64,256,25,64]
  gs:f16[64,25,256,1] gt:f16[64,25,256,256] gu:f16[64,25,256,1] gv:f16[64,256,25,64]
  gw:f16[64,256,25,64] gx:f16[] gy:f16[64,25,256,256] gz:f16[64,256,1600] ha:f16[1600,4800]
  hb:f32[64,256,1600] hc:f32[64,256,1] hd:f32[1,1,1600] he:f32[64,256,1] hf:f32[64,256]
  hg:f32[64,256] hh:f32[64,256,1600] hi:f32[64,256,1600] hj:f16[64,256,6400] hk:f16[6400,1600]
  hl:f16[64,256,6400] hm:f16[64,256,6400] hn:f16[64,256,6400] ho:f16[64,256,6400]
  hp:f16[64,256,6400] hq:f16[64,256,1600] hr:f16[1600,6400] hs:f32[64,256,1600] ht:f32[64,256,1]
  hu:f32[1,1,1600] hv:f32[64,256,1] hw:f32[64,256] hx:f32[64,256] hy:f32[64,256,1600]
  hz:f32[64,256,1600] ia:f16[64,256,1600] ib:f16[64,256,6400] ic:f16[6400,1600] id:f16[64,256,6400]
  ie:f16[64,256,6400] if:f16[64,256,6400] ig:f16[64,256,6400] ih:f16[64,256,6400]
  ii:f16[64,256,1600] ij:f16[1600,6400] ik:f32[64,256,1600] il:f32[64,256,1] im:f32[1,1,1600]
  in:f32[64,256,1] io:f32[64,256] ip:f32[64,256] iq:f32[64,256,1600] ir:f32[64,256,1600]
  is:f16[64,256,1600] it:f16[1600,1600] iu:f16[64,256,25,64] iv:f16[64,25,256,1]
  iw:f16[64,25,256,256] ix:f16[64,25,256,1] iy:f16[64,256,25,64] iz:f16[64,256,25,64]
  ja:f16[] jb:f16[64,25,256,256] jc:f16[64,256,1600] jd:f16[1600,4800] je:f32[64,256,1600]
  jf:f32[64,256,1] jg:f32[1,1,1600] jh:f32[64,256,1] ji:f32[64,256] jj:f32[64,256]
  jk:f32[64,256,1600] jl:f32[64,256,1600] jm:f16[64,256,6400] jn:f16[6400,1600] jo:f16[64,256,6400]
  jp:f16[64,256,6400] jq:f16[64,256,6400] jr:f16[64,256,6400] js:f16[64,256,6400]
  jt:f16[64,256,1600] ju:f16[1600,6400] jv:f32[64,256,1600] jw:f32[64,256,1] jx:f32[1,1,1600]
  jy:f32[64,256,1] jz:f32[64,256] ka:f32[64,256] kb:f32[64,256,1600] kc:f32[64,256,1600]
  kd:f16[64,256,1600] ke:f16[1600,1600] kf:f16[64,256,25,64] kg:f16[64,25,256,1]
  kh:f16[64,25,256,256] ki:f16[64,25,256,1] kj:f16[64,256,25,64] kk:f16[64,256,25,64]
  kl:f16[] km:f16[64,25,256,256] kn:f16[64,256,1600] ko:f16[1600,4800] kp:f32[64,256,1600]
  kq:f32[64,256,1] kr:f32[1,1,1600] ks:f32[64,256,1] kt:f32[64,256] ku:f32[64,256]
  kv:f32[64,256,1600] kw:f32[64,256,1600] kx:f16[64,256,6400] ky:f16[6400,1600] kz:f16[64,256,6400]
  la:f16[64,256,6400] lb:f16[64,256,6400] lc:f16[64,256,6400] ld:f16[64,256,6400]
  le:f16[64,256,1600] lf:f16[1600,6400] lg:f32[64,256,1600] lh:f32[64,256,1] li:f32[1,1,1600]
  lj:f32[64,256,1] lk:f32[64,256] ll:f32[64,256] lm:f32[64,256,1600] ln:f32[64,256,1600]
  lo:f16[64,256,1600] lp:f16[1600,1600] lq:f16[64,256,25,64] lr:f16[64,25,256,1]
  ls:f16[64,25,256,256] lt:f16[64,25,256,1] lu:f16[64,256,25,64] lv:f16[64,256,25,64]
  lw:f16[] lx:f16[64,25,256,256] ly:f16[64,256,1600] lz:f16[1600,4800] ma:f32[64,256,1600]
  mb:f32[64,256,1] mc:f32[1,1,1600] md:f32[64,256,1] me:f32[64,256] mf:f32[64,256]
  mg:f32[64,256,1600] mh:f32[64,256,1600] mi:f16[64,256,6400] mj:f16[6400,1600] mk:f16[64,256,6400]
  ml:f16[64,256,6400] mm:f16[64,256,6400] mn:f16[64,256,6400] mo:f16[64,256,6400]
  mp:f16[64,256,1600] mq:f16[1600,6400] mr:f32[64,256,1600] ms:f32[64,256,1] mt:f32[1,1,1600]
  mu:f32[64,256,1] mv:f32[64,256] mw:f32[64,256] mx:f32[64,256,1600] my:f32[64,256,1600] = named_call[
  call_jaxpr={ lambda ; mz:f16[50257,1600] na:f16[1024,1600] nb:f16[1600] nc:f16[1600]
      nd:f16[4800,1600] ne:f16[4800] nf:f16[1600,1600] ng:f16[1600] nh:f16[1600]
      ni:f16[1600] nj:f16[6400,1600] nk:f16[6400] nl:f16[1600,6400] nm:f16[1600]
      nn:f16[1600] no:f16[1600] np:f16[4800,1600] nq:f16[4800] nr:f16[1600,1600]
      ns:f16[1600] nt:f16[64,256] nu:f16[64,256] nv:f16[64,256] nw:f16[1600] nx:f16[1600]
      ny:f16[6400,1600] nz:f16[6400] oa:f16[1600,6400] ob:f16[1600] oc:f16[1600]
      od:f16[1600] oe:f16[4800,1600] of:f16[4800] og:f16[1600,1600] oh:f16[1600]
      oi:f16[1600] oj:f16[1600] ok:f16[6400,1600] ol:f16[6400] om:f16[1600,6400]
      on:f16[1600] oo:f16[1600] op:f16[1600] oq:f16[4800,1600] or:f16[4800] os:f16[1600,1600]
      ot:f16[1600] ou:f16[1600] ov:f16[1600] ow:f16[6400,1600] ox:f16[6400] oy:f16[1600,6400]
      oz:f16[1600] pa:f16[1600] pb:f16[1600] pc:f16[4800,1600] pd:f16[4800] pe:f16[1600,1600]
      pf:f16[1600] pg:f16[1600] ph:f16[1600] pi:f16[6400,1600] pj:f16[6400] pk:f16[1600,6400]
      pl:f16[1600] pm:f16[1600] pn:f16[1600] po:f16[4800,1600] pp:f16[4800] pq:f16[1600,1600]
      pr:f16[1600] ps:f16[1600] pt:f16[1600] pu:f16[6400,1600] pv:f16[6400] pw:f16[1600,6400]
      px:f16[1600] py:f16[1600] pz:f16[1600] qa:f16[4800,1600] qb:f16[4800] qc:f16[1600,1600]
      qd:f16[1600] qe:f16[1600] qf:f16[1600] qg:f16[6400,1600] qh:f16[6400] qi:f16[1600,6400]
      qj:f16[1600] qk:f16[1600] ql:f16[1600] qm:f16[4800,1600] qn:f16[4800] qo:f16[1600,1600]
      qp:f16[1600] qq:f16[1600] qr:f16[1600] qs:f16[6400,1600] qt:f16[6400] qu:f16[1600,6400]
      qv:f16[1600] qw:f16[1600] qx:f16[1600] qy:f16[4800,1600] qz:f16[4800] ra:f16[1600,1600]
      rb:f16[1600] rc:f16[1600] rd:f16[1600] re:f16[6400,1600] rf:f16[6400] rg:f16[1600,6400]
      rh:f16[1600]. let
      ri:f16[64,256,1600] rj:i32[64,256] rk:f16[64,256,1600] rl:f16[1600,1600] rm:f16[64,256,25,64]
        rn:f16[64,25,256,1] ro:f16[64,25,256,256] rp:f16[64,25,256,1] rq:f16[64,256,25,64]
        rr:f16[64,256,25,64] rs:f16[] rt:f16[64,25,256,256] ru:f16[64,256,1600] rv:f16[1600,4800]
        rw:f32[64,256,1600] rx:f32[64,256,1] ry:f32[1,1,1600] rz:f32[64,256,1] sa:f32[64,256]
        sb:f32[64,256] sc:f32[64,256,1600] sd:f32[64,256,1600] se:f16[64,256,6400]
        sf:f16[6400,1600] sg:f16[64,256,6400] sh:f16[64,256,6400] si:f16[64,256,6400]
        sj:f16[64,256,6400] sk:f16[64,256,6400] sl:f16[64,256,1600] sm:f16[1600,6400]
        sn:f32[64,256,1600] so:f32[64,256,1] sp:f32[1,1,1600] sq:f32[64,256,1] sr:f32[64,256]
        ss:f32[64,256] st:f32[64,256,1600] su:f32[64,256,1600] sv:f16[64,256,1600]
        sw:f16[1600,1600] sx:f16[64,256,25,64] sy:f16[64,25,256,1] sz:f16[64,25,256,256]
        ta:f16[64,25,256,1] tb:f16[64,256,25,64] tc:f16[64,256,25,64] td:f16[] te:f16[64,25,256,256]
        tf:f16[64,256,1600] tg:f16[1600,4800] th:f32[64,256,1600] ti:f32[64,256,1]
        tj:f32[1,1,1600] tk:f32[64,256,1] tl:f32[64,256] tm:f32[64,256] tn:f32[64,256,1600]
        to:f32[64,256,1600] tp:f16[64,256,1024] tq:f16[64,256,50257] = named_call[
        call_jaxpr={ lambda ; tr:f16[50257,1600] ts:f16[1024,1600] tt:f16[1600] tu:f16[1600]
            tv:f16[4800,1600] tw:f16[4800] tx:f16[1600,1600] ty:f16[1600] tz:f16[1600]
            ua:f16[1600] ub:f16[6400,1600] uc:f16[6400] ud:f16[1600,6400] ue:f16[1600]
            uf:f16[1600] ug:f16[1600] uh:f16[4800,1600] ui:f16[4800] uj:f16[1600,1600]
            uk:f16[1600] ul:f16[64,256] um:f16[64,256] un:f16[64,256]. let
            uo:i32[64,256] = convert_element_type[
              new_dtype=int32
              weak_type=False
            ] ul
            up:i32[64,256] = convert_element_type[
              new_dtype=int32
              weak_type=False
            ] um
            uq:i32[64,256] = convert_element_type[
              new_dtype=int32
              weak_type=False
            ] un
            ur:i32[64,256,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1)
            ] uo
            us:i32[1,1,50257] = iota[
              dimension=2
              dtype=int32
              shape=(1, 1, 50257)
            ] 
            ut:bool[64,256,50257] = eq ur us
            uu:f16[64,256,50257] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] ut
            uv:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] uu tr
            uw:i32[64,256,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1)
            ] uq
            ux:i32[1,1,1024] = iota[dimension=2 dtype=int32 shape=(1, 1, 1024)] 
            uy:bool[64,256,1024] = eq uw ux
            uz:f16[64,256,1024] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] uy
            va:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] uz ts
            vb:f16[64,256,1600] = add uv va
            vc:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] vb
            vd:f32[64,256] = reduce_sum[axes=(2,)] vc
            ve:f32[64,256] = div vd 1600.0
            vf:f32[64,256,1600] = integer_pow[y=2] vc
            vg:f32[64,256,1600] = integer_pow[y=1] vc
            vh:f32[64,256,1600] = mul 2.0 vg
            vi:f32[64,256] = reduce_sum[axes=(2,)] vf
            vj:f32[64,256] = div vi 1600.0
            vk:f32[64,256] = integer_pow[y=2] ve
            vl:f32[64,256] = integer_pow[y=1] ve
            vm:f32[64,256] = mul 2.0 vl
            vn:f32[64,256] = sub vj vk
            vo:f32[64,256] = max 0.0 vn
            vp:bool[64,256] = eq vn vo
            vq:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            vr:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 0.0
            vs:f32[64,256] = select_n vp vr vq
            vt:bool[64,256] = eq 0.0 vo
            vu:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 2.0
            vv:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            vw:f32[64,256] = select_n vt vv vu
            vx:f32[64,256] = div vs vw
            vy:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] ve
            vz:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] vo
            wa:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] vb
            wb:f32[64,256,1600] = sub wa vy
            wc:f32[64,256,1] = add vz 9.999999747378752e-06
            wd:f32[64,256,1] = rsqrt wc
            we:f32[64,256,1] = div wd wc
            wf:f32[64,256,1] = mul -0.5 we
            wg:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] tt
            wh:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] wg
            wi:f32[64,256,1600] = mul wd wh
            wj:f32[64,256,1600] = mul wb wi
            wk:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] tu
            wl:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] wk
            wm:f32[64,256,1600] = add wj wl
            wn:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] wm
            wo:i32[1024] = iota[dimension=0 dtype=int32 shape=(1024,)] 
            wp:i32[1,1024] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 1024)
            ] wo
            wq:i32[1,1024,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(1, 1024, 1)
            ] wp
            wr:i32[1,1,1024] = broadcast_in_dim[
              broadcast_dimensions=(0, 2)
              shape=(1, 1, 1024)
            ] wp
            ws:bool[1,1024,1024] = ge wq wr
            wt:bool[1,1,1024,1024] = broadcast_in_dim[
              broadcast_dimensions=(0, 2, 3)
              shape=(1, 1, 1024, 1024)
            ] ws
            wu:f16[1600,4800] = transpose[permutation=(1, 0)] tv
            wv:f16[64,256,4800] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] wn wu
            ww:f16[1,1,4800] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 4800)
            ] tw
            wx:f16[64,256,4800] = add wv ww
            wy:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 1600)
              start_indices=(0, 0, 0)
              strides=None
            ] wx
            wz:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 3200)
              start_indices=(0, 0, 1600)
              strides=None
            ] wx
            xa:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 4800)
              start_indices=(0, 0, 3200)
              strides=None
            ] wx
            xb:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] wy
            xc:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] wz
            xd:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] xa
            xe:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
            xf:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
            xg:i32[2] = concatenate[dimension=0] xe xf
            xh:bool[1,1,256,256] = gather[
              dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2, 3), collapsed_slice_dims=(), start_index_map=(2, 3))
              fill_value=None
              indices_are_sorted=True
              mode=GatherScatterMode.PROMISE_IN_BOUNDS
              slice_sizes=(1, 1, 256, 256)
              unique_indices=True
            ] wt xg
            xi:bool[1,256,256] = squeeze[dimensions=(0,)] xh
            xj:bool[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(64, 1, 256, 256)
            ] xi
            xk:i32[64,1,1,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 3)
              shape=(64, 1, 1, 256)
            ] up
            xl:i32[64,1,256] = squeeze[dimensions=(2,)] xk
            xm:i32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 3)
              shape=(64, 1, 256, 256)
            ] xl
            xn:bool[64,1,256,256] = ne xm 0
            xo:bool[64,1,256,256] = and xn xj
            xp:f32[64,1,256,256] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] xo
            xq:bool[64,1,256,256] = gt xp 0.0
            xr:f32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 1, 256, 256)
            ] 0.0
            xs:f16[64,1,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] xr
            xt:f32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 1, 256, 256)
            ] -10000.0
            xu:f16[64,1,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] xt
            xv:f16[64,1,256,256] = select_n xq xu xs
            xw:f32[] = sqrt 64.0
            xx:f16[] = convert_element_type[new_dtype=float16 weak_type=False] xw
            xy:f16[64,256,25,64] = div xb xx
            xz:f16[64,25,256,256] = dot_general[
              dimension_numbers=(((3,), (3,)), ((0, 2), (0, 2)))
              precision=None
              preferred_element_type=None
            ] xy xc
            ya:f16[64,25,256,256] = add xz xv
            yb:f16[64,25,256] = reduce_max[axes=(3,)] ya
            yc:f16[64,25,256,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 1)
            ] yb
            yd:f16[64,25,256,1] = stop_gradient yc
            ye:f16[64,25,256,256] = sub ya yd
            yf:f16[64,25,256,256] = exp ye
            yg:f32[64,25,256,256] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] yf
            yh:f32[64,25,256] = reduce_sum[axes=(3,)] yg
            yi:f32[64,25,256,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 1)
            ] yh
            yj:f16[64,25,256,1] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] yi
            yk:f16[64,25,256,256] = div yf yj
            yl:f16[64,25,256,1] = integer_pow[y=-2] yj
            ym:f16[64,25,64,256] = dot_general[
              dimension_numbers=(((1,), (3,)), ((0, 2), (0, 1)))
              precision=None
              preferred_element_type=None
            ] xd yk
            yn:f16[64,256,25,64] = transpose[permutation=(0, 3, 1, 2)] ym
            yo:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] yn
            yp:f16[1600,1600] = transpose[permutation=(1, 0)] tx
            yq:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] yo yp
            yr:f16[1,1,1600] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 1600)
            ] ty
            ys:f16[64,256,1600] = add yq yr
            yt:f16[64,256,1600] = add ys vb
            yu:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] yt
            yv:f32[64,256] = reduce_sum[axes=(2,)] yu
            yw:f32[64,256] = div yv 1600.0
            yx:f32[64,256,1600] = integer_pow[y=2] yu
            yy:f32[64,256,1600] = integer_pow[y=1] yu
            yz:f32[64,256,1600] = mul 2.0 yy
            za:f32[64,256] = reduce_sum[axes=(2,)] yx
            zb:f32[64,256] = div za 1600.0
            zc:f32[64,256] = integer_pow[y=2] yw
            zd:f32[64,256] = integer_pow[y=1] yw
            ze:f32[64,256] = mul 2.0 zd
            zf:f32[64,256] = sub zb zc
            zg:f32[64,256] = max 0.0 zf
            zh:bool[64,256] = eq zf zg
            zi:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            zj:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 0.0
            zk:f32[64,256] = select_n zh zj zi
            zl:bool[64,256] = eq 0.0 zg
            zm:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 2.0
            zn:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            zo:f32[64,256] = select_n zl zn zm
            zp:f32[64,256] = div zk zo
            zq:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] yw
            zr:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] zg
            zs:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] yt
            zt:f32[64,256,1600] = sub zs zq
            zu:f32[64,256,1] = add zr 9.999999747378752e-06
            zv:f32[64,256,1] = rsqrt zu
            zw:f32[64,256,1] = div zv zu
            zx:f32[64,256,1] = mul -0.5 zw
            zy:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] tz
            zz:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] zy
            baa:f32[64,256,1600] = mul zv zz
            bab:f32[64,256,1600] = mul zt baa
            bac:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] ua
            bad:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bac
            bae:f32[64,256,1600] = add bab bad
            baf:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bae
            bag:f16[1600,6400] = transpose[permutation=(1, 0)] ub
            bah:f16[64,256,6400] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] baf bag
            bai:f16[1,1,6400] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 6400)
            ] uc
            baj:f16[64,256,6400] = add bah bai
            bak:f16[64,256,6400] = integer_pow[y=3] baj
            bal:f16[64,256,6400] = integer_pow[y=2] baj
            bam:f16[64,256,6400] = mul 3.0 bal
            ban:f16[64,256,6400] = mul 0.044708251953125 bak
            bao:f16[64,256,6400] = add baj ban
            bap:f16[64,256,6400] = mul 0.7978515625 bao
            baq:f16[64,256,6400] = tanh bap
            bar:f16[64,256,6400] = sub 1.0 baq
            bas:f16[64,256,6400] = add 1.0 baq
            bat:f16[64,256,6400] = mul 0.5 bas
            bau:f16[64,256,6400] = mul baj bat
            bav:f16[6400,1600] = transpose[permutation=(1, 0)] ud
            baw:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] bau bav
            bax:f16[1,1,1600] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 1600)
            ] ue
            bay:f16[64,256,1600] = add baw bax
            baz:f16[64,256,1600] = add yt bay
            bba:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] baz
            bbb:f32[64,256] = reduce_sum[axes=(2,)] bba
            bbc:f32[64,256] = div bbb 1600.0
            bbd:f32[64,256,1600] = integer_pow[y=2] bba
            bbe:f32[64,256,1600] = integer_pow[y=1] bba
            bbf:f32[64,256,1600] = mul 2.0 bbe
            bbg:f32[64,256] = reduce_sum[axes=(2,)] bbd
            bbh:f32[64,256] = div bbg 1600.0
            bbi:f32[64,256] = integer_pow[y=2] bbc
            bbj:f32[64,256] = integer_pow[y=1] bbc
            bbk:f32[64,256] = mul 2.0 bbj
            bbl:f32[64,256] = sub bbh bbi
            bbm:f32[64,256] = max 0.0 bbl
            bbn:bool[64,256] = eq bbl bbm
            bbo:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            bbp:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 0.0
            bbq:f32[64,256] = select_n bbn bbp bbo
            bbr:bool[64,256] = eq 0.0 bbm
            bbs:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 2.0
            bbt:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            bbu:f32[64,256] = select_n bbr bbt bbs
            bbv:f32[64,256] = div bbq bbu
            bbw:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] bbc
            bbx:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] bbm
            bby:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] baz
            bbz:f32[64,256,1600] = sub bby bbw
            bca:f32[64,256,1] = add bbx 9.999999747378752e-06
            bcb:f32[64,256,1] = rsqrt bca
            bcc:f32[64,256,1] = div bcb bca
            bcd:f32[64,256,1] = mul -0.5 bcc
            bce:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] uf
            bcf:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bce
            bcg:f32[64,256,1600] = mul bcb bcf
            bch:f32[64,256,1600] = mul bbz bcg
            bci:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] ug
            bcj:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bci
            bck:f32[64,256,1600] = add bch bcj
            bcl:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bck
            bcm:i32[1024] = iota[dimension=0 dtype=int32 shape=(1024,)] 
            bcn:i32[1,1024] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 1024)
            ] bcm
            bco:i32[1,1024,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(1, 1024, 1)
            ] bcn
            bcp:i32[1,1,1024] = broadcast_in_dim[
              broadcast_dimensions=(0, 2)
              shape=(1, 1, 1024)
            ] bcn
            bcq:bool[1,1024,1024] = ge bco bcp
            bcr:bool[1,1,1024,1024] = broadcast_in_dim[
              broadcast_dimensions=(0, 2, 3)
              shape=(1, 1, 1024, 1024)
            ] bcq
            bcs:f16[1600,4800] = transpose[permutation=(1, 0)] uh
            bct:f16[64,256,4800] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] bcl bcs
            bcu:f16[1,1,4800] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 4800)
            ] ui
            bcv:f16[64,256,4800] = add bct bcu
            bcw:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 1600)
              start_indices=(0, 0, 0)
              strides=None
            ] bcv
            bcx:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 3200)
              start_indices=(0, 0, 1600)
              strides=None
            ] bcv
            bcy:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 4800)
              start_indices=(0, 0, 3200)
              strides=None
            ] bcv
            bcz:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] bcw
            bda:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] bcx
            bdb:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] bcy
            bdc:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
            bdd:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
            bde:i32[2] = concatenate[dimension=0] bdc bdd
            bdf:bool[1,1,256,256] = gather[
              dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2, 3), collapsed_slice_dims=(), start_index_map=(2, 3))
              fill_value=None
              indices_are_sorted=True
              mode=GatherScatterMode.PROMISE_IN_BOUNDS
              slice_sizes=(1, 1, 256, 256)
              unique_indices=True
            ] bcr bde
            bdg:bool[1,256,256] = squeeze[dimensions=(0,)] bdf
            bdh:bool[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(64, 1, 256, 256)
            ] bdg
            bdi:i32[64,1,1,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 3)
              shape=(64, 1, 1, 256)
            ] up
            bdj:i32[64,1,256] = squeeze[dimensions=(2,)] bdi
            bdk:i32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 3)
              shape=(64, 1, 256, 256)
            ] bdj
            bdl:bool[64,1,256,256] = ne bdk 0
            bdm:bool[64,1,256,256] = and bdl bdh
            bdn:f32[64,1,256,256] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bdm
            bdo:bool[64,1,256,256] = gt bdn 0.0
            bdp:f32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 1, 256, 256)
            ] 0.0
            bdq:f16[64,1,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bdp
            bdr:f32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 1, 256, 256)
            ] -10000.0
            bds:f16[64,1,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bdr
            bdt:f16[64,1,256,256] = select_n bdo bds bdq
            bdu:f32[] = sqrt 64.0
            bdv:f16[] = convert_element_type[new_dtype=float16 weak_type=False] bdu
            bdw:f16[64,256,25,64] = div bcz bdv
            bdx:f16[64,25,256,256] = dot_general[
              dimension_numbers=(((3,), (3,)), ((0, 2), (0, 2)))
              precision=None
              preferred_element_type=None
            ] bdw bda
            bdy:f16[64,25,256,256] = add bdx bdt
            bdz:f16[64,25,256] = reduce_max[axes=(3,)] bdy
            bea:f16[64,25,256,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 1)
            ] bdz
            beb:f16[64,25,256,1] = stop_gradient bea
            bec:f16[64,25,256,256] = sub bdy beb
            bed:f16[64,25,256,256] = exp bec
            bee:f32[64,25,256,256] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bed
            bef:f32[64,25,256] = reduce_sum[axes=(3,)] bee
            beg:f32[64,25,256,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 1)
            ] bef
            beh:f16[64,25,256,1] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] beg
            bei:f16[64,25,256,256] = div bed beh
            bej:f16[64,25,256,1] = integer_pow[y=-2] beh
            bek:f16[64,25,64,256] = dot_general[
              dimension_numbers=(((1,), (3,)), ((0, 2), (0, 1)))
              precision=None
              preferred_element_type=None
            ] bdb bei
            bel:f16[64,256,25,64] = transpose[permutation=(0, 3, 1, 2)] bek
            bem:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] bel
            ben:f16[1600,1600] = transpose[permutation=(1, 0)] uj
            beo:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] bem ben
            bep:f16[1,1,1600] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 1600)
            ] uk
            beq:f16[64,256,1600] = add beo bep
            ber:f16[64,256,1600] = add beq baz
          in (ber, up, bem, ben, bdb, bej, bed, beh, bdw, bda, bdv, bei, bcl, bcs,
            bbz, bcb, bcf, bcd, bbv, bbk, bbf, bcg, bau, bav, baj, bar, baq, bam,
            bat, baf, bag, zt, zv, zz, zx, zp, ze, yz, baa, yo, yp, xd, yl, yf, yj,
            xy, xc, xx, yk, wn, wu, wb, wd, wh, wf, vx, vm, vh, wi, uz, uu) }
        name=00
      ] mz na nb nc nd ne nf ng nh ni nj nk nl nm nn no np nq nr ns nt nu nv
      bes:f16[64,256,1600] bet:f16[64,256,1600] beu:f16[1600,1600] bev:f16[64,256,25,64]
        bew:f16[64,25,256,1] bex:f16[64,25,256,256] bey:f16[64,25,256,1] bez:f16[64,256,25,64]
        bfa:f16[64,256,25,64] bfb:f16[] bfc:f16[64,25,256,256] bfd:f16[64,256,1600]
        bfe:f16[1600,4800] bff:f32[64,256,1600] bfg:f32[64,256,1] bfh:f32[1,1,1600]
        bfi:f32[64,256,1] bfj:f32[64,256] bfk:f32[64,256] bfl:f32[64,256,1600] bfm:f32[64,256,1600]
        bfn:f16[64,256,6400] bfo:f16[6400,1600] bfp:f16[64,256,6400] bfq:f16[64,256,6400]
        bfr:f16[64,256,6400] bfs:f16[64,256,6400] bft:f16[64,256,6400] bfu:f16[64,256,1600]
        bfv:f16[1600,6400] bfw:f32[64,256,1600] bfx:f32[64,256,1] bfy:f32[1,1,1600]
        bfz:f32[64,256,1] bga:f32[64,256] bgb:f32[64,256] bgc:f32[64,256,1600] bgd:f32[64,256,1600]
        bge:f16[64,256,1600] bgf:f16[1600,1600] bgg:f16[64,256,25,64] bgh:f16[64,25,256,1]
        bgi:f16[64,25,256,256] bgj:f16[64,25,256,1] bgk:f16[64,256,25,64] bgl:f16[64,256,25,64]
        bgm:f16[] bgn:f16[64,25,256,256] bgo:f16[64,256,1600] bgp:f16[1600,4800]
        bgq:f32[64,256,1600] bgr:f32[64,256,1] bgs:f32[1,1,1600] bgt:f32[64,256,1]
        bgu:f32[64,256] bgv:f32[64,256] bgw:f32[64,256,1600] bgx:f32[64,256,1600]
        bgy:f16[64,256,6400] bgz:f16[6400,1600] bha:f16[64,256,6400] bhb:f16[64,256,6400]
        bhc:f16[64,256,6400] bhd:f16[64,256,6400] bhe:f16[64,256,6400] bhf:f16[64,256,1600]
        bhg:f16[1600,6400] bhh:f32[64,256,1600] bhi:f32[64,256,1] bhj:f32[1,1,1600]
        bhk:f32[64,256,1] bhl:f32[64,256] bhm:f32[64,256] bhn:f32[64,256,1600] bho:f32[64,256,1600]
        bhp:f16[64,256,1600] bhq:f16[1600,1600] bhr:f16[64,256,25,64] bhs:f16[64,25,256,1]
        bht:f16[64,25,256,256] bhu:f16[64,25,256,1] bhv:f16[64,256,25,64] bhw:f16[64,256,25,64]
        bhx:f16[] bhy:f16[64,25,256,256] bhz:f16[64,256,1600] bia:f16[1600,4800]
        bib:f32[64,256,1600] bic:f32[64,256,1] bid:f32[1,1,1600] bie:f32[64,256,1]
        bif:f32[64,256] big:f32[64,256] bih:f32[64,256,1600] bii:f32[64,256,1600]
        bij:f16[64,256,6400] bik:f16[6400,1600] bil:f16[64,256,6400] bim:f16[64,256,6400]
        bin:f16[64,256,6400] bio:f16[64,256,6400] bip:f16[64,256,6400] biq:f16[64,256,1600]
        bir:f16[1600,6400] bis:f32[64,256,1600] bit:f32[64,256,1] biu:f32[1,1,1600]
        biv:f32[64,256,1] biw:f32[64,256] bix:f32[64,256] biy:f32[64,256,1600] biz:f32[64,256,1600]
        bja:f16[64,256,1600] bjb:f16[1600,1600] bjc:f16[64,256,25,64] bjd:f16[64,25,256,1]
        bje:f16[64,25,256,256] bjf:f16[64,25,256,1] bjg:f16[64,256,25,64] bjh:f16[64,256,25,64]
        bji:f16[] bjj:f16[64,25,256,256] bjk:f16[64,256,1600] bjl:f16[1600,4800]
        bjm:f32[64,256,1600] bjn:f32[64,256,1] bjo:f32[1,1,1600] bjp:f32[64,256,1]
        bjq:f32[64,256] bjr:f32[64,256] bjs:f32[64,256,1600] bjt:f32[64,256,1600]
        bju:f16[64,256,6400] bjv:f16[6400,1600] bjw:f16[64,256,6400] bjx:f16[64,256,6400]
        bjy:f16[64,256,6400] bjz:f16[64,256,6400] bka:f16[64,256,6400] bkb:f16[64,256,1600]
        bkc:f16[1600,6400] bkd:f32[64,256,1600] bke:f32[64,256,1] bkf:f32[1,1,1600]
        bkg:f32[64,256,1] bkh:f32[64,256] bki:f32[64,256] bkj:f32[64,256,1600] bkk:f32[64,256,1600] = named_call[
        call_jaxpr={ lambda ; bkl:f16[64,256,1600] bkm:f16[1600] bkn:f16[1600] bko:f16[6400,1600]
            bkp:f16[6400] bkq:f16[1600,6400] bkr:f16[1600] bks:f16[1600] bkt:f16[1600]
            bku:f16[4800,1600] bkv:f16[4800] bkw:i32[64,256] bkx:f16[1600,1600] bky:f16[1600]
            bkz:f16[1600] bla:f16[1600] blb:f16[6400,1600] blc:f16[6400] bld:f16[1600,6400]
            ble:f16[1600] blf:f16[1600] blg:f16[1600] blh:f16[4800,1600] bli:f16[4800]
            blj:f16[1600,1600] blk:f16[1600] bll:f16[1600] blm:f16[1600] bln:f16[6400,1600]
            blo:f16[6400] blp:f16[1600,6400] blq:f16[1600] blr:f16[1600] bls:f16[1600]
            blt:f16[4800,1600] blu:f16[4800] blv:f16[1600,1600] blw:f16[1600] blx:f16[1600]
            bly:f16[1600] blz:f16[6400,1600] bma:f16[6400] bmb:f16[1600,6400] bmc:f16[1600]
            bmd:f16[1600] bme:f16[1600] bmf:f16[4800,1600] bmg:f16[4800] bmh:f16[1600,1600]
            bmi:f16[1600]. let
            bmj:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bkl
            bmk:f32[64,256] = reduce_sum[axes=(2,)] bmj
            bml:f32[64,256] = div bmk 1600.0
            bmm:f32[64,256,1600] = integer_pow[y=2] bmj
            bmn:f32[64,256,1600] = integer_pow[y=1] bmj
            bmo:f32[64,256,1600] = mul 2.0 bmn
            bmp:f32[64,256] = reduce_sum[axes=(2,)] bmm
            bmq:f32[64,256] = div bmp 1600.0
            bmr:f32[64,256] = integer_pow[y=2] bml
            bms:f32[64,256] = integer_pow[y=1] bml
            bmt:f32[64,256] = mul 2.0 bms
            bmu:f32[64,256] = sub bmq bmr
            bmv:f32[64,256] = max 0.0 bmu
            bmw:bool[64,256] = eq bmu bmv
            bmx:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            bmy:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 0.0
            bmz:f32[64,256] = select_n bmw bmy bmx
            bna:bool[64,256] = eq 0.0 bmv
            bnb:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 2.0
            bnc:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            bnd:f32[64,256] = select_n bna bnc bnb
            bne:f32[64,256] = div bmz bnd
            bnf:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] bml
            bng:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] bmv
            bnh:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bkl
            bni:f32[64,256,1600] = sub bnh bnf
            bnj:f32[64,256,1] = add bng 9.999999747378752e-06
            bnk:f32[64,256,1] = rsqrt bnj
            bnl:f32[64,256,1] = div bnk bnj
            bnm:f32[64,256,1] = mul -0.5 bnl
            bnn:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] bkm
            bno:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bnn
            bnp:f32[64,256,1600] = mul bnk bno
            bnq:f32[64,256,1600] = mul bni bnp
            bnr:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] bkn
            bns:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bnr
            bnt:f32[64,256,1600] = add bnq bns
            bnu:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bnt
            bnv:f16[1600,6400] = transpose[permutation=(1, 0)] bko
            bnw:f16[64,256,6400] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] bnu bnv
            bnx:f16[1,1,6400] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 6400)
            ] bkp
            bny:f16[64,256,6400] = add bnw bnx
            bnz:f16[64,256,6400] = integer_pow[y=3] bny
            boa:f16[64,256,6400] = integer_pow[y=2] bny
            bob:f16[64,256,6400] = mul 3.0 boa
            boc:f16[64,256,6400] = mul 0.044708251953125 bnz
            bod:f16[64,256,6400] = add bny boc
            boe:f16[64,256,6400] = mul 0.7978515625 bod
            bof:f16[64,256,6400] = tanh boe
            bog:f16[64,256,6400] = sub 1.0 bof
            boh:f16[64,256,6400] = add 1.0 bof
            boi:f16[64,256,6400] = mul 0.5 boh
            boj:f16[64,256,6400] = mul bny boi
            bok:f16[6400,1600] = transpose[permutation=(1, 0)] bkq
            bol:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] boj bok
            bom:f16[1,1,1600] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 1600)
            ] bkr
            bon:f16[64,256,1600] = add bol bom
            boo:f16[64,256,1600] = add bkl bon
            bop:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] boo
            boq:f32[64,256] = reduce_sum[axes=(2,)] bop
            bor:f32[64,256] = div boq 1600.0
            bos:f32[64,256,1600] = integer_pow[y=2] bop
            bot:f32[64,256,1600] = integer_pow[y=1] bop
            bou:f32[64,256,1600] = mul 2.0 bot
            bov:f32[64,256] = reduce_sum[axes=(2,)] bos
            bow:f32[64,256] = div bov 1600.0
            box:f32[64,256] = integer_pow[y=2] bor
            boy:f32[64,256] = integer_pow[y=1] bor
            boz:f32[64,256] = mul 2.0 boy
            bpa:f32[64,256] = sub bow box
            bpb:f32[64,256] = max 0.0 bpa
            bpc:bool[64,256] = eq bpa bpb
            bpd:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            bpe:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 0.0
            bpf:f32[64,256] = select_n bpc bpe bpd
            bpg:bool[64,256] = eq 0.0 bpb
            bph:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 2.0
            bpi:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            bpj:f32[64,256] = select_n bpg bpi bph
            bpk:f32[64,256] = div bpf bpj
            bpl:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] bor
            bpm:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] bpb
            bpn:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] boo
            bpo:f32[64,256,1600] = sub bpn bpl
            bpp:f32[64,256,1] = add bpm 9.999999747378752e-06
            bpq:f32[64,256,1] = rsqrt bpp
            bpr:f32[64,256,1] = div bpq bpp
            bps:f32[64,256,1] = mul -0.5 bpr
            bpt:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] bks
            bpu:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bpt
            bpv:f32[64,256,1600] = mul bpq bpu
            bpw:f32[64,256,1600] = mul bpo bpv
            bpx:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] bkt
            bpy:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bpx
            bpz:f32[64,256,1600] = add bpw bpy
            bqa:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bpz
            bqb:i32[1024] = iota[dimension=0 dtype=int32 shape=(1024,)] 
            bqc:i32[1,1024] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 1024)
            ] bqb
            bqd:i32[1,1024,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(1, 1024, 1)
            ] bqc
            bqe:i32[1,1,1024] = broadcast_in_dim[
              broadcast_dimensions=(0, 2)
              shape=(1, 1, 1024)
            ] bqc
            bqf:bool[1,1024,1024] = ge bqd bqe
            bqg:bool[1,1,1024,1024] = broadcast_in_dim[
              broadcast_dimensions=(0, 2, 3)
              shape=(1, 1, 1024, 1024)
            ] bqf
            bqh:f16[1600,4800] = transpose[permutation=(1, 0)] bku
            bqi:f16[64,256,4800] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] bqa bqh
            bqj:f16[1,1,4800] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 4800)
            ] bkv
            bqk:f16[64,256,4800] = add bqi bqj
            bql:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 1600)
              start_indices=(0, 0, 0)
              strides=None
            ] bqk
            bqm:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 3200)
              start_indices=(0, 0, 1600)
              strides=None
            ] bqk
            bqn:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 4800)
              start_indices=(0, 0, 3200)
              strides=None
            ] bqk
            bqo:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] bql
            bqp:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] bqm
            bqq:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] bqn
            bqr:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
            bqs:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
            bqt:i32[2] = concatenate[dimension=0] bqr bqs
            bqu:bool[1,1,256,256] = gather[
              dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2, 3), collapsed_slice_dims=(), start_index_map=(2, 3))
              fill_value=None
              indices_are_sorted=True
              mode=GatherScatterMode.PROMISE_IN_BOUNDS
              slice_sizes=(1, 1, 256, 256)
              unique_indices=True
            ] bqg bqt
            bqv:bool[1,256,256] = squeeze[dimensions=(0,)] bqu
            bqw:bool[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(64, 1, 256, 256)
            ] bqv
            bqx:i32[64,1,1,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 3)
              shape=(64, 1, 1, 256)
            ] bkw
            bqy:i32[64,1,256] = squeeze[dimensions=(2,)] bqx
            bqz:i32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 3)
              shape=(64, 1, 256, 256)
            ] bqy
            bra:bool[64,1,256,256] = ne bqz 0
            brb:bool[64,1,256,256] = and bra bqw
            brc:f32[64,1,256,256] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] brb
            brd:bool[64,1,256,256] = gt brc 0.0
            bre:f32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 1, 256, 256)
            ] 0.0
            brf:f16[64,1,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bre
            brg:f32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 1, 256, 256)
            ] -10000.0
            brh:f16[64,1,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] brg
            bri:f16[64,1,256,256] = select_n brd brh brf
            brj:f32[] = sqrt 64.0
            brk:f16[] = convert_element_type[new_dtype=float16 weak_type=False] brj
            brl:f16[64,256,25,64] = div bqo brk
            brm:f16[64,25,256,256] = dot_general[
              dimension_numbers=(((3,), (3,)), ((0, 2), (0, 2)))
              precision=None
              preferred_element_type=None
            ] brl bqp
            brn:f16[64,25,256,256] = add brm bri
            bro:f16[64,25,256] = reduce_max[axes=(3,)] brn
            brp:f16[64,25,256,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 1)
            ] bro
            brq:f16[64,25,256,1] = stop_gradient brp
            brr:f16[64,25,256,256] = sub brn brq
            brs:f16[64,25,256,256] = exp brr
            brt:f32[64,25,256,256] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] brs
            bru:f32[64,25,256] = reduce_sum[axes=(3,)] brt
            brv:f32[64,25,256,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 1)
            ] bru
            brw:f16[64,25,256,1] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] brv
            brx:f16[64,25,256,256] = div brs brw
            bry:f16[64,25,256,1] = integer_pow[y=-2] brw
            brz:f16[64,25,64,256] = dot_general[
              dimension_numbers=(((1,), (3,)), ((0, 2), (0, 1)))
              precision=None
              preferred_element_type=None
            ] bqq brx
            bsa:f16[64,256,25,64] = transpose[permutation=(0, 3, 1, 2)] brz
            bsb:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] bsa
            bsc:f16[1600,1600] = transpose[permutation=(1, 0)] bkx
            bsd:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] bsb bsc
            bse:f16[1,1,1600] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 1600)
            ] bky
            bsf:f16[64,256,1600] = add bsd bse
            bsg:f16[64,256,1600] = add bsf boo
            bsh:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bsg
            bsi:f32[64,256] = reduce_sum[axes=(2,)] bsh
            bsj:f32[64,256] = div bsi 1600.0
            bsk:f32[64,256,1600] = integer_pow[y=2] bsh
            bsl:f32[64,256,1600] = integer_pow[y=1] bsh
            bsm:f32[64,256,1600] = mul 2.0 bsl
            bsn:f32[64,256] = reduce_sum[axes=(2,)] bsk
            bso:f32[64,256] = div bsn 1600.0
            bsp:f32[64,256] = integer_pow[y=2] bsj
            bsq:f32[64,256] = integer_pow[y=1] bsj
            bsr:f32[64,256] = mul 2.0 bsq
            bss:f32[64,256] = sub bso bsp
            bst:f32[64,256] = max 0.0 bss
            bsu:bool[64,256] = eq bss bst
            bsv:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            bsw:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 0.0
            bsx:f32[64,256] = select_n bsu bsw bsv
            bsy:bool[64,256] = eq 0.0 bst
            bsz:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 2.0
            bta:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            btb:f32[64,256] = select_n bsy bta bsz
            btc:f32[64,256] = div bsx btb
            btd:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] bsj
            bte:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] bst
            btf:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bsg
            btg:f32[64,256,1600] = sub btf btd
            bth:f32[64,256,1] = add bte 9.999999747378752e-06
            bti:f32[64,256,1] = rsqrt bth
            btj:f32[64,256,1] = div bti bth
            btk:f32[64,256,1] = mul -0.5 btj
            btl:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] bkz
            btm:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] btl
            btn:f32[64,256,1600] = mul bti btm
            bto:f32[64,256,1600] = mul btg btn
            btp:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] bla
            btq:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] btp
            btr:f32[64,256,1600] = add bto btq
            bts:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] btr
            btt:f16[1600,6400] = transpose[permutation=(1, 0)] blb
            btu:f16[64,256,6400] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] bts btt
            btv:f16[1,1,6400] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 6400)
            ] blc
            btw:f16[64,256,6400] = add btu btv
            btx:f16[64,256,6400] = integer_pow[y=3] btw
            bty:f16[64,256,6400] = integer_pow[y=2] btw
            btz:f16[64,256,6400] = mul 3.0 bty
            bua:f16[64,256,6400] = mul 0.044708251953125 btx
            bub:f16[64,256,6400] = add btw bua
            buc:f16[64,256,6400] = mul 0.7978515625 bub
            bud:f16[64,256,6400] = tanh buc
            bue:f16[64,256,6400] = sub 1.0 bud
            buf:f16[64,256,6400] = add 1.0 bud
            bug:f16[64,256,6400] = mul 0.5 buf
            buh:f16[64,256,6400] = mul btw bug
            bui:f16[6400,1600] = transpose[permutation=(1, 0)] bld
            buj:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] buh bui
            buk:f16[1,1,1600] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 1600)
            ] ble
            bul:f16[64,256,1600] = add buj buk
            bum:f16[64,256,1600] = add bsg bul
            bun:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bum
            buo:f32[64,256] = reduce_sum[axes=(2,)] bun
            bup:f32[64,256] = div buo 1600.0
            buq:f32[64,256,1600] = integer_pow[y=2] bun
            bur:f32[64,256,1600] = integer_pow[y=1] bun
            bus:f32[64,256,1600] = mul 2.0 bur
            but:f32[64,256] = reduce_sum[axes=(2,)] buq
            buu:f32[64,256] = div but 1600.0
            buv:f32[64,256] = integer_pow[y=2] bup
            buw:f32[64,256] = integer_pow[y=1] bup
            bux:f32[64,256] = mul 2.0 buw
            buy:f32[64,256] = sub buu buv
            buz:f32[64,256] = max 0.0 buy
            bva:bool[64,256] = eq buy buz
            bvb:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            bvc:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 0.0
            bvd:f32[64,256] = select_n bva bvc bvb
            bve:bool[64,256] = eq 0.0 buz
            bvf:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 2.0
            bvg:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            bvh:f32[64,256] = select_n bve bvg bvf
            bvi:f32[64,256] = div bvd bvh
            bvj:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] bup
            bvk:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] buz
            bvl:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bum
            bvm:f32[64,256,1600] = sub bvl bvj
            bvn:f32[64,256,1] = add bvk 9.999999747378752e-06
            bvo:f32[64,256,1] = rsqrt bvn
            bvp:f32[64,256,1] = div bvo bvn
            bvq:f32[64,256,1] = mul -0.5 bvp
            bvr:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] blf
            bvs:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bvr
            bvt:f32[64,256,1600] = mul bvo bvs
            bvu:f32[64,256,1600] = mul bvm bvt
            bvv:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] blg
            bvw:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bvv
            bvx:f32[64,256,1600] = add bvu bvw
            bvy:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bvx
            bvz:i32[1024] = iota[dimension=0 dtype=int32 shape=(1024,)] 
            bwa:i32[1,1024] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 1024)
            ] bvz
            bwb:i32[1,1024,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(1, 1024, 1)
            ] bwa
            bwc:i32[1,1,1024] = broadcast_in_dim[
              broadcast_dimensions=(0, 2)
              shape=(1, 1, 1024)
            ] bwa
            bwd:bool[1,1024,1024] = ge bwb bwc
            bwe:bool[1,1,1024,1024] = broadcast_in_dim[
              broadcast_dimensions=(0, 2, 3)
              shape=(1, 1, 1024, 1024)
            ] bwd
            bwf:f16[1600,4800] = transpose[permutation=(1, 0)] blh
            bwg:f16[64,256,4800] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] bvy bwf
            bwh:f16[1,1,4800] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 4800)
            ] bli
            bwi:f16[64,256,4800] = add bwg bwh
            bwj:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 1600)
              start_indices=(0, 0, 0)
              strides=None
            ] bwi
            bwk:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 3200)
              start_indices=(0, 0, 1600)
              strides=None
            ] bwi
            bwl:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 4800)
              start_indices=(0, 0, 3200)
              strides=None
            ] bwi
            bwm:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] bwj
            bwn:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] bwk
            bwo:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] bwl
            bwp:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
            bwq:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
            bwr:i32[2] = concatenate[dimension=0] bwp bwq
            bws:bool[1,1,256,256] = gather[
              dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2, 3), collapsed_slice_dims=(), start_index_map=(2, 3))
              fill_value=None
              indices_are_sorted=True
              mode=GatherScatterMode.PROMISE_IN_BOUNDS
              slice_sizes=(1, 1, 256, 256)
              unique_indices=True
            ] bwe bwr
            bwt:bool[1,256,256] = squeeze[dimensions=(0,)] bws
            bwu:bool[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(64, 1, 256, 256)
            ] bwt
            bwv:i32[64,1,1,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 3)
              shape=(64, 1, 1, 256)
            ] bkw
            bww:i32[64,1,256] = squeeze[dimensions=(2,)] bwv
            bwx:i32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 3)
              shape=(64, 1, 256, 256)
            ] bww
            bwy:bool[64,1,256,256] = ne bwx 0
            bwz:bool[64,1,256,256] = and bwy bwu
            bxa:f32[64,1,256,256] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bwz
            bxb:bool[64,1,256,256] = gt bxa 0.0
            bxc:f32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 1, 256, 256)
            ] 0.0
            bxd:f16[64,1,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bxc
            bxe:f32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 1, 256, 256)
            ] -10000.0
            bxf:f16[64,1,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bxe
            bxg:f16[64,1,256,256] = select_n bxb bxf bxd
            bxh:f32[] = sqrt 64.0
            bxi:f16[] = convert_element_type[new_dtype=float16 weak_type=False] bxh
            bxj:f16[64,256,25,64] = div bwm bxi
            bxk:f16[64,25,256,256] = dot_general[
              dimension_numbers=(((3,), (3,)), ((0, 2), (0, 2)))
              precision=None
              preferred_element_type=None
            ] bxj bwn
            bxl:f16[64,25,256,256] = add bxk bxg
            bxm:f16[64,25,256] = reduce_max[axes=(3,)] bxl
            bxn:f16[64,25,256,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 1)
            ] bxm
            bxo:f16[64,25,256,1] = stop_gradient bxn
            bxp:f16[64,25,256,256] = sub bxl bxo
            bxq:f16[64,25,256,256] = exp bxp
            bxr:f32[64,25,256,256] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bxq
            bxs:f32[64,25,256] = reduce_sum[axes=(3,)] bxr
            bxt:f32[64,25,256,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 1)
            ] bxs
            bxu:f16[64,25,256,1] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bxt
            bxv:f16[64,25,256,256] = div bxq bxu
            bxw:f16[64,25,256,1] = integer_pow[y=-2] bxu
            bxx:f16[64,25,64,256] = dot_general[
              dimension_numbers=(((1,), (3,)), ((0, 2), (0, 1)))
              precision=None
              preferred_element_type=None
            ] bwo bxv
            bxy:f16[64,256,25,64] = transpose[permutation=(0, 3, 1, 2)] bxx
            bxz:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] bxy
            bya:f16[1600,1600] = transpose[permutation=(1, 0)] blj
            byb:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] bxz bya
            byc:f16[1,1,1600] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 1600)
            ] blk
            byd:f16[64,256,1600] = add byb byc
            bye:f16[64,256,1600] = add byd bum
            byf:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bye
            byg:f32[64,256] = reduce_sum[axes=(2,)] byf
            byh:f32[64,256] = div byg 1600.0
            byi:f32[64,256,1600] = integer_pow[y=2] byf
            byj:f32[64,256,1600] = integer_pow[y=1] byf
            byk:f32[64,256,1600] = mul 2.0 byj
            byl:f32[64,256] = reduce_sum[axes=(2,)] byi
            bym:f32[64,256] = div byl 1600.0
            byn:f32[64,256] = integer_pow[y=2] byh
            byo:f32[64,256] = integer_pow[y=1] byh
            byp:f32[64,256] = mul 2.0 byo
            byq:f32[64,256] = sub bym byn
            byr:f32[64,256] = max 0.0 byq
            bys:bool[64,256] = eq byq byr
            byt:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            byu:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 0.0
            byv:f32[64,256] = select_n bys byu byt
            byw:bool[64,256] = eq 0.0 byr
            byx:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 2.0
            byy:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            byz:f32[64,256] = select_n byw byy byx
            bza:f32[64,256] = div byv byz
            bzb:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] byh
            bzc:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] byr
            bzd:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bye
            bze:f32[64,256,1600] = sub bzd bzb
            bzf:f32[64,256,1] = add bzc 9.999999747378752e-06
            bzg:f32[64,256,1] = rsqrt bzf
            bzh:f32[64,256,1] = div bzg bzf
            bzi:f32[64,256,1] = mul -0.5 bzh
            bzj:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] bll
            bzk:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bzj
            bzl:f32[64,256,1600] = mul bzg bzk
            bzm:f32[64,256,1600] = mul bze bzl
            bzn:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] blm
            bzo:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bzn
            bzp:f32[64,256,1600] = add bzm bzo
            bzq:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bzp
            bzr:f16[1600,6400] = transpose[permutation=(1, 0)] bln
            bzs:f16[64,256,6400] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] bzq bzr
            bzt:f16[1,1,6400] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 6400)
            ] blo
            bzu:f16[64,256,6400] = add bzs bzt
            bzv:f16[64,256,6400] = integer_pow[y=3] bzu
            bzw:f16[64,256,6400] = integer_pow[y=2] bzu
            bzx:f16[64,256,6400] = mul 3.0 bzw
            bzy:f16[64,256,6400] = mul 0.044708251953125 bzv
            bzz:f16[64,256,6400] = add bzu bzy
            caa:f16[64,256,6400] = mul 0.7978515625 bzz
            cab:f16[64,256,6400] = tanh caa
            cac:f16[64,256,6400] = sub 1.0 cab
            cad:f16[64,256,6400] = add 1.0 cab
            cae:f16[64,256,6400] = mul 0.5 cad
            caf:f16[64,256,6400] = mul bzu cae
            cag:f16[6400,1600] = transpose[permutation=(1, 0)] blp
            cah:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] caf cag
            cai:f16[1,1,1600] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 1600)
            ] blq
            caj:f16[64,256,1600] = add cah cai
            cak:f16[64,256,1600] = add bye caj
            cal:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] cak
            cam:f32[64,256] = reduce_sum[axes=(2,)] cal
            can:f32[64,256] = div cam 1600.0
            cao:f32[64,256,1600] = integer_pow[y=2] cal
            cap:f32[64,256,1600] = integer_pow[y=1] cal
            caq:f32[64,256,1600] = mul 2.0 cap
            car:f32[64,256] = reduce_sum[axes=(2,)] cao
            cas:f32[64,256] = div car 1600.0
            cat:f32[64,256] = integer_pow[y=2] can
            cau:f32[64,256] = integer_pow[y=1] can
            cav:f32[64,256] = mul 2.0 cau
            caw:f32[64,256] = sub cas cat
            cax:f32[64,256] = max 0.0 caw
            cay:bool[64,256] = eq caw cax
            caz:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            cba:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 0.0
            cbb:f32[64,256] = select_n cay cba caz
            cbc:bool[64,256] = eq 0.0 cax
            cbd:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 2.0
            cbe:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            cbf:f32[64,256] = select_n cbc cbe cbd
            cbg:f32[64,256] = div cbb cbf
            cbh:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] can
            cbi:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] cax
            cbj:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] cak
            cbk:f32[64,256,1600] = sub cbj cbh
            cbl:f32[64,256,1] = add cbi 9.999999747378752e-06
            cbm:f32[64,256,1] = rsqrt cbl
            cbn:f32[64,256,1] = div cbm cbl
            cbo:f32[64,256,1] = mul -0.5 cbn
            cbp:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] blr
            cbq:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] cbp
            cbr:f32[64,256,1600] = mul cbm cbq
            cbs:f32[64,256,1600] = mul cbk cbr
            cbt:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] bls
            cbu:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] cbt
            cbv:f32[64,256,1600] = add cbs cbu
            cbw:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] cbv
            cbx:i32[1024] = iota[dimension=0 dtype=int32 shape=(1024,)] 
            cby:i32[1,1024] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 1024)
            ] cbx
            cbz:i32[1,1024,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(1, 1024, 1)
            ] cby
            cca:i32[1,1,1024] = broadcast_in_dim[
              broadcast_dimensions=(0, 2)
              shape=(1, 1, 1024)
            ] cby
            ccb:bool[1,1024,1024] = ge cbz cca
            ccc:bool[1,1,1024,1024] = broadcast_in_dim[
              broadcast_dimensions=(0, 2, 3)
              shape=(1, 1, 1024, 1024)
            ] ccb
            ccd:f16[1600,4800] = transpose[permutation=(1, 0)] blt
            cce:f16[64,256,4800] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] cbw ccd
            ccf:f16[1,1,4800] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 4800)
            ] blu
            ccg:f16[64,256,4800] = add cce ccf
            cch:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 1600)
              start_indices=(0, 0, 0)
              strides=None
            ] ccg
            cci:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 3200)
              start_indices=(0, 0, 1600)
              strides=None
            ] ccg
            ccj:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 4800)
              start_indices=(0, 0, 3200)
              strides=None
            ] ccg
            cck:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] cch
            ccl:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] cci
            ccm:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] ccj
            ccn:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
            cco:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
            ccp:i32[2] = concatenate[dimension=0] ccn cco
            ccq:bool[1,1,256,256] = gather[
              dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2, 3), collapsed_slice_dims=(), start_index_map=(2, 3))
              fill_value=None
              indices_are_sorted=True
              mode=GatherScatterMode.PROMISE_IN_BOUNDS
              slice_sizes=(1, 1, 256, 256)
              unique_indices=True
            ] ccc ccp
            ccr:bool[1,256,256] = squeeze[dimensions=(0,)] ccq
            ccs:bool[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(64, 1, 256, 256)
            ] ccr
            cct:i32[64,1,1,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 3)
              shape=(64, 1, 1, 256)
            ] bkw
            ccu:i32[64,1,256] = squeeze[dimensions=(2,)] cct
            ccv:i32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 3)
              shape=(64, 1, 256, 256)
            ] ccu
            ccw:bool[64,1,256,256] = ne ccv 0
            ccx:bool[64,1,256,256] = and ccw ccs
            ccy:f32[64,1,256,256] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] ccx
            ccz:bool[64,1,256,256] = gt ccy 0.0
            cda:f32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 1, 256, 256)
            ] 0.0
            cdb:f16[64,1,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] cda
            cdc:f32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 1, 256, 256)
            ] -10000.0
            cdd:f16[64,1,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] cdc
            cde:f16[64,1,256,256] = select_n ccz cdd cdb
            cdf:f32[] = sqrt 64.0
            cdg:f16[] = convert_element_type[new_dtype=float16 weak_type=False] cdf
            cdh:f16[64,256,25,64] = div cck cdg
            cdi:f16[64,25,256,256] = dot_general[
              dimension_numbers=(((3,), (3,)), ((0, 2), (0, 2)))
              precision=None
              preferred_element_type=None
            ] cdh ccl
            cdj:f16[64,25,256,256] = add cdi cde
            cdk:f16[64,25,256] = reduce_max[axes=(3,)] cdj
            cdl:f16[64,25,256,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 1)
            ] cdk
            cdm:f16[64,25,256,1] = stop_gradient cdl
            cdn:f16[64,25,256,256] = sub cdj cdm
            cdo:f16[64,25,256,256] = exp cdn
            cdp:f32[64,25,256,256] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] cdo
            cdq:f32[64,25,256] = reduce_sum[axes=(3,)] cdp
            cdr:f32[64,25,256,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 1)
            ] cdq
            cds:f16[64,25,256,1] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] cdr
            cdt:f16[64,25,256,256] = div cdo cds
            cdu:f16[64,25,256,1] = integer_pow[y=-2] cds
            cdv:f16[64,25,64,256] = dot_general[
              dimension_numbers=(((1,), (3,)), ((0, 2), (0, 1)))
              precision=None
              preferred_element_type=None
            ] ccm cdt
            cdw:f16[64,256,25,64] = transpose[permutation=(0, 3, 1, 2)] cdv
            cdx:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] cdw
            cdy:f16[1600,1600] = transpose[permutation=(1, 0)] blv
            cdz:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] cdx cdy
            cea:f16[1,1,1600] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 1600)
            ] blw
            ceb:f16[64,256,1600] = add cdz cea
            cec:f16[64,256,1600] = add ceb cak
            ced:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] cec
            cee:f32[64,256] = reduce_sum[axes=(2,)] ced
            cef:f32[64,256] = div cee 1600.0
            ceg:f32[64,256,1600] = integer_pow[y=2] ced
            ceh:f32[64,256,1600] = integer_pow[y=1] ced
            cei:f32[64,256,1600] = mul 2.0 ceh
            cej:f32[64,256] = reduce_sum[axes=(2,)] ceg
            cek:f32[64,256] = div cej 1600.0
            cel:f32[64,256] = integer_pow[y=2] cef
            cem:f32[64,256] = integer_pow[y=1] cef
            cen:f32[64,256] = mul 2.0 cem
            ceo:f32[64,256] = sub cek cel
            cep:f32[64,256] = max 0.0 ceo
            ceq:bool[64,256] = eq ceo cep
            cer:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            ces:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 0.0
            cet:f32[64,256] = select_n ceq ces cer
            ceu:bool[64,256] = eq 0.0 cep
            cev:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 2.0
            cew:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            cex:f32[64,256] = select_n ceu cew cev
            cey:f32[64,256] = div cet cex
            cez:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] cef
            cfa:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] cep
            cfb:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] cec
            cfc:f32[64,256,1600] = sub cfb cez
            cfd:f32[64,256,1] = add cfa 9.999999747378752e-06
            cfe:f32[64,256,1] = rsqrt cfd
            cff:f32[64,256,1] = div cfe cfd
            cfg:f32[64,256,1] = mul -0.5 cff
            cfh:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] blx
            cfi:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] cfh
            cfj:f32[64,256,1600] = mul cfe cfi
            cfk:f32[64,256,1600] = mul cfc cfj
            cfl:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] bly
            cfm:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] cfl
            cfn:f32[64,256,1600] = add cfk cfm
            cfo:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] cfn
            cfp:f16[1600,6400] = transpose[permutation=(1, 0)] blz
            cfq:f16[64,256,6400] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] cfo cfp
            cfr:f16[1,1,6400] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 6400)
            ] bma
            cfs:f16[64,256,6400] = add cfq cfr
            cft:f16[64,256,6400] = integer_pow[y=3] cfs
            cfu:f16[64,256,6400] = integer_pow[y=2] cfs
            cfv:f16[64,256,6400] = mul 3.0 cfu
            cfw:f16[64,256,6400] = mul 0.044708251953125 cft
            cfx:f16[64,256,6400] = add cfs cfw
            cfy:f16[64,256,6400] = mul 0.7978515625 cfx
            cfz:f16[64,256,6400] = tanh cfy
            cga:f16[64,256,6400] = sub 1.0 cfz
            cgb:f16[64,256,6400] = add 1.0 cfz
            cgc:f16[64,256,6400] = mul 0.5 cgb
            cgd:f16[64,256,6400] = mul cfs cgc
            cge:f16[6400,1600] = transpose[permutation=(1, 0)] bmb
            cgf:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] cgd cge
            cgg:f16[1,1,1600] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 1600)
            ] bmc
            cgh:f16[64,256,1600] = add cgf cgg
            cgi:f16[64,256,1600] = add cec cgh
            cgj:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] cgi
            cgk:f32[64,256] = reduce_sum[axes=(2,)] cgj
            cgl:f32[64,256] = div cgk 1600.0
            cgm:f32[64,256,1600] = integer_pow[y=2] cgj
            cgn:f32[64,256,1600] = integer_pow[y=1] cgj
            cgo:f32[64,256,1600] = mul 2.0 cgn
            cgp:f32[64,256] = reduce_sum[axes=(2,)] cgm
            cgq:f32[64,256] = div cgp 1600.0
            cgr:f32[64,256] = integer_pow[y=2] cgl
            cgs:f32[64,256] = integer_pow[y=1] cgl
            cgt:f32[64,256] = mul 2.0 cgs
            cgu:f32[64,256] = sub cgq cgr
            cgv:f32[64,256] = max 0.0 cgu
            cgw:bool[64,256] = eq cgu cgv
            cgx:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            cgy:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 0.0
            cgz:f32[64,256] = select_n cgw cgy cgx
            cha:bool[64,256] = eq 0.0 cgv
            chb:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 2.0
            chc:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            chd:f32[64,256] = select_n cha chc chb
            che:f32[64,256] = div cgz chd
            chf:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] cgl
            chg:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] cgv
            chh:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] cgi
            chi:f32[64,256,1600] = sub chh chf
            chj:f32[64,256,1] = add chg 9.999999747378752e-06
            chk:f32[64,256,1] = rsqrt chj
            chl:f32[64,256,1] = div chk chj
            chm:f32[64,256,1] = mul -0.5 chl
            chn:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] bmd
            cho:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] chn
            chp:f32[64,256,1600] = mul chk cho
            chq:f32[64,256,1600] = mul chi chp
            chr:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] bme
            chs:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] chr
            cht:f32[64,256,1600] = add chq chs
            chu:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] cht
            chv:i32[1024] = iota[dimension=0 dtype=int32 shape=(1024,)] 
            chw:i32[1,1024] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 1024)
            ] chv
            chx:i32[1,1024,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(1, 1024, 1)
            ] chw
            chy:i32[1,1,1024] = broadcast_in_dim[
              broadcast_dimensions=(0, 2)
              shape=(1, 1, 1024)
            ] chw
            chz:bool[1,1024,1024] = ge chx chy
            cia:bool[1,1,1024,1024] = broadcast_in_dim[
              broadcast_dimensions=(0, 2, 3)
              shape=(1, 1, 1024, 1024)
            ] chz
            cib:f16[1600,4800] = transpose[permutation=(1, 0)] bmf
            cic:f16[64,256,4800] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] chu cib
            cid:f16[1,1,4800] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 4800)
            ] bmg
            cie:f16[64,256,4800] = add cic cid
            cif:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 1600)
              start_indices=(0, 0, 0)
              strides=None
            ] cie
            cig:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 3200)
              start_indices=(0, 0, 1600)
              strides=None
            ] cie
            cih:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 4800)
              start_indices=(0, 0, 3200)
              strides=None
            ] cie
            cii:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] cif
            cij:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] cig
            cik:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] cih
            cil:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
            cim:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
            cin:i32[2] = concatenate[dimension=0] cil cim
            cio:bool[1,1,256,256] = gather[
              dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2, 3), collapsed_slice_dims=(), start_index_map=(2, 3))
              fill_value=None
              indices_are_sorted=True
              mode=GatherScatterMode.PROMISE_IN_BOUNDS
              slice_sizes=(1, 1, 256, 256)
              unique_indices=True
            ] cia cin
            cip:bool[1,256,256] = squeeze[dimensions=(0,)] cio
            ciq:bool[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(64, 1, 256, 256)
            ] cip
            cir:i32[64,1,1,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 3)
              shape=(64, 1, 1, 256)
            ] bkw
            cis:i32[64,1,256] = squeeze[dimensions=(2,)] cir
            cit:i32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 3)
              shape=(64, 1, 256, 256)
            ] cis
            ciu:bool[64,1,256,256] = ne cit 0
            civ:bool[64,1,256,256] = and ciu ciq
            ciw:f32[64,1,256,256] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] civ
            cix:bool[64,1,256,256] = gt ciw 0.0
            ciy:f32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 1, 256, 256)
            ] 0.0
            ciz:f16[64,1,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] ciy
            cja:f32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 1, 256, 256)
            ] -10000.0
            cjb:f16[64,1,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] cja
            cjc:f16[64,1,256,256] = select_n cix cjb ciz
            cjd:f32[] = sqrt 64.0
            cje:f16[] = convert_element_type[new_dtype=float16 weak_type=False] cjd
            cjf:f16[64,256,25,64] = div cii cje
            cjg:f16[64,25,256,256] = dot_general[
              dimension_numbers=(((3,), (3,)), ((0, 2), (0, 2)))
              precision=None
              preferred_element_type=None
            ] cjf cij
            cjh:f16[64,25,256,256] = add cjg cjc
            cji:f16[64,25,256] = reduce_max[axes=(3,)] cjh
            cjj:f16[64,25,256,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 1)
            ] cji
            cjk:f16[64,25,256,1] = stop_gradient cjj
            cjl:f16[64,25,256,256] = sub cjh cjk
            cjm:f16[64,25,256,256] = exp cjl
            cjn:f32[64,25,256,256] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] cjm
            cjo:f32[64,25,256] = reduce_sum[axes=(3,)] cjn
            cjp:f32[64,25,256,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 1)
            ] cjo
            cjq:f16[64,25,256,1] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] cjp
            cjr:f16[64,25,256,256] = div cjm cjq
            cjs:f16[64,25,256,1] = integer_pow[y=-2] cjq
            cjt:f16[64,25,64,256] = dot_general[
              dimension_numbers=(((1,), (3,)), ((0, 2), (0, 1)))
              precision=None
              preferred_element_type=None
            ] cik cjr
            cju:f16[64,256,25,64] = transpose[permutation=(0, 3, 1, 2)] cjt
            cjv:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] cju
            cjw:f16[1600,1600] = transpose[permutation=(1, 0)] bmh
            cjx:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] cjv cjw
            cjy:f16[1,1,1600] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 1600)
            ] bmi
            cjz:f16[64,256,1600] = add cjx cjy
            cka:f16[64,256,1600] = add cjz cgi
          in (cka, cjv, cjw, cik, cjs, cjm, cjq, cjf, cij, cje, cjr, chu, cib, chi,
            chk, cho, chm, che, cgt, cgo, chp, cgd, cge, cfs, cga, cfz, cfv, cgc,
            cfo, cfp, cfc, cfe, cfi, cfg, cey, cen, cei, cfj, cdx, cdy, ccm, cdu,
            cdo, cds, cdh, ccl, cdg, cdt, cbw, ccd, cbk, cbm, cbq, cbo, cbg, cav,
            caq, cbr, caf, cag, bzu, cac, cab, bzx, cae, bzq, bzr, bze, bzg, bzk,
            bzi, bza, byp, byk, bzl, bxz, bya, bwo, bxw, bxq, bxu, bxj, bwn, bxi,
            bxv, bvy, bwf, bvm, bvo, bvs, bvq, bvi, bux, bus, bvt, buh, bui, btw,
            bue, bud, btz, bug, bts, btt, btg, bti, btm, btk, btc, bsr, bsm, btn,
            bsb, bsc, bqq, bry, brs, brw, brl, bqp, brk, brx, bqa, bqh, bpo, bpq,
            bpu, bps, bpk, boz, bou, bpv, boj, bok, bny, bog, bof, bob, boi, bnu,
            bnv, bni, bnk, bno, bnm, bne, bmt, bmo, bnp) }
        name=01
      ] ri nw nx ny nz oa ob oc od oe of rj og oh oi oj ok ol om on oo op oq or os
        ot ou ov ow ox oy oz pa pb pc pd pe pf pg ph pi pj pk pl pm pn po pp pq pr
      ckb:f16[64,256,1600] ckc:f16[64,256,6400] ckd:f16[6400,1600] cke:f16[64,256,6400]
        ckf:f16[64,256,6400] ckg:f16[64,256,6400] ckh:f16[64,256,6400] cki:f16[64,256,6400]
        ckj:f16[64,256,1600] ckk:f16[1600,6400] ckl:f32[64,256,1600] ckm:f32[64,256,1]
        ckn:f32[1,1,1600] cko:f32[64,256,1] ckp:f32[64,256] ckq:f32[64,256] ckr:f32[64,256,1600]
        cks:f32[64,256,1600] ckt:f16[64,256,1600] cku:f16[1600,1600] ckv:f16[64,256,25,64]
        ckw:f16[64,25,256,1] ckx:f16[64,25,256,256] cky:f16[64,25,256,1] ckz:f16[64,256,25,64]
        cla:f16[64,256,25,64] clb:f16[] clc:f16[64,25,256,256] cld:f16[64,256,1600]
        cle:f16[1600,4800] clf:f32[64,256,1600] clg:f32[64,256,1] clh:f32[1,1,1600]
        cli:f32[64,256,1] clj:f32[64,256] clk:f32[64,256] cll:f32[64,256,1600] clm:f32[64,256,1600]
        cln:f16[64,256,6400] clo:f16[6400,1600] clp:f16[64,256,6400] clq:f16[64,256,6400]
        clr:f16[64,256,6400] cls:f16[64,256,6400] clt:f16[64,256,6400] clu:f16[64,256,1600]
        clv:f16[1600,6400] clw:f32[64,256,1600] clx:f32[64,256,1] cly:f32[1,1,1600]
        clz:f32[64,256,1] cma:f32[64,256] cmb:f32[64,256] cmc:f32[64,256,1600] cmd:f32[64,256,1600]
        cme:f16[64,256,1600] cmf:f16[1600,1600] cmg:f16[64,256,25,64] cmh:f16[64,25,256,1]
        cmi:f16[64,25,256,256] cmj:f16[64,25,256,1] cmk:f16[64,256,25,64] cml:f16[64,256,25,64]
        cmm:f16[] cmn:f16[64,25,256,256] cmo:f16[64,256,1600] cmp:f16[1600,4800]
        cmq:f32[64,256,1600] cmr:f32[64,256,1] cms:f32[1,1,1600] cmt:f32[64,256,1]
        cmu:f32[64,256] cmv:f32[64,256] cmw:f32[64,256,1600] cmx:f32[64,256,1600]
        cmy:f16[64,256,6400] cmz:f16[6400,1600] cna:f16[64,256,6400] cnb:f16[64,256,6400]
        cnc:f16[64,256,6400] cnd:f16[64,256,6400] cne:f16[64,256,6400] cnf:f16[64,256,1600]
        cng:f16[1600,6400] cnh:f32[64,256,1600] cni:f32[64,256,1] cnj:f32[1,1,1600]
        cnk:f32[64,256,1] cnl:f32[64,256] cnm:f32[64,256] cnn:f32[64,256,1600] cno:f32[64,256,1600]
        cnp:f16[64,256,1600] cnq:f16[1600,1600] cnr:f16[64,256,25,64] cns:f16[64,25,256,1]
        cnt:f16[64,25,256,256] cnu:f16[64,25,256,1] cnv:f16[64,256,25,64] cnw:f16[64,256,25,64]
        cnx:f16[] cny:f16[64,25,256,256] cnz:f16[64,256,1600] coa:f16[1600,4800]
        cob:f32[64,256,1600] coc:f32[64,256,1] cod:f32[1,1,1600] coe:f32[64,256,1]
        cof:f32[64,256] cog:f32[64,256] coh:f32[64,256,1600] coi:f32[64,256,1600]
        coj:f16[64,256,6400] cok:f16[6400,1600] col:f16[64,256,6400] com:f16[64,256,6400]
        con:f16[64,256,6400] coo:f16[64,256,6400] cop:f16[64,256,6400] coq:f16[64,256,1600]
        cor:f16[1600,6400] cos:f32[64,256,1600] cot:f32[64,256,1] cou:f32[1,1,1600]
        cov:f32[64,256,1] cow:f32[64,256] cox:f32[64,256] coy:f32[64,256,1600] coz:f32[64,256,1600] = named_call[
        call_jaxpr={ lambda ; cpa:f16[64,256,1600] cpb:f16[1600] cpc:f16[1600] cpd:f16[6400,1600]
            cpe:f16[6400] cpf:f16[1600,6400] cpg:f16[1600] cph:f16[1600] cpi:f16[1600]
            cpj:f16[4800,1600] cpk:f16[4800] cpl:i32[64,256] cpm:f16[1600,1600] cpn:f16[1600]
            cpo:f16[1600] cpp:f16[1600] cpq:f16[6400,1600] cpr:f16[6400] cps:f16[1600,6400]
            cpt:f16[1600] cpu:f16[1600] cpv:f16[1600] cpw:f16[4800,1600] cpx:f16[4800]
            cpy:f16[1600,1600] cpz:f16[1600] cqa:f16[1600] cqb:f16[1600] cqc:f16[6400,1600]
            cqd:f16[6400] cqe:f16[1600,6400] cqf:f16[1600] cqg:f16[1600] cqh:f16[1600]
            cqi:f16[4800,1600] cqj:f16[4800] cqk:f16[1600,1600] cql:f16[1600] cqm:f16[1600]
            cqn:f16[1600] cqo:f16[6400,1600] cqp:f16[6400] cqq:f16[1600,6400] cqr:f16[1600]. let
            cqs:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] cpa
            cqt:f32[64,256] = reduce_sum[axes=(2,)] cqs
            cqu:f32[64,256] = div cqt 1600.0
            cqv:f32[64,256,1600] = integer_pow[y=2] cqs
            cqw:f32[64,256,1600] = integer_pow[y=1] cqs
            cqx:f32[64,256,1600] = mul 2.0 cqw
            cqy:f32[64,256] = reduce_sum[axes=(2,)] cqv
            cqz:f32[64,256] = div cqy 1600.0
            cra:f32[64,256] = integer_pow[y=2] cqu
            crb:f32[64,256] = integer_pow[y=1] cqu
            crc:f32[64,256] = mul 2.0 crb
            crd:f32[64,256] = sub cqz cra
            cre:f32[64,256] = max 0.0 crd
            crf:bool[64,256] = eq crd cre
            crg:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            crh:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 0.0
            cri:f32[64,256] = select_n crf crh crg
            crj:bool[64,256] = eq 0.0 cre
            crk:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 2.0
            crl:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            crm:f32[64,256] = select_n crj crl crk
            crn:f32[64,256] = div cri crm
            cro:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] cqu
            crp:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] cre
            crq:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] cpa
            crr:f32[64,256,1600] = sub crq cro
            crs:f32[64,256,1] = add crp 9.999999747378752e-06
            crt:f32[64,256,1] = rsqrt crs
            cru:f32[64,256,1] = div crt crs
            crv:f32[64,256,1] = mul -0.5 cru
            crw:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] cpb
            crx:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] crw
            cry:f32[64,256,1600] = mul crt crx
            crz:f32[64,256,1600] = mul crr cry
            csa:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] cpc
            csb:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] csa
            csc:f32[64,256,1600] = add crz csb
            csd:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] csc
            cse:f16[1600,6400] = transpose[permutation=(1, 0)] cpd
            csf:f16[64,256,6400] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] csd cse
            csg:f16[1,1,6400] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 6400)
            ] cpe
            csh:f16[64,256,6400] = add csf csg
            csi:f16[64,256,6400] = integer_pow[y=3] csh
            csj:f16[64,256,6400] = integer_pow[y=2] csh
            csk:f16[64,256,6400] = mul 3.0 csj
            csl:f16[64,256,6400] = mul 0.044708251953125 csi
            csm:f16[64,256,6400] = add csh csl
            csn:f16[64,256,6400] = mul 0.7978515625 csm
            cso:f16[64,256,6400] = tanh csn
            csp:f16[64,256,6400] = sub 1.0 cso
            csq:f16[64,256,6400] = add 1.0 cso
            csr:f16[64,256,6400] = mul 0.5 csq
            css:f16[64,256,6400] = mul csh csr
            cst:f16[6400,1600] = transpose[permutation=(1, 0)] cpf
            csu:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] css cst
            csv:f16[1,1,1600] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 1600)
            ] cpg
            csw:f16[64,256,1600] = add csu csv
            csx:f16[64,256,1600] = add cpa csw
            csy:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] csx
            csz:f32[64,256] = reduce_sum[axes=(2,)] csy
            cta:f32[64,256] = div csz 1600.0
            ctb:f32[64,256,1600] = integer_pow[y=2] csy
            ctc:f32[64,256,1600] = integer_pow[y=1] csy
            ctd:f32[64,256,1600] = mul 2.0 ctc
            cte:f32[64,256] = reduce_sum[axes=(2,)] ctb
            ctf:f32[64,256] = div cte 1600.0
            ctg:f32[64,256] = integer_pow[y=2] cta
            cth:f32[64,256] = integer_pow[y=1] cta
            cti:f32[64,256] = mul 2.0 cth
            ctj:f32[64,256] = sub ctf ctg
            ctk:f32[64,256] = max 0.0 ctj
            ctl:bool[64,256] = eq ctj ctk
            ctm:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            ctn:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 0.0
            cto:f32[64,256] = select_n ctl ctn ctm
            ctp:bool[64,256] = eq 0.0 ctk
            ctq:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 2.0
            ctr:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            cts:f32[64,256] = select_n ctp ctr ctq
            ctt:f32[64,256] = div cto cts
            ctu:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] cta
            ctv:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] ctk
            ctw:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] csx
            ctx:f32[64,256,1600] = sub ctw ctu
            cty:f32[64,256,1] = add ctv 9.999999747378752e-06
            ctz:f32[64,256,1] = rsqrt cty
            cua:f32[64,256,1] = div ctz cty
            cub:f32[64,256,1] = mul -0.5 cua
            cuc:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] cph
            cud:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] cuc
            cue:f32[64,256,1600] = mul ctz cud
            cuf:f32[64,256,1600] = mul ctx cue
            cug:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] cpi
            cuh:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] cug
            cui:f32[64,256,1600] = add cuf cuh
            cuj:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] cui
            cuk:i32[1024] = iota[dimension=0 dtype=int32 shape=(1024,)] 
            cul:i32[1,1024] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 1024)
            ] cuk
            cum:i32[1,1024,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(1, 1024, 1)
            ] cul
            cun:i32[1,1,1024] = broadcast_in_dim[
              broadcast_dimensions=(0, 2)
              shape=(1, 1, 1024)
            ] cul
            cuo:bool[1,1024,1024] = ge cum cun
            cup:bool[1,1,1024,1024] = broadcast_in_dim[
              broadcast_dimensions=(0, 2, 3)
              shape=(1, 1, 1024, 1024)
            ] cuo
            cuq:f16[1600,4800] = transpose[permutation=(1, 0)] cpj
            cur:f16[64,256,4800] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] cuj cuq
            cus:f16[1,1,4800] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 4800)
            ] cpk
            cut:f16[64,256,4800] = add cur cus
            cuu:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 1600)
              start_indices=(0, 0, 0)
              strides=None
            ] cut
            cuv:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 3200)
              start_indices=(0, 0, 1600)
              strides=None
            ] cut
            cuw:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 4800)
              start_indices=(0, 0, 3200)
              strides=None
            ] cut
            cux:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] cuu
            cuy:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] cuv
            cuz:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] cuw
            cva:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
            cvb:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
            cvc:i32[2] = concatenate[dimension=0] cva cvb
            cvd:bool[1,1,256,256] = gather[
              dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2, 3), collapsed_slice_dims=(), start_index_map=(2, 3))
              fill_value=None
              indices_are_sorted=True
              mode=GatherScatterMode.PROMISE_IN_BOUNDS
              slice_sizes=(1, 1, 256, 256)
              unique_indices=True
            ] cup cvc
            cve:bool[1,256,256] = squeeze[dimensions=(0,)] cvd
            cvf:bool[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(64, 1, 256, 256)
            ] cve
            cvg:i32[64,1,1,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 3)
              shape=(64, 1, 1, 256)
            ] cpl
            cvh:i32[64,1,256] = squeeze[dimensions=(2,)] cvg
            cvi:i32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 3)
              shape=(64, 1, 256, 256)
            ] cvh
            cvj:bool[64,1,256,256] = ne cvi 0
            cvk:bool[64,1,256,256] = and cvj cvf
            cvl:f32[64,1,256,256] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] cvk
            cvm:bool[64,1,256,256] = gt cvl 0.0
            cvn:f32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 1, 256, 256)
            ] 0.0
            cvo:f16[64,1,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] cvn
            cvp:f32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 1, 256, 256)
            ] -10000.0
            cvq:f16[64,1,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] cvp
            cvr:f16[64,1,256,256] = select_n cvm cvq cvo
            cvs:f32[] = sqrt 64.0
            cvt:f16[] = convert_element_type[new_dtype=float16 weak_type=False] cvs
            cvu:f16[64,256,25,64] = div cux cvt
            cvv:f16[64,25,256,256] = dot_general[
              dimension_numbers=(((3,), (3,)), ((0, 2), (0, 2)))
              precision=None
              preferred_element_type=None
            ] cvu cuy
            cvw:f16[64,25,256,256] = add cvv cvr
            cvx:f16[64,25,256] = reduce_max[axes=(3,)] cvw
            cvy:f16[64,25,256,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 1)
            ] cvx
            cvz:f16[64,25,256,1] = stop_gradient cvy
            cwa:f16[64,25,256,256] = sub cvw cvz
            cwb:f16[64,25,256,256] = exp cwa
            cwc:f32[64,25,256,256] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] cwb
            cwd:f32[64,25,256] = reduce_sum[axes=(3,)] cwc
            cwe:f32[64,25,256,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 1)
            ] cwd
            cwf:f16[64,25,256,1] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] cwe
            cwg:f16[64,25,256,256] = div cwb cwf
            cwh:f16[64,25,256,1] = integer_pow[y=-2] cwf
            cwi:f16[64,25,64,256] = dot_general[
              dimension_numbers=(((1,), (3,)), ((0, 2), (0, 1)))
              precision=None
              preferred_element_type=None
            ] cuz cwg
            cwj:f16[64,256,25,64] = transpose[permutation=(0, 3, 1, 2)] cwi
            cwk:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] cwj
            cwl:f16[1600,1600] = transpose[permutation=(1, 0)] cpm
            cwm:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] cwk cwl
            cwn:f16[1,1,1600] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 1600)
            ] cpn
            cwo:f16[64,256,1600] = add cwm cwn
            cwp:f16[64,256,1600] = add cwo csx
            cwq:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] cwp
            cwr:f32[64,256] = reduce_sum[axes=(2,)] cwq
            cws:f32[64,256] = div cwr 1600.0
            cwt:f32[64,256,1600] = integer_pow[y=2] cwq
            cwu:f32[64,256,1600] = integer_pow[y=1] cwq
            cwv:f32[64,256,1600] = mul 2.0 cwu
            cww:f32[64,256] = reduce_sum[axes=(2,)] cwt
            cwx:f32[64,256] = div cww 1600.0
            cwy:f32[64,256] = integer_pow[y=2] cws
            cwz:f32[64,256] = integer_pow[y=1] cws
            cxa:f32[64,256] = mul 2.0 cwz
            cxb:f32[64,256] = sub cwx cwy
            cxc:f32[64,256] = max 0.0 cxb
            cxd:bool[64,256] = eq cxb cxc
            cxe:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            cxf:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 0.0
            cxg:f32[64,256] = select_n cxd cxf cxe
            cxh:bool[64,256] = eq 0.0 cxc
            cxi:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 2.0
            cxj:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            cxk:f32[64,256] = select_n cxh cxj cxi
            cxl:f32[64,256] = div cxg cxk
            cxm:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] cws
            cxn:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] cxc
            cxo:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] cwp
            cxp:f32[64,256,1600] = sub cxo cxm
            cxq:f32[64,256,1] = add cxn 9.999999747378752e-06
            cxr:f32[64,256,1] = rsqrt cxq
            cxs:f32[64,256,1] = div cxr cxq
            cxt:f32[64,256,1] = mul -0.5 cxs
            cxu:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] cpo
            cxv:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] cxu
            cxw:f32[64,256,1600] = mul cxr cxv
            cxx:f32[64,256,1600] = mul cxp cxw
            cxy:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] cpp
            cxz:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] cxy
            cya:f32[64,256,1600] = add cxx cxz
            cyb:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] cya
            cyc:f16[1600,6400] = transpose[permutation=(1, 0)] cpq
            cyd:f16[64,256,6400] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] cyb cyc
            cye:f16[1,1,6400] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 6400)
            ] cpr
            cyf:f16[64,256,6400] = add cyd cye
            cyg:f16[64,256,6400] = integer_pow[y=3] cyf
            cyh:f16[64,256,6400] = integer_pow[y=2] cyf
            cyi:f16[64,256,6400] = mul 3.0 cyh
            cyj:f16[64,256,6400] = mul 0.044708251953125 cyg
            cyk:f16[64,256,6400] = add cyf cyj
            cyl:f16[64,256,6400] = mul 0.7978515625 cyk
            cym:f16[64,256,6400] = tanh cyl
            cyn:f16[64,256,6400] = sub 1.0 cym
            cyo:f16[64,256,6400] = add 1.0 cym
            cyp:f16[64,256,6400] = mul 0.5 cyo
            cyq:f16[64,256,6400] = mul cyf cyp
            cyr:f16[6400,1600] = transpose[permutation=(1, 0)] cps
            cys:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] cyq cyr
            cyt:f16[1,1,1600] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 1600)
            ] cpt
            cyu:f16[64,256,1600] = add cys cyt
            cyv:f16[64,256,1600] = add cwp cyu
            cyw:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] cyv
            cyx:f32[64,256] = reduce_sum[axes=(2,)] cyw
            cyy:f32[64,256] = div cyx 1600.0
            cyz:f32[64,256,1600] = integer_pow[y=2] cyw
            cza:f32[64,256,1600] = integer_pow[y=1] cyw
            czb:f32[64,256,1600] = mul 2.0 cza
            czc:f32[64,256] = reduce_sum[axes=(2,)] cyz
            czd:f32[64,256] = div czc 1600.0
            cze:f32[64,256] = integer_pow[y=2] cyy
            czf:f32[64,256] = integer_pow[y=1] cyy
            czg:f32[64,256] = mul 2.0 czf
            czh:f32[64,256] = sub czd cze
            czi:f32[64,256] = max 0.0 czh
            czj:bool[64,256] = eq czh czi
            czk:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            czl:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 0.0
            czm:f32[64,256] = select_n czj czl czk
            czn:bool[64,256] = eq 0.0 czi
            czo:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 2.0
            czp:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            czq:f32[64,256] = select_n czn czp czo
            czr:f32[64,256] = div czm czq
            czs:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] cyy
            czt:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] czi
            czu:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] cyv
            czv:f32[64,256,1600] = sub czu czs
            czw:f32[64,256,1] = add czt 9.999999747378752e-06
            czx:f32[64,256,1] = rsqrt czw
            czy:f32[64,256,1] = div czx czw
            czz:f32[64,256,1] = mul -0.5 czy
            daa:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] cpu
            dab:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] daa
            dac:f32[64,256,1600] = mul czx dab
            dad:f32[64,256,1600] = mul czv dac
            dae:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] cpv
            daf:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] dae
            dag:f32[64,256,1600] = add dad daf
            dah:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] dag
            dai:i32[1024] = iota[dimension=0 dtype=int32 shape=(1024,)] 
            daj:i32[1,1024] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 1024)
            ] dai
            dak:i32[1,1024,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(1, 1024, 1)
            ] daj
            dal:i32[1,1,1024] = broadcast_in_dim[
              broadcast_dimensions=(0, 2)
              shape=(1, 1, 1024)
            ] daj
            dam:bool[1,1024,1024] = ge dak dal
            dan:bool[1,1,1024,1024] = broadcast_in_dim[
              broadcast_dimensions=(0, 2, 3)
              shape=(1, 1, 1024, 1024)
            ] dam
            dao:f16[1600,4800] = transpose[permutation=(1, 0)] cpw
            dap:f16[64,256,4800] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] dah dao
            daq:f16[1,1,4800] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 4800)
            ] cpx
            dar:f16[64,256,4800] = add dap daq
            das:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 1600)
              start_indices=(0, 0, 0)
              strides=None
            ] dar
            dat:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 3200)
              start_indices=(0, 0, 1600)
              strides=None
            ] dar
            dau:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 4800)
              start_indices=(0, 0, 3200)
              strides=None
            ] dar
            dav:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] das
            daw:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] dat
            dax:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] dau
            day:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
            daz:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
            dba:i32[2] = concatenate[dimension=0] day daz
            dbb:bool[1,1,256,256] = gather[
              dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2, 3), collapsed_slice_dims=(), start_index_map=(2, 3))
              fill_value=None
              indices_are_sorted=True
              mode=GatherScatterMode.PROMISE_IN_BOUNDS
              slice_sizes=(1, 1, 256, 256)
              unique_indices=True
            ] dan dba
            dbc:bool[1,256,256] = squeeze[dimensions=(0,)] dbb
            dbd:bool[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(64, 1, 256, 256)
            ] dbc
            dbe:i32[64,1,1,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 3)
              shape=(64, 1, 1, 256)
            ] cpl
            dbf:i32[64,1,256] = squeeze[dimensions=(2,)] dbe
            dbg:i32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 3)
              shape=(64, 1, 256, 256)
            ] dbf
            dbh:bool[64,1,256,256] = ne dbg 0
            dbi:bool[64,1,256,256] = and dbh dbd
            dbj:f32[64,1,256,256] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] dbi
            dbk:bool[64,1,256,256] = gt dbj 0.0
            dbl:f32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 1, 256, 256)
            ] 0.0
            dbm:f16[64,1,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] dbl
            dbn:f32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 1, 256, 256)
            ] -10000.0
            dbo:f16[64,1,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] dbn
            dbp:f16[64,1,256,256] = select_n dbk dbo dbm
            dbq:f32[] = sqrt 64.0
            dbr:f16[] = convert_element_type[new_dtype=float16 weak_type=False] dbq
            dbs:f16[64,256,25,64] = div dav dbr
            dbt:f16[64,25,256,256] = dot_general[
              dimension_numbers=(((3,), (3,)), ((0, 2), (0, 2)))
              precision=None
              preferred_element_type=None
            ] dbs daw
            dbu:f16[64,25,256,256] = add dbt dbp
            dbv:f16[64,25,256] = reduce_max[axes=(3,)] dbu
            dbw:f16[64,25,256,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 1)
            ] dbv
            dbx:f16[64,25,256,1] = stop_gradient dbw
            dby:f16[64,25,256,256] = sub dbu dbx
            dbz:f16[64,25,256,256] = exp dby
            dca:f32[64,25,256,256] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] dbz
            dcb:f32[64,25,256] = reduce_sum[axes=(3,)] dca
            dcc:f32[64,25,256,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 1)
            ] dcb
            dcd:f16[64,25,256,1] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] dcc
            dce:f16[64,25,256,256] = div dbz dcd
            dcf:f16[64,25,256,1] = integer_pow[y=-2] dcd
            dcg:f16[64,25,64,256] = dot_general[
              dimension_numbers=(((1,), (3,)), ((0, 2), (0, 1)))
              precision=None
              preferred_element_type=None
            ] dax dce
            dch:f16[64,256,25,64] = transpose[permutation=(0, 3, 1, 2)] dcg
            dci:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] dch
            dcj:f16[1600,1600] = transpose[permutation=(1, 0)] cpy
            dck:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] dci dcj
            dcl:f16[1,1,1600] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 1600)
            ] cpz
            dcm:f16[64,256,1600] = add dck dcl
            dcn:f16[64,256,1600] = add dcm cyv
            dco:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] dcn
            dcp:f32[64,256] = reduce_sum[axes=(2,)] dco
            dcq:f32[64,256] = div dcp 1600.0
            dcr:f32[64,256,1600] = integer_pow[y=2] dco
            dcs:f32[64,256,1600] = integer_pow[y=1] dco
            dct:f32[64,256,1600] = mul 2.0 dcs
            dcu:f32[64,256] = reduce_sum[axes=(2,)] dcr
            dcv:f32[64,256] = div dcu 1600.0
            dcw:f32[64,256] = integer_pow[y=2] dcq
            dcx:f32[64,256] = integer_pow[y=1] dcq
            dcy:f32[64,256] = mul 2.0 dcx
            dcz:f32[64,256] = sub dcv dcw
            dda:f32[64,256] = max 0.0 dcz
            ddb:bool[64,256] = eq dcz dda
            ddc:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            ddd:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 0.0
            dde:f32[64,256] = select_n ddb ddd ddc
            ddf:bool[64,256] = eq 0.0 dda
            ddg:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 2.0
            ddh:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            ddi:f32[64,256] = select_n ddf ddh ddg
            ddj:f32[64,256] = div dde ddi
            ddk:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] dcq
            ddl:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] dda
            ddm:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] dcn
            ddn:f32[64,256,1600] = sub ddm ddk
            ddo:f32[64,256,1] = add ddl 9.999999747378752e-06
            ddp:f32[64,256,1] = rsqrt ddo
            ddq:f32[64,256,1] = div ddp ddo
            ddr:f32[64,256,1] = mul -0.5 ddq
            dds:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] cqa
            ddt:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] dds
            ddu:f32[64,256,1600] = mul ddp ddt
            ddv:f32[64,256,1600] = mul ddn ddu
            ddw:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] cqb
            ddx:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] ddw
            ddy:f32[64,256,1600] = add ddv ddx
            ddz:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] ddy
            dea:f16[1600,6400] = transpose[permutation=(1, 0)] cqc
            deb:f16[64,256,6400] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] ddz dea
            dec:f16[1,1,6400] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 6400)
            ] cqd
            ded:f16[64,256,6400] = add deb dec
            dee:f16[64,256,6400] = integer_pow[y=3] ded
            def:f16[64,256,6400] = integer_pow[y=2] ded
            deg:f16[64,256,6400] = mul 3.0 def
            deh:f16[64,256,6400] = mul 0.044708251953125 dee
            dei:f16[64,256,6400] = add ded deh
            dej:f16[64,256,6400] = mul 0.7978515625 dei
            dek:f16[64,256,6400] = tanh dej
            del:f16[64,256,6400] = sub 1.0 dek
            dem:f16[64,256,6400] = add 1.0 dek
            den:f16[64,256,6400] = mul 0.5 dem
            deo:f16[64,256,6400] = mul ded den
            dep:f16[6400,1600] = transpose[permutation=(1, 0)] cqe
            deq:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] deo dep
            der:f16[1,1,1600] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 1600)
            ] cqf
            des:f16[64,256,1600] = add deq der
            det:f16[64,256,1600] = add dcn des
            deu:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] det
            dev:f32[64,256] = reduce_sum[axes=(2,)] deu
            dew:f32[64,256] = div dev 1600.0
            dex:f32[64,256,1600] = integer_pow[y=2] deu
            dey:f32[64,256,1600] = integer_pow[y=1] deu
            dez:f32[64,256,1600] = mul 2.0 dey
            dfa:f32[64,256] = reduce_sum[axes=(2,)] dex
            dfb:f32[64,256] = div dfa 1600.0
            dfc:f32[64,256] = integer_pow[y=2] dew
            dfd:f32[64,256] = integer_pow[y=1] dew
            dfe:f32[64,256] = mul 2.0 dfd
            dff:f32[64,256] = sub dfb dfc
            dfg:f32[64,256] = max 0.0 dff
            dfh:bool[64,256] = eq dff dfg
            dfi:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            dfj:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 0.0
            dfk:f32[64,256] = select_n dfh dfj dfi
            dfl:bool[64,256] = eq 0.0 dfg
            dfm:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 2.0
            dfn:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            dfo:f32[64,256] = select_n dfl dfn dfm
            dfp:f32[64,256] = div dfk dfo
            dfq:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] dew
            dfr:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] dfg
            dfs:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] det
            dft:f32[64,256,1600] = sub dfs dfq
            dfu:f32[64,256,1] = add dfr 9.999999747378752e-06
            dfv:f32[64,256,1] = rsqrt dfu
            dfw:f32[64,256,1] = div dfv dfu
            dfx:f32[64,256,1] = mul -0.5 dfw
            dfy:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] cqg
            dfz:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] dfy
            dga:f32[64,256,1600] = mul dfv dfz
            dgb:f32[64,256,1600] = mul dft dga
            dgc:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] cqh
            dgd:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] dgc
            dge:f32[64,256,1600] = add dgb dgd
            dgf:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] dge
            dgg:i32[1024] = iota[dimension=0 dtype=int32 shape=(1024,)] 
            dgh:i32[1,1024] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 1024)
            ] dgg
            dgi:i32[1,1024,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(1, 1024, 1)
            ] dgh
            dgj:i32[1,1,1024] = broadcast_in_dim[
              broadcast_dimensions=(0, 2)
              shape=(1, 1, 1024)
            ] dgh
            dgk:bool[1,1024,1024] = ge dgi dgj
            dgl:bool[1,1,1024,1024] = broadcast_in_dim[
              broadcast_dimensions=(0, 2, 3)
              shape=(1, 1, 1024, 1024)
            ] dgk
            dgm:f16[1600,4800] = transpose[permutation=(1, 0)] cqi
            dgn:f16[64,256,4800] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] dgf dgm
            dgo:f16[1,1,4800] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 4800)
            ] cqj
            dgp:f16[64,256,4800] = add dgn dgo
            dgq:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 1600)
              start_indices=(0, 0, 0)
              strides=None
            ] dgp
            dgr:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 3200)
              start_indices=(0, 0, 1600)
              strides=None
            ] dgp
            dgs:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 4800)
              start_indices=(0, 0, 3200)
              strides=None
            ] dgp
            dgt:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] dgq
            dgu:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] dgr
            dgv:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] dgs
            dgw:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
            dgx:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
            dgy:i32[2] = concatenate[dimension=0] dgw dgx
            dgz:bool[1,1,256,256] = gather[
              dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2, 3), collapsed_slice_dims=(), start_index_map=(2, 3))
              fill_value=None
              indices_are_sorted=True
              mode=GatherScatterMode.PROMISE_IN_BOUNDS
              slice_sizes=(1, 1, 256, 256)
              unique_indices=True
            ] dgl dgy
            dha:bool[1,256,256] = squeeze[dimensions=(0,)] dgz
            dhb:bool[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(64, 1, 256, 256)
            ] dha
            dhc:i32[64,1,1,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 3)
              shape=(64, 1, 1, 256)
            ] cpl
            dhd:i32[64,1,256] = squeeze[dimensions=(2,)] dhc
            dhe:i32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 3)
              shape=(64, 1, 256, 256)
            ] dhd
            dhf:bool[64,1,256,256] = ne dhe 0
            dhg:bool[64,1,256,256] = and dhf dhb
            dhh:f32[64,1,256,256] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] dhg
            dhi:bool[64,1,256,256] = gt dhh 0.0
            dhj:f32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 1, 256, 256)
            ] 0.0
            dhk:f16[64,1,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] dhj
            dhl:f32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 1, 256, 256)
            ] -10000.0
            dhm:f16[64,1,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] dhl
            dhn:f16[64,1,256,256] = select_n dhi dhm dhk
            dho:f32[] = sqrt 64.0
            dhp:f16[] = convert_element_type[new_dtype=float16 weak_type=False] dho
            dhq:f16[64,256,25,64] = div dgt dhp
            dhr:f16[64,25,256,256] = dot_general[
              dimension_numbers=(((3,), (3,)), ((0, 2), (0, 2)))
              precision=None
              preferred_element_type=None
            ] dhq dgu
            dhs:f16[64,25,256,256] = add dhr dhn
            dht:f16[64,25,256] = reduce_max[axes=(3,)] dhs
            dhu:f16[64,25,256,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 1)
            ] dht
            dhv:f16[64,25,256,1] = stop_gradient dhu
            dhw:f16[64,25,256,256] = sub dhs dhv
            dhx:f16[64,25,256,256] = exp dhw
            dhy:f32[64,25,256,256] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] dhx
            dhz:f32[64,25,256] = reduce_sum[axes=(3,)] dhy
            dia:f32[64,25,256,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 1)
            ] dhz
            dib:f16[64,25,256,1] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] dia
            dic:f16[64,25,256,256] = div dhx dib
            did:f16[64,25,256,1] = integer_pow[y=-2] dib
            die:f16[64,25,64,256] = dot_general[
              dimension_numbers=(((1,), (3,)), ((0, 2), (0, 1)))
              precision=None
              preferred_element_type=None
            ] dgv dic
            dif:f16[64,256,25,64] = transpose[permutation=(0, 3, 1, 2)] die
            dig:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] dif
            dih:f16[1600,1600] = transpose[permutation=(1, 0)] cqk
            dii:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] dig dih
            dij:f16[1,1,1600] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 1600)
            ] cql
            dik:f16[64,256,1600] = add dii dij
            dil:f16[64,256,1600] = add dik det
            dim:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] dil
            din:f32[64,256] = reduce_sum[axes=(2,)] dim
            dio:f32[64,256] = div din 1600.0
            dip:f32[64,256,1600] = integer_pow[y=2] dim
            diq:f32[64,256,1600] = integer_pow[y=1] dim
            dir:f32[64,256,1600] = mul 2.0 diq
            dis:f32[64,256] = reduce_sum[axes=(2,)] dip
            dit:f32[64,256] = div dis 1600.0
            diu:f32[64,256] = integer_pow[y=2] dio
            div:f32[64,256] = integer_pow[y=1] dio
            diw:f32[64,256] = mul 2.0 div
            dix:f32[64,256] = sub dit diu
            diy:f32[64,256] = max 0.0 dix
            diz:bool[64,256] = eq dix diy
            dja:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            djb:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 0.0
            djc:f32[64,256] = select_n diz djb dja
            djd:bool[64,256] = eq 0.0 diy
            dje:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 2.0
            djf:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            djg:f32[64,256] = select_n djd djf dje
            djh:f32[64,256] = div djc djg
            dji:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] dio
            djj:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] diy
            djk:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] dil
            djl:f32[64,256,1600] = sub djk dji
            djm:f32[64,256,1] = add djj 9.999999747378752e-06
            djn:f32[64,256,1] = rsqrt djm
            djo:f32[64,256,1] = div djn djm
            djp:f32[64,256,1] = mul -0.5 djo
            djq:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] cqm
            djr:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] djq
            djs:f32[64,256,1600] = mul djn djr
            djt:f32[64,256,1600] = mul djl djs
            dju:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] cqn
            djv:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] dju
            djw:f32[64,256,1600] = add djt djv
            djx:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] djw
            djy:f16[1600,6400] = transpose[permutation=(1, 0)] cqo
            djz:f16[64,256,6400] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] djx djy
            dka:f16[1,1,6400] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 6400)
            ] cqp
            dkb:f16[64,256,6400] = add djz dka
            dkc:f16[64,256,6400] = integer_pow[y=3] dkb
            dkd:f16[64,256,6400] = integer_pow[y=2] dkb
            dke:f16[64,256,6400] = mul 3.0 dkd
            dkf:f16[64,256,6400] = mul 0.044708251953125 dkc
            dkg:f16[64,256,6400] = add dkb dkf
            dkh:f16[64,256,6400] = mul 0.7978515625 dkg
            dki:f16[64,256,6400] = tanh dkh
            dkj:f16[64,256,6400] = sub 1.0 dki
            dkk:f16[64,256,6400] = add 1.0 dki
            dkl:f16[64,256,6400] = mul 0.5 dkk
            dkm:f16[64,256,6400] = mul dkb dkl
            dkn:f16[6400,1600] = transpose[permutation=(1, 0)] cqq
            dko:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] dkm dkn
            dkp:f16[1,1,1600] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 1600)
            ] cqr
            dkq:f16[64,256,1600] = add dko dkp
            dkr:f16[64,256,1600] = add dil dkq
          in (dkr, dkm, dkn, dkb, dkj, dki, dke, dkl, djx, djy, djl, djn, djr, djp,
            djh, diw, dir, djs, dig, dih, dgv, did, dhx, dib, dhq, dgu, dhp, dic,
            dgf, dgm, dft, dfv, dfz, dfx, dfp, dfe, dez, dga, deo, dep, ded, del,
            dek, deg, den, ddz, dea, ddn, ddp, ddt, ddr, ddj, dcy, dct, ddu, dci,
            dcj, dax, dcf, dbz, dcd, dbs, daw, dbr, dce, dah, dao, czv, czx, dab,
            czz, czr, czg, czb, dac, cyq, cyr, cyf, cyn, cym, cyi, cyp, cyb, cyc,
            cxp, cxr, cxv, cxt, cxl, cxa, cwv, cxw, cwk, cwl, cuz, cwh, cwb, cwf,
            cvu, cuy, cvt, cwg, cuj, cuq, ctx, ctz, cud, cub, ctt, cti, ctd, cue,
            css, cst, csh, csp, cso, csk, csr, csd, cse, crr, crt, crx, crv, crn,
            crc, cqx, cry) }
        name=02
      ] bes ps pt pu pv pw px py pz qa qb rj qc qd qe qf qg qh qi qj qk ql qm qn
        qo qp qq qr qs qt qu qv qw qx qy qz ra rb rc rd re rf rg rh
    in (rj, rk, rl, rm, rn, ro, rp, rq, rr, rs, rt, ru, rv, rw, rx, ry, rz, sa, sb,
      sc, sd, se, sf, sg, sh, si, sj, sk, sl, sm, sn, so, sp, sq, sr, ss, st, su,
      sv, sw, sx, sy, sz, ta, tb, tc, td, te, tf, tg, th, ti, tj, tk, tl, tm, tn,
      to, tp, tq, bet, beu, bev, bew, bex, bey, bez, bfa, bfb, bfc, bfd, bfe, bff,
      bfg, bfh, bfi, bfj, bfk, bfl, bfm, bfn, bfo, bfp, bfq, bfr, bfs, bft, bfu,
      bfv, bfw, bfx, bfy, bfz, bga, bgb, bgc, bgd, bge, bgf, bgg, bgh, bgi, bgj,
      bgk, bgl, bgm, bgn, bgo, bgp, bgq, bgr, bgs, bgt, bgu, bgv, bgw, bgx, bgy,
      bgz, bha, bhb, bhc, bhd, bhe, bhf, bhg, bhh, bhi, bhj, bhk, bhl, bhm, bhn,
      bho, bhp, bhq, bhr, bhs, bht, bhu, bhv, bhw, bhx, bhy, bhz, bia, bib, bic,
      bid, bie, bif, big, bih, bii, bij, bik, bil, bim, bin, bio, bip, biq, bir,
      bis, bit, biu, biv, biw, bix, biy, biz, bja, bjb, bjc, bjd, bje, bjf, bjg,
      bjh, bji, bjj, bjk, bjl, bjm, bjn, bjo, bjp, bjq, bjr, bjs, bjt, bju, bjv,
      bjw, bjx, bjy, bjz, bka, bkb, bkc, bkd, bke, bkf, bkg, bkh, bki, bkj, bkk,
      ckb, ckc, ckd, cke, ckf, ckg, ckh, cki, ckj, ckk, ckl, ckm, ckn, cko, ckp,
      ckq, ckr, cks, ckt, cku, ckv, ckw, ckx, cky, ckz, cla, clb, clc, cld, cle,
      clf, clg, clh, cli, clj, clk, cll, clm, cln, clo, clp, clq, clr, cls, clt,
      clu, clv, clw, clx, cly, clz, cma, cmb, cmc, cmd, cme, cmf, cmg, cmh, cmi,
      cmj, cmk, cml, cmm, cmn, cmo, cmp, cmq, cmr, cms, cmt, cmu, cmv, cmw, cmx,
      cmy, cmz, cna, cnb, cnc, cnd, cne, cnf, cng, cnh, cni, cnj, cnk, cnl, cnm,
      cnn, cno, cnp, cnq, cnr, cns, cnt, cnu, cnv, cnw, cnx, cny, cnz, coa, cob,
      coc, cod, coe, cof, cog, coh, coi, coj, cok, col, com, con, coo, cop, coq,
      cor, cos, cot, cou, cov, cow, cox, coy, coz) }
  name=0
] dks dkt dku dkv dkw dkx dky dkz dla dlb dlc dld dle dlf dlg dlh dli dlj dlk dll
  dlm dln dlo dlp dlq dlr dls dlt dlu dlv dlw dlx dly dlz dma dmb dmc dmd dme dmf
  dmg dmh dmi dmj dmk dml dmm dmn dmo dmp dmq dmr dms dmt dmu dmv dmw dmx dmy dmz
  dna dnb dnc dnd dne dnf dng dnh dni dnj dnk dnl dnm dnn dno dnp dnq dnr dns dnt
  dnu dnv dnw dnx dny dnz doa dob doc dod doe dof dog doh doi doj dok dol dom don
  doo dop doq dor dos dot dou dov dow dox doy doz dpa
eqn: a:i32[64,256] b:f16[64,256,1600] c:f16[1600,1600] d:f16[64,256,25,64] e:f16[64,25,256,1]
  f:f16[64,25,256,256] g:f16[64,25,256,1] h:f16[64,256,25,64] i:f16[64,256,25,64]
  j:f16[] k:f16[64,25,256,256] l:f16[64,256,1600] m:f16[1600,4800] n:f32[64,256,1600]
  o:f32[64,256,1] p:f32[1,1,1600] q:f32[64,256,1] r:f32[64,256] s:f32[64,256] t:f32[64,256,1600]
  u:f32[64,256,1600] v:f16[64,256,6400] w:f16[6400,1600] x:f16[64,256,6400] y:f16[64,256,6400]
  z:f16[64,256,6400] ba:f16[64,256,6400] bb:f16[64,256,6400] bc:f16[64,256,1600]
  bd:f16[1600,6400] be:f32[64,256,1600] bf:f32[64,256,1] bg:f32[1,1,1600] bh:f32[64,256,1]
  bi:f32[64,256] bj:f32[64,256] bk:f32[64,256,1600] bl:f32[64,256,1600] bm:f16[64,256,1600]
  bn:f16[1600,1600] bo:f16[64,256,25,64] bp:f16[64,25,256,1] bq:f16[64,25,256,256]
  br:f16[64,25,256,1] bs:f16[64,256,25,64] bt:f16[64,256,25,64] bu:f16[] bv:f16[64,25,256,256]
  bw:f16[64,256,1600] bx:f16[1600,4800] by:f32[64,256,1600] bz:f32[64,256,1] ca:f32[1,1,1600]
  cb:f32[64,256,1] cc:f32[64,256] cd:f32[64,256] ce:f32[64,256,1600] cf:f32[64,256,1600]
  cg:f16[64,256,1024] ch:f16[64,256,50257] ci:f16[64,256,1600] cj:f16[1600,1600]
  ck:f16[64,256,25,64] cl:f16[64,25,256,1] cm:f16[64,25,256,256] cn:f16[64,25,256,1]
  co:f16[64,256,25,64] cp:f16[64,256,25,64] cq:f16[] cr:f16[64,25,256,256] cs:f16[64,256,1600]
  ct:f16[1600,4800] cu:f32[64,256,1600] cv:f32[64,256,1] cw:f32[1,1,1600] cx:f32[64,256,1]
  cy:f32[64,256] cz:f32[64,256] da:f32[64,256,1600] db:f32[64,256,1600] dc:f16[64,256,6400]
  dd:f16[6400,1600] de:f16[64,256,6400] df:f16[64,256,6400] dg:f16[64,256,6400] dh:f16[64,256,6400]
  di:f16[64,256,6400] dj:f16[64,256,1600] dk:f16[1600,6400] dl:f32[64,256,1600] dm:f32[64,256,1]
  dn:f32[1,1,1600] do:f32[64,256,1] dp:f32[64,256] dq:f32[64,256] dr:f32[64,256,1600]
  ds:f32[64,256,1600] dt:f16[64,256,1600] du:f16[1600,1600] dv:f16[64,256,25,64]
  dw:f16[64,25,256,1] dx:f16[64,25,256,256] dy:f16[64,25,256,1] dz:f16[64,256,25,64]
  ea:f16[64,256,25,64] eb:f16[] ec:f16[64,25,256,256] ed:f16[64,256,1600] ee:f16[1600,4800]
  ef:f32[64,256,1600] eg:f32[64,256,1] eh:f32[1,1,1600] ei:f32[64,256,1] ej:f32[64,256]
  ek:f32[64,256] el:f32[64,256,1600] em:f32[64,256,1600] en:f16[64,256,6400] eo:f16[6400,1600]
  ep:f16[64,256,6400] eq:f16[64,256,6400] er:f16[64,256,6400] es:f16[64,256,6400]
  et:f16[64,256,6400] eu:f16[64,256,1600] ev:f16[1600,6400] ew:f32[64,256,1600] ex:f32[64,256,1]
  ey:f32[1,1,1600] ez:f32[64,256,1] fa:f32[64,256] fb:f32[64,256] fc:f32[64,256,1600]
  fd:f32[64,256,1600] fe:f16[64,256,1600] ff:f16[1600,1600] fg:f16[64,256,25,64]
  fh:f16[64,25,256,1] fi:f16[64,25,256,256] fj:f16[64,25,256,1] fk:f16[64,256,25,64]
  fl:f16[64,256,25,64] fm:f16[] fn:f16[64,25,256,256] fo:f16[64,256,1600] fp:f16[1600,4800]
  fq:f32[64,256,1600] fr:f32[64,256,1] fs:f32[1,1,1600] ft:f32[64,256,1] fu:f32[64,256]
  fv:f32[64,256] fw:f32[64,256,1600] fx:f32[64,256,1600] fy:f16[64,256,6400] fz:f16[6400,1600]
  ga:f16[64,256,6400] gb:f16[64,256,6400] gc:f16[64,256,6400] gd:f16[64,256,6400]
  ge:f16[64,256,6400] gf:f16[64,256,1600] gg:f16[1600,6400] gh:f32[64,256,1600] gi:f32[64,256,1]
  gj:f32[1,1,1600] gk:f32[64,256,1] gl:f32[64,256] gm:f32[64,256] gn:f32[64,256,1600]
  go:f32[64,256,1600] gp:f16[64,256,1600] gq:f16[1600,1600] gr:f16[64,256,25,64]
  gs:f16[64,25,256,1] gt:f16[64,25,256,256] gu:f16[64,25,256,1] gv:f16[64,256,25,64]
  gw:f16[64,256,25,64] gx:f16[] gy:f16[64,25,256,256] gz:f16[64,256,1600] ha:f16[1600,4800]
  hb:f32[64,256,1600] hc:f32[64,256,1] hd:f32[1,1,1600] he:f32[64,256,1] hf:f32[64,256]
  hg:f32[64,256] hh:f32[64,256,1600] hi:f32[64,256,1600] hj:f16[64,256,6400] hk:f16[6400,1600]
  hl:f16[64,256,6400] hm:f16[64,256,6400] hn:f16[64,256,6400] ho:f16[64,256,6400]
  hp:f16[64,256,6400] hq:f16[64,256,1600] hr:f16[1600,6400] hs:f32[64,256,1600] ht:f32[64,256,1]
  hu:f32[1,1,1600] hv:f32[64,256,1] hw:f32[64,256] hx:f32[64,256] hy:f32[64,256,1600]
  hz:f32[64,256,1600] ia:f16[64,256,1600] ib:f16[64,256,6400] ic:f16[6400,1600] id:f16[64,256,6400]
  ie:f16[64,256,6400] if:f16[64,256,6400] ig:f16[64,256,6400] ih:f16[64,256,6400]
  ii:f16[64,256,1600] ij:f16[1600,6400] ik:f32[64,256,1600] il:f32[64,256,1] im:f32[1,1,1600]
  in:f32[64,256,1] io:f32[64,256] ip:f32[64,256] iq:f32[64,256,1600] ir:f32[64,256,1600]
  is:f16[64,256,1600] it:f16[1600,1600] iu:f16[64,256,25,64] iv:f16[64,25,256,1]
  iw:f16[64,25,256,256] ix:f16[64,25,256,1] iy:f16[64,256,25,64] iz:f16[64,256,25,64]
  ja:f16[] jb:f16[64,25,256,256] jc:f16[64,256,1600] jd:f16[1600,4800] je:f32[64,256,1600]
  jf:f32[64,256,1] jg:f32[1,1,1600] jh:f32[64,256,1] ji:f32[64,256] jj:f32[64,256]
  jk:f32[64,256,1600] jl:f32[64,256,1600] jm:f16[64,256,6400] jn:f16[6400,1600] jo:f16[64,256,6400]
  jp:f16[64,256,6400] jq:f16[64,256,6400] jr:f16[64,256,6400] js:f16[64,256,6400]
  jt:f16[64,256,1600] ju:f16[1600,6400] jv:f32[64,256,1600] jw:f32[64,256,1] jx:f32[1,1,1600]
  jy:f32[64,256,1] jz:f32[64,256] ka:f32[64,256] kb:f32[64,256,1600] kc:f32[64,256,1600]
  kd:f16[64,256,1600] ke:f16[1600,1600] kf:f16[64,256,25,64] kg:f16[64,25,256,1]
  kh:f16[64,25,256,256] ki:f16[64,25,256,1] kj:f16[64,256,25,64] kk:f16[64,256,25,64]
  kl:f16[] km:f16[64,25,256,256] kn:f16[64,256,1600] ko:f16[1600,4800] kp:f32[64,256,1600]
  kq:f32[64,256,1] kr:f32[1,1,1600] ks:f32[64,256,1] kt:f32[64,256] ku:f32[64,256]
  kv:f32[64,256,1600] kw:f32[64,256,1600] kx:f16[64,256,6400] ky:f16[6400,1600] kz:f16[64,256,6400]
  la:f16[64,256,6400] lb:f16[64,256,6400] lc:f16[64,256,6400] ld:f16[64,256,6400]
  le:f16[64,256,1600] lf:f16[1600,6400] lg:f32[64,256,1600] lh:f32[64,256,1] li:f32[1,1,1600]
  lj:f32[64,256,1] lk:f32[64,256] ll:f32[64,256] lm:f32[64,256,1600] ln:f32[64,256,1600]
  lo:f16[64,256,1600] lp:f16[1600,1600] lq:f16[64,256,25,64] lr:f16[64,25,256,1]
  ls:f16[64,25,256,256] lt:f16[64,25,256,1] lu:f16[64,256,25,64] lv:f16[64,256,25,64]
  lw:f16[] lx:f16[64,25,256,256] ly:f16[64,256,1600] lz:f16[1600,4800] ma:f32[64,256,1600]
  mb:f32[64,256,1] mc:f32[1,1,1600] md:f32[64,256,1] me:f32[64,256] mf:f32[64,256]
  mg:f32[64,256,1600] mh:f32[64,256,1600] mi:f16[64,256,6400] mj:f16[6400,1600] mk:f16[64,256,6400]
  ml:f16[64,256,6400] mm:f16[64,256,6400] mn:f16[64,256,6400] mo:f16[64,256,6400]
  mp:f16[64,256,1600] mq:f16[1600,6400] mr:f32[64,256,1600] ms:f32[64,256,1] mt:f32[1,1,1600]
  mu:f32[64,256,1] mv:f32[64,256] mw:f32[64,256] mx:f32[64,256,1600] my:f32[64,256,1600] = pipeline_marker[
  mark_type=end
  name=0
] mz na nb nc nd ne nf ng nh ni nj nk nl nm nn no np nq nr ns nt nu nv nw nx ny nz
  oa ob oc od oe of og oh oi oj ok ol om on oo op oq or os ot ou ov ow ox oy oz pa
  pb pc pd pe pf pg ph pi pj pk pl pm pn po pp pq pr ps pt pu pv pw px py pz qa qb
  qc qd qe qf qg qh qi qj qk ql qm qn qo qp qq qr qs qt qu qv qw qx qy qz ra rb rc
  rd re rf rg rh ri rj rk rl rm rn ro rp rq rr rs rt ru rv rw rx ry rz sa sb sc sd
  se sf sg sh si sj sk sl sm sn so sp sq sr ss st su sv sw sx sy sz ta tb tc td te
  tf tg th ti tj tk tl tm tn to tp tq tr ts tt tu tv tw tx ty tz ua ub uc ud ue uf
  ug uh ui uj uk ul um un uo up uq ur us ut uu uv uw ux uy uz va vb vc vd ve vf vg
  vh vi vj vk vl vm vn vo vp vq vr vs vt vu vv vw vx vy vz wa wb wc wd we wf wg wh
  wi wj wk wl wm wn wo wp wq wr ws wt wu wv ww wx wy wz xa xb xc xd xe xf xg xh xi
  xj xk xl xm xn xo xp xq xr xs xt xu xv xw xx xy xz ya yb yc yd ye yf yg yh yi yj
  yk yl ym yn yo yp yq yr ys yt yu yv yw yx yy yz za zb zc zd ze zf zg zh zi zj zk
  zl zm zn zo zp zq zr zs zt zu zv zw zx
input_var_mem_size
[wi, wh, g, f, c, b, e, d, i, h, k, j, m, l, s, r, o, n, q, p, dlm, dll, dlo, u, t, w, v, y, x, fu, ft, fq, fp, fs, fr, fw, fv, fy, fx, ga, fz, kw, kv, ks, kr, ku, kt, ky, kx, la, kz, lc, lb, py, px, pu, pt, pw, pv, qa, pz, qc, qb, qe, qd, uc, ub, ty, tx, ua, tz, ue, ud, ug, uf, ui, uh, uo, un, uk, uj, um, ul, uq, up, us, ur, uu, ut, va, uz, uw, uv, uy, ux, vc, vb, ve, vd, vg, vf, vm, vl, vi, vh, vk, vj, vo, vn, vq, vp, vs, vr]
[(50257, 1600), (1024, 1600), (1600,), (1600,), (4800, 1600), (4800,), (1600, 1600), (1600,), (1600,), (1600,), (6400, 1600), (6400,), (1600, 6400), (1600,), (1600,), (1600,), (4800, 1600), (4800,), (1600, 1600), (1600,), (64, 256), (64, 256), (64, 256), (1600,), (1600,), (6400, 1600), (6400,), (1600, 6400), (1600,), (1600,), (1600,), (4800, 1600), (4800,), (1600, 1600), (1600,), (1600,), (1600,), (6400, 1600), (6400,), (1600, 6400), (1600,), (1600,), (1600,), (4800, 1600), (4800,), (1600, 1600), (1600,), (1600,), (1600,), (6400, 1600), (6400,), (1600, 6400), (1600,), (1600,), (1600,), (4800, 1600), (4800,), (1600, 1600), (1600,), (1600,), (1600,), (6400, 1600), (6400,), (1600, 6400), (1600,), (1600,), (1600,), (4800, 1600), (4800,), (1600, 1600), (1600,), (1600,), (1600,), (6400, 1600), (6400,), (1600, 6400), (1600,), (1600,), (1600,), (4800, 1600), (4800,), (1600, 1600), (1600,), (1600,), (1600,), (6400, 1600), (6400,), (1600, 6400), (1600,), (1600,), (1600,), (4800, 1600), (4800,), (1600, 1600), (1600,), (1600,), (1600,), (6400, 1600), (6400,), (1600, 6400), (1600,), (1600,), (1600,), (4800, 1600), (4800,), (1600, 1600), (1600,), (1600,), (1600,), (6400, 1600), (6400,), (1600, 6400), (1600,)]
param_size: 0.3341268301010132 [GiB] 
jaxpr.eqns, len: 3
eqn: a:f16[64,256,1600] b:f16[1600] c:f16[1600] d:f16[4800,1600] e:f16[4800] f:i32[64,256]
  g:f16[1600,1600] h:f16[1600] i:f16[1600] j:f16[1600] k:f16[6400,1600] l:f16[6400]
  m:f16[1600,6400] n:f16[1600] o:f16[1600] p:f16[1600] q:f16[4800,1600] r:f16[4800]
  s:f16[1600,1600] t:f16[1600] u:f16[1600] v:f16[1600] w:f16[6400,1600] x:f16[6400]
  y:f16[1600,6400] z:f16[1600] ba:f16[1600] bb:f16[1600] bc:f16[4800,1600] bd:f16[4800]
  be:f16[1600,1600] bf:f16[1600] bg:f16[1600] bh:f16[1600] bi:f16[6400,1600] bj:f16[6400]
  bk:f16[1600,6400] bl:f16[1600] bm:f16[1600] bn:f16[1600] bo:f16[4800,1600] bp:f16[4800]
  bq:f16[1600,1600] br:f16[1600] bs:f16[1600] bt:f16[1600] bu:f16[6400,1600] bv:f16[6400]
  bw:f16[1600,6400] bx:f16[1600] by:f16[1600] bz:f16[1600] ca:f16[4800,1600] cb:f16[4800]
  cc:f16[1600,1600] cd:f16[1600] ce:f16[1600] cf:f16[1600] cg:f16[6400,1600] ch:f16[6400]
  ci:f16[1600,6400] cj:f16[1600] ck:f16[1600] cl:f16[1600] cm:f16[4800,1600] cn:f16[4800]
  co:f16[1600,1600] cp:f16[1600] cq:f16[1600] cr:f16[1600] cs:f16[6400,1600] ct:f16[6400]
  cu:f16[1600,6400] cv:f16[1600] cw:f16[1600] cx:f16[1600] cy:f16[4800,1600] cz:f16[4800]
  da:f16[1600,1600] db:f16[1600] dc:f16[1600] dd:f16[1600] de:f16[6400,1600] df:f16[6400]
  dg:f16[1600,6400] dh:f16[1600] di:f16[1600] dj:f16[1600] dk:f16[4800,1600] dl:f16[4800]
  dm:f16[1600,1600] dn:f16[1600] do:f16[1600] dp:f16[1600] dq:f16[6400,1600] dr:f16[6400]
  ds:f16[1600,6400] dt:f16[1600] du:f16[1600] dv:f16[1600] dw:f16[4800,1600] dx:f16[4800]
  dy:f16[1600,1600] dz:f16[1600] ea:f16[1600] eb:f16[1600] ec:f16[6400,1600] ed:f16[6400]
  ee:f16[1600,6400] ef:f16[1600] eg:f16[1600] eh:f16[1600] ei:f16[4800,1600] ej:f16[4800]
  ek:f16[1600,1600] el:f16[1600] em:f16[1600] en:f16[1600] eo:f16[6400,1600] ep:f16[6400]
  eq:f16[1600,6400] er:f16[1600] es:f16[1600] et:f16[1600] eu:f16[4800,1600] ev:f16[4800]
  ew:f16[1600,1600] ex:f16[1600] ey:f16[1600] ez:f16[1600] fa:f16[6400,1600] fb:f16[6400]
  fc:f16[1600,6400] fd:f16[1600] fe:f16[1600] ff:f16[1600] fg:f16[4800,1600] fh:f16[4800]
  fi:f16[1600,1600] fj:f16[1600] fk:f16[1600] fl:f16[1600] fm:f16[6400,1600] fn:f16[6400]
  fo:f16[1600,6400] fp:f16[1600] fq:f16[1600] fr:f16[1600] fs:f16[4800,1600] ft:f16[4800]
  fu:f16[1600,1600] fv:f16[1600] fw:f16[1600] fx:f16[1600] fy:f16[6400,1600] fz:f16[6400]
  ga:f16[1600,6400] gb:f16[1600] gc:f16[1600] gd:f16[1600] ge:f16[4800,1600] gf:f16[4800]
  gg:f16[1600,1600] gh:f16[1600] gi:f16[1600] gj:f16[1600] gk:f16[6400,1600] gl:f16[6400]
  gm:f16[1600,6400] gn:f16[1600] go:f16[1600] gp:f16[1600] gq:f16[4800,1600] gr:f16[4800]
  gs:f16[1600,1600] gt:f16[1600] gu:f16[1600] gv:f16[1600] gw:f16[6400,1600] gx:f16[6400]
  gy:f16[1600,6400] gz:f16[1600] ha:f16[1600] hb:f16[1600] hc:f16[4800,1600] hd:f16[4800]
  he:f16[1600,1600] hf:f16[1600] hg:f16[1600] hh:f16[1600] hi:f16[6400,1600] hj:f16[6400]
  hk:f16[1600,6400] hl:f16[1600] hm:f16[1600] hn:f16[1600] ho:f16[4800,1600] hp:f16[4800]
  hq:f16[1600,1600] hr:f16[1600] hs:f16[1600] ht:f16[1600] hu:f16[6400,1600] hv:f16[6400]
  hw:f16[1600,6400] hx:f16[1600] hy:f16[1600] hz:f16[1600] ia:f16[4800,1600] ib:f16[4800]
  ic:f16[1600,1600] id:f16[1600] ie:f16[1600] if:f16[1600] ig:f16[6400,1600] ih:f16[6400]
  ii:f16[1600,6400] ij:f16[1600] ik:f16[1600] il:f16[1600] im:f16[4800,1600] in:f16[4800]
  io:f16[1600,1600] ip:f16[1600] iq:f16[1600] ir:f16[1600] is:f16[6400,1600] it:f16[6400]
  iu:f16[1600,6400] iv:f16[1600] iw:f16[1600] ix:f16[1600] iy:f16[4800,1600] iz:f16[4800]
  ja:f16[1600,1600] jb:f16[1600] = pipeline_marker[mark_type=start name=1] jc jd
  je jf jg jh ji jj jk jl jm jn jo jp jq jr js jt ju jv jw jx jy jz ka kb kc kd ke
  kf kg kh ki kj kk kl km kn ko kp kq kr ks kt ku kv kw kx ky kz la lb lc ld le lf
  lg lh li lj lk ll lm ln lo lp lq lr ls lt lu lv lw lx ly lz ma mb mc md me mf mg
  mh mi mj mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd ne nf ng nh
  ni nj nk nl nm nn no np nq nr ns nt nu nv nw nx ny nz oa ob oc od oe of og oh oi
  oj ok ol om on oo op oq or os ot ou ov ow ox oy oz pa pb pc pd pe pf pg ph pi pj
  pk pl pm pn po pp pq pr ps pt pu pv pw px py pz qa qb qc qd qe qf qg qh qi qj qk
  ql qm qn qo qp qq qr qs qt qu qv qw qx qy qz ra rb rc rd re rf rg rh ri rj rk rl
  rm rn ro rp rq rr rs rt ru rv rw rx ry rz sa sb sc sd
eqn: a:f16[64,256,1600] b:f16[1600,1600] c:f16[64,256,25,64] d:f16[64,25,256,1] e:f16[64,25,256,256]
  f:f16[64,25,256,1] g:f16[64,256,25,64] h:f16[64,256,25,64] i:f16[] j:f16[64,25,256,256]
  k:f16[64,256,1600] l:f16[1600,4800] m:f32[64,256,1600] n:f32[64,256,1] o:f32[1,1,1600]
  p:f32[64,256,1] q:f32[64,256] r:f32[64,256] s:f32[64,256,1600] t:f32[64,256,1600]
  u:f16[64,256,6400] v:f16[6400,1600] w:f16[64,256,6400] x:f16[64,256,6400] y:f16[64,256,6400]
  z:f16[64,256,6400] ba:f16[64,256,6400] bb:f16[64,256,1600] bc:f16[1600,6400] bd:f32[64,256,1600]
  be:f32[64,256,1] bf:f32[1,1,1600] bg:f32[64,256,1] bh:f32[64,256] bi:f32[64,256]
  bj:f32[64,256,1600] bk:f32[64,256,1600] bl:f16[64,256,1600] bm:f16[1600,1600] bn:f16[64,256,25,64]
  bo:f16[64,25,256,1] bp:f16[64,25,256,256] bq:f16[64,25,256,1] br:f16[64,256,25,64]
  bs:f16[64,256,25,64] bt:f16[] bu:f16[64,25,256,256] bv:f16[64,256,1600] bw:f16[1600,4800]
  bx:f32[64,256,1600] by:f32[64,256,1] bz:f32[1,1,1600] ca:f32[64,256,1] cb:f32[64,256]
  cc:f32[64,256] cd:f32[64,256,1600] ce:f32[64,256,1600] cf:f16[64,256,6400] cg:f16[6400,1600]
  ch:f16[64,256,6400] ci:f16[64,256,6400] cj:f16[64,256,6400] ck:f16[64,256,6400]
  cl:f16[64,256,6400] cm:f16[64,256,1600] cn:f16[1600,6400] co:f32[64,256,1600] cp:f32[64,256,1]
  cq:f32[1,1,1600] cr:f32[64,256,1] cs:f32[64,256] ct:f32[64,256] cu:f32[64,256,1600]
  cv:f32[64,256,1600] cw:f16[64,256,1600] cx:f16[1600,1600] cy:f16[64,256,25,64]
  cz:f16[64,25,256,1] da:f16[64,25,256,256] db:f16[64,25,256,1] dc:f16[64,256,25,64]
  dd:f16[64,256,25,64] de:f16[] df:f16[64,25,256,256] dg:f16[64,256,1600] dh:f16[1600,4800]
  di:f32[64,256,1600] dj:f32[64,256,1] dk:f32[1,1,1600] dl:f32[64,256,1] dm:f32[64,256]
  dn:f32[64,256] do:f32[64,256,1600] dp:f32[64,256,1600] dq:f16[64,256,6400] dr:f16[6400,1600]
  ds:f16[64,256,6400] dt:f16[64,256,6400] du:f16[64,256,6400] dv:f16[64,256,6400]
  dw:f16[64,256,6400] dx:f16[64,256,1600] dy:f16[1600,6400] dz:f32[64,256,1600] ea:f32[64,256,1]
  eb:f32[1,1,1600] ec:f32[64,256,1] ed:f32[64,256] ee:f32[64,256] ef:f32[64,256,1600]
  eg:f32[64,256,1600] eh:f16[64,256,1600] ei:f16[1600,1600] ej:f16[64,256,25,64]
  ek:f16[64,25,256,1] el:f16[64,25,256,256] em:f16[64,25,256,1] en:f16[64,256,25,64]
  eo:f16[64,256,25,64] ep:f16[] eq:f16[64,25,256,256] er:f16[64,256,1600] es:f16[1600,4800]
  et:f32[64,256,1600] eu:f32[64,256,1] ev:f32[1,1,1600] ew:f32[64,256,1] ex:f32[64,256]
  ey:f32[64,256] ez:f32[64,256,1600] fa:f32[64,256,1600] fb:f16[64,256,1600] fc:f16[1600,1600]
  fd:f16[64,256,25,64] fe:f16[64,25,256,1] ff:f16[64,25,256,256] fg:f16[64,25,256,1]
  fh:f16[64,256,25,64] fi:f16[64,256,25,64] fj:f16[] fk:f16[64,25,256,256] fl:f16[64,256,1600]
  fm:f16[1600,4800] fn:f32[64,256,1600] fo:f32[64,256,1] fp:f32[1,1,1600] fq:f32[64,256,1]
  fr:f32[64,256] fs:f32[64,256] ft:f32[64,256,1600] fu:f32[64,256,1600] fv:f16[64,256,6400]
  fw:f16[6400,1600] fx:f16[64,256,6400] fy:f16[64,256,6400] fz:f16[64,256,6400] ga:f16[64,256,6400]
  gb:f16[64,256,6400] gc:f16[64,256,1600] gd:f16[1600,6400] ge:f32[64,256,1600] gf:f32[64,256,1]
  gg:f32[1,1,1600] gh:f32[64,256,1] gi:f32[64,256] gj:f32[64,256] gk:f32[64,256,1600]
  gl:f32[64,256,1600] gm:f16[64,256,1600] gn:f16[1600,1600] go:f16[64,256,25,64]
  gp:f16[64,25,256,1] gq:f16[64,25,256,256] gr:f16[64,25,256,1] gs:f16[64,256,25,64]
  gt:f16[64,256,25,64] gu:f16[] gv:f16[64,25,256,256] gw:f16[64,256,1600] gx:f16[1600,4800]
  gy:f32[64,256,1600] gz:f32[64,256,1] ha:f32[1,1,1600] hb:f32[64,256,1] hc:f32[64,256]
  hd:f32[64,256] he:f32[64,256,1600] hf:f32[64,256,1600] hg:f16[64,256,6400] hh:f16[6400,1600]
  hi:f16[64,256,6400] hj:f16[64,256,6400] hk:f16[64,256,6400] hl:f16[64,256,6400]
  hm:f16[64,256,6400] hn:f16[64,256,1600] ho:f16[1600,6400] hp:f32[64,256,1600] hq:f32[64,256,1]
  hr:f32[1,1,1600] hs:f32[64,256,1] ht:f32[64,256] hu:f32[64,256] hv:f32[64,256,1600]
  hw:f32[64,256,1600] hx:f16[64,256,1600] hy:f16[1600,1600] hz:f16[64,256,25,64]
  ia:f16[64,25,256,1] ib:f16[64,25,256,256] ic:f16[64,25,256,1] id:f16[64,256,25,64]
  ie:f16[64,256,25,64] if:f16[] ig:f16[64,25,256,256] ih:f16[64,256,1600] ii:f16[1600,4800]
  ij:f32[64,256,1600] ik:f32[64,256,1] il:f32[1,1,1600] im:f32[64,256,1] in:f32[64,256]
  io:f32[64,256] ip:f32[64,256,1600] iq:f32[64,256,1600] ir:f16[64,256,6400] is:f16[6400,1600]
  it:f16[64,256,6400] iu:f16[64,256,6400] iv:f16[64,256,6400] iw:f16[64,256,6400]
  ix:f16[64,256,6400] iy:f16[64,256,1600] iz:f16[1600,6400] ja:f32[64,256,1600] jb:f32[64,256,1]
  jc:f32[1,1,1600] jd:f32[64,256,1] je:f32[64,256] jf:f32[64,256] jg:f32[64,256,1600]
  jh:f32[64,256,1600] ji:f16[64,256,1600] jj:f16[1600,1600] jk:f16[64,256,25,64]
  jl:f16[64,25,256,1] jm:f16[64,25,256,256] jn:f16[64,25,256,1] jo:f16[64,256,25,64]
  jp:f16[64,256,25,64] jq:f16[] jr:f16[64,25,256,256] js:f16[64,256,1600] jt:f16[1600,4800]
  ju:f32[64,256,1600] jv:f32[64,256,1] jw:f32[1,1,1600] jx:f32[64,256,1] jy:f32[64,256]
  jz:f32[64,256] ka:f32[64,256,1600] kb:f32[64,256,1600] kc:f16[64,256,6400] kd:f16[6400,1600]
  ke:f16[64,256,6400] kf:f16[64,256,6400] kg:f16[64,256,6400] kh:f16[64,256,6400]
  ki:f16[64,256,6400] kj:f16[64,256,1600] kk:f16[1600,6400] kl:f32[64,256,1600] km:f32[64,256,1]
  kn:f32[1,1,1600] ko:f32[64,256,1] kp:f32[64,256] kq:f32[64,256] kr:f32[64,256,1600]
  ks:f32[64,256,1600] kt:f16[64,256,1600] ku:f16[1600,1600] kv:f16[64,256,25,64]
  kw:f16[64,25,256,1] kx:f16[64,25,256,256] ky:f16[64,25,256,1] kz:f16[64,256,25,64]
  la:f16[64,256,25,64] lb:f16[] lc:f16[64,25,256,256] ld:f16[64,256,1600] le:f16[1600,4800]
  lf:f32[64,256,1600] lg:f32[64,256,1] lh:f32[1,1,1600] li:f32[64,256,1] lj:f32[64,256]
  lk:f32[64,256] ll:f32[64,256,1600] lm:f32[64,256,1600] ln:f16[64,256,6400] lo:f16[6400,1600]
  lp:f16[64,256,6400] lq:f16[64,256,6400] lr:f16[64,256,6400] ls:f16[64,256,6400]
  lt:f16[64,256,6400] lu:f16[64,256,1600] lv:f16[1600,6400] lw:f32[64,256,1600] lx:f32[64,256,1]
  ly:f32[1,1,1600] lz:f32[64,256,1] ma:f32[64,256] mb:f32[64,256] mc:f32[64,256,1600]
  md:f32[64,256,1600] me:f16[64,256,1600] mf:f16[1600,1600] mg:f16[64,256,25,64]
  mh:f16[64,25,256,1] mi:f16[64,25,256,256] mj:f16[64,25,256,1] mk:f16[64,256,25,64]
  ml:f16[64,256,25,64] mm:f16[] mn:f16[64,25,256,256] mo:f16[64,256,1600] mp:f16[1600,4800]
  mq:f32[64,256,1600] mr:f32[64,256,1] ms:f32[1,1,1600] mt:f32[64,256,1] mu:f32[64,256]
  mv:f32[64,256] mw:f32[64,256,1600] mx:f32[64,256,1600] my:f16[64,256,6400] mz:f16[6400,1600]
  na:f16[64,256,6400] nb:f16[64,256,6400] nc:f16[64,256,6400] nd:f16[64,256,6400]
  ne:f16[64,256,6400] nf:f16[64,256,1600] ng:f16[1600,6400] nh:f32[64,256,1600] ni:f32[64,256,1]
  nj:f32[1,1,1600] nk:f32[64,256,1] nl:f32[64,256] nm:f32[64,256] nn:f32[64,256,1600]
  no:f32[64,256,1600] np:f16[64,256,1600] nq:f16[1600,1600] nr:f16[64,256,25,64]
  ns:f16[64,25,256,1] nt:f16[64,25,256,256] nu:f16[64,25,256,1] nv:f16[64,256,25,64]
  nw:f16[64,256,25,64] nx:f16[] ny:f16[64,25,256,256] nz:f16[64,256,1600] oa:f16[1600,4800]
  ob:f32[64,256,1600] oc:f32[64,256,1] od:f32[1,1,1600] oe:f32[64,256,1] of:f32[64,256]
  og:f32[64,256] oh:f32[64,256,1600] oi:f32[64,256,1600] oj:f16[64,256,6400] ok:f16[6400,1600]
  ol:f16[64,256,6400] om:f16[64,256,6400] on:f16[64,256,6400] oo:f16[64,256,6400]
  op:f16[64,256,6400] oq:f16[64,256,1600] or:f16[1600,6400] os:f32[64,256,1600] ot:f32[64,256,1]
  ou:f32[1,1,1600] ov:f32[64,256,1] ow:f32[64,256] ox:f32[64,256] oy:f32[64,256,1600]
  oz:f32[64,256,1600] pa:f16[64,256,1600] pb:f16[1600,1600] pc:f16[64,256,25,64]
  pd:f16[64,25,256,1] pe:f16[64,25,256,256] pf:f16[64,25,256,1] pg:f16[64,256,25,64]
  ph:f16[64,256,25,64] pi:f16[] pj:f16[64,25,256,256] pk:f16[64,256,1600] pl:f16[1600,4800]
  pm:f32[64,256,1600] pn:f32[64,256,1] po:f32[1,1,1600] pp:f32[64,256,1] pq:f32[64,256]
  pr:f32[64,256] ps:f32[64,256,1600] pt:f32[64,256,1600] pu:f16[64,256,6400] pv:f16[6400,1600]
  pw:f16[64,256,6400] px:f16[64,256,6400] py:f16[64,256,6400] pz:f16[64,256,6400]
  qa:f16[64,256,6400] qb:f16[64,256,1600] qc:f16[1600,6400] qd:f32[64,256,1600] qe:f32[64,256,1]
  qf:f32[1,1,1600] qg:f32[64,256,1] qh:f32[64,256] qi:f32[64,256] qj:f32[64,256,1600]
  qk:f32[64,256,1600] ql:f16[64,256,1600] qm:f16[1600,1600] qn:f16[64,256,25,64]
  qo:f16[64,25,256,1] qp:f16[64,25,256,256] qq:f16[64,25,256,1] qr:f16[64,256,25,64]
  qs:f16[64,256,25,64] qt:f16[] qu:f16[64,25,256,256] qv:f16[64,256,1600] qw:f16[1600,4800]
  qx:f32[64,256,1600] qy:f32[64,256,1] qz:f32[1,1,1600] ra:f32[64,256,1] rb:f32[64,256]
  rc:f32[64,256] rd:f32[64,256,1600] re:f32[64,256,1600] rf:f16[64,256,6400] rg:f16[6400,1600]
  rh:f16[64,256,6400] ri:f16[64,256,6400] rj:f16[64,256,6400] rk:f16[64,256,6400]
  rl:f16[64,256,6400] rm:f16[64,256,1600] rn:f16[1600,6400] ro:f32[64,256,1600] rp:f32[64,256,1]
  rq:f32[1,1,1600] rr:f32[64,256,1] rs:f32[64,256] rt:f32[64,256] ru:f32[64,256,1600]
  rv:f32[64,256,1600] rw:f16[64,256,1600] rx:f16[1600,1600] ry:f16[64,256,25,64]
  rz:f16[64,25,256,1] sa:f16[64,25,256,256] sb:f16[64,25,256,1] sc:f16[64,256,25,64]
  sd:f16[64,256,25,64] se:f16[] sf:f16[64,25,256,256] sg:f16[64,256,1600] sh:f16[1600,4800]
  si:f32[64,256,1600] sj:f32[64,256,1] sk:f32[1,1,1600] sl:f32[64,256,1] sm:f32[64,256]
  sn:f32[64,256] so:f32[64,256,1600] sp:f32[64,256,1600] sq:f16[64,256,6400] sr:f16[6400,1600]
  ss:f16[64,256,6400] st:f16[64,256,6400] su:f16[64,256,6400] sv:f16[64,256,6400]
  sw:f16[64,256,6400] sx:f16[64,256,1600] sy:f16[1600,6400] sz:f32[64,256,1600] ta:f32[64,256,1]
  tb:f32[1,1,1600] tc:f32[64,256,1] td:f32[64,256] te:f32[64,256] tf:f32[64,256,1600]
  tg:f32[64,256,1600] th:f16[64,256,1600] ti:f16[1600,1600] tj:f16[64,256,25,64]
  tk:f16[64,25,256,1] tl:f16[64,25,256,256] tm:f16[64,25,256,1] tn:f16[64,256,25,64]
  to:f16[64,256,25,64] tp:f16[] tq:f16[64,25,256,256] tr:f16[64,256,1600] ts:f16[1600,4800]
  tt:f32[64,256,1600] tu:f32[64,256,1] tv:f32[1,1,1600] tw:f32[64,256,1] tx:f32[64,256]
  ty:f32[64,256] tz:f32[64,256,1600] ua:f32[64,256,1600] ub:f16[64,256,6400] uc:f16[6400,1600]
  ud:f16[64,256,6400] ue:f16[64,256,6400] uf:f16[64,256,6400] ug:f16[64,256,6400]
  uh:f16[64,256,6400] ui:f16[64,256,1600] uj:f16[1600,6400] uk:f32[64,256,1600] ul:f32[64,256,1]
  um:f32[1,1,1600] un:f32[64,256,1] uo:f32[64,256] up:f32[64,256] uq:f32[64,256,1600]
  ur:f32[64,256,1600] us:f16[64,256,1600] ut:f16[1600,1600] uu:f16[64,256,25,64]
  uv:f16[64,25,256,1] uw:f16[64,25,256,256] ux:f16[64,25,256,1] uy:f16[64,256,25,64]
  uz:f16[64,256,25,64] va:f16[] vb:f16[64,25,256,256] vc:f16[64,256,1600] vd:f16[1600,4800]
  ve:f32[64,256,1600] vf:f32[64,256,1] vg:f32[1,1,1600] vh:f32[64,256,1] vi:f32[64,256]
  vj:f32[64,256] vk:f32[64,256,1600] vl:f32[64,256,1600] vm:f16[64,256,6400] vn:f16[6400,1600]
  vo:f16[64,256,6400] vp:f16[64,256,6400] vq:f16[64,256,6400] vr:f16[64,256,6400]
  vs:f16[64,256,6400] vt:f16[64,256,1600] vu:f16[1600,6400] vv:f32[64,256,1600] vw:f32[64,256,1]
  vx:f32[1,1,1600] vy:f32[64,256,1] vz:f32[64,256] wa:f32[64,256] wb:f32[64,256,1600]
  wc:f32[64,256,1600] wd:f16[64,256,1600] we:f16[64,256,1600] wf:f16[1600,1600] wg:f16[64,256,25,64]
  wh:f16[64,25,256,1] wi:f16[64,25,256,256] wj:f16[64,25,256,1] wk:f16[64,256,25,64]
  wl:f16[64,256,25,64] wm:f16[] wn:f16[64,25,256,256] wo:f16[64,256,1600] wp:f16[1600,4800]
  wq:f32[64,256,1600] wr:f32[64,256,1] ws:f32[1,1,1600] wt:f32[64,256,1] wu:f32[64,256]
  wv:f32[64,256] ww:f32[64,256,1600] wx:f32[64,256,1600] wy:f16[64,256,6400] wz:f16[6400,1600]
  xa:f16[64,256,6400] xb:f16[64,256,6400] xc:f16[64,256,6400] xd:f16[64,256,6400]
  xe:f16[64,256,6400] xf:f16[64,256,1600] xg:f16[1600,6400] xh:f32[64,256,1600] xi:f32[64,256,1]
  xj:f32[1,1,1600] xk:f32[64,256,1] xl:f32[64,256] xm:f32[64,256] xn:f32[64,256,1600]
  xo:f32[64,256,1600] xp:f16[64,256,1600] xq:f16[1600,1600] xr:f16[64,256,25,64]
  xs:f16[64,25,256,1] xt:f16[64,25,256,256] xu:f16[64,25,256,1] xv:f16[64,256,25,64]
  xw:f16[64,256,25,64] xx:f16[] xy:f16[64,25,256,256] xz:f16[64,256,1600] ya:f16[1600,4800]
  yb:f32[64,256,1600] yc:f32[64,256,1] yd:f32[1,1,1600] ye:f32[64,256,1] yf:f32[64,256]
  yg:f32[64,256] yh:f32[64,256,1600] yi:f32[64,256,1600] yj:f16[64,256,6400] yk:f16[6400,1600]
  yl:f16[64,256,6400] ym:f16[64,256,6400] yn:f16[64,256,6400] yo:f16[64,256,6400]
  yp:f16[64,256,6400] yq:f16[64,256,1600] yr:f16[1600,6400] ys:f32[64,256,1600] yt:f32[64,256,1]
  yu:f32[1,1,1600] yv:f32[64,256,1] yw:f32[64,256] yx:f32[64,256] yy:f32[64,256,1600]
  yz:f32[64,256,1600] za:f16[64,256,1600] zb:f16[1600,1600] zc:f16[64,256,25,64]
  zd:f16[64,25,256,1] ze:f16[64,25,256,256] zf:f16[64,25,256,1] zg:f16[64,256,25,64]
  zh:f16[64,256,25,64] zi:f16[] zj:f16[64,25,256,256] zk:f16[64,256,1600] zl:f16[1600,4800]
  zm:f32[64,256,1600] zn:f32[64,256,1] zo:f32[1,1,1600] zp:f32[64,256,1] zq:f32[64,256]
  zr:f32[64,256] zs:f32[64,256,1600] zt:f32[64,256,1600] zu:f16[64,256,6400] zv:f16[6400,1600]
  zw:f16[64,256,6400] zx:f16[64,256,6400] zy:f16[64,256,6400] zz:f16[64,256,6400]
  baa:f16[64,256,6400] bab:f16[64,256,1600] bac:f16[1600,6400] bad:f32[64,256,1600]
  bae:f32[64,256,1] baf:f32[1,1,1600] bag:f32[64,256,1] bah:f32[64,256] bai:f32[64,256]
  baj:f32[64,256,1600] bak:f32[64,256,1600] bal:f16[64,256,1600] bam:f16[1600,1600]
  ban:f16[64,256,25,64] bao:f16[64,25,256,1] bap:f16[64,25,256,256] baq:f16[64,25,256,1]
  bar:f16[64,256,25,64] bas:f16[64,256,25,64] bat:f16[] bau:f16[64,25,256,256] bav:f16[64,256,1600]
  baw:f16[1600,4800] bax:f32[64,256,1600] bay:f32[64,256,1] baz:f32[1,1,1600] bba:f32[64,256,1]
  bbb:f32[64,256] bbc:f32[64,256] bbd:f32[64,256,1600] bbe:f32[64,256,1600] bbf:f16[64,256,6400]
  bbg:f16[6400,1600] bbh:f16[64,256,6400] bbi:f16[64,256,6400] bbj:f16[64,256,6400]
  bbk:f16[64,256,6400] bbl:f16[64,256,6400] bbm:f16[64,256,1600] bbn:f16[1600,6400]
  bbo:f32[64,256,1600] bbp:f32[64,256,1] bbq:f32[1,1,1600] bbr:f32[64,256,1] bbs:f32[64,256]
  bbt:f32[64,256] bbu:f32[64,256,1600] bbv:f32[64,256,1600] = named_call[
  call_jaxpr={ lambda ; bbw:f16[64,256,1600] bbx:f16[1600] bby:f16[1600] bbz:f16[4800,1600]
      bca:f16[4800] bcb:i32[64,256] bcc:f16[1600,1600] bcd:f16[1600] bce:f16[1600]
      bcf:f16[1600] bcg:f16[6400,1600] bch:f16[6400] bci:f16[1600,6400] bcj:f16[1600]
      bck:f16[1600] bcl:f16[1600] bcm:f16[4800,1600] bcn:f16[4800] bco:f16[1600,1600]
      bcp:f16[1600] bcq:f16[1600] bcr:f16[1600] bcs:f16[6400,1600] bct:f16[6400]
      bcu:f16[1600,6400] bcv:f16[1600] bcw:f16[1600] bcx:f16[1600] bcy:f16[4800,1600]
      bcz:f16[4800] bda:f16[1600,1600] bdb:f16[1600] bdc:f16[1600] bdd:f16[1600]
      bde:f16[6400,1600] bdf:f16[6400] bdg:f16[1600,6400] bdh:f16[1600] bdi:f16[1600]
      bdj:f16[1600] bdk:f16[4800,1600] bdl:f16[4800] bdm:f16[1600,1600] bdn:f16[1600]
      bdo:f16[1600] bdp:f16[1600] bdq:f16[6400,1600] bdr:f16[6400] bds:f16[1600,6400]
      bdt:f16[1600] bdu:f16[1600] bdv:f16[1600] bdw:f16[4800,1600] bdx:f16[4800]
      bdy:f16[1600,1600] bdz:f16[1600] bea:f16[1600] beb:f16[1600] bec:f16[6400,1600]
      bed:f16[6400] bee:f16[1600,6400] bef:f16[1600] beg:f16[1600] beh:f16[1600]
      bei:f16[4800,1600] bej:f16[4800] bek:f16[1600,1600] bel:f16[1600] bem:f16[1600]
      ben:f16[1600] beo:f16[6400,1600] bep:f16[6400] beq:f16[1600,6400] ber:f16[1600]
      bes:f16[1600] bet:f16[1600] beu:f16[4800,1600] bev:f16[4800] bew:f16[1600,1600]
      bex:f16[1600] bey:f16[1600] bez:f16[1600] bfa:f16[6400,1600] bfb:f16[6400]
      bfc:f16[1600,6400] bfd:f16[1600] bfe:f16[1600] bff:f16[1600] bfg:f16[4800,1600]
      bfh:f16[4800] bfi:f16[1600,1600] bfj:f16[1600] bfk:f16[1600] bfl:f16[1600]
      bfm:f16[6400,1600] bfn:f16[6400] bfo:f16[1600,6400] bfp:f16[1600] bfq:f16[1600]
      bfr:f16[1600] bfs:f16[4800,1600] bft:f16[4800] bfu:f16[1600,1600] bfv:f16[1600]
      bfw:f16[1600] bfx:f16[1600] bfy:f16[6400,1600] bfz:f16[6400] bga:f16[1600,6400]
      bgb:f16[1600] bgc:f16[1600] bgd:f16[1600] bge:f16[4800,1600] bgf:f16[4800]
      bgg:f16[1600,1600] bgh:f16[1600] bgi:f16[1600] bgj:f16[1600] bgk:f16[6400,1600]
      bgl:f16[6400] bgm:f16[1600,6400] bgn:f16[1600] bgo:f16[1600] bgp:f16[1600]
      bgq:f16[4800,1600] bgr:f16[4800] bgs:f16[1600,1600] bgt:f16[1600] bgu:f16[1600]
      bgv:f16[1600] bgw:f16[6400,1600] bgx:f16[6400] bgy:f16[1600,6400] bgz:f16[1600]
      bha:f16[1600] bhb:f16[1600] bhc:f16[4800,1600] bhd:f16[4800] bhe:f16[1600,1600]
      bhf:f16[1600] bhg:f16[1600] bhh:f16[1600] bhi:f16[6400,1600] bhj:f16[6400]
      bhk:f16[1600,6400] bhl:f16[1600] bhm:f16[1600] bhn:f16[1600] bho:f16[4800,1600]
      bhp:f16[4800] bhq:f16[1600,1600] bhr:f16[1600] bhs:f16[1600] bht:f16[1600]
      bhu:f16[6400,1600] bhv:f16[6400] bhw:f16[1600,6400] bhx:f16[1600] bhy:f16[1600]
      bhz:f16[1600] bia:f16[4800,1600] bib:f16[4800] bic:f16[1600,1600] bid:f16[1600]
      bie:f16[1600] bif:f16[1600] big:f16[6400,1600] bih:f16[6400] bii:f16[1600,6400]
      bij:f16[1600] bik:f16[1600] bil:f16[1600] bim:f16[4800,1600] bin:f16[4800]
      bio:f16[1600,1600] bip:f16[1600] biq:f16[1600] bir:f16[1600] bis:f16[6400,1600]
      bit:f16[6400] biu:f16[1600,6400] biv:f16[1600] biw:f16[1600] bix:f16[1600]
      biy:f16[4800,1600] biz:f16[4800] bja:f16[1600,1600] bjb:f16[1600] bjc:f16[1600]
      bjd:f16[1600] bje:f16[6400,1600] bjf:f16[6400] bjg:f16[1600,6400] bjh:f16[1600]
      bji:f16[1600] bjj:f16[1600] bjk:f16[4800,1600] bjl:f16[4800] bjm:f16[1600,1600]
      bjn:f16[1600] bjo:f16[1600] bjp:f16[1600] bjq:f16[6400,1600] bjr:f16[6400]
      bjs:f16[1600,6400] bjt:f16[1600] bju:f16[1600] bjv:f16[1600] bjw:f16[4800,1600]
      bjx:f16[4800] bjy:f16[1600,1600] bjz:f16[1600] bka:f16[1600] bkb:f16[1600]
      bkc:f16[6400,1600] bkd:f16[6400] bke:f16[1600,6400] bkf:f16[1600] bkg:f16[1600]
      bkh:f16[1600] bki:f16[4800,1600] bkj:f16[4800] bkk:f16[1600,1600] bkl:f16[1600]
      bkm:f16[1600] bkn:f16[1600] bko:f16[6400,1600] bkp:f16[6400] bkq:f16[1600,6400]
      bkr:f16[1600] bks:f16[1600] bkt:f16[1600] bku:f16[4800,1600] bkv:f16[4800]
      bkw:f16[1600,1600] bkx:f16[1600]. let
      bky:f16[64,256,1600] bkz:f16[64,256,1600] bla:f16[1600,1600] blb:f16[64,256,25,64]
        blc:f16[64,25,256,1] bld:f16[64,25,256,256] ble:f16[64,25,256,1] blf:f16[64,256,25,64]
        blg:f16[64,256,25,64] blh:f16[] bli:f16[64,25,256,256] blj:f16[64,256,1600]
        blk:f16[1600,4800] bll:f32[64,256,1600] blm:f32[64,256,1] bln:f32[1,1,1600]
        blo:f32[64,256,1] blp:f32[64,256] blq:f32[64,256] blr:f32[64,256,1600] bls:f32[64,256,1600]
        blt:f16[64,256,6400] blu:f16[6400,1600] blv:f16[64,256,6400] blw:f16[64,256,6400]
        blx:f16[64,256,6400] bly:f16[64,256,6400] blz:f16[64,256,6400] bma:f16[64,256,1600]
        bmb:f16[1600,6400] bmc:f32[64,256,1600] bmd:f32[64,256,1] bme:f32[1,1,1600]
        bmf:f32[64,256,1] bmg:f32[64,256] bmh:f32[64,256] bmi:f32[64,256,1600] bmj:f32[64,256,1600]
        bmk:f16[64,256,1600] bml:f16[1600,1600] bmm:f16[64,256,25,64] bmn:f16[64,25,256,1]
        bmo:f16[64,25,256,256] bmp:f16[64,25,256,1] bmq:f16[64,256,25,64] bmr:f16[64,256,25,64]
        bms:f16[] bmt:f16[64,25,256,256] bmu:f16[64,256,1600] bmv:f16[1600,4800]
        bmw:f32[64,256,1600] bmx:f32[64,256,1] bmy:f32[1,1,1600] bmz:f32[64,256,1]
        bna:f32[64,256] bnb:f32[64,256] bnc:f32[64,256,1600] bnd:f32[64,256,1600]
        bne:f16[64,256,6400] bnf:f16[6400,1600] bng:f16[64,256,6400] bnh:f16[64,256,6400]
        bni:f16[64,256,6400] bnj:f16[64,256,6400] bnk:f16[64,256,6400] bnl:f16[64,256,1600]
        bnm:f16[1600,6400] bnn:f32[64,256,1600] bno:f32[64,256,1] bnp:f32[1,1,1600]
        bnq:f32[64,256,1] bnr:f32[64,256] bns:f32[64,256] bnt:f32[64,256,1600] bnu:f32[64,256,1600]
        bnv:f16[64,256,1600] bnw:f16[1600,1600] bnx:f16[64,256,25,64] bny:f16[64,25,256,1]
        bnz:f16[64,25,256,256] boa:f16[64,25,256,1] bob:f16[64,256,25,64] boc:f16[64,256,25,64]
        bod:f16[] boe:f16[64,25,256,256] bof:f16[64,256,1600] bog:f16[1600,4800]
        boh:f32[64,256,1600] boi:f32[64,256,1] boj:f32[1,1,1600] bok:f32[64,256,1]
        bol:f32[64,256] bom:f32[64,256] bon:f32[64,256,1600] boo:f32[64,256,1600]
        bop:f16[64,256,6400] boq:f16[6400,1600] bor:f16[64,256,6400] bos:f16[64,256,6400]
        bot:f16[64,256,6400] bou:f16[64,256,6400] bov:f16[64,256,6400] bow:f16[64,256,1600]
        box:f16[1600,6400] boy:f32[64,256,1600] boz:f32[64,256,1] bpa:f32[1,1,1600]
        bpb:f32[64,256,1] bpc:f32[64,256] bpd:f32[64,256] bpe:f32[64,256,1600] bpf:f32[64,256,1600]
        bpg:f16[64,256,1600] bph:f16[1600,1600] bpi:f16[64,256,25,64] bpj:f16[64,25,256,1]
        bpk:f16[64,25,256,256] bpl:f16[64,25,256,1] bpm:f16[64,256,25,64] bpn:f16[64,256,25,64]
        bpo:f16[] bpp:f16[64,25,256,256] bpq:f16[64,256,1600] bpr:f16[1600,4800]
        bps:f32[64,256,1600] bpt:f32[64,256,1] bpu:f32[1,1,1600] bpv:f32[64,256,1]
        bpw:f32[64,256] bpx:f32[64,256] bpy:f32[64,256,1600] bpz:f32[64,256,1600] = named_call[
        call_jaxpr={ lambda ; bqa:f16[64,256,1600] bqb:f16[1600] bqc:f16[1600] bqd:f16[4800,1600]
            bqe:f16[4800] bqf:i32[64,256] bqg:f16[1600,1600] bqh:f16[1600] bqi:f16[1600]
            bqj:f16[1600] bqk:f16[6400,1600] bql:f16[6400] bqm:f16[1600,6400] bqn:f16[1600]
            bqo:f16[1600] bqp:f16[1600] bqq:f16[4800,1600] bqr:f16[4800] bqs:f16[1600,1600]
            bqt:f16[1600] bqu:f16[1600] bqv:f16[1600] bqw:f16[6400,1600] bqx:f16[6400]
            bqy:f16[1600,6400] bqz:f16[1600] bra:f16[1600] brb:f16[1600] brc:f16[4800,1600]
            brd:f16[4800] bre:f16[1600,1600] brf:f16[1600] brg:f16[1600] brh:f16[1600]
            bri:f16[6400,1600] brj:f16[6400] brk:f16[1600,6400] brl:f16[1600] brm:f16[1600]
            brn:f16[1600] bro:f16[4800,1600] brp:f16[4800] brq:f16[1600,1600] brr:f16[1600]. let
            brs:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bqa
            brt:f32[64,256] = reduce_sum[axes=(2,)] brs
            bru:f32[64,256] = div brt 1600.0
            brv:f32[64,256,1600] = integer_pow[y=2] brs
            brw:f32[64,256,1600] = integer_pow[y=1] brs
            brx:f32[64,256,1600] = mul 2.0 brw
            bry:f32[64,256] = reduce_sum[axes=(2,)] brv
            brz:f32[64,256] = div bry 1600.0
            bsa:f32[64,256] = integer_pow[y=2] bru
            bsb:f32[64,256] = integer_pow[y=1] bru
            bsc:f32[64,256] = mul 2.0 bsb
            bsd:f32[64,256] = sub brz bsa
            bse:f32[64,256] = max 0.0 bsd
            bsf:bool[64,256] = eq bsd bse
            bsg:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            bsh:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 0.0
            bsi:f32[64,256] = select_n bsf bsh bsg
            bsj:bool[64,256] = eq 0.0 bse
            bsk:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 2.0
            bsl:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            bsm:f32[64,256] = select_n bsj bsl bsk
            bsn:f32[64,256] = div bsi bsm
            bso:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] bru
            bsp:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] bse
            bsq:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bqa
            bsr:f32[64,256,1600] = sub bsq bso
            bss:f32[64,256,1] = add bsp 9.999999747378752e-06
            bst:f32[64,256,1] = rsqrt bss
            bsu:f32[64,256,1] = div bst bss
            bsv:f32[64,256,1] = mul -0.5 bsu
            bsw:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] bqb
            bsx:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bsw
            bsy:f32[64,256,1600] = mul bst bsx
            bsz:f32[64,256,1600] = mul bsr bsy
            bta:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] bqc
            btb:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bta
            btc:f32[64,256,1600] = add bsz btb
            btd:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] btc
            bte:i32[1024] = iota[dimension=0 dtype=int32 shape=(1024,)] 
            btf:i32[1,1024] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 1024)
            ] bte
            btg:i32[1,1024,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(1, 1024, 1)
            ] btf
            bth:i32[1,1,1024] = broadcast_in_dim[
              broadcast_dimensions=(0, 2)
              shape=(1, 1, 1024)
            ] btf
            bti:bool[1,1024,1024] = ge btg bth
            btj:bool[1,1,1024,1024] = broadcast_in_dim[
              broadcast_dimensions=(0, 2, 3)
              shape=(1, 1, 1024, 1024)
            ] bti
            btk:f16[1600,4800] = transpose[permutation=(1, 0)] bqd
            btl:f16[64,256,4800] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] btd btk
            btm:f16[1,1,4800] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 4800)
            ] bqe
            btn:f16[64,256,4800] = add btl btm
            bto:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 1600)
              start_indices=(0, 0, 0)
              strides=None
            ] btn
            btp:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 3200)
              start_indices=(0, 0, 1600)
              strides=None
            ] btn
            btq:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 4800)
              start_indices=(0, 0, 3200)
              strides=None
            ] btn
            btr:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] bto
            bts:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] btp
            btt:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] btq
            btu:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
            btv:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
            btw:i32[2] = concatenate[dimension=0] btu btv
            btx:bool[1,1,256,256] = gather[
              dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2, 3), collapsed_slice_dims=(), start_index_map=(2, 3))
              fill_value=None
              indices_are_sorted=True
              mode=GatherScatterMode.PROMISE_IN_BOUNDS
              slice_sizes=(1, 1, 256, 256)
              unique_indices=True
            ] btj btw
            bty:bool[1,256,256] = squeeze[dimensions=(0,)] btx
            btz:bool[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(64, 1, 256, 256)
            ] bty
            bua:i32[64,1,1,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 3)
              shape=(64, 1, 1, 256)
            ] bqf
            bub:i32[64,1,256] = squeeze[dimensions=(2,)] bua
            buc:i32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 3)
              shape=(64, 1, 256, 256)
            ] bub
            bud:bool[64,1,256,256] = ne buc 0
            bue:bool[64,1,256,256] = and bud btz
            buf:f32[64,1,256,256] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bue
            bug:bool[64,1,256,256] = gt buf 0.0
            buh:f32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 1, 256, 256)
            ] 0.0
            bui:f16[64,1,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] buh
            buj:f32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 1, 256, 256)
            ] -10000.0
            buk:f16[64,1,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] buj
            bul:f16[64,1,256,256] = select_n bug buk bui
            bum:f32[] = sqrt 64.0
            bun:f16[] = convert_element_type[new_dtype=float16 weak_type=False] bum
            buo:f16[64,256,25,64] = div btr bun
            bup:f16[64,25,256,256] = dot_general[
              dimension_numbers=(((3,), (3,)), ((0, 2), (0, 2)))
              precision=None
              preferred_element_type=None
            ] buo bts
            buq:f16[64,25,256,256] = add bup bul
            bur:f16[64,25,256] = reduce_max[axes=(3,)] buq
            bus:f16[64,25,256,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 1)
            ] bur
            but:f16[64,25,256,1] = stop_gradient bus
            buu:f16[64,25,256,256] = sub buq but
            buv:f16[64,25,256,256] = exp buu
            buw:f32[64,25,256,256] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] buv
            bux:f32[64,25,256] = reduce_sum[axes=(3,)] buw
            buy:f32[64,25,256,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 1)
            ] bux
            buz:f16[64,25,256,1] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] buy
            bva:f16[64,25,256,256] = div buv buz
            bvb:f16[64,25,256,1] = integer_pow[y=-2] buz
            bvc:f16[64,25,64,256] = dot_general[
              dimension_numbers=(((1,), (3,)), ((0, 2), (0, 1)))
              precision=None
              preferred_element_type=None
            ] btt bva
            bvd:f16[64,256,25,64] = transpose[permutation=(0, 3, 1, 2)] bvc
            bve:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] bvd
            bvf:f16[1600,1600] = transpose[permutation=(1, 0)] bqg
            bvg:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] bve bvf
            bvh:f16[1,1,1600] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 1600)
            ] bqh
            bvi:f16[64,256,1600] = add bvg bvh
            bvj:f16[64,256,1600] = add bvi bqa
            bvk:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bvj
            bvl:f32[64,256] = reduce_sum[axes=(2,)] bvk
            bvm:f32[64,256] = div bvl 1600.0
            bvn:f32[64,256,1600] = integer_pow[y=2] bvk
            bvo:f32[64,256,1600] = integer_pow[y=1] bvk
            bvp:f32[64,256,1600] = mul 2.0 bvo
            bvq:f32[64,256] = reduce_sum[axes=(2,)] bvn
            bvr:f32[64,256] = div bvq 1600.0
            bvs:f32[64,256] = integer_pow[y=2] bvm
            bvt:f32[64,256] = integer_pow[y=1] bvm
            bvu:f32[64,256] = mul 2.0 bvt
            bvv:f32[64,256] = sub bvr bvs
            bvw:f32[64,256] = max 0.0 bvv
            bvx:bool[64,256] = eq bvv bvw
            bvy:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            bvz:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 0.0
            bwa:f32[64,256] = select_n bvx bvz bvy
            bwb:bool[64,256] = eq 0.0 bvw
            bwc:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 2.0
            bwd:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            bwe:f32[64,256] = select_n bwb bwd bwc
            bwf:f32[64,256] = div bwa bwe
            bwg:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] bvm
            bwh:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] bvw
            bwi:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bvj
            bwj:f32[64,256,1600] = sub bwi bwg
            bwk:f32[64,256,1] = add bwh 9.999999747378752e-06
            bwl:f32[64,256,1] = rsqrt bwk
            bwm:f32[64,256,1] = div bwl bwk
            bwn:f32[64,256,1] = mul -0.5 bwm
            bwo:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] bqi
            bwp:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bwo
            bwq:f32[64,256,1600] = mul bwl bwp
            bwr:f32[64,256,1600] = mul bwj bwq
            bws:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] bqj
            bwt:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bws
            bwu:f32[64,256,1600] = add bwr bwt
            bwv:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bwu
            bww:f16[1600,6400] = transpose[permutation=(1, 0)] bqk
            bwx:f16[64,256,6400] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] bwv bww
            bwy:f16[1,1,6400] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 6400)
            ] bql
            bwz:f16[64,256,6400] = add bwx bwy
            bxa:f16[64,256,6400] = integer_pow[y=3] bwz
            bxb:f16[64,256,6400] = integer_pow[y=2] bwz
            bxc:f16[64,256,6400] = mul 3.0 bxb
            bxd:f16[64,256,6400] = mul 0.044708251953125 bxa
            bxe:f16[64,256,6400] = add bwz bxd
            bxf:f16[64,256,6400] = mul 0.7978515625 bxe
            bxg:f16[64,256,6400] = tanh bxf
            bxh:f16[64,256,6400] = sub 1.0 bxg
            bxi:f16[64,256,6400] = add 1.0 bxg
            bxj:f16[64,256,6400] = mul 0.5 bxi
            bxk:f16[64,256,6400] = mul bwz bxj
            bxl:f16[6400,1600] = transpose[permutation=(1, 0)] bqm
            bxm:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] bxk bxl
            bxn:f16[1,1,1600] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 1600)
            ] bqn
            bxo:f16[64,256,1600] = add bxm bxn
            bxp:f16[64,256,1600] = add bvj bxo
            bxq:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bxp
            bxr:f32[64,256] = reduce_sum[axes=(2,)] bxq
            bxs:f32[64,256] = div bxr 1600.0
            bxt:f32[64,256,1600] = integer_pow[y=2] bxq
            bxu:f32[64,256,1600] = integer_pow[y=1] bxq
            bxv:f32[64,256,1600] = mul 2.0 bxu
            bxw:f32[64,256] = reduce_sum[axes=(2,)] bxt
            bxx:f32[64,256] = div bxw 1600.0
            bxy:f32[64,256] = integer_pow[y=2] bxs
            bxz:f32[64,256] = integer_pow[y=1] bxs
            bya:f32[64,256] = mul 2.0 bxz
            byb:f32[64,256] = sub bxx bxy
            byc:f32[64,256] = max 0.0 byb
            byd:bool[64,256] = eq byb byc
            bye:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            byf:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 0.0
            byg:f32[64,256] = select_n byd byf bye
            byh:bool[64,256] = eq 0.0 byc
            byi:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 2.0
            byj:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            byk:f32[64,256] = select_n byh byj byi
            byl:f32[64,256] = div byg byk
            bym:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] bxs
            byn:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] byc
            byo:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bxp
            byp:f32[64,256,1600] = sub byo bym
            byq:f32[64,256,1] = add byn 9.999999747378752e-06
            byr:f32[64,256,1] = rsqrt byq
            bys:f32[64,256,1] = div byr byq
            byt:f32[64,256,1] = mul -0.5 bys
            byu:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] bqo
            byv:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] byu
            byw:f32[64,256,1600] = mul byr byv
            byx:f32[64,256,1600] = mul byp byw
            byy:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] bqp
            byz:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] byy
            bza:f32[64,256,1600] = add byx byz
            bzb:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bza
            bzc:i32[1024] = iota[dimension=0 dtype=int32 shape=(1024,)] 
            bzd:i32[1,1024] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 1024)
            ] bzc
            bze:i32[1,1024,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(1, 1024, 1)
            ] bzd
            bzf:i32[1,1,1024] = broadcast_in_dim[
              broadcast_dimensions=(0, 2)
              shape=(1, 1, 1024)
            ] bzd
            bzg:bool[1,1024,1024] = ge bze bzf
            bzh:bool[1,1,1024,1024] = broadcast_in_dim[
              broadcast_dimensions=(0, 2, 3)
              shape=(1, 1, 1024, 1024)
            ] bzg
            bzi:f16[1600,4800] = transpose[permutation=(1, 0)] bqq
            bzj:f16[64,256,4800] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] bzb bzi
            bzk:f16[1,1,4800] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 4800)
            ] bqr
            bzl:f16[64,256,4800] = add bzj bzk
            bzm:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 1600)
              start_indices=(0, 0, 0)
              strides=None
            ] bzl
            bzn:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 3200)
              start_indices=(0, 0, 1600)
              strides=None
            ] bzl
            bzo:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 4800)
              start_indices=(0, 0, 3200)
              strides=None
            ] bzl
            bzp:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] bzm
            bzq:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] bzn
            bzr:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] bzo
            bzs:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
            bzt:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
            bzu:i32[2] = concatenate[dimension=0] bzs bzt
            bzv:bool[1,1,256,256] = gather[
              dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2, 3), collapsed_slice_dims=(), start_index_map=(2, 3))
              fill_value=None
              indices_are_sorted=True
              mode=GatherScatterMode.PROMISE_IN_BOUNDS
              slice_sizes=(1, 1, 256, 256)
              unique_indices=True
            ] bzh bzu
            bzw:bool[1,256,256] = squeeze[dimensions=(0,)] bzv
            bzx:bool[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(64, 1, 256, 256)
            ] bzw
            bzy:i32[64,1,1,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 3)
              shape=(64, 1, 1, 256)
            ] bqf
            bzz:i32[64,1,256] = squeeze[dimensions=(2,)] bzy
            caa:i32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 3)
              shape=(64, 1, 256, 256)
            ] bzz
            cab:bool[64,1,256,256] = ne caa 0
            cac:bool[64,1,256,256] = and cab bzx
            cad:f32[64,1,256,256] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] cac
            cae:bool[64,1,256,256] = gt cad 0.0
            caf:f32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 1, 256, 256)
            ] 0.0
            cag:f16[64,1,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] caf
            cah:f32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 1, 256, 256)
            ] -10000.0
            cai:f16[64,1,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] cah
            caj:f16[64,1,256,256] = select_n cae cai cag
            cak:f32[] = sqrt 64.0
            cal:f16[] = convert_element_type[new_dtype=float16 weak_type=False] cak
            cam:f16[64,256,25,64] = div bzp cal
            can:f16[64,25,256,256] = dot_general[
              dimension_numbers=(((3,), (3,)), ((0, 2), (0, 2)))
              precision=None
              preferred_element_type=None
            ] cam bzq
            cao:f16[64,25,256,256] = add can caj
            cap:f16[64,25,256] = reduce_max[axes=(3,)] cao
            caq:f16[64,25,256,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 1)
            ] cap
            car:f16[64,25,256,1] = stop_gradient caq
            cas:f16[64,25,256,256] = sub cao car
            cat:f16[64,25,256,256] = exp cas
            cau:f32[64,25,256,256] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] cat
            cav:f32[64,25,256] = reduce_sum[axes=(3,)] cau
            caw:f32[64,25,256,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 1)
            ] cav
            cax:f16[64,25,256,1] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] caw
            cay:f16[64,25,256,256] = div cat cax
            caz:f16[64,25,256,1] = integer_pow[y=-2] cax
            cba:f16[64,25,64,256] = dot_general[
              dimension_numbers=(((1,), (3,)), ((0, 2), (0, 1)))
              precision=None
              preferred_element_type=None
            ] bzr cay
            cbb:f16[64,256,25,64] = transpose[permutation=(0, 3, 1, 2)] cba
            cbc:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] cbb
            cbd:f16[1600,1600] = transpose[permutation=(1, 0)] bqs
            cbe:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] cbc cbd
            cbf:f16[1,1,1600] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 1600)
            ] bqt
            cbg:f16[64,256,1600] = add cbe cbf
            cbh:f16[64,256,1600] = add cbg bxp
            cbi:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] cbh
            cbj:f32[64,256] = reduce_sum[axes=(2,)] cbi
            cbk:f32[64,256] = div cbj 1600.0
            cbl:f32[64,256,1600] = integer_pow[y=2] cbi
            cbm:f32[64,256,1600] = integer_pow[y=1] cbi
            cbn:f32[64,256,1600] = mul 2.0 cbm
            cbo:f32[64,256] = reduce_sum[axes=(2,)] cbl
            cbp:f32[64,256] = div cbo 1600.0
            cbq:f32[64,256] = integer_pow[y=2] cbk
            cbr:f32[64,256] = integer_pow[y=1] cbk
            cbs:f32[64,256] = mul 2.0 cbr
            cbt:f32[64,256] = sub cbp cbq
            cbu:f32[64,256] = max 0.0 cbt
            cbv:bool[64,256] = eq cbt cbu
            cbw:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            cbx:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 0.0
            cby:f32[64,256] = select_n cbv cbx cbw
            cbz:bool[64,256] = eq 0.0 cbu
            cca:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 2.0
            ccb:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            ccc:f32[64,256] = select_n cbz ccb cca
            ccd:f32[64,256] = div cby ccc
            cce:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] cbk
            ccf:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] cbu
            ccg:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] cbh
            cch:f32[64,256,1600] = sub ccg cce
            cci:f32[64,256,1] = add ccf 9.999999747378752e-06
            ccj:f32[64,256,1] = rsqrt cci
            cck:f32[64,256,1] = div ccj cci
            ccl:f32[64,256,1] = mul -0.5 cck
            ccm:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] bqu
            ccn:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] ccm
            cco:f32[64,256,1600] = mul ccj ccn
            ccp:f32[64,256,1600] = mul cch cco
            ccq:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] bqv
            ccr:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] ccq
            ccs:f32[64,256,1600] = add ccp ccr
            cct:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] ccs
            ccu:f16[1600,6400] = transpose[permutation=(1, 0)] bqw
            ccv:f16[64,256,6400] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] cct ccu
            ccw:f16[1,1,6400] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 6400)
            ] bqx
            ccx:f16[64,256,6400] = add ccv ccw
            ccy:f16[64,256,6400] = integer_pow[y=3] ccx
            ccz:f16[64,256,6400] = integer_pow[y=2] ccx
            cda:f16[64,256,6400] = mul 3.0 ccz
            cdb:f16[64,256,6400] = mul 0.044708251953125 ccy
            cdc:f16[64,256,6400] = add ccx cdb
            cdd:f16[64,256,6400] = mul 0.7978515625 cdc
            cde:f16[64,256,6400] = tanh cdd
            cdf:f16[64,256,6400] = sub 1.0 cde
            cdg:f16[64,256,6400] = add 1.0 cde
            cdh:f16[64,256,6400] = mul 0.5 cdg
            cdi:f16[64,256,6400] = mul ccx cdh
            cdj:f16[6400,1600] = transpose[permutation=(1, 0)] bqy
            cdk:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] cdi cdj
            cdl:f16[1,1,1600] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 1600)
            ] bqz
            cdm:f16[64,256,1600] = add cdk cdl
            cdn:f16[64,256,1600] = add cbh cdm
            cdo:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] cdn
            cdp:f32[64,256] = reduce_sum[axes=(2,)] cdo
            cdq:f32[64,256] = div cdp 1600.0
            cdr:f32[64,256,1600] = integer_pow[y=2] cdo
            cds:f32[64,256,1600] = integer_pow[y=1] cdo
            cdt:f32[64,256,1600] = mul 2.0 cds
            cdu:f32[64,256] = reduce_sum[axes=(2,)] cdr
            cdv:f32[64,256] = div cdu 1600.0
            cdw:f32[64,256] = integer_pow[y=2] cdq
            cdx:f32[64,256] = integer_pow[y=1] cdq
            cdy:f32[64,256] = mul 2.0 cdx
            cdz:f32[64,256] = sub cdv cdw
            cea:f32[64,256] = max 0.0 cdz
            ceb:bool[64,256] = eq cdz cea
            cec:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            ced:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 0.0
            cee:f32[64,256] = select_n ceb ced cec
            cef:bool[64,256] = eq 0.0 cea
            ceg:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 2.0
            ceh:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            cei:f32[64,256] = select_n cef ceh ceg
            cej:f32[64,256] = div cee cei
            cek:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] cdq
            cel:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] cea
            cem:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] cdn
            cen:f32[64,256,1600] = sub cem cek
            ceo:f32[64,256,1] = add cel 9.999999747378752e-06
            cep:f32[64,256,1] = rsqrt ceo
            ceq:f32[64,256,1] = div cep ceo
            cer:f32[64,256,1] = mul -0.5 ceq
            ces:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] bra
            cet:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] ces
            ceu:f32[64,256,1600] = mul cep cet
            cev:f32[64,256,1600] = mul cen ceu
            cew:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] brb
            cex:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] cew
            cey:f32[64,256,1600] = add cev cex
            cez:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] cey
            cfa:i32[1024] = iota[dimension=0 dtype=int32 shape=(1024,)] 
            cfb:i32[1,1024] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 1024)
            ] cfa
            cfc:i32[1,1024,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(1, 1024, 1)
            ] cfb
            cfd:i32[1,1,1024] = broadcast_in_dim[
              broadcast_dimensions=(0, 2)
              shape=(1, 1, 1024)
            ] cfb
            cfe:bool[1,1024,1024] = ge cfc cfd
            cff:bool[1,1,1024,1024] = broadcast_in_dim[
              broadcast_dimensions=(0, 2, 3)
              shape=(1, 1, 1024, 1024)
            ] cfe
            cfg:f16[1600,4800] = transpose[permutation=(1, 0)] brc
            cfh:f16[64,256,4800] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] cez cfg
            cfi:f16[1,1,4800] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 4800)
            ] brd
            cfj:f16[64,256,4800] = add cfh cfi
            cfk:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 1600)
              start_indices=(0, 0, 0)
              strides=None
            ] cfj
            cfl:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 3200)
              start_indices=(0, 0, 1600)
              strides=None
            ] cfj
            cfm:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 4800)
              start_indices=(0, 0, 3200)
              strides=None
            ] cfj
            cfn:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] cfk
            cfo:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] cfl
            cfp:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] cfm
            cfq:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
            cfr:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
            cfs:i32[2] = concatenate[dimension=0] cfq cfr
            cft:bool[1,1,256,256] = gather[
              dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2, 3), collapsed_slice_dims=(), start_index_map=(2, 3))
              fill_value=None
              indices_are_sorted=True
              mode=GatherScatterMode.PROMISE_IN_BOUNDS
              slice_sizes=(1, 1, 256, 256)
              unique_indices=True
            ] cff cfs
            cfu:bool[1,256,256] = squeeze[dimensions=(0,)] cft
            cfv:bool[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(64, 1, 256, 256)
            ] cfu
            cfw:i32[64,1,1,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 3)
              shape=(64, 1, 1, 256)
            ] bqf
            cfx:i32[64,1,256] = squeeze[dimensions=(2,)] cfw
            cfy:i32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 3)
              shape=(64, 1, 256, 256)
            ] cfx
            cfz:bool[64,1,256,256] = ne cfy 0
            cga:bool[64,1,256,256] = and cfz cfv
            cgb:f32[64,1,256,256] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] cga
            cgc:bool[64,1,256,256] = gt cgb 0.0
            cgd:f32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 1, 256, 256)
            ] 0.0
            cge:f16[64,1,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] cgd
            cgf:f32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 1, 256, 256)
            ] -10000.0
            cgg:f16[64,1,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] cgf
            cgh:f16[64,1,256,256] = select_n cgc cgg cge
            cgi:f32[] = sqrt 64.0
            cgj:f16[] = convert_element_type[new_dtype=float16 weak_type=False] cgi
            cgk:f16[64,256,25,64] = div cfn cgj
            cgl:f16[64,25,256,256] = dot_general[
              dimension_numbers=(((3,), (3,)), ((0, 2), (0, 2)))
              precision=None
              preferred_element_type=None
            ] cgk cfo
            cgm:f16[64,25,256,256] = add cgl cgh
            cgn:f16[64,25,256] = reduce_max[axes=(3,)] cgm
            cgo:f16[64,25,256,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 1)
            ] cgn
            cgp:f16[64,25,256,1] = stop_gradient cgo
            cgq:f16[64,25,256,256] = sub cgm cgp
            cgr:f16[64,25,256,256] = exp cgq
            cgs:f32[64,25,256,256] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] cgr
            cgt:f32[64,25,256] = reduce_sum[axes=(3,)] cgs
            cgu:f32[64,25,256,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 1)
            ] cgt
            cgv:f16[64,25,256,1] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] cgu
            cgw:f16[64,25,256,256] = div cgr cgv
            cgx:f16[64,25,256,1] = integer_pow[y=-2] cgv
            cgy:f16[64,25,64,256] = dot_general[
              dimension_numbers=(((1,), (3,)), ((0, 2), (0, 1)))
              precision=None
              preferred_element_type=None
            ] cfp cgw
            cgz:f16[64,256,25,64] = transpose[permutation=(0, 3, 1, 2)] cgy
            cha:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] cgz
            chb:f16[1600,1600] = transpose[permutation=(1, 0)] bre
            chc:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] cha chb
            chd:f16[1,1,1600] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 1600)
            ] brf
            che:f16[64,256,1600] = add chc chd
            chf:f16[64,256,1600] = add che cdn
            chg:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] chf
            chh:f32[64,256] = reduce_sum[axes=(2,)] chg
            chi:f32[64,256] = div chh 1600.0
            chj:f32[64,256,1600] = integer_pow[y=2] chg
            chk:f32[64,256,1600] = integer_pow[y=1] chg
            chl:f32[64,256,1600] = mul 2.0 chk
            chm:f32[64,256] = reduce_sum[axes=(2,)] chj
            chn:f32[64,256] = div chm 1600.0
            cho:f32[64,256] = integer_pow[y=2] chi
            chp:f32[64,256] = integer_pow[y=1] chi
            chq:f32[64,256] = mul 2.0 chp
            chr:f32[64,256] = sub chn cho
            chs:f32[64,256] = max 0.0 chr
            cht:bool[64,256] = eq chr chs
            chu:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            chv:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 0.0
            chw:f32[64,256] = select_n cht chv chu
            chx:bool[64,256] = eq 0.0 chs
            chy:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 2.0
            chz:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            cia:f32[64,256] = select_n chx chz chy
            cib:f32[64,256] = div chw cia
            cic:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] chi
            cid:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] chs
            cie:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] chf
            cif:f32[64,256,1600] = sub cie cic
            cig:f32[64,256,1] = add cid 9.999999747378752e-06
            cih:f32[64,256,1] = rsqrt cig
            cii:f32[64,256,1] = div cih cig
            cij:f32[64,256,1] = mul -0.5 cii
            cik:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] brg
            cil:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] cik
            cim:f32[64,256,1600] = mul cih cil
            cin:f32[64,256,1600] = mul cif cim
            cio:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] brh
            cip:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] cio
            ciq:f32[64,256,1600] = add cin cip
            cir:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] ciq
            cis:f16[1600,6400] = transpose[permutation=(1, 0)] bri
            cit:f16[64,256,6400] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] cir cis
            ciu:f16[1,1,6400] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 6400)
            ] brj
            civ:f16[64,256,6400] = add cit ciu
            ciw:f16[64,256,6400] = integer_pow[y=3] civ
            cix:f16[64,256,6400] = integer_pow[y=2] civ
            ciy:f16[64,256,6400] = mul 3.0 cix
            ciz:f16[64,256,6400] = mul 0.044708251953125 ciw
            cja:f16[64,256,6400] = add civ ciz
            cjb:f16[64,256,6400] = mul 0.7978515625 cja
            cjc:f16[64,256,6400] = tanh cjb
            cjd:f16[64,256,6400] = sub 1.0 cjc
            cje:f16[64,256,6400] = add 1.0 cjc
            cjf:f16[64,256,6400] = mul 0.5 cje
            cjg:f16[64,256,6400] = mul civ cjf
            cjh:f16[6400,1600] = transpose[permutation=(1, 0)] brk
            cji:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] cjg cjh
            cjj:f16[1,1,1600] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 1600)
            ] brl
            cjk:f16[64,256,1600] = add cji cjj
            cjl:f16[64,256,1600] = add chf cjk
            cjm:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] cjl
            cjn:f32[64,256] = reduce_sum[axes=(2,)] cjm
            cjo:f32[64,256] = div cjn 1600.0
            cjp:f32[64,256,1600] = integer_pow[y=2] cjm
            cjq:f32[64,256,1600] = integer_pow[y=1] cjm
            cjr:f32[64,256,1600] = mul 2.0 cjq
            cjs:f32[64,256] = reduce_sum[axes=(2,)] cjp
            cjt:f32[64,256] = div cjs 1600.0
            cju:f32[64,256] = integer_pow[y=2] cjo
            cjv:f32[64,256] = integer_pow[y=1] cjo
            cjw:f32[64,256] = mul 2.0 cjv
            cjx:f32[64,256] = sub cjt cju
            cjy:f32[64,256] = max 0.0 cjx
            cjz:bool[64,256] = eq cjx cjy
            cka:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            ckb:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 0.0
            ckc:f32[64,256] = select_n cjz ckb cka
            ckd:bool[64,256] = eq 0.0 cjy
            cke:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 2.0
            ckf:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            ckg:f32[64,256] = select_n ckd ckf cke
            ckh:f32[64,256] = div ckc ckg
            cki:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] cjo
            ckj:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] cjy
            ckk:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] cjl
            ckl:f32[64,256,1600] = sub ckk cki
            ckm:f32[64,256,1] = add ckj 9.999999747378752e-06
            ckn:f32[64,256,1] = rsqrt ckm
            cko:f32[64,256,1] = div ckn ckm
            ckp:f32[64,256,1] = mul -0.5 cko
            ckq:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] brm
            ckr:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] ckq
            cks:f32[64,256,1600] = mul ckn ckr
            ckt:f32[64,256,1600] = mul ckl cks
            cku:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] brn
            ckv:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] cku
            ckw:f32[64,256,1600] = add ckt ckv
            ckx:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] ckw
            cky:i32[1024] = iota[dimension=0 dtype=int32 shape=(1024,)] 
            ckz:i32[1,1024] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 1024)
            ] cky
            cla:i32[1,1024,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(1, 1024, 1)
            ] ckz
            clb:i32[1,1,1024] = broadcast_in_dim[
              broadcast_dimensions=(0, 2)
              shape=(1, 1, 1024)
            ] ckz
            clc:bool[1,1024,1024] = ge cla clb
            cld:bool[1,1,1024,1024] = broadcast_in_dim[
              broadcast_dimensions=(0, 2, 3)
              shape=(1, 1, 1024, 1024)
            ] clc
            cle:f16[1600,4800] = transpose[permutation=(1, 0)] bro
            clf:f16[64,256,4800] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] ckx cle
            clg:f16[1,1,4800] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 4800)
            ] brp
            clh:f16[64,256,4800] = add clf clg
            cli:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 1600)
              start_indices=(0, 0, 0)
              strides=None
            ] clh
            clj:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 3200)
              start_indices=(0, 0, 1600)
              strides=None
            ] clh
            clk:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 4800)
              start_indices=(0, 0, 3200)
              strides=None
            ] clh
            cll:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] cli
            clm:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] clj
            cln:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] clk
            clo:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
            clp:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
            clq:i32[2] = concatenate[dimension=0] clo clp
            clr:bool[1,1,256,256] = gather[
              dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2, 3), collapsed_slice_dims=(), start_index_map=(2, 3))
              fill_value=None
              indices_are_sorted=True
              mode=GatherScatterMode.PROMISE_IN_BOUNDS
              slice_sizes=(1, 1, 256, 256)
              unique_indices=True
            ] cld clq
            cls:bool[1,256,256] = squeeze[dimensions=(0,)] clr
            clt:bool[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(64, 1, 256, 256)
            ] cls
            clu:i32[64,1,1,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 3)
              shape=(64, 1, 1, 256)
            ] bqf
            clv:i32[64,1,256] = squeeze[dimensions=(2,)] clu
            clw:i32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 3)
              shape=(64, 1, 256, 256)
            ] clv
            clx:bool[64,1,256,256] = ne clw 0
            cly:bool[64,1,256,256] = and clx clt
            clz:f32[64,1,256,256] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] cly
            cma:bool[64,1,256,256] = gt clz 0.0
            cmb:f32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 1, 256, 256)
            ] 0.0
            cmc:f16[64,1,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] cmb
            cmd:f32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 1, 256, 256)
            ] -10000.0
            cme:f16[64,1,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] cmd
            cmf:f16[64,1,256,256] = select_n cma cme cmc
            cmg:f32[] = sqrt 64.0
            cmh:f16[] = convert_element_type[new_dtype=float16 weak_type=False] cmg
            cmi:f16[64,256,25,64] = div cll cmh
            cmj:f16[64,25,256,256] = dot_general[
              dimension_numbers=(((3,), (3,)), ((0, 2), (0, 2)))
              precision=None
              preferred_element_type=None
            ] cmi clm
            cmk:f16[64,25,256,256] = add cmj cmf
            cml:f16[64,25,256] = reduce_max[axes=(3,)] cmk
            cmm:f16[64,25,256,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 1)
            ] cml
            cmn:f16[64,25,256,1] = stop_gradient cmm
            cmo:f16[64,25,256,256] = sub cmk cmn
            cmp:f16[64,25,256,256] = exp cmo
            cmq:f32[64,25,256,256] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] cmp
            cmr:f32[64,25,256] = reduce_sum[axes=(3,)] cmq
            cms:f32[64,25,256,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 1)
            ] cmr
            cmt:f16[64,25,256,1] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] cms
            cmu:f16[64,25,256,256] = div cmp cmt
            cmv:f16[64,25,256,1] = integer_pow[y=-2] cmt
            cmw:f16[64,25,64,256] = dot_general[
              dimension_numbers=(((1,), (3,)), ((0, 2), (0, 1)))
              precision=None
              preferred_element_type=None
            ] cln cmu
            cmx:f16[64,256,25,64] = transpose[permutation=(0, 3, 1, 2)] cmw
            cmy:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] cmx
            cmz:f16[1600,1600] = transpose[permutation=(1, 0)] brq
            cna:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] cmy cmz
            cnb:f16[1,1,1600] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 1600)
            ] brr
            cnc:f16[64,256,1600] = add cna cnb
            cnd:f16[64,256,1600] = add cnc cjl
          in (cnd, cmy, cmz, cln, cmv, cmp, cmt, cmi, clm, cmh, cmu, ckx, cle, ckl,
            ckn, ckr, ckp, ckh, cjw, cjr, cks, cjg, cjh, civ, cjd, cjc, ciy, cjf,
            cir, cis, cif, cih, cil, cij, cib, chq, chl, cim, cha, chb, cfp, cgx,
            cgr, cgv, cgk, cfo, cgj, cgw, cez, cfg, cen, cep, cet, cer, cej, cdy,
            cdt, ceu, cdi, cdj, ccx, cdf, cde, cda, cdh, cct, ccu, cch, ccj, ccn,
            ccl, ccd, cbs, cbn, cco, cbc, cbd, bzr, caz, cat, cax, cam, bzq, cal,
            cay, bzb, bzi, byp, byr, byv, byt, byl, bya, bxv, byw, bxk, bxl, bwz,
            bxh, bxg, bxc, bxj, bwv, bww, bwj, bwl, bwp, bwn, bwf, bvu, bvp, bwq,
            bve, bvf, btt, bvb, buv, buz, buo, bts, bun, bva, btd, btk, bsr, bst,
            bsx, bsv, bsn, bsc, brx, bsy) }
        name=10
      ] bbw bbx bby bbz bca bcb bcc bcd bce bcf bcg bch bci bcj bck bcl bcm bcn bco
        bcp bcq bcr bcs bct bcu bcv bcw bcx bcy bcz bda bdb bdc bdd bde bdf bdg bdh
        bdi bdj bdk bdl bdm bdn
      cne:f16[64,256,1600] cnf:f16[64,256,1600] cng:f16[1600,1600] cnh:f16[64,256,25,64]
        cni:f16[64,25,256,1] cnj:f16[64,25,256,256] cnk:f16[64,25,256,1] cnl:f16[64,256,25,64]
        cnm:f16[64,256,25,64] cnn:f16[] cno:f16[64,25,256,256] cnp:f16[64,256,1600]
        cnq:f16[1600,4800] cnr:f32[64,256,1600] cns:f32[64,256,1] cnt:f32[1,1,1600]
        cnu:f32[64,256,1] cnv:f32[64,256] cnw:f32[64,256] cnx:f32[64,256,1600] cny:f32[64,256,1600]
        cnz:f16[64,256,6400] coa:f16[6400,1600] cob:f16[64,256,6400] coc:f16[64,256,6400]
        cod:f16[64,256,6400] coe:f16[64,256,6400] cof:f16[64,256,6400] cog:f16[64,256,1600]
        coh:f16[1600,6400] coi:f32[64,256,1600] coj:f32[64,256,1] cok:f32[1,1,1600]
        col:f32[64,256,1] com:f32[64,256] con:f32[64,256] coo:f32[64,256,1600] cop:f32[64,256,1600]
        coq:f16[64,256,1600] cor:f16[1600,1600] cos:f16[64,256,25,64] cot:f16[64,25,256,1]
        cou:f16[64,25,256,256] cov:f16[64,25,256,1] cow:f16[64,256,25,64] cox:f16[64,256,25,64]
        coy:f16[] coz:f16[64,25,256,256] cpa:f16[64,256,1600] cpb:f16[1600,4800]
        cpc:f32[64,256,1600] cpd:f32[64,256,1] cpe:f32[1,1,1600] cpf:f32[64,256,1]
        cpg:f32[64,256] cph:f32[64,256] cpi:f32[64,256,1600] cpj:f32[64,256,1600]
        cpk:f16[64,256,6400] cpl:f16[6400,1600] cpm:f16[64,256,6400] cpn:f16[64,256,6400]
        cpo:f16[64,256,6400] cpp:f16[64,256,6400] cpq:f16[64,256,6400] cpr:f16[64,256,1600]
        cps:f16[1600,6400] cpt:f32[64,256,1600] cpu:f32[64,256,1] cpv:f32[1,1,1600]
        cpw:f32[64,256,1] cpx:f32[64,256] cpy:f32[64,256] cpz:f32[64,256,1600] cqa:f32[64,256,1600]
        cqb:f16[64,256,1600] cqc:f16[1600,1600] cqd:f16[64,256,25,64] cqe:f16[64,25,256,1]
        cqf:f16[64,25,256,256] cqg:f16[64,25,256,1] cqh:f16[64,256,25,64] cqi:f16[64,256,25,64]
        cqj:f16[] cqk:f16[64,25,256,256] cql:f16[64,256,1600] cqm:f16[1600,4800]
        cqn:f32[64,256,1600] cqo:f32[64,256,1] cqp:f32[1,1,1600] cqq:f32[64,256,1]
        cqr:f32[64,256] cqs:f32[64,256] cqt:f32[64,256,1600] cqu:f32[64,256,1600]
        cqv:f16[64,256,6400] cqw:f16[6400,1600] cqx:f16[64,256,6400] cqy:f16[64,256,6400]
        cqz:f16[64,256,6400] cra:f16[64,256,6400] crb:f16[64,256,6400] crc:f16[64,256,1600]
        crd:f16[1600,6400] cre:f32[64,256,1600] crf:f32[64,256,1] crg:f32[1,1,1600]
        crh:f32[64,256,1] cri:f32[64,256] crj:f32[64,256] crk:f32[64,256,1600] crl:f32[64,256,1600]
        crm:f16[64,256,1600] crn:f16[1600,1600] cro:f16[64,256,25,64] crp:f16[64,25,256,1]
        crq:f16[64,25,256,256] crr:f16[64,25,256,1] crs:f16[64,256,25,64] crt:f16[64,256,25,64]
        cru:f16[] crv:f16[64,25,256,256] crw:f16[64,256,1600] crx:f16[1600,4800]
        cry:f32[64,256,1600] crz:f32[64,256,1] csa:f32[1,1,1600] csb:f32[64,256,1]
        csc:f32[64,256] csd:f32[64,256] cse:f32[64,256,1600] csf:f32[64,256,1600]
        csg:f16[64,256,6400] csh:f16[6400,1600] csi:f16[64,256,6400] csj:f16[64,256,6400]
        csk:f16[64,256,6400] csl:f16[64,256,6400] csm:f16[64,256,6400] csn:f16[64,256,1600]
        cso:f16[1600,6400] csp:f32[64,256,1600] csq:f32[64,256,1] csr:f32[1,1,1600]
        css:f32[64,256,1] cst:f32[64,256] csu:f32[64,256] csv:f32[64,256,1600] csw:f32[64,256,1600] = named_call[
        call_jaxpr={ lambda ; csx:f16[64,256,1600] csy:f16[1600] csz:f16[1600] cta:f16[6400,1600]
            ctb:f16[6400] ctc:f16[1600,6400] ctd:f16[1600] cte:f16[1600] ctf:f16[1600]
            ctg:f16[4800,1600] cth:f16[4800] cti:i32[64,256] ctj:f16[1600,1600] ctk:f16[1600]
            ctl:f16[1600] ctm:f16[1600] ctn:f16[6400,1600] cto:f16[6400] ctp:f16[1600,6400]
            ctq:f16[1600] ctr:f16[1600] cts:f16[1600] ctt:f16[4800,1600] ctu:f16[4800]
            ctv:f16[1600,1600] ctw:f16[1600] ctx:f16[1600] cty:f16[1600] ctz:f16[6400,1600]
            cua:f16[6400] cub:f16[1600,6400] cuc:f16[1600] cud:f16[1600] cue:f16[1600]
            cuf:f16[4800,1600] cug:f16[4800] cuh:f16[1600,1600] cui:f16[1600] cuj:f16[1600]
            cuk:f16[1600] cul:f16[6400,1600] cum:f16[6400] cun:f16[1600,6400] cuo:f16[1600]
            cup:f16[1600] cuq:f16[1600] cur:f16[4800,1600] cus:f16[4800] cut:f16[1600,1600]
            cuu:f16[1600]. let
            cuv:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] csx
            cuw:f32[64,256] = reduce_sum[axes=(2,)] cuv
            cux:f32[64,256] = div cuw 1600.0
            cuy:f32[64,256,1600] = integer_pow[y=2] cuv
            cuz:f32[64,256,1600] = integer_pow[y=1] cuv
            cva:f32[64,256,1600] = mul 2.0 cuz
            cvb:f32[64,256] = reduce_sum[axes=(2,)] cuy
            cvc:f32[64,256] = div cvb 1600.0
            cvd:f32[64,256] = integer_pow[y=2] cux
            cve:f32[64,256] = integer_pow[y=1] cux
            cvf:f32[64,256] = mul 2.0 cve
            cvg:f32[64,256] = sub cvc cvd
            cvh:f32[64,256] = max 0.0 cvg
            cvi:bool[64,256] = eq cvg cvh
            cvj:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            cvk:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 0.0
            cvl:f32[64,256] = select_n cvi cvk cvj
            cvm:bool[64,256] = eq 0.0 cvh
            cvn:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 2.0
            cvo:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            cvp:f32[64,256] = select_n cvm cvo cvn
            cvq:f32[64,256] = div cvl cvp
            cvr:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] cux
            cvs:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] cvh
            cvt:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] csx
            cvu:f32[64,256,1600] = sub cvt cvr
            cvv:f32[64,256,1] = add cvs 9.999999747378752e-06
            cvw:f32[64,256,1] = rsqrt cvv
            cvx:f32[64,256,1] = div cvw cvv
            cvy:f32[64,256,1] = mul -0.5 cvx
            cvz:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] csy
            cwa:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] cvz
            cwb:f32[64,256,1600] = mul cvw cwa
            cwc:f32[64,256,1600] = mul cvu cwb
            cwd:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] csz
            cwe:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] cwd
            cwf:f32[64,256,1600] = add cwc cwe
            cwg:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] cwf
            cwh:f16[1600,6400] = transpose[permutation=(1, 0)] cta
            cwi:f16[64,256,6400] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] cwg cwh
            cwj:f16[1,1,6400] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 6400)
            ] ctb
            cwk:f16[64,256,6400] = add cwi cwj
            cwl:f16[64,256,6400] = integer_pow[y=3] cwk
            cwm:f16[64,256,6400] = integer_pow[y=2] cwk
            cwn:f16[64,256,6400] = mul 3.0 cwm
            cwo:f16[64,256,6400] = mul 0.044708251953125 cwl
            cwp:f16[64,256,6400] = add cwk cwo
            cwq:f16[64,256,6400] = mul 0.7978515625 cwp
            cwr:f16[64,256,6400] = tanh cwq
            cws:f16[64,256,6400] = sub 1.0 cwr
            cwt:f16[64,256,6400] = add 1.0 cwr
            cwu:f16[64,256,6400] = mul 0.5 cwt
            cwv:f16[64,256,6400] = mul cwk cwu
            cww:f16[6400,1600] = transpose[permutation=(1, 0)] ctc
            cwx:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] cwv cww
            cwy:f16[1,1,1600] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 1600)
            ] ctd
            cwz:f16[64,256,1600] = add cwx cwy
            cxa:f16[64,256,1600] = add csx cwz
            cxb:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] cxa
            cxc:f32[64,256] = reduce_sum[axes=(2,)] cxb
            cxd:f32[64,256] = div cxc 1600.0
            cxe:f32[64,256,1600] = integer_pow[y=2] cxb
            cxf:f32[64,256,1600] = integer_pow[y=1] cxb
            cxg:f32[64,256,1600] = mul 2.0 cxf
            cxh:f32[64,256] = reduce_sum[axes=(2,)] cxe
            cxi:f32[64,256] = div cxh 1600.0
            cxj:f32[64,256] = integer_pow[y=2] cxd
            cxk:f32[64,256] = integer_pow[y=1] cxd
            cxl:f32[64,256] = mul 2.0 cxk
            cxm:f32[64,256] = sub cxi cxj
            cxn:f32[64,256] = max 0.0 cxm
            cxo:bool[64,256] = eq cxm cxn
            cxp:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            cxq:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 0.0
            cxr:f32[64,256] = select_n cxo cxq cxp
            cxs:bool[64,256] = eq 0.0 cxn
            cxt:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 2.0
            cxu:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            cxv:f32[64,256] = select_n cxs cxu cxt
            cxw:f32[64,256] = div cxr cxv
            cxx:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] cxd
            cxy:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] cxn
            cxz:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] cxa
            cya:f32[64,256,1600] = sub cxz cxx
            cyb:f32[64,256,1] = add cxy 9.999999747378752e-06
            cyc:f32[64,256,1] = rsqrt cyb
            cyd:f32[64,256,1] = div cyc cyb
            cye:f32[64,256,1] = mul -0.5 cyd
            cyf:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] cte
            cyg:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] cyf
            cyh:f32[64,256,1600] = mul cyc cyg
            cyi:f32[64,256,1600] = mul cya cyh
            cyj:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] ctf
            cyk:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] cyj
            cyl:f32[64,256,1600] = add cyi cyk
            cym:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] cyl
            cyn:i32[1024] = iota[dimension=0 dtype=int32 shape=(1024,)] 
            cyo:i32[1,1024] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 1024)
            ] cyn
            cyp:i32[1,1024,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(1, 1024, 1)
            ] cyo
            cyq:i32[1,1,1024] = broadcast_in_dim[
              broadcast_dimensions=(0, 2)
              shape=(1, 1, 1024)
            ] cyo
            cyr:bool[1,1024,1024] = ge cyp cyq
            cys:bool[1,1,1024,1024] = broadcast_in_dim[
              broadcast_dimensions=(0, 2, 3)
              shape=(1, 1, 1024, 1024)
            ] cyr
            cyt:f16[1600,4800] = transpose[permutation=(1, 0)] ctg
            cyu:f16[64,256,4800] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] cym cyt
            cyv:f16[1,1,4800] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 4800)
            ] cth
            cyw:f16[64,256,4800] = add cyu cyv
            cyx:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 1600)
              start_indices=(0, 0, 0)
              strides=None
            ] cyw
            cyy:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 3200)
              start_indices=(0, 0, 1600)
              strides=None
            ] cyw
            cyz:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 4800)
              start_indices=(0, 0, 3200)
              strides=None
            ] cyw
            cza:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] cyx
            czb:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] cyy
            czc:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] cyz
            czd:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
            cze:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
            czf:i32[2] = concatenate[dimension=0] czd cze
            czg:bool[1,1,256,256] = gather[
              dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2, 3), collapsed_slice_dims=(), start_index_map=(2, 3))
              fill_value=None
              indices_are_sorted=True
              mode=GatherScatterMode.PROMISE_IN_BOUNDS
              slice_sizes=(1, 1, 256, 256)
              unique_indices=True
            ] cys czf
            czh:bool[1,256,256] = squeeze[dimensions=(0,)] czg
            czi:bool[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(64, 1, 256, 256)
            ] czh
            czj:i32[64,1,1,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 3)
              shape=(64, 1, 1, 256)
            ] cti
            czk:i32[64,1,256] = squeeze[dimensions=(2,)] czj
            czl:i32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 3)
              shape=(64, 1, 256, 256)
            ] czk
            czm:bool[64,1,256,256] = ne czl 0
            czn:bool[64,1,256,256] = and czm czi
            czo:f32[64,1,256,256] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] czn
            czp:bool[64,1,256,256] = gt czo 0.0
            czq:f32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 1, 256, 256)
            ] 0.0
            czr:f16[64,1,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] czq
            czs:f32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 1, 256, 256)
            ] -10000.0
            czt:f16[64,1,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] czs
            czu:f16[64,1,256,256] = select_n czp czt czr
            czv:f32[] = sqrt 64.0
            czw:f16[] = convert_element_type[new_dtype=float16 weak_type=False] czv
            czx:f16[64,256,25,64] = div cza czw
            czy:f16[64,25,256,256] = dot_general[
              dimension_numbers=(((3,), (3,)), ((0, 2), (0, 2)))
              precision=None
              preferred_element_type=None
            ] czx czb
            czz:f16[64,25,256,256] = add czy czu
            daa:f16[64,25,256] = reduce_max[axes=(3,)] czz
            dab:f16[64,25,256,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 1)
            ] daa
            dac:f16[64,25,256,1] = stop_gradient dab
            dad:f16[64,25,256,256] = sub czz dac
            dae:f16[64,25,256,256] = exp dad
            daf:f32[64,25,256,256] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] dae
            dag:f32[64,25,256] = reduce_sum[axes=(3,)] daf
            dah:f32[64,25,256,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 1)
            ] dag
            dai:f16[64,25,256,1] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] dah
            daj:f16[64,25,256,256] = div dae dai
            dak:f16[64,25,256,1] = integer_pow[y=-2] dai
            dal:f16[64,25,64,256] = dot_general[
              dimension_numbers=(((1,), (3,)), ((0, 2), (0, 1)))
              precision=None
              preferred_element_type=None
            ] czc daj
            dam:f16[64,256,25,64] = transpose[permutation=(0, 3, 1, 2)] dal
            dan:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] dam
            dao:f16[1600,1600] = transpose[permutation=(1, 0)] ctj
            dap:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] dan dao
            daq:f16[1,1,1600] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 1600)
            ] ctk
            dar:f16[64,256,1600] = add dap daq
            das:f16[64,256,1600] = add dar cxa
            dat:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] das
            dau:f32[64,256] = reduce_sum[axes=(2,)] dat
            dav:f32[64,256] = div dau 1600.0
            daw:f32[64,256,1600] = integer_pow[y=2] dat
            dax:f32[64,256,1600] = integer_pow[y=1] dat
            day:f32[64,256,1600] = mul 2.0 dax
            daz:f32[64,256] = reduce_sum[axes=(2,)] daw
            dba:f32[64,256] = div daz 1600.0
            dbb:f32[64,256] = integer_pow[y=2] dav
            dbc:f32[64,256] = integer_pow[y=1] dav
            dbd:f32[64,256] = mul 2.0 dbc
            dbe:f32[64,256] = sub dba dbb
            dbf:f32[64,256] = max 0.0 dbe
            dbg:bool[64,256] = eq dbe dbf
            dbh:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            dbi:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 0.0
            dbj:f32[64,256] = select_n dbg dbi dbh
            dbk:bool[64,256] = eq 0.0 dbf
            dbl:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 2.0
            dbm:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            dbn:f32[64,256] = select_n dbk dbm dbl
            dbo:f32[64,256] = div dbj dbn
            dbp:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] dav
            dbq:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] dbf
            dbr:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] das
            dbs:f32[64,256,1600] = sub dbr dbp
            dbt:f32[64,256,1] = add dbq 9.999999747378752e-06
            dbu:f32[64,256,1] = rsqrt dbt
            dbv:f32[64,256,1] = div dbu dbt
            dbw:f32[64,256,1] = mul -0.5 dbv
            dbx:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] ctl
            dby:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] dbx
            dbz:f32[64,256,1600] = mul dbu dby
            dca:f32[64,256,1600] = mul dbs dbz
            dcb:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] ctm
            dcc:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] dcb
            dcd:f32[64,256,1600] = add dca dcc
            dce:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] dcd
            dcf:f16[1600,6400] = transpose[permutation=(1, 0)] ctn
            dcg:f16[64,256,6400] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] dce dcf
            dch:f16[1,1,6400] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 6400)
            ] cto
            dci:f16[64,256,6400] = add dcg dch
            dcj:f16[64,256,6400] = integer_pow[y=3] dci
            dck:f16[64,256,6400] = integer_pow[y=2] dci
            dcl:f16[64,256,6400] = mul 3.0 dck
            dcm:f16[64,256,6400] = mul 0.044708251953125 dcj
            dcn:f16[64,256,6400] = add dci dcm
            dco:f16[64,256,6400] = mul 0.7978515625 dcn
            dcp:f16[64,256,6400] = tanh dco
            dcq:f16[64,256,6400] = sub 1.0 dcp
            dcr:f16[64,256,6400] = add 1.0 dcp
            dcs:f16[64,256,6400] = mul 0.5 dcr
            dct:f16[64,256,6400] = mul dci dcs
            dcu:f16[6400,1600] = transpose[permutation=(1, 0)] ctp
            dcv:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] dct dcu
            dcw:f16[1,1,1600] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 1600)
            ] ctq
            dcx:f16[64,256,1600] = add dcv dcw
            dcy:f16[64,256,1600] = add das dcx
            dcz:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] dcy
            dda:f32[64,256] = reduce_sum[axes=(2,)] dcz
            ddb:f32[64,256] = div dda 1600.0
            ddc:f32[64,256,1600] = integer_pow[y=2] dcz
            ddd:f32[64,256,1600] = integer_pow[y=1] dcz
            dde:f32[64,256,1600] = mul 2.0 ddd
            ddf:f32[64,256] = reduce_sum[axes=(2,)] ddc
            ddg:f32[64,256] = div ddf 1600.0
            ddh:f32[64,256] = integer_pow[y=2] ddb
            ddi:f32[64,256] = integer_pow[y=1] ddb
            ddj:f32[64,256] = mul 2.0 ddi
            ddk:f32[64,256] = sub ddg ddh
            ddl:f32[64,256] = max 0.0 ddk
            ddm:bool[64,256] = eq ddk ddl
            ddn:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            ddo:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 0.0
            ddp:f32[64,256] = select_n ddm ddo ddn
            ddq:bool[64,256] = eq 0.0 ddl
            ddr:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 2.0
            dds:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            ddt:f32[64,256] = select_n ddq dds ddr
            ddu:f32[64,256] = div ddp ddt
            ddv:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] ddb
            ddw:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] ddl
            ddx:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] dcy
            ddy:f32[64,256,1600] = sub ddx ddv
            ddz:f32[64,256,1] = add ddw 9.999999747378752e-06
            dea:f32[64,256,1] = rsqrt ddz
            deb:f32[64,256,1] = div dea ddz
            dec:f32[64,256,1] = mul -0.5 deb
            ded:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] ctr
            dee:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] ded
            def:f32[64,256,1600] = mul dea dee
            deg:f32[64,256,1600] = mul ddy def
            deh:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] cts
            dei:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] deh
            dej:f32[64,256,1600] = add deg dei
            dek:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] dej
            del:i32[1024] = iota[dimension=0 dtype=int32 shape=(1024,)] 
            dem:i32[1,1024] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 1024)
            ] del
            den:i32[1,1024,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(1, 1024, 1)
            ] dem
            deo:i32[1,1,1024] = broadcast_in_dim[
              broadcast_dimensions=(0, 2)
              shape=(1, 1, 1024)
            ] dem
            dep:bool[1,1024,1024] = ge den deo
            deq:bool[1,1,1024,1024] = broadcast_in_dim[
              broadcast_dimensions=(0, 2, 3)
              shape=(1, 1, 1024, 1024)
            ] dep
            der:f16[1600,4800] = transpose[permutation=(1, 0)] ctt
            des:f16[64,256,4800] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] dek der
            det:f16[1,1,4800] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 4800)
            ] ctu
            deu:f16[64,256,4800] = add des det
            dev:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 1600)
              start_indices=(0, 0, 0)
              strides=None
            ] deu
            dew:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 3200)
              start_indices=(0, 0, 1600)
              strides=None
            ] deu
            dex:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 4800)
              start_indices=(0, 0, 3200)
              strides=None
            ] deu
            dey:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] dev
            dez:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] dew
            dfa:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] dex
            dfb:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
            dfc:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
            dfd:i32[2] = concatenate[dimension=0] dfb dfc
            dfe:bool[1,1,256,256] = gather[
              dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2, 3), collapsed_slice_dims=(), start_index_map=(2, 3))
              fill_value=None
              indices_are_sorted=True
              mode=GatherScatterMode.PROMISE_IN_BOUNDS
              slice_sizes=(1, 1, 256, 256)
              unique_indices=True
            ] deq dfd
            dff:bool[1,256,256] = squeeze[dimensions=(0,)] dfe
            dfg:bool[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(64, 1, 256, 256)
            ] dff
            dfh:i32[64,1,1,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 3)
              shape=(64, 1, 1, 256)
            ] cti
            dfi:i32[64,1,256] = squeeze[dimensions=(2,)] dfh
            dfj:i32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 3)
              shape=(64, 1, 256, 256)
            ] dfi
            dfk:bool[64,1,256,256] = ne dfj 0
            dfl:bool[64,1,256,256] = and dfk dfg
            dfm:f32[64,1,256,256] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] dfl
            dfn:bool[64,1,256,256] = gt dfm 0.0
            dfo:f32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 1, 256, 256)
            ] 0.0
            dfp:f16[64,1,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] dfo
            dfq:f32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 1, 256, 256)
            ] -10000.0
            dfr:f16[64,1,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] dfq
            dfs:f16[64,1,256,256] = select_n dfn dfr dfp
            dft:f32[] = sqrt 64.0
            dfu:f16[] = convert_element_type[new_dtype=float16 weak_type=False] dft
            dfv:f16[64,256,25,64] = div dey dfu
            dfw:f16[64,25,256,256] = dot_general[
              dimension_numbers=(((3,), (3,)), ((0, 2), (0, 2)))
              precision=None
              preferred_element_type=None
            ] dfv dez
            dfx:f16[64,25,256,256] = add dfw dfs
            dfy:f16[64,25,256] = reduce_max[axes=(3,)] dfx
            dfz:f16[64,25,256,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 1)
            ] dfy
            dga:f16[64,25,256,1] = stop_gradient dfz
            dgb:f16[64,25,256,256] = sub dfx dga
            dgc:f16[64,25,256,256] = exp dgb
            dgd:f32[64,25,256,256] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] dgc
            dge:f32[64,25,256] = reduce_sum[axes=(3,)] dgd
            dgf:f32[64,25,256,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 1)
            ] dge
            dgg:f16[64,25,256,1] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] dgf
            dgh:f16[64,25,256,256] = div dgc dgg
            dgi:f16[64,25,256,1] = integer_pow[y=-2] dgg
            dgj:f16[64,25,64,256] = dot_general[
              dimension_numbers=(((1,), (3,)), ((0, 2), (0, 1)))
              precision=None
              preferred_element_type=None
            ] dfa dgh
            dgk:f16[64,256,25,64] = transpose[permutation=(0, 3, 1, 2)] dgj
            dgl:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] dgk
            dgm:f16[1600,1600] = transpose[permutation=(1, 0)] ctv
            dgn:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] dgl dgm
            dgo:f16[1,1,1600] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 1600)
            ] ctw
            dgp:f16[64,256,1600] = add dgn dgo
            dgq:f16[64,256,1600] = add dgp dcy
            dgr:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] dgq
            dgs:f32[64,256] = reduce_sum[axes=(2,)] dgr
            dgt:f32[64,256] = div dgs 1600.0
            dgu:f32[64,256,1600] = integer_pow[y=2] dgr
            dgv:f32[64,256,1600] = integer_pow[y=1] dgr
            dgw:f32[64,256,1600] = mul 2.0 dgv
            dgx:f32[64,256] = reduce_sum[axes=(2,)] dgu
            dgy:f32[64,256] = div dgx 1600.0
            dgz:f32[64,256] = integer_pow[y=2] dgt
            dha:f32[64,256] = integer_pow[y=1] dgt
            dhb:f32[64,256] = mul 2.0 dha
            dhc:f32[64,256] = sub dgy dgz
            dhd:f32[64,256] = max 0.0 dhc
            dhe:bool[64,256] = eq dhc dhd
            dhf:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            dhg:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 0.0
            dhh:f32[64,256] = select_n dhe dhg dhf
            dhi:bool[64,256] = eq 0.0 dhd
            dhj:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 2.0
            dhk:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            dhl:f32[64,256] = select_n dhi dhk dhj
            dhm:f32[64,256] = div dhh dhl
            dhn:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] dgt
            dho:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] dhd
            dhp:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] dgq
            dhq:f32[64,256,1600] = sub dhp dhn
            dhr:f32[64,256,1] = add dho 9.999999747378752e-06
            dhs:f32[64,256,1] = rsqrt dhr
            dht:f32[64,256,1] = div dhs dhr
            dhu:f32[64,256,1] = mul -0.5 dht
            dhv:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] ctx
            dhw:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] dhv
            dhx:f32[64,256,1600] = mul dhs dhw
            dhy:f32[64,256,1600] = mul dhq dhx
            dhz:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] cty
            dia:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] dhz
            dib:f32[64,256,1600] = add dhy dia
            dic:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] dib
            did:f16[1600,6400] = transpose[permutation=(1, 0)] ctz
            die:f16[64,256,6400] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] dic did
            dif:f16[1,1,6400] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 6400)
            ] cua
            dig:f16[64,256,6400] = add die dif
            dih:f16[64,256,6400] = integer_pow[y=3] dig
            dii:f16[64,256,6400] = integer_pow[y=2] dig
            dij:f16[64,256,6400] = mul 3.0 dii
            dik:f16[64,256,6400] = mul 0.044708251953125 dih
            dil:f16[64,256,6400] = add dig dik
            dim:f16[64,256,6400] = mul 0.7978515625 dil
            din:f16[64,256,6400] = tanh dim
            dio:f16[64,256,6400] = sub 1.0 din
            dip:f16[64,256,6400] = add 1.0 din
            diq:f16[64,256,6400] = mul 0.5 dip
            dir:f16[64,256,6400] = mul dig diq
            dis:f16[6400,1600] = transpose[permutation=(1, 0)] cub
            dit:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] dir dis
            diu:f16[1,1,1600] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 1600)
            ] cuc
            div:f16[64,256,1600] = add dit diu
            diw:f16[64,256,1600] = add dgq div
            dix:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] diw
            diy:f32[64,256] = reduce_sum[axes=(2,)] dix
            diz:f32[64,256] = div diy 1600.0
            dja:f32[64,256,1600] = integer_pow[y=2] dix
            djb:f32[64,256,1600] = integer_pow[y=1] dix
            djc:f32[64,256,1600] = mul 2.0 djb
            djd:f32[64,256] = reduce_sum[axes=(2,)] dja
            dje:f32[64,256] = div djd 1600.0
            djf:f32[64,256] = integer_pow[y=2] diz
            djg:f32[64,256] = integer_pow[y=1] diz
            djh:f32[64,256] = mul 2.0 djg
            dji:f32[64,256] = sub dje djf
            djj:f32[64,256] = max 0.0 dji
            djk:bool[64,256] = eq dji djj
            djl:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            djm:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 0.0
            djn:f32[64,256] = select_n djk djm djl
            djo:bool[64,256] = eq 0.0 djj
            djp:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 2.0
            djq:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            djr:f32[64,256] = select_n djo djq djp
            djs:f32[64,256] = div djn djr
            djt:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] diz
            dju:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] djj
            djv:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] diw
            djw:f32[64,256,1600] = sub djv djt
            djx:f32[64,256,1] = add dju 9.999999747378752e-06
            djy:f32[64,256,1] = rsqrt djx
            djz:f32[64,256,1] = div djy djx
            dka:f32[64,256,1] = mul -0.5 djz
            dkb:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] cud
            dkc:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] dkb
            dkd:f32[64,256,1600] = mul djy dkc
            dke:f32[64,256,1600] = mul djw dkd
            dkf:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] cue
            dkg:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] dkf
            dkh:f32[64,256,1600] = add dke dkg
            dki:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] dkh
            dkj:i32[1024] = iota[dimension=0 dtype=int32 shape=(1024,)] 
            dkk:i32[1,1024] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 1024)
            ] dkj
            dkl:i32[1,1024,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(1, 1024, 1)
            ] dkk
            dkm:i32[1,1,1024] = broadcast_in_dim[
              broadcast_dimensions=(0, 2)
              shape=(1, 1, 1024)
            ] dkk
            dkn:bool[1,1024,1024] = ge dkl dkm
            dko:bool[1,1,1024,1024] = broadcast_in_dim[
              broadcast_dimensions=(0, 2, 3)
              shape=(1, 1, 1024, 1024)
            ] dkn
            dkp:f16[1600,4800] = transpose[permutation=(1, 0)] cuf
            dkq:f16[64,256,4800] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] dki dkp
            dkr:f16[1,1,4800] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 4800)
            ] cug
            dks:f16[64,256,4800] = add dkq dkr
            dkt:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 1600)
              start_indices=(0, 0, 0)
              strides=None
            ] dks
            dku:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 3200)
              start_indices=(0, 0, 1600)
              strides=None
            ] dks
            dkv:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 4800)
              start_indices=(0, 0, 3200)
              strides=None
            ] dks
            dkw:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] dkt
            dkx:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] dku
            dky:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] dkv
            dkz:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
            dla:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
            dlb:i32[2] = concatenate[dimension=0] dkz dla
            dlc:bool[1,1,256,256] = gather[
              dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2, 3), collapsed_slice_dims=(), start_index_map=(2, 3))
              fill_value=None
              indices_are_sorted=True
              mode=GatherScatterMode.PROMISE_IN_BOUNDS
              slice_sizes=(1, 1, 256, 256)
              unique_indices=True
            ] dko dlb
            dld:bool[1,256,256] = squeeze[dimensions=(0,)] dlc
            dle:bool[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(64, 1, 256, 256)
            ] dld
            dlf:i32[64,1,1,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 3)
              shape=(64, 1, 1, 256)
            ] cti
            dlg:i32[64,1,256] = squeeze[dimensions=(2,)] dlf
            dlh:i32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 3)
              shape=(64, 1, 256, 256)
            ] dlg
            dli:bool[64,1,256,256] = ne dlh 0
            dlj:bool[64,1,256,256] = and dli dle
            dlk:f32[64,1,256,256] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] dlj
            dll:bool[64,1,256,256] = gt dlk 0.0
            dlm:f32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 1, 256, 256)
            ] 0.0
            dln:f16[64,1,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] dlm
            dlo:f32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 1, 256, 256)
            ] -10000.0
            dlp:f16[64,1,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] dlo
            dlq:f16[64,1,256,256] = select_n dll dlp dln
            dlr:f32[] = sqrt 64.0
            dls:f16[] = convert_element_type[new_dtype=float16 weak_type=False] dlr
            dlt:f16[64,256,25,64] = div dkw dls
            dlu:f16[64,25,256,256] = dot_general[
              dimension_numbers=(((3,), (3,)), ((0, 2), (0, 2)))
              precision=None
              preferred_element_type=None
            ] dlt dkx
            dlv:f16[64,25,256,256] = add dlu dlq
            dlw:f16[64,25,256] = reduce_max[axes=(3,)] dlv
            dlx:f16[64,25,256,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 1)
            ] dlw
            dly:f16[64,25,256,1] = stop_gradient dlx
            dlz:f16[64,25,256,256] = sub dlv dly
            dma:f16[64,25,256,256] = exp dlz
            dmb:f32[64,25,256,256] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] dma
            dmc:f32[64,25,256] = reduce_sum[axes=(3,)] dmb
            dmd:f32[64,25,256,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 1)
            ] dmc
            dme:f16[64,25,256,1] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] dmd
            dmf:f16[64,25,256,256] = div dma dme
            dmg:f16[64,25,256,1] = integer_pow[y=-2] dme
            dmh:f16[64,25,64,256] = dot_general[
              dimension_numbers=(((1,), (3,)), ((0, 2), (0, 1)))
              precision=None
              preferred_element_type=None
            ] dky dmf
            dmi:f16[64,256,25,64] = transpose[permutation=(0, 3, 1, 2)] dmh
            dmj:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] dmi
            dmk:f16[1600,1600] = transpose[permutation=(1, 0)] cuh
            dml:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] dmj dmk
            dmm:f16[1,1,1600] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 1600)
            ] cui
            dmn:f16[64,256,1600] = add dml dmm
            dmo:f16[64,256,1600] = add dmn diw
            dmp:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] dmo
            dmq:f32[64,256] = reduce_sum[axes=(2,)] dmp
            dmr:f32[64,256] = div dmq 1600.0
            dms:f32[64,256,1600] = integer_pow[y=2] dmp
            dmt:f32[64,256,1600] = integer_pow[y=1] dmp
            dmu:f32[64,256,1600] = mul 2.0 dmt
            dmv:f32[64,256] = reduce_sum[axes=(2,)] dms
            dmw:f32[64,256] = div dmv 1600.0
            dmx:f32[64,256] = integer_pow[y=2] dmr
            dmy:f32[64,256] = integer_pow[y=1] dmr
            dmz:f32[64,256] = mul 2.0 dmy
            dna:f32[64,256] = sub dmw dmx
            dnb:f32[64,256] = max 0.0 dna
            dnc:bool[64,256] = eq dna dnb
            dnd:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            dne:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 0.0
            dnf:f32[64,256] = select_n dnc dne dnd
            dng:bool[64,256] = eq 0.0 dnb
            dnh:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 2.0
            dni:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            dnj:f32[64,256] = select_n dng dni dnh
            dnk:f32[64,256] = div dnf dnj
            dnl:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] dmr
            dnm:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] dnb
            dnn:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] dmo
            dno:f32[64,256,1600] = sub dnn dnl
            dnp:f32[64,256,1] = add dnm 9.999999747378752e-06
            dnq:f32[64,256,1] = rsqrt dnp
            dnr:f32[64,256,1] = div dnq dnp
            dns:f32[64,256,1] = mul -0.5 dnr
            dnt:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] cuj
            dnu:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] dnt
            dnv:f32[64,256,1600] = mul dnq dnu
            dnw:f32[64,256,1600] = mul dno dnv
            dnx:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] cuk
            dny:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] dnx
            dnz:f32[64,256,1600] = add dnw dny
            doa:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] dnz
            dob:f16[1600,6400] = transpose[permutation=(1, 0)] cul
            doc:f16[64,256,6400] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] doa dob
            dod:f16[1,1,6400] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 6400)
            ] cum
            doe:f16[64,256,6400] = add doc dod
            dof:f16[64,256,6400] = integer_pow[y=3] doe
            dog:f16[64,256,6400] = integer_pow[y=2] doe
            doh:f16[64,256,6400] = mul 3.0 dog
            doi:f16[64,256,6400] = mul 0.044708251953125 dof
            doj:f16[64,256,6400] = add doe doi
            dok:f16[64,256,6400] = mul 0.7978515625 doj
            dol:f16[64,256,6400] = tanh dok
            dom:f16[64,256,6400] = sub 1.0 dol
            don:f16[64,256,6400] = add 1.0 dol
            doo:f16[64,256,6400] = mul 0.5 don
            dop:f16[64,256,6400] = mul doe doo
            doq:f16[6400,1600] = transpose[permutation=(1, 0)] cun
            dor:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] dop doq
            dos:f16[1,1,1600] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 1600)
            ] cuo
            dot:f16[64,256,1600] = add dor dos
            dou:f16[64,256,1600] = add dmo dot
            dov:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] dou
            dow:f32[64,256] = reduce_sum[axes=(2,)] dov
            dox:f32[64,256] = div dow 1600.0
            doy:f32[64,256,1600] = integer_pow[y=2] dov
            doz:f32[64,256,1600] = integer_pow[y=1] dov
            dpa:f32[64,256,1600] = mul 2.0 doz
            dpb:f32[64,256] = reduce_sum[axes=(2,)] doy
            dpc:f32[64,256] = div dpb 1600.0
            dpd:f32[64,256] = integer_pow[y=2] dox
            dpe:f32[64,256] = integer_pow[y=1] dox
            dpf:f32[64,256] = mul 2.0 dpe
            dpg:f32[64,256] = sub dpc dpd
            dph:f32[64,256] = max 0.0 dpg
            dpi:bool[64,256] = eq dpg dph
            dpj:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            dpk:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 0.0
            dpl:f32[64,256] = select_n dpi dpk dpj
            dpm:bool[64,256] = eq 0.0 dph
            dpn:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 2.0
            dpo:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            dpp:f32[64,256] = select_n dpm dpo dpn
            dpq:f32[64,256] = div dpl dpp
            dpr:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] dox
            dps:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] dph
            dpt:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] dou
            dpu:f32[64,256,1600] = sub dpt dpr
            dpv:f32[64,256,1] = add dps 9.999999747378752e-06
            dpw:f32[64,256,1] = rsqrt dpv
            dpx:f32[64,256,1] = div dpw dpv
            dpy:f32[64,256,1] = mul -0.5 dpx
            dpz:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] cup
            dqa:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] dpz
            dqb:f32[64,256,1600] = mul dpw dqa
            dqc:f32[64,256,1600] = mul dpu dqb
            dqd:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] cuq
            dqe:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] dqd
            dqf:f32[64,256,1600] = add dqc dqe
            dqg:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] dqf
            dqh:i32[1024] = iota[dimension=0 dtype=int32 shape=(1024,)] 
            dqi:i32[1,1024] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 1024)
            ] dqh
            dqj:i32[1,1024,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(1, 1024, 1)
            ] dqi
            dqk:i32[1,1,1024] = broadcast_in_dim[
              broadcast_dimensions=(0, 2)
              shape=(1, 1, 1024)
            ] dqi
            dql:bool[1,1024,1024] = ge dqj dqk
            dqm:bool[1,1,1024,1024] = broadcast_in_dim[
              broadcast_dimensions=(0, 2, 3)
              shape=(1, 1, 1024, 1024)
            ] dql
            dqn:f16[1600,4800] = transpose[permutation=(1, 0)] cur
            dqo:f16[64,256,4800] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] dqg dqn
            dqp:f16[1,1,4800] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 4800)
            ] cus
            dqq:f16[64,256,4800] = add dqo dqp
            dqr:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 1600)
              start_indices=(0, 0, 0)
              strides=None
            ] dqq
            dqs:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 3200)
              start_indices=(0, 0, 1600)
              strides=None
            ] dqq
            dqt:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 4800)
              start_indices=(0, 0, 3200)
              strides=None
            ] dqq
            dqu:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] dqr
            dqv:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] dqs
            dqw:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] dqt
            dqx:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
            dqy:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
            dqz:i32[2] = concatenate[dimension=0] dqx dqy
            dra:bool[1,1,256,256] = gather[
              dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2, 3), collapsed_slice_dims=(), start_index_map=(2, 3))
              fill_value=None
              indices_are_sorted=True
              mode=GatherScatterMode.PROMISE_IN_BOUNDS
              slice_sizes=(1, 1, 256, 256)
              unique_indices=True
            ] dqm dqz
            drb:bool[1,256,256] = squeeze[dimensions=(0,)] dra
            drc:bool[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(64, 1, 256, 256)
            ] drb
            drd:i32[64,1,1,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 3)
              shape=(64, 1, 1, 256)
            ] cti
            dre:i32[64,1,256] = squeeze[dimensions=(2,)] drd
            drf:i32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 3)
              shape=(64, 1, 256, 256)
            ] dre
            drg:bool[64,1,256,256] = ne drf 0
            drh:bool[64,1,256,256] = and drg drc
            dri:f32[64,1,256,256] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] drh
            drj:bool[64,1,256,256] = gt dri 0.0
            drk:f32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 1, 256, 256)
            ] 0.0
            drl:f16[64,1,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] drk
            drm:f32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 1, 256, 256)
            ] -10000.0
            drn:f16[64,1,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] drm
            dro:f16[64,1,256,256] = select_n drj drn drl
            drp:f32[] = sqrt 64.0
            drq:f16[] = convert_element_type[new_dtype=float16 weak_type=False] drp
            drr:f16[64,256,25,64] = div dqu drq
            drs:f16[64,25,256,256] = dot_general[
              dimension_numbers=(((3,), (3,)), ((0, 2), (0, 2)))
              precision=None
              preferred_element_type=None
            ] drr dqv
            drt:f16[64,25,256,256] = add drs dro
            dru:f16[64,25,256] = reduce_max[axes=(3,)] drt
            drv:f16[64,25,256,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 1)
            ] dru
            drw:f16[64,25,256,1] = stop_gradient drv
            drx:f16[64,25,256,256] = sub drt drw
            dry:f16[64,25,256,256] = exp drx
            drz:f32[64,25,256,256] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] dry
            dsa:f32[64,25,256] = reduce_sum[axes=(3,)] drz
            dsb:f32[64,25,256,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 1)
            ] dsa
            dsc:f16[64,25,256,1] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] dsb
            dsd:f16[64,25,256,256] = div dry dsc
            dse:f16[64,25,256,1] = integer_pow[y=-2] dsc
            dsf:f16[64,25,64,256] = dot_general[
              dimension_numbers=(((1,), (3,)), ((0, 2), (0, 1)))
              precision=None
              preferred_element_type=None
            ] dqw dsd
            dsg:f16[64,256,25,64] = transpose[permutation=(0, 3, 1, 2)] dsf
            dsh:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] dsg
            dsi:f16[1600,1600] = transpose[permutation=(1, 0)] cut
            dsj:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] dsh dsi
            dsk:f16[1,1,1600] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 1600)
            ] cuu
            dsl:f16[64,256,1600] = add dsj dsk
            dsm:f16[64,256,1600] = add dsl dou
          in (dsm, dsh, dsi, dqw, dse, dry, dsc, drr, dqv, drq, dsd, dqg, dqn, dpu,
            dpw, dqa, dpy, dpq, dpf, dpa, dqb, dop, doq, doe, dom, dol, doh, doo,
            doa, dob, dno, dnq, dnu, dns, dnk, dmz, dmu, dnv, dmj, dmk, dky, dmg,
            dma, dme, dlt, dkx, dls, dmf, dki, dkp, djw, djy, dkc, dka, djs, djh,
            djc, dkd, dir, dis, dig, dio, din, dij, diq, dic, did, dhq, dhs, dhw,
            dhu, dhm, dhb, dgw, dhx, dgl, dgm, dfa, dgi, dgc, dgg, dfv, dez, dfu,
            dgh, dek, der, ddy, dea, dee, dec, ddu, ddj, dde, def, dct, dcu, dci,
            dcq, dcp, dcl, dcs, dce, dcf, dbs, dbu, dby, dbw, dbo, dbd, day, dbz,
            dan, dao, czc, dak, dae, dai, czx, czb, czw, daj, cym, cyt, cya, cyc,
            cyg, cye, cxw, cxl, cxg, cyh, cwv, cww, cwk, cws, cwr, cwn, cwu, cwg,
            cwh, cvu, cvw, cwa, cvy, cvq, cvf, cva, cwb) }
        name=11
      ] bky bdo bdp bdq bdr bds bdt bdu bdv bdw bdx bcb bdy bdz bea beb bec bed bee
        bef beg beh bei bej bek bel bem ben beo bep beq ber bes bet beu bev bew bex
        bey bez bfa bfb bfc bfd bfe bff bfg bfh bfi bfj
      dsn:f16[64,256,1600] dso:f16[64,256,1600] dsp:f16[1600,1600] dsq:f16[64,256,25,64]
        dsr:f16[64,25,256,1] dss:f16[64,25,256,256] dst:f16[64,25,256,1] dsu:f16[64,256,25,64]
        dsv:f16[64,256,25,64] dsw:f16[] dsx:f16[64,25,256,256] dsy:f16[64,256,1600]
        dsz:f16[1600,4800] dta:f32[64,256,1600] dtb:f32[64,256,1] dtc:f32[1,1,1600]
        dtd:f32[64,256,1] dte:f32[64,256] dtf:f32[64,256] dtg:f32[64,256,1600] dth:f32[64,256,1600]
        dti:f16[64,256,6400] dtj:f16[6400,1600] dtk:f16[64,256,6400] dtl:f16[64,256,6400]
        dtm:f16[64,256,6400] dtn:f16[64,256,6400] dto:f16[64,256,6400] dtp:f16[64,256,1600]
        dtq:f16[1600,6400] dtr:f32[64,256,1600] dts:f32[64,256,1] dtt:f32[1,1,1600]
        dtu:f32[64,256,1] dtv:f32[64,256] dtw:f32[64,256] dtx:f32[64,256,1600] dty:f32[64,256,1600]
        dtz:f16[64,256,1600] dua:f16[1600,1600] dub:f16[64,256,25,64] duc:f16[64,25,256,1]
        dud:f16[64,25,256,256] due:f16[64,25,256,1] duf:f16[64,256,25,64] dug:f16[64,256,25,64]
        duh:f16[] dui:f16[64,25,256,256] duj:f16[64,256,1600] duk:f16[1600,4800]
        dul:f32[64,256,1600] dum:f32[64,256,1] dun:f32[1,1,1600] duo:f32[64,256,1]
        dup:f32[64,256] duq:f32[64,256] dur:f32[64,256,1600] dus:f32[64,256,1600]
        dut:f16[64,256,6400] duu:f16[6400,1600] duv:f16[64,256,6400] duw:f16[64,256,6400]
        dux:f16[64,256,6400] duy:f16[64,256,6400] duz:f16[64,256,6400] dva:f16[64,256,1600]
        dvb:f16[1600,6400] dvc:f32[64,256,1600] dvd:f32[64,256,1] dve:f32[1,1,1600]
        dvf:f32[64,256,1] dvg:f32[64,256] dvh:f32[64,256] dvi:f32[64,256,1600] dvj:f32[64,256,1600]
        dvk:f16[64,256,1600] dvl:f16[1600,1600] dvm:f16[64,256,25,64] dvn:f16[64,25,256,1]
        dvo:f16[64,25,256,256] dvp:f16[64,25,256,1] dvq:f16[64,256,25,64] dvr:f16[64,256,25,64]
        dvs:f16[] dvt:f16[64,25,256,256] dvu:f16[64,256,1600] dvv:f16[1600,4800]
        dvw:f32[64,256,1600] dvx:f32[64,256,1] dvy:f32[1,1,1600] dvz:f32[64,256,1]
        dwa:f32[64,256] dwb:f32[64,256] dwc:f32[64,256,1600] dwd:f32[64,256,1600]
        dwe:f16[64,256,6400] dwf:f16[6400,1600] dwg:f16[64,256,6400] dwh:f16[64,256,6400]
        dwi:f16[64,256,6400] dwj:f16[64,256,6400] dwk:f16[64,256,6400] dwl:f16[64,256,1600]
        dwm:f16[1600,6400] dwn:f32[64,256,1600] dwo:f32[64,256,1] dwp:f32[1,1,1600]
        dwq:f32[64,256,1] dwr:f32[64,256] dws:f32[64,256] dwt:f32[64,256,1600] dwu:f32[64,256,1600]
        dwv:f16[64,256,1600] dww:f16[1600,1600] dwx:f16[64,256,25,64] dwy:f16[64,25,256,1]
        dwz:f16[64,25,256,256] dxa:f16[64,25,256,1] dxb:f16[64,256,25,64] dxc:f16[64,256,25,64]
        dxd:f16[] dxe:f16[64,25,256,256] dxf:f16[64,256,1600] dxg:f16[1600,4800]
        dxh:f32[64,256,1600] dxi:f32[64,256,1] dxj:f32[1,1,1600] dxk:f32[64,256,1]
        dxl:f32[64,256] dxm:f32[64,256] dxn:f32[64,256,1600] dxo:f32[64,256,1600]
        dxp:f16[64,256,6400] dxq:f16[6400,1600] dxr:f16[64,256,6400] dxs:f16[64,256,6400]
        dxt:f16[64,256,6400] dxu:f16[64,256,6400] dxv:f16[64,256,6400] dxw:f16[64,256,1600]
        dxx:f16[1600,6400] dxy:f32[64,256,1600] dxz:f32[64,256,1] dya:f32[1,1,1600]
        dyb:f32[64,256,1] dyc:f32[64,256] dyd:f32[64,256] dye:f32[64,256,1600] dyf:f32[64,256,1600] = named_call[
        call_jaxpr={ lambda ; dyg:f16[64,256,1600] dyh:f16[1600] dyi:f16[1600] dyj:f16[6400,1600]
            dyk:f16[6400] dyl:f16[1600,6400] dym:f16[1600] dyn:f16[1600] dyo:f16[1600]
            dyp:f16[4800,1600] dyq:f16[4800] dyr:i32[64,256] dys:f16[1600,1600] dyt:f16[1600]
            dyu:f16[1600] dyv:f16[1600] dyw:f16[6400,1600] dyx:f16[6400] dyy:f16[1600,6400]
            dyz:f16[1600] dza:f16[1600] dzb:f16[1600] dzc:f16[4800,1600] dzd:f16[4800]
            dze:f16[1600,1600] dzf:f16[1600] dzg:f16[1600] dzh:f16[1600] dzi:f16[6400,1600]
            dzj:f16[6400] dzk:f16[1600,6400] dzl:f16[1600] dzm:f16[1600] dzn:f16[1600]
            dzo:f16[4800,1600] dzp:f16[4800] dzq:f16[1600,1600] dzr:f16[1600] dzs:f16[1600]
            dzt:f16[1600] dzu:f16[6400,1600] dzv:f16[6400] dzw:f16[1600,6400] dzx:f16[1600]
            dzy:f16[1600] dzz:f16[1600] eaa:f16[4800,1600] eab:f16[4800] eac:f16[1600,1600]
            ead:f16[1600]. let
            eae:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] dyg
            eaf:f32[64,256] = reduce_sum[axes=(2,)] eae
            eag:f32[64,256] = div eaf 1600.0
            eah:f32[64,256,1600] = integer_pow[y=2] eae
            eai:f32[64,256,1600] = integer_pow[y=1] eae
            eaj:f32[64,256,1600] = mul 2.0 eai
            eak:f32[64,256] = reduce_sum[axes=(2,)] eah
            eal:f32[64,256] = div eak 1600.0
            eam:f32[64,256] = integer_pow[y=2] eag
            ean:f32[64,256] = integer_pow[y=1] eag
            eao:f32[64,256] = mul 2.0 ean
            eap:f32[64,256] = sub eal eam
            eaq:f32[64,256] = max 0.0 eap
            ear:bool[64,256] = eq eap eaq
            eas:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            eat:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 0.0
            eau:f32[64,256] = select_n ear eat eas
            eav:bool[64,256] = eq 0.0 eaq
            eaw:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 2.0
            eax:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            eay:f32[64,256] = select_n eav eax eaw
            eaz:f32[64,256] = div eau eay
            eba:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] eag
            ebb:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] eaq
            ebc:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] dyg
            ebd:f32[64,256,1600] = sub ebc eba
            ebe:f32[64,256,1] = add ebb 9.999999747378752e-06
            ebf:f32[64,256,1] = rsqrt ebe
            ebg:f32[64,256,1] = div ebf ebe
            ebh:f32[64,256,1] = mul -0.5 ebg
            ebi:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] dyh
            ebj:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] ebi
            ebk:f32[64,256,1600] = mul ebf ebj
            ebl:f32[64,256,1600] = mul ebd ebk
            ebm:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] dyi
            ebn:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] ebm
            ebo:f32[64,256,1600] = add ebl ebn
            ebp:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] ebo
            ebq:f16[1600,6400] = transpose[permutation=(1, 0)] dyj
            ebr:f16[64,256,6400] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] ebp ebq
            ebs:f16[1,1,6400] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 6400)
            ] dyk
            ebt:f16[64,256,6400] = add ebr ebs
            ebu:f16[64,256,6400] = integer_pow[y=3] ebt
            ebv:f16[64,256,6400] = integer_pow[y=2] ebt
            ebw:f16[64,256,6400] = mul 3.0 ebv
            ebx:f16[64,256,6400] = mul 0.044708251953125 ebu
            eby:f16[64,256,6400] = add ebt ebx
            ebz:f16[64,256,6400] = mul 0.7978515625 eby
            eca:f16[64,256,6400] = tanh ebz
            ecb:f16[64,256,6400] = sub 1.0 eca
            ecc:f16[64,256,6400] = add 1.0 eca
            ecd:f16[64,256,6400] = mul 0.5 ecc
            ece:f16[64,256,6400] = mul ebt ecd
            ecf:f16[6400,1600] = transpose[permutation=(1, 0)] dyl
            ecg:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] ece ecf
            ech:f16[1,1,1600] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 1600)
            ] dym
            eci:f16[64,256,1600] = add ecg ech
            ecj:f16[64,256,1600] = add dyg eci
            eck:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] ecj
            ecl:f32[64,256] = reduce_sum[axes=(2,)] eck
            ecm:f32[64,256] = div ecl 1600.0
            ecn:f32[64,256,1600] = integer_pow[y=2] eck
            eco:f32[64,256,1600] = integer_pow[y=1] eck
            ecp:f32[64,256,1600] = mul 2.0 eco
            ecq:f32[64,256] = reduce_sum[axes=(2,)] ecn
            ecr:f32[64,256] = div ecq 1600.0
            ecs:f32[64,256] = integer_pow[y=2] ecm
            ect:f32[64,256] = integer_pow[y=1] ecm
            ecu:f32[64,256] = mul 2.0 ect
            ecv:f32[64,256] = sub ecr ecs
            ecw:f32[64,256] = max 0.0 ecv
            ecx:bool[64,256] = eq ecv ecw
            ecy:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            ecz:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 0.0
            eda:f32[64,256] = select_n ecx ecz ecy
            edb:bool[64,256] = eq 0.0 ecw
            edc:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 2.0
            edd:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            ede:f32[64,256] = select_n edb edd edc
            edf:f32[64,256] = div eda ede
            edg:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] ecm
            edh:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] ecw
            edi:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] ecj
            edj:f32[64,256,1600] = sub edi edg
            edk:f32[64,256,1] = add edh 9.999999747378752e-06
            edl:f32[64,256,1] = rsqrt edk
            edm:f32[64,256,1] = div edl edk
            edn:f32[64,256,1] = mul -0.5 edm
            edo:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] dyn
            edp:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] edo
            edq:f32[64,256,1600] = mul edl edp
            edr:f32[64,256,1600] = mul edj edq
            eds:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] dyo
            edt:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] eds
            edu:f32[64,256,1600] = add edr edt
            edv:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] edu
            edw:i32[1024] = iota[dimension=0 dtype=int32 shape=(1024,)] 
            edx:i32[1,1024] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 1024)
            ] edw
            edy:i32[1,1024,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(1, 1024, 1)
            ] edx
            edz:i32[1,1,1024] = broadcast_in_dim[
              broadcast_dimensions=(0, 2)
              shape=(1, 1, 1024)
            ] edx
            eea:bool[1,1024,1024] = ge edy edz
            eeb:bool[1,1,1024,1024] = broadcast_in_dim[
              broadcast_dimensions=(0, 2, 3)
              shape=(1, 1, 1024, 1024)
            ] eea
            eec:f16[1600,4800] = transpose[permutation=(1, 0)] dyp
            eed:f16[64,256,4800] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] edv eec
            eee:f16[1,1,4800] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 4800)
            ] dyq
            eef:f16[64,256,4800] = add eed eee
            eeg:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 1600)
              start_indices=(0, 0, 0)
              strides=None
            ] eef
            eeh:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 3200)
              start_indices=(0, 0, 1600)
              strides=None
            ] eef
            eei:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 4800)
              start_indices=(0, 0, 3200)
              strides=None
            ] eef
            eej:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] eeg
            eek:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] eeh
            eel:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] eei
            eem:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
            een:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
            eeo:i32[2] = concatenate[dimension=0] eem een
            eep:bool[1,1,256,256] = gather[
              dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2, 3), collapsed_slice_dims=(), start_index_map=(2, 3))
              fill_value=None
              indices_are_sorted=True
              mode=GatherScatterMode.PROMISE_IN_BOUNDS
              slice_sizes=(1, 1, 256, 256)
              unique_indices=True
            ] eeb eeo
            eeq:bool[1,256,256] = squeeze[dimensions=(0,)] eep
            eer:bool[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(64, 1, 256, 256)
            ] eeq
            ees:i32[64,1,1,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 3)
              shape=(64, 1, 1, 256)
            ] dyr
            eet:i32[64,1,256] = squeeze[dimensions=(2,)] ees
            eeu:i32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 3)
              shape=(64, 1, 256, 256)
            ] eet
            eev:bool[64,1,256,256] = ne eeu 0
            eew:bool[64,1,256,256] = and eev eer
            eex:f32[64,1,256,256] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] eew
            eey:bool[64,1,256,256] = gt eex 0.0
            eez:f32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 1, 256, 256)
            ] 0.0
            efa:f16[64,1,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] eez
            efb:f32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 1, 256, 256)
            ] -10000.0
            efc:f16[64,1,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] efb
            efd:f16[64,1,256,256] = select_n eey efc efa
            efe:f32[] = sqrt 64.0
            eff:f16[] = convert_element_type[new_dtype=float16 weak_type=False] efe
            efg:f16[64,256,25,64] = div eej eff
            efh:f16[64,25,256,256] = dot_general[
              dimension_numbers=(((3,), (3,)), ((0, 2), (0, 2)))
              precision=None
              preferred_element_type=None
            ] efg eek
            efi:f16[64,25,256,256] = add efh efd
            efj:f16[64,25,256] = reduce_max[axes=(3,)] efi
            efk:f16[64,25,256,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 1)
            ] efj
            efl:f16[64,25,256,1] = stop_gradient efk
            efm:f16[64,25,256,256] = sub efi efl
            efn:f16[64,25,256,256] = exp efm
            efo:f32[64,25,256,256] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] efn
            efp:f32[64,25,256] = reduce_sum[axes=(3,)] efo
            efq:f32[64,25,256,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 1)
            ] efp
            efr:f16[64,25,256,1] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] efq
            efs:f16[64,25,256,256] = div efn efr
            eft:f16[64,25,256,1] = integer_pow[y=-2] efr
            efu:f16[64,25,64,256] = dot_general[
              dimension_numbers=(((1,), (3,)), ((0, 2), (0, 1)))
              precision=None
              preferred_element_type=None
            ] eel efs
            efv:f16[64,256,25,64] = transpose[permutation=(0, 3, 1, 2)] efu
            efw:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] efv
            efx:f16[1600,1600] = transpose[permutation=(1, 0)] dys
            efy:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] efw efx
            efz:f16[1,1,1600] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 1600)
            ] dyt
            ega:f16[64,256,1600] = add efy efz
            egb:f16[64,256,1600] = add ega ecj
            egc:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] egb
            egd:f32[64,256] = reduce_sum[axes=(2,)] egc
            ege:f32[64,256] = div egd 1600.0
            egf:f32[64,256,1600] = integer_pow[y=2] egc
            egg:f32[64,256,1600] = integer_pow[y=1] egc
            egh:f32[64,256,1600] = mul 2.0 egg
            egi:f32[64,256] = reduce_sum[axes=(2,)] egf
            egj:f32[64,256] = div egi 1600.0
            egk:f32[64,256] = integer_pow[y=2] ege
            egl:f32[64,256] = integer_pow[y=1] ege
            egm:f32[64,256] = mul 2.0 egl
            egn:f32[64,256] = sub egj egk
            ego:f32[64,256] = max 0.0 egn
            egp:bool[64,256] = eq egn ego
            egq:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            egr:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 0.0
            egs:f32[64,256] = select_n egp egr egq
            egt:bool[64,256] = eq 0.0 ego
            egu:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 2.0
            egv:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            egw:f32[64,256] = select_n egt egv egu
            egx:f32[64,256] = div egs egw
            egy:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] ege
            egz:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] ego
            eha:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] egb
            ehb:f32[64,256,1600] = sub eha egy
            ehc:f32[64,256,1] = add egz 9.999999747378752e-06
            ehd:f32[64,256,1] = rsqrt ehc
            ehe:f32[64,256,1] = div ehd ehc
            ehf:f32[64,256,1] = mul -0.5 ehe
            ehg:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] dyu
            ehh:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] ehg
            ehi:f32[64,256,1600] = mul ehd ehh
            ehj:f32[64,256,1600] = mul ehb ehi
            ehk:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] dyv
            ehl:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] ehk
            ehm:f32[64,256,1600] = add ehj ehl
            ehn:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] ehm
            eho:f16[1600,6400] = transpose[permutation=(1, 0)] dyw
            ehp:f16[64,256,6400] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] ehn eho
            ehq:f16[1,1,6400] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 6400)
            ] dyx
            ehr:f16[64,256,6400] = add ehp ehq
            ehs:f16[64,256,6400] = integer_pow[y=3] ehr
            eht:f16[64,256,6400] = integer_pow[y=2] ehr
            ehu:f16[64,256,6400] = mul 3.0 eht
            ehv:f16[64,256,6400] = mul 0.044708251953125 ehs
            ehw:f16[64,256,6400] = add ehr ehv
            ehx:f16[64,256,6400] = mul 0.7978515625 ehw
            ehy:f16[64,256,6400] = tanh ehx
            ehz:f16[64,256,6400] = sub 1.0 ehy
            eia:f16[64,256,6400] = add 1.0 ehy
            eib:f16[64,256,6400] = mul 0.5 eia
            eic:f16[64,256,6400] = mul ehr eib
            eid:f16[6400,1600] = transpose[permutation=(1, 0)] dyy
            eie:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] eic eid
            eif:f16[1,1,1600] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 1600)
            ] dyz
            eig:f16[64,256,1600] = add eie eif
            eih:f16[64,256,1600] = add egb eig
            eii:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] eih
            eij:f32[64,256] = reduce_sum[axes=(2,)] eii
            eik:f32[64,256] = div eij 1600.0
            eil:f32[64,256,1600] = integer_pow[y=2] eii
            eim:f32[64,256,1600] = integer_pow[y=1] eii
            ein:f32[64,256,1600] = mul 2.0 eim
            eio:f32[64,256] = reduce_sum[axes=(2,)] eil
            eip:f32[64,256] = div eio 1600.0
            eiq:f32[64,256] = integer_pow[y=2] eik
            eir:f32[64,256] = integer_pow[y=1] eik
            eis:f32[64,256] = mul 2.0 eir
            eit:f32[64,256] = sub eip eiq
            eiu:f32[64,256] = max 0.0 eit
            eiv:bool[64,256] = eq eit eiu
            eiw:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            eix:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 0.0
            eiy:f32[64,256] = select_n eiv eix eiw
            eiz:bool[64,256] = eq 0.0 eiu
            eja:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 2.0
            ejb:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            ejc:f32[64,256] = select_n eiz ejb eja
            ejd:f32[64,256] = div eiy ejc
            eje:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] eik
            ejf:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] eiu
            ejg:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] eih
            ejh:f32[64,256,1600] = sub ejg eje
            eji:f32[64,256,1] = add ejf 9.999999747378752e-06
            ejj:f32[64,256,1] = rsqrt eji
            ejk:f32[64,256,1] = div ejj eji
            ejl:f32[64,256,1] = mul -0.5 ejk
            ejm:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] dza
            ejn:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] ejm
            ejo:f32[64,256,1600] = mul ejj ejn
            ejp:f32[64,256,1600] = mul ejh ejo
            ejq:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] dzb
            ejr:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] ejq
            ejs:f32[64,256,1600] = add ejp ejr
            ejt:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] ejs
            eju:i32[1024] = iota[dimension=0 dtype=int32 shape=(1024,)] 
            ejv:i32[1,1024] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 1024)
            ] eju
            ejw:i32[1,1024,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(1, 1024, 1)
            ] ejv
            ejx:i32[1,1,1024] = broadcast_in_dim[
              broadcast_dimensions=(0, 2)
              shape=(1, 1, 1024)
            ] ejv
            ejy:bool[1,1024,1024] = ge ejw ejx
            ejz:bool[1,1,1024,1024] = broadcast_in_dim[
              broadcast_dimensions=(0, 2, 3)
              shape=(1, 1, 1024, 1024)
            ] ejy
            eka:f16[1600,4800] = transpose[permutation=(1, 0)] dzc
            ekb:f16[64,256,4800] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] ejt eka
            ekc:f16[1,1,4800] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 4800)
            ] dzd
            ekd:f16[64,256,4800] = add ekb ekc
            eke:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 1600)
              start_indices=(0, 0, 0)
              strides=None
            ] ekd
            ekf:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 3200)
              start_indices=(0, 0, 1600)
              strides=None
            ] ekd
            ekg:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 4800)
              start_indices=(0, 0, 3200)
              strides=None
            ] ekd
            ekh:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] eke
            eki:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] ekf
            ekj:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] ekg
            ekk:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
            ekl:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
            ekm:i32[2] = concatenate[dimension=0] ekk ekl
            ekn:bool[1,1,256,256] = gather[
              dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2, 3), collapsed_slice_dims=(), start_index_map=(2, 3))
              fill_value=None
              indices_are_sorted=True
              mode=GatherScatterMode.PROMISE_IN_BOUNDS
              slice_sizes=(1, 1, 256, 256)
              unique_indices=True
            ] ejz ekm
            eko:bool[1,256,256] = squeeze[dimensions=(0,)] ekn
            ekp:bool[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(64, 1, 256, 256)
            ] eko
            ekq:i32[64,1,1,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 3)
              shape=(64, 1, 1, 256)
            ] dyr
            ekr:i32[64,1,256] = squeeze[dimensions=(2,)] ekq
            eks:i32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 3)
              shape=(64, 1, 256, 256)
            ] ekr
            ekt:bool[64,1,256,256] = ne eks 0
            eku:bool[64,1,256,256] = and ekt ekp
            ekv:f32[64,1,256,256] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] eku
            ekw:bool[64,1,256,256] = gt ekv 0.0
            ekx:f32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 1, 256, 256)
            ] 0.0
            eky:f16[64,1,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] ekx
            ekz:f32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 1, 256, 256)
            ] -10000.0
            ela:f16[64,1,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] ekz
            elb:f16[64,1,256,256] = select_n ekw ela eky
            elc:f32[] = sqrt 64.0
            eld:f16[] = convert_element_type[new_dtype=float16 weak_type=False] elc
            ele:f16[64,256,25,64] = div ekh eld
            elf:f16[64,25,256,256] = dot_general[
              dimension_numbers=(((3,), (3,)), ((0, 2), (0, 2)))
              precision=None
              preferred_element_type=None
            ] ele eki
            elg:f16[64,25,256,256] = add elf elb
            elh:f16[64,25,256] = reduce_max[axes=(3,)] elg
            eli:f16[64,25,256,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 1)
            ] elh
            elj:f16[64,25,256,1] = stop_gradient eli
            elk:f16[64,25,256,256] = sub elg elj
            ell:f16[64,25,256,256] = exp elk
            elm:f32[64,25,256,256] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] ell
            eln:f32[64,25,256] = reduce_sum[axes=(3,)] elm
            elo:f32[64,25,256,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 1)
            ] eln
            elp:f16[64,25,256,1] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] elo
            elq:f16[64,25,256,256] = div ell elp
            elr:f16[64,25,256,1] = integer_pow[y=-2] elp
            els:f16[64,25,64,256] = dot_general[
              dimension_numbers=(((1,), (3,)), ((0, 2), (0, 1)))
              precision=None
              preferred_element_type=None
            ] ekj elq
            elt:f16[64,256,25,64] = transpose[permutation=(0, 3, 1, 2)] els
            elu:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] elt
            elv:f16[1600,1600] = transpose[permutation=(1, 0)] dze
            elw:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] elu elv
            elx:f16[1,1,1600] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 1600)
            ] dzf
            ely:f16[64,256,1600] = add elw elx
            elz:f16[64,256,1600] = add ely eih
            ema:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] elz
            emb:f32[64,256] = reduce_sum[axes=(2,)] ema
            emc:f32[64,256] = div emb 1600.0
            emd:f32[64,256,1600] = integer_pow[y=2] ema
            eme:f32[64,256,1600] = integer_pow[y=1] ema
            emf:f32[64,256,1600] = mul 2.0 eme
            emg:f32[64,256] = reduce_sum[axes=(2,)] emd
            emh:f32[64,256] = div emg 1600.0
            emi:f32[64,256] = integer_pow[y=2] emc
            emj:f32[64,256] = integer_pow[y=1] emc
            emk:f32[64,256] = mul 2.0 emj
            eml:f32[64,256] = sub emh emi
            emm:f32[64,256] = max 0.0 eml
            emn:bool[64,256] = eq eml emm
            emo:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            emp:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 0.0
            emq:f32[64,256] = select_n emn emp emo
            emr:bool[64,256] = eq 0.0 emm
            ems:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 2.0
            emt:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            emu:f32[64,256] = select_n emr emt ems
            emv:f32[64,256] = div emq emu
            emw:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] emc
            emx:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] emm
            emy:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] elz
            emz:f32[64,256,1600] = sub emy emw
            ena:f32[64,256,1] = add emx 9.999999747378752e-06
            enb:f32[64,256,1] = rsqrt ena
            enc:f32[64,256,1] = div enb ena
            end:f32[64,256,1] = mul -0.5 enc
            ene:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] dzg
            enf:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] ene
            eng:f32[64,256,1600] = mul enb enf
            enh:f32[64,256,1600] = mul emz eng
            eni:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] dzh
            enj:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] eni
            enk:f32[64,256,1600] = add enh enj
            enl:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] enk
            enm:f16[1600,6400] = transpose[permutation=(1, 0)] dzi
            enn:f16[64,256,6400] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] enl enm
            eno:f16[1,1,6400] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 6400)
            ] dzj
            enp:f16[64,256,6400] = add enn eno
            enq:f16[64,256,6400] = integer_pow[y=3] enp
            enr:f16[64,256,6400] = integer_pow[y=2] enp
            ens:f16[64,256,6400] = mul 3.0 enr
            ent:f16[64,256,6400] = mul 0.044708251953125 enq
            enu:f16[64,256,6400] = add enp ent
            env:f16[64,256,6400] = mul 0.7978515625 enu
            enw:f16[64,256,6400] = tanh env
            enx:f16[64,256,6400] = sub 1.0 enw
            eny:f16[64,256,6400] = add 1.0 enw
            enz:f16[64,256,6400] = mul 0.5 eny
            eoa:f16[64,256,6400] = mul enp enz
            eob:f16[6400,1600] = transpose[permutation=(1, 0)] dzk
            eoc:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] eoa eob
            eod:f16[1,1,1600] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 1600)
            ] dzl
            eoe:f16[64,256,1600] = add eoc eod
            eof:f16[64,256,1600] = add elz eoe
            eog:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] eof
            eoh:f32[64,256] = reduce_sum[axes=(2,)] eog
            eoi:f32[64,256] = div eoh 1600.0
            eoj:f32[64,256,1600] = integer_pow[y=2] eog
            eok:f32[64,256,1600] = integer_pow[y=1] eog
            eol:f32[64,256,1600] = mul 2.0 eok
            eom:f32[64,256] = reduce_sum[axes=(2,)] eoj
            eon:f32[64,256] = div eom 1600.0
            eoo:f32[64,256] = integer_pow[y=2] eoi
            eop:f32[64,256] = integer_pow[y=1] eoi
            eoq:f32[64,256] = mul 2.0 eop
            eor:f32[64,256] = sub eon eoo
            eos:f32[64,256] = max 0.0 eor
            eot:bool[64,256] = eq eor eos
            eou:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            eov:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 0.0
            eow:f32[64,256] = select_n eot eov eou
            eox:bool[64,256] = eq 0.0 eos
            eoy:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 2.0
            eoz:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            epa:f32[64,256] = select_n eox eoz eoy
            epb:f32[64,256] = div eow epa
            epc:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] eoi
            epd:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] eos
            epe:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] eof
            epf:f32[64,256,1600] = sub epe epc
            epg:f32[64,256,1] = add epd 9.999999747378752e-06
            eph:f32[64,256,1] = rsqrt epg
            epi:f32[64,256,1] = div eph epg
            epj:f32[64,256,1] = mul -0.5 epi
            epk:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] dzm
            epl:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] epk
            epm:f32[64,256,1600] = mul eph epl
            epn:f32[64,256,1600] = mul epf epm
            epo:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] dzn
            epp:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] epo
            epq:f32[64,256,1600] = add epn epp
            epr:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] epq
            eps:i32[1024] = iota[dimension=0 dtype=int32 shape=(1024,)] 
            ept:i32[1,1024] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 1024)
            ] eps
            epu:i32[1,1024,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(1, 1024, 1)
            ] ept
            epv:i32[1,1,1024] = broadcast_in_dim[
              broadcast_dimensions=(0, 2)
              shape=(1, 1, 1024)
            ] ept
            epw:bool[1,1024,1024] = ge epu epv
            epx:bool[1,1,1024,1024] = broadcast_in_dim[
              broadcast_dimensions=(0, 2, 3)
              shape=(1, 1, 1024, 1024)
            ] epw
            epy:f16[1600,4800] = transpose[permutation=(1, 0)] dzo
            epz:f16[64,256,4800] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] epr epy
            eqa:f16[1,1,4800] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 4800)
            ] dzp
            eqb:f16[64,256,4800] = add epz eqa
            eqc:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 1600)
              start_indices=(0, 0, 0)
              strides=None
            ] eqb
            eqd:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 3200)
              start_indices=(0, 0, 1600)
              strides=None
            ] eqb
            eqe:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 4800)
              start_indices=(0, 0, 3200)
              strides=None
            ] eqb
            eqf:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] eqc
            eqg:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] eqd
            eqh:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] eqe
            eqi:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
            eqj:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
            eqk:i32[2] = concatenate[dimension=0] eqi eqj
            eql:bool[1,1,256,256] = gather[
              dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2, 3), collapsed_slice_dims=(), start_index_map=(2, 3))
              fill_value=None
              indices_are_sorted=True
              mode=GatherScatterMode.PROMISE_IN_BOUNDS
              slice_sizes=(1, 1, 256, 256)
              unique_indices=True
            ] epx eqk
            eqm:bool[1,256,256] = squeeze[dimensions=(0,)] eql
            eqn:bool[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(64, 1, 256, 256)
            ] eqm
            eqo:i32[64,1,1,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 3)
              shape=(64, 1, 1, 256)
            ] dyr
            eqp:i32[64,1,256] = squeeze[dimensions=(2,)] eqo
            eqq:i32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 3)
              shape=(64, 1, 256, 256)
            ] eqp
            eqr:bool[64,1,256,256] = ne eqq 0
            eqs:bool[64,1,256,256] = and eqr eqn
            eqt:f32[64,1,256,256] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] eqs
            equ:bool[64,1,256,256] = gt eqt 0.0
            eqv:f32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 1, 256, 256)
            ] 0.0
            eqw:f16[64,1,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] eqv
            eqx:f32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 1, 256, 256)
            ] -10000.0
            eqy:f16[64,1,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] eqx
            eqz:f16[64,1,256,256] = select_n equ eqy eqw
            era:f32[] = sqrt 64.0
            erb:f16[] = convert_element_type[new_dtype=float16 weak_type=False] era
            erc:f16[64,256,25,64] = div eqf erb
            erd:f16[64,25,256,256] = dot_general[
              dimension_numbers=(((3,), (3,)), ((0, 2), (0, 2)))
              precision=None
              preferred_element_type=None
            ] erc eqg
            ere:f16[64,25,256,256] = add erd eqz
            erf:f16[64,25,256] = reduce_max[axes=(3,)] ere
            erg:f16[64,25,256,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 1)
            ] erf
            erh:f16[64,25,256,1] = stop_gradient erg
            eri:f16[64,25,256,256] = sub ere erh
            erj:f16[64,25,256,256] = exp eri
            erk:f32[64,25,256,256] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] erj
            erl:f32[64,25,256] = reduce_sum[axes=(3,)] erk
            erm:f32[64,25,256,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 1)
            ] erl
            ern:f16[64,25,256,1] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] erm
            ero:f16[64,25,256,256] = div erj ern
            erp:f16[64,25,256,1] = integer_pow[y=-2] ern
            erq:f16[64,25,64,256] = dot_general[
              dimension_numbers=(((1,), (3,)), ((0, 2), (0, 1)))
              precision=None
              preferred_element_type=None
            ] eqh ero
            err:f16[64,256,25,64] = transpose[permutation=(0, 3, 1, 2)] erq
            ers:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] err
            ert:f16[1600,1600] = transpose[permutation=(1, 0)] dzq
            eru:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] ers ert
            erv:f16[1,1,1600] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 1600)
            ] dzr
            erw:f16[64,256,1600] = add eru erv
            erx:f16[64,256,1600] = add erw eof
            ery:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] erx
            erz:f32[64,256] = reduce_sum[axes=(2,)] ery
            esa:f32[64,256] = div erz 1600.0
            esb:f32[64,256,1600] = integer_pow[y=2] ery
            esc:f32[64,256,1600] = integer_pow[y=1] ery
            esd:f32[64,256,1600] = mul 2.0 esc
            ese:f32[64,256] = reduce_sum[axes=(2,)] esb
            esf:f32[64,256] = div ese 1600.0
            esg:f32[64,256] = integer_pow[y=2] esa
            esh:f32[64,256] = integer_pow[y=1] esa
            esi:f32[64,256] = mul 2.0 esh
            esj:f32[64,256] = sub esf esg
            esk:f32[64,256] = max 0.0 esj
            esl:bool[64,256] = eq esj esk
            esm:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            esn:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 0.0
            eso:f32[64,256] = select_n esl esn esm
            esp:bool[64,256] = eq 0.0 esk
            esq:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 2.0
            esr:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            ess:f32[64,256] = select_n esp esr esq
            est:f32[64,256] = div eso ess
            esu:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] esa
            esv:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] esk
            esw:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] erx
            esx:f32[64,256,1600] = sub esw esu
            esy:f32[64,256,1] = add esv 9.999999747378752e-06
            esz:f32[64,256,1] = rsqrt esy
            eta:f32[64,256,1] = div esz esy
            etb:f32[64,256,1] = mul -0.5 eta
            etc:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] dzs
            etd:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] etc
            ete:f32[64,256,1600] = mul esz etd
            etf:f32[64,256,1600] = mul esx ete
            etg:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] dzt
            eth:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] etg
            eti:f32[64,256,1600] = add etf eth
            etj:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] eti
            etk:f16[1600,6400] = transpose[permutation=(1, 0)] dzu
            etl:f16[64,256,6400] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] etj etk
            etm:f16[1,1,6400] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 6400)
            ] dzv
            etn:f16[64,256,6400] = add etl etm
            eto:f16[64,256,6400] = integer_pow[y=3] etn
            etp:f16[64,256,6400] = integer_pow[y=2] etn
            etq:f16[64,256,6400] = mul 3.0 etp
            etr:f16[64,256,6400] = mul 0.044708251953125 eto
            ets:f16[64,256,6400] = add etn etr
            ett:f16[64,256,6400] = mul 0.7978515625 ets
            etu:f16[64,256,6400] = tanh ett
            etv:f16[64,256,6400] = sub 1.0 etu
            etw:f16[64,256,6400] = add 1.0 etu
            etx:f16[64,256,6400] = mul 0.5 etw
            ety:f16[64,256,6400] = mul etn etx
            etz:f16[6400,1600] = transpose[permutation=(1, 0)] dzw
            eua:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] ety etz
            eub:f16[1,1,1600] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 1600)
            ] dzx
            euc:f16[64,256,1600] = add eua eub
            eud:f16[64,256,1600] = add erx euc
            eue:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] eud
            euf:f32[64,256] = reduce_sum[axes=(2,)] eue
            eug:f32[64,256] = div euf 1600.0
            euh:f32[64,256,1600] = integer_pow[y=2] eue
            eui:f32[64,256,1600] = integer_pow[y=1] eue
            euj:f32[64,256,1600] = mul 2.0 eui
            euk:f32[64,256] = reduce_sum[axes=(2,)] euh
            eul:f32[64,256] = div euk 1600.0
            eum:f32[64,256] = integer_pow[y=2] eug
            eun:f32[64,256] = integer_pow[y=1] eug
            euo:f32[64,256] = mul 2.0 eun
            eup:f32[64,256] = sub eul eum
            euq:f32[64,256] = max 0.0 eup
            eur:bool[64,256] = eq eup euq
            eus:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            eut:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 0.0
            euu:f32[64,256] = select_n eur eut eus
            euv:bool[64,256] = eq 0.0 euq
            euw:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 2.0
            eux:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            euy:f32[64,256] = select_n euv eux euw
            euz:f32[64,256] = div euu euy
            eva:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] eug
            evb:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] euq
            evc:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] eud
            evd:f32[64,256,1600] = sub evc eva
            eve:f32[64,256,1] = add evb 9.999999747378752e-06
            evf:f32[64,256,1] = rsqrt eve
            evg:f32[64,256,1] = div evf eve
            evh:f32[64,256,1] = mul -0.5 evg
            evi:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] dzy
            evj:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] evi
            evk:f32[64,256,1600] = mul evf evj
            evl:f32[64,256,1600] = mul evd evk
            evm:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] dzz
            evn:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] evm
            evo:f32[64,256,1600] = add evl evn
            evp:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] evo
            evq:i32[1024] = iota[dimension=0 dtype=int32 shape=(1024,)] 
            evr:i32[1,1024] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 1024)
            ] evq
            evs:i32[1,1024,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(1, 1024, 1)
            ] evr
            evt:i32[1,1,1024] = broadcast_in_dim[
              broadcast_dimensions=(0, 2)
              shape=(1, 1, 1024)
            ] evr
            evu:bool[1,1024,1024] = ge evs evt
            evv:bool[1,1,1024,1024] = broadcast_in_dim[
              broadcast_dimensions=(0, 2, 3)
              shape=(1, 1, 1024, 1024)
            ] evu
            evw:f16[1600,4800] = transpose[permutation=(1, 0)] eaa
            evx:f16[64,256,4800] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] evp evw
            evy:f16[1,1,4800] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 4800)
            ] eab
            evz:f16[64,256,4800] = add evx evy
            ewa:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 1600)
              start_indices=(0, 0, 0)
              strides=None
            ] evz
            ewb:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 3200)
              start_indices=(0, 0, 1600)
              strides=None
            ] evz
            ewc:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 4800)
              start_indices=(0, 0, 3200)
              strides=None
            ] evz
            ewd:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] ewa
            ewe:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] ewb
            ewf:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] ewc
            ewg:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
            ewh:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
            ewi:i32[2] = concatenate[dimension=0] ewg ewh
            ewj:bool[1,1,256,256] = gather[
              dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2, 3), collapsed_slice_dims=(), start_index_map=(2, 3))
              fill_value=None
              indices_are_sorted=True
              mode=GatherScatterMode.PROMISE_IN_BOUNDS
              slice_sizes=(1, 1, 256, 256)
              unique_indices=True
            ] evv ewi
            ewk:bool[1,256,256] = squeeze[dimensions=(0,)] ewj
            ewl:bool[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(64, 1, 256, 256)
            ] ewk
            ewm:i32[64,1,1,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 3)
              shape=(64, 1, 1, 256)
            ] dyr
            ewn:i32[64,1,256] = squeeze[dimensions=(2,)] ewm
            ewo:i32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 3)
              shape=(64, 1, 256, 256)
            ] ewn
            ewp:bool[64,1,256,256] = ne ewo 0
            ewq:bool[64,1,256,256] = and ewp ewl
            ewr:f32[64,1,256,256] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] ewq
            ews:bool[64,1,256,256] = gt ewr 0.0
            ewt:f32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 1, 256, 256)
            ] 0.0
            ewu:f16[64,1,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] ewt
            ewv:f32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 1, 256, 256)
            ] -10000.0
            eww:f16[64,1,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] ewv
            ewx:f16[64,1,256,256] = select_n ews eww ewu
            ewy:f32[] = sqrt 64.0
            ewz:f16[] = convert_element_type[new_dtype=float16 weak_type=False] ewy
            exa:f16[64,256,25,64] = div ewd ewz
            exb:f16[64,25,256,256] = dot_general[
              dimension_numbers=(((3,), (3,)), ((0, 2), (0, 2)))
              precision=None
              preferred_element_type=None
            ] exa ewe
            exc:f16[64,25,256,256] = add exb ewx
            exd:f16[64,25,256] = reduce_max[axes=(3,)] exc
            exe:f16[64,25,256,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 1)
            ] exd
            exf:f16[64,25,256,1] = stop_gradient exe
            exg:f16[64,25,256,256] = sub exc exf
            exh:f16[64,25,256,256] = exp exg
            exi:f32[64,25,256,256] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] exh
            exj:f32[64,25,256] = reduce_sum[axes=(3,)] exi
            exk:f32[64,25,256,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 1)
            ] exj
            exl:f16[64,25,256,1] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] exk
            exm:f16[64,25,256,256] = div exh exl
            exn:f16[64,25,256,1] = integer_pow[y=-2] exl
            exo:f16[64,25,64,256] = dot_general[
              dimension_numbers=(((1,), (3,)), ((0, 2), (0, 1)))
              precision=None
              preferred_element_type=None
            ] ewf exm
            exp:f16[64,256,25,64] = transpose[permutation=(0, 3, 1, 2)] exo
            exq:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] exp
            exr:f16[1600,1600] = transpose[permutation=(1, 0)] eac
            exs:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] exq exr
            ext:f16[1,1,1600] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 1600)
            ] ead
            exu:f16[64,256,1600] = add exs ext
            exv:f16[64,256,1600] = add exu eud
          in (exv, exq, exr, ewf, exn, exh, exl, exa, ewe, ewz, exm, evp, evw, evd,
            evf, evj, evh, euz, euo, euj, evk, ety, etz, etn, etv, etu, etq, etx,
            etj, etk, esx, esz, etd, etb, est, esi, esd, ete, ers, ert, eqh, erp,
            erj, ern, erc, eqg, erb, ero, epr, epy, epf, eph, epl, epj, epb, eoq,
            eol, epm, eoa, eob, enp, enx, enw, ens, enz, enl, enm, emz, enb, enf,
            end, emv, emk, emf, eng, elu, elv, ekj, elr, ell, elp, ele, eki, eld,
            elq, ejt, eka, ejh, ejj, ejn, ejl, ejd, eis, ein, ejo, eic, eid, ehr,
            ehz, ehy, ehu, eib, ehn, eho, ehb, ehd, ehh, ehf, egx, egm, egh, ehi,
            efw, efx, eel, eft, efn, efr, efg, eek, eff, efs, edv, eec, edj, edl,
            edp, edn, edf, ecu, ecp, edq, ece, ecf, ebt, ecb, eca, ebw, ecd, ebp,
            ebq, ebd, ebf, ebj, ebh, eaz, eao, eaj, ebk) }
        name=12
      ] cne bfk bfl bfm bfn bfo bfp bfq bfr bfs bft bcb bfu bfv bfw bfx bfy bfz bga
        bgb bgc bgd bge bgf bgg bgh bgi bgj bgk bgl bgm bgn bgo bgp bgq bgr bgs bgt
        bgu bgv bgw bgx bgy bgz bha bhb bhc bhd bhe bhf
      exw:f16[64,256,1600] exx:f16[64,256,1600] exy:f16[1600,1600] exz:f16[64,256,25,64]
        eya:f16[64,25,256,1] eyb:f16[64,25,256,256] eyc:f16[64,25,256,1] eyd:f16[64,256,25,64]
        eye:f16[64,256,25,64] eyf:f16[] eyg:f16[64,25,256,256] eyh:f16[64,256,1600]
        eyi:f16[1600,4800] eyj:f32[64,256,1600] eyk:f32[64,256,1] eyl:f32[1,1,1600]
        eym:f32[64,256,1] eyn:f32[64,256] eyo:f32[64,256] eyp:f32[64,256,1600] eyq:f32[64,256,1600]
        eyr:f16[64,256,6400] eys:f16[6400,1600] eyt:f16[64,256,6400] eyu:f16[64,256,6400]
        eyv:f16[64,256,6400] eyw:f16[64,256,6400] eyx:f16[64,256,6400] eyy:f16[64,256,1600]
        eyz:f16[1600,6400] eza:f32[64,256,1600] ezb:f32[64,256,1] ezc:f32[1,1,1600]
        ezd:f32[64,256,1] eze:f32[64,256] ezf:f32[64,256] ezg:f32[64,256,1600] ezh:f32[64,256,1600]
        ezi:f16[64,256,1600] ezj:f16[1600,1600] ezk:f16[64,256,25,64] ezl:f16[64,25,256,1]
        ezm:f16[64,25,256,256] ezn:f16[64,25,256,1] ezo:f16[64,256,25,64] ezp:f16[64,256,25,64]
        ezq:f16[] ezr:f16[64,25,256,256] ezs:f16[64,256,1600] ezt:f16[1600,4800]
        ezu:f32[64,256,1600] ezv:f32[64,256,1] ezw:f32[1,1,1600] ezx:f32[64,256,1]
        ezy:f32[64,256] ezz:f32[64,256] faa:f32[64,256,1600] fab:f32[64,256,1600]
        fac:f16[64,256,6400] fad:f16[6400,1600] fae:f16[64,256,6400] faf:f16[64,256,6400]
        fag:f16[64,256,6400] fah:f16[64,256,6400] fai:f16[64,256,6400] faj:f16[64,256,1600]
        fak:f16[1600,6400] fal:f32[64,256,1600] fam:f32[64,256,1] fan:f32[1,1,1600]
        fao:f32[64,256,1] fap:f32[64,256] faq:f32[64,256] far:f32[64,256,1600] fas:f32[64,256,1600]
        fat:f16[64,256,1600] fau:f16[1600,1600] fav:f16[64,256,25,64] faw:f16[64,25,256,1]
        fax:f16[64,25,256,256] fay:f16[64,25,256,1] faz:f16[64,256,25,64] fba:f16[64,256,25,64]
        fbb:f16[] fbc:f16[64,25,256,256] fbd:f16[64,256,1600] fbe:f16[1600,4800]
        fbf:f32[64,256,1600] fbg:f32[64,256,1] fbh:f32[1,1,1600] fbi:f32[64,256,1]
        fbj:f32[64,256] fbk:f32[64,256] fbl:f32[64,256,1600] fbm:f32[64,256,1600]
        fbn:f16[64,256,6400] fbo:f16[6400,1600] fbp:f16[64,256,6400] fbq:f16[64,256,6400]
        fbr:f16[64,256,6400] fbs:f16[64,256,6400] fbt:f16[64,256,6400] fbu:f16[64,256,1600]
        fbv:f16[1600,6400] fbw:f32[64,256,1600] fbx:f32[64,256,1] fby:f32[1,1,1600]
        fbz:f32[64,256,1] fca:f32[64,256] fcb:f32[64,256] fcc:f32[64,256,1600] fcd:f32[64,256,1600]
        fce:f16[64,256,1600] fcf:f16[1600,1600] fcg:f16[64,256,25,64] fch:f16[64,25,256,1]
        fci:f16[64,25,256,256] fcj:f16[64,25,256,1] fck:f16[64,256,25,64] fcl:f16[64,256,25,64]
        fcm:f16[] fcn:f16[64,25,256,256] fco:f16[64,256,1600] fcp:f16[1600,4800]
        fcq:f32[64,256,1600] fcr:f32[64,256,1] fcs:f32[1,1,1600] fct:f32[64,256,1]
        fcu:f32[64,256] fcv:f32[64,256] fcw:f32[64,256,1600] fcx:f32[64,256,1600]
        fcy:f16[64,256,6400] fcz:f16[6400,1600] fda:f16[64,256,6400] fdb:f16[64,256,6400]
        fdc:f16[64,256,6400] fdd:f16[64,256,6400] fde:f16[64,256,6400] fdf:f16[64,256,1600]
        fdg:f16[1600,6400] fdh:f32[64,256,1600] fdi:f32[64,256,1] fdj:f32[1,1,1600]
        fdk:f32[64,256,1] fdl:f32[64,256] fdm:f32[64,256] fdn:f32[64,256,1600] fdo:f32[64,256,1600] = named_call[
        call_jaxpr={ lambda ; fdp:f16[64,256,1600] fdq:f16[1600] fdr:f16[1600] fds:f16[6400,1600]
            fdt:f16[6400] fdu:f16[1600,6400] fdv:f16[1600] fdw:f16[1600] fdx:f16[1600]
            fdy:f16[4800,1600] fdz:f16[4800] fea:i32[64,256] feb:f16[1600,1600] fec:f16[1600]
            fed:f16[1600] fee:f16[1600] fef:f16[6400,1600] feg:f16[6400] feh:f16[1600,6400]
            fei:f16[1600] fej:f16[1600] fek:f16[1600] fel:f16[4800,1600] fem:f16[4800]
            fen:f16[1600,1600] feo:f16[1600] fep:f16[1600] feq:f16[1600] fer:f16[6400,1600]
            fes:f16[6400] fet:f16[1600,6400] feu:f16[1600] fev:f16[1600] few:f16[1600]
            fex:f16[4800,1600] fey:f16[4800] fez:f16[1600,1600] ffa:f16[1600] ffb:f16[1600]
            ffc:f16[1600] ffd:f16[6400,1600] ffe:f16[6400] fff:f16[1600,6400] ffg:f16[1600]
            ffh:f16[1600] ffi:f16[1600] ffj:f16[4800,1600] ffk:f16[4800] ffl:f16[1600,1600]
            ffm:f16[1600]. let
            ffn:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] fdp
            ffo:f32[64,256] = reduce_sum[axes=(2,)] ffn
            ffp:f32[64,256] = div ffo 1600.0
            ffq:f32[64,256,1600] = integer_pow[y=2] ffn
            ffr:f32[64,256,1600] = integer_pow[y=1] ffn
            ffs:f32[64,256,1600] = mul 2.0 ffr
            fft:f32[64,256] = reduce_sum[axes=(2,)] ffq
            ffu:f32[64,256] = div fft 1600.0
            ffv:f32[64,256] = integer_pow[y=2] ffp
            ffw:f32[64,256] = integer_pow[y=1] ffp
            ffx:f32[64,256] = mul 2.0 ffw
            ffy:f32[64,256] = sub ffu ffv
            ffz:f32[64,256] = max 0.0 ffy
            fga:bool[64,256] = eq ffy ffz
            fgb:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            fgc:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 0.0
            fgd:f32[64,256] = select_n fga fgc fgb
            fge:bool[64,256] = eq 0.0 ffz
            fgf:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 2.0
            fgg:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            fgh:f32[64,256] = select_n fge fgg fgf
            fgi:f32[64,256] = div fgd fgh
            fgj:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] ffp
            fgk:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] ffz
            fgl:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] fdp
            fgm:f32[64,256,1600] = sub fgl fgj
            fgn:f32[64,256,1] = add fgk 9.999999747378752e-06
            fgo:f32[64,256,1] = rsqrt fgn
            fgp:f32[64,256,1] = div fgo fgn
            fgq:f32[64,256,1] = mul -0.5 fgp
            fgr:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] fdq
            fgs:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] fgr
            fgt:f32[64,256,1600] = mul fgo fgs
            fgu:f32[64,256,1600] = mul fgm fgt
            fgv:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] fdr
            fgw:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] fgv
            fgx:f32[64,256,1600] = add fgu fgw
            fgy:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] fgx
            fgz:f16[1600,6400] = transpose[permutation=(1, 0)] fds
            fha:f16[64,256,6400] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] fgy fgz
            fhb:f16[1,1,6400] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 6400)
            ] fdt
            fhc:f16[64,256,6400] = add fha fhb
            fhd:f16[64,256,6400] = integer_pow[y=3] fhc
            fhe:f16[64,256,6400] = integer_pow[y=2] fhc
            fhf:f16[64,256,6400] = mul 3.0 fhe
            fhg:f16[64,256,6400] = mul 0.044708251953125 fhd
            fhh:f16[64,256,6400] = add fhc fhg
            fhi:f16[64,256,6400] = mul 0.7978515625 fhh
            fhj:f16[64,256,6400] = tanh fhi
            fhk:f16[64,256,6400] = sub 1.0 fhj
            fhl:f16[64,256,6400] = add 1.0 fhj
            fhm:f16[64,256,6400] = mul 0.5 fhl
            fhn:f16[64,256,6400] = mul fhc fhm
            fho:f16[6400,1600] = transpose[permutation=(1, 0)] fdu
            fhp:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] fhn fho
            fhq:f16[1,1,1600] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 1600)
            ] fdv
            fhr:f16[64,256,1600] = add fhp fhq
            fhs:f16[64,256,1600] = add fdp fhr
            fht:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] fhs
            fhu:f32[64,256] = reduce_sum[axes=(2,)] fht
            fhv:f32[64,256] = div fhu 1600.0
            fhw:f32[64,256,1600] = integer_pow[y=2] fht
            fhx:f32[64,256,1600] = integer_pow[y=1] fht
            fhy:f32[64,256,1600] = mul 2.0 fhx
            fhz:f32[64,256] = reduce_sum[axes=(2,)] fhw
            fia:f32[64,256] = div fhz 1600.0
            fib:f32[64,256] = integer_pow[y=2] fhv
            fic:f32[64,256] = integer_pow[y=1] fhv
            fid:f32[64,256] = mul 2.0 fic
            fie:f32[64,256] = sub fia fib
            fif:f32[64,256] = max 0.0 fie
            fig:bool[64,256] = eq fie fif
            fih:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            fii:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 0.0
            fij:f32[64,256] = select_n fig fii fih
            fik:bool[64,256] = eq 0.0 fif
            fil:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 2.0
            fim:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            fin:f32[64,256] = select_n fik fim fil
            fio:f32[64,256] = div fij fin
            fip:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] fhv
            fiq:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] fif
            fir:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] fhs
            fis:f32[64,256,1600] = sub fir fip
            fit:f32[64,256,1] = add fiq 9.999999747378752e-06
            fiu:f32[64,256,1] = rsqrt fit
            fiv:f32[64,256,1] = div fiu fit
            fiw:f32[64,256,1] = mul -0.5 fiv
            fix:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] fdw
            fiy:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] fix
            fiz:f32[64,256,1600] = mul fiu fiy
            fja:f32[64,256,1600] = mul fis fiz
            fjb:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] fdx
            fjc:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] fjb
            fjd:f32[64,256,1600] = add fja fjc
            fje:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] fjd
            fjf:i32[1024] = iota[dimension=0 dtype=int32 shape=(1024,)] 
            fjg:i32[1,1024] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 1024)
            ] fjf
            fjh:i32[1,1024,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(1, 1024, 1)
            ] fjg
            fji:i32[1,1,1024] = broadcast_in_dim[
              broadcast_dimensions=(0, 2)
              shape=(1, 1, 1024)
            ] fjg
            fjj:bool[1,1024,1024] = ge fjh fji
            fjk:bool[1,1,1024,1024] = broadcast_in_dim[
              broadcast_dimensions=(0, 2, 3)
              shape=(1, 1, 1024, 1024)
            ] fjj
            fjl:f16[1600,4800] = transpose[permutation=(1, 0)] fdy
            fjm:f16[64,256,4800] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] fje fjl
            fjn:f16[1,1,4800] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 4800)
            ] fdz
            fjo:f16[64,256,4800] = add fjm fjn
            fjp:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 1600)
              start_indices=(0, 0, 0)
              strides=None
            ] fjo
            fjq:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 3200)
              start_indices=(0, 0, 1600)
              strides=None
            ] fjo
            fjr:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 4800)
              start_indices=(0, 0, 3200)
              strides=None
            ] fjo
            fjs:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] fjp
            fjt:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] fjq
            fju:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] fjr
            fjv:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
            fjw:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
            fjx:i32[2] = concatenate[dimension=0] fjv fjw
            fjy:bool[1,1,256,256] = gather[
              dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2, 3), collapsed_slice_dims=(), start_index_map=(2, 3))
              fill_value=None
              indices_are_sorted=True
              mode=GatherScatterMode.PROMISE_IN_BOUNDS
              slice_sizes=(1, 1, 256, 256)
              unique_indices=True
            ] fjk fjx
            fjz:bool[1,256,256] = squeeze[dimensions=(0,)] fjy
            fka:bool[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(64, 1, 256, 256)
            ] fjz
            fkb:i32[64,1,1,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 3)
              shape=(64, 1, 1, 256)
            ] fea
            fkc:i32[64,1,256] = squeeze[dimensions=(2,)] fkb
            fkd:i32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 3)
              shape=(64, 1, 256, 256)
            ] fkc
            fke:bool[64,1,256,256] = ne fkd 0
            fkf:bool[64,1,256,256] = and fke fka
            fkg:f32[64,1,256,256] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] fkf
            fkh:bool[64,1,256,256] = gt fkg 0.0
            fki:f32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 1, 256, 256)
            ] 0.0
            fkj:f16[64,1,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] fki
            fkk:f32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 1, 256, 256)
            ] -10000.0
            fkl:f16[64,1,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] fkk
            fkm:f16[64,1,256,256] = select_n fkh fkl fkj
            fkn:f32[] = sqrt 64.0
            fko:f16[] = convert_element_type[new_dtype=float16 weak_type=False] fkn
            fkp:f16[64,256,25,64] = div fjs fko
            fkq:f16[64,25,256,256] = dot_general[
              dimension_numbers=(((3,), (3,)), ((0, 2), (0, 2)))
              precision=None
              preferred_element_type=None
            ] fkp fjt
            fkr:f16[64,25,256,256] = add fkq fkm
            fks:f16[64,25,256] = reduce_max[axes=(3,)] fkr
            fkt:f16[64,25,256,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 1)
            ] fks
            fku:f16[64,25,256,1] = stop_gradient fkt
            fkv:f16[64,25,256,256] = sub fkr fku
            fkw:f16[64,25,256,256] = exp fkv
            fkx:f32[64,25,256,256] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] fkw
            fky:f32[64,25,256] = reduce_sum[axes=(3,)] fkx
            fkz:f32[64,25,256,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 1)
            ] fky
            fla:f16[64,25,256,1] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] fkz
            flb:f16[64,25,256,256] = div fkw fla
            flc:f16[64,25,256,1] = integer_pow[y=-2] fla
            fld:f16[64,25,64,256] = dot_general[
              dimension_numbers=(((1,), (3,)), ((0, 2), (0, 1)))
              precision=None
              preferred_element_type=None
            ] fju flb
            fle:f16[64,256,25,64] = transpose[permutation=(0, 3, 1, 2)] fld
            flf:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] fle
            flg:f16[1600,1600] = transpose[permutation=(1, 0)] feb
            flh:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] flf flg
            fli:f16[1,1,1600] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 1600)
            ] fec
            flj:f16[64,256,1600] = add flh fli
            flk:f16[64,256,1600] = add flj fhs
            fll:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] flk
            flm:f32[64,256] = reduce_sum[axes=(2,)] fll
            fln:f32[64,256] = div flm 1600.0
            flo:f32[64,256,1600] = integer_pow[y=2] fll
            flp:f32[64,256,1600] = integer_pow[y=1] fll
            flq:f32[64,256,1600] = mul 2.0 flp
            flr:f32[64,256] = reduce_sum[axes=(2,)] flo
            fls:f32[64,256] = div flr 1600.0
            flt:f32[64,256] = integer_pow[y=2] fln
            flu:f32[64,256] = integer_pow[y=1] fln
            flv:f32[64,256] = mul 2.0 flu
            flw:f32[64,256] = sub fls flt
            flx:f32[64,256] = max 0.0 flw
            fly:bool[64,256] = eq flw flx
            flz:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            fma:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 0.0
            fmb:f32[64,256] = select_n fly fma flz
            fmc:bool[64,256] = eq 0.0 flx
            fmd:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 2.0
            fme:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            fmf:f32[64,256] = select_n fmc fme fmd
            fmg:f32[64,256] = div fmb fmf
            fmh:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] fln
            fmi:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] flx
            fmj:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] flk
            fmk:f32[64,256,1600] = sub fmj fmh
            fml:f32[64,256,1] = add fmi 9.999999747378752e-06
            fmm:f32[64,256,1] = rsqrt fml
            fmn:f32[64,256,1] = div fmm fml
            fmo:f32[64,256,1] = mul -0.5 fmn
            fmp:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] fed
            fmq:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] fmp
            fmr:f32[64,256,1600] = mul fmm fmq
            fms:f32[64,256,1600] = mul fmk fmr
            fmt:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] fee
            fmu:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] fmt
            fmv:f32[64,256,1600] = add fms fmu
            fmw:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] fmv
            fmx:f16[1600,6400] = transpose[permutation=(1, 0)] fef
            fmy:f16[64,256,6400] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] fmw fmx
            fmz:f16[1,1,6400] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 6400)
            ] feg
            fna:f16[64,256,6400] = add fmy fmz
            fnb:f16[64,256,6400] = integer_pow[y=3] fna
            fnc:f16[64,256,6400] = integer_pow[y=2] fna
            fnd:f16[64,256,6400] = mul 3.0 fnc
            fne:f16[64,256,6400] = mul 0.044708251953125 fnb
            fnf:f16[64,256,6400] = add fna fne
            fng:f16[64,256,6400] = mul 0.7978515625 fnf
            fnh:f16[64,256,6400] = tanh fng
            fni:f16[64,256,6400] = sub 1.0 fnh
            fnj:f16[64,256,6400] = add 1.0 fnh
            fnk:f16[64,256,6400] = mul 0.5 fnj
            fnl:f16[64,256,6400] = mul fna fnk
            fnm:f16[6400,1600] = transpose[permutation=(1, 0)] feh
            fnn:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] fnl fnm
            fno:f16[1,1,1600] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 1600)
            ] fei
            fnp:f16[64,256,1600] = add fnn fno
            fnq:f16[64,256,1600] = add flk fnp
            fnr:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] fnq
            fns:f32[64,256] = reduce_sum[axes=(2,)] fnr
            fnt:f32[64,256] = div fns 1600.0
            fnu:f32[64,256,1600] = integer_pow[y=2] fnr
            fnv:f32[64,256,1600] = integer_pow[y=1] fnr
            fnw:f32[64,256,1600] = mul 2.0 fnv
            fnx:f32[64,256] = reduce_sum[axes=(2,)] fnu
            fny:f32[64,256] = div fnx 1600.0
            fnz:f32[64,256] = integer_pow[y=2] fnt
            foa:f32[64,256] = integer_pow[y=1] fnt
            fob:f32[64,256] = mul 2.0 foa
            foc:f32[64,256] = sub fny fnz
            fod:f32[64,256] = max 0.0 foc
            foe:bool[64,256] = eq foc fod
            fof:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            fog:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 0.0
            foh:f32[64,256] = select_n foe fog fof
            foi:bool[64,256] = eq 0.0 fod
            foj:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 2.0
            fok:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            fol:f32[64,256] = select_n foi fok foj
            fom:f32[64,256] = div foh fol
            fon:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] fnt
            foo:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] fod
            fop:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] fnq
            foq:f32[64,256,1600] = sub fop fon
            for:f32[64,256,1] = add foo 9.999999747378752e-06
            fos:f32[64,256,1] = rsqrt for
            fot:f32[64,256,1] = div fos for
            fou:f32[64,256,1] = mul -0.5 fot
            fov:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] fej
            fow:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] fov
            fox:f32[64,256,1600] = mul fos fow
            foy:f32[64,256,1600] = mul foq fox
            foz:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] fek
            fpa:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] foz
            fpb:f32[64,256,1600] = add foy fpa
            fpc:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] fpb
            fpd:i32[1024] = iota[dimension=0 dtype=int32 shape=(1024,)] 
            fpe:i32[1,1024] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 1024)
            ] fpd
            fpf:i32[1,1024,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(1, 1024, 1)
            ] fpe
            fpg:i32[1,1,1024] = broadcast_in_dim[
              broadcast_dimensions=(0, 2)
              shape=(1, 1, 1024)
            ] fpe
            fph:bool[1,1024,1024] = ge fpf fpg
            fpi:bool[1,1,1024,1024] = broadcast_in_dim[
              broadcast_dimensions=(0, 2, 3)
              shape=(1, 1, 1024, 1024)
            ] fph
            fpj:f16[1600,4800] = transpose[permutation=(1, 0)] fel
            fpk:f16[64,256,4800] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] fpc fpj
            fpl:f16[1,1,4800] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 4800)
            ] fem
            fpm:f16[64,256,4800] = add fpk fpl
            fpn:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 1600)
              start_indices=(0, 0, 0)
              strides=None
            ] fpm
            fpo:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 3200)
              start_indices=(0, 0, 1600)
              strides=None
            ] fpm
            fpp:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 4800)
              start_indices=(0, 0, 3200)
              strides=None
            ] fpm
            fpq:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] fpn
            fpr:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] fpo
            fps:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] fpp
            fpt:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
            fpu:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
            fpv:i32[2] = concatenate[dimension=0] fpt fpu
            fpw:bool[1,1,256,256] = gather[
              dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2, 3), collapsed_slice_dims=(), start_index_map=(2, 3))
              fill_value=None
              indices_are_sorted=True
              mode=GatherScatterMode.PROMISE_IN_BOUNDS
              slice_sizes=(1, 1, 256, 256)
              unique_indices=True
            ] fpi fpv
            fpx:bool[1,256,256] = squeeze[dimensions=(0,)] fpw
            fpy:bool[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(64, 1, 256, 256)
            ] fpx
            fpz:i32[64,1,1,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 3)
              shape=(64, 1, 1, 256)
            ] fea
            fqa:i32[64,1,256] = squeeze[dimensions=(2,)] fpz
            fqb:i32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 3)
              shape=(64, 1, 256, 256)
            ] fqa
            fqc:bool[64,1,256,256] = ne fqb 0
            fqd:bool[64,1,256,256] = and fqc fpy
            fqe:f32[64,1,256,256] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] fqd
            fqf:bool[64,1,256,256] = gt fqe 0.0
            fqg:f32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 1, 256, 256)
            ] 0.0
            fqh:f16[64,1,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] fqg
            fqi:f32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 1, 256, 256)
            ] -10000.0
            fqj:f16[64,1,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] fqi
            fqk:f16[64,1,256,256] = select_n fqf fqj fqh
            fql:f32[] = sqrt 64.0
            fqm:f16[] = convert_element_type[new_dtype=float16 weak_type=False] fql
            fqn:f16[64,256,25,64] = div fpq fqm
            fqo:f16[64,25,256,256] = dot_general[
              dimension_numbers=(((3,), (3,)), ((0, 2), (0, 2)))
              precision=None
              preferred_element_type=None
            ] fqn fpr
            fqp:f16[64,25,256,256] = add fqo fqk
            fqq:f16[64,25,256] = reduce_max[axes=(3,)] fqp
            fqr:f16[64,25,256,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 1)
            ] fqq
            fqs:f16[64,25,256,1] = stop_gradient fqr
            fqt:f16[64,25,256,256] = sub fqp fqs
            fqu:f16[64,25,256,256] = exp fqt
            fqv:f32[64,25,256,256] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] fqu
            fqw:f32[64,25,256] = reduce_sum[axes=(3,)] fqv
            fqx:f32[64,25,256,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 1)
            ] fqw
            fqy:f16[64,25,256,1] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] fqx
            fqz:f16[64,25,256,256] = div fqu fqy
            fra:f16[64,25,256,1] = integer_pow[y=-2] fqy
            frb:f16[64,25,64,256] = dot_general[
              dimension_numbers=(((1,), (3,)), ((0, 2), (0, 1)))
              precision=None
              preferred_element_type=None
            ] fps fqz
            frc:f16[64,256,25,64] = transpose[permutation=(0, 3, 1, 2)] frb
            frd:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] frc
            fre:f16[1600,1600] = transpose[permutation=(1, 0)] fen
            frf:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] frd fre
            frg:f16[1,1,1600] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 1600)
            ] feo
            frh:f16[64,256,1600] = add frf frg
            fri:f16[64,256,1600] = add frh fnq
            frj:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] fri
            frk:f32[64,256] = reduce_sum[axes=(2,)] frj
            frl:f32[64,256] = div frk 1600.0
            frm:f32[64,256,1600] = integer_pow[y=2] frj
            frn:f32[64,256,1600] = integer_pow[y=1] frj
            fro:f32[64,256,1600] = mul 2.0 frn
            frp:f32[64,256] = reduce_sum[axes=(2,)] frm
            frq:f32[64,256] = div frp 1600.0
            frr:f32[64,256] = integer_pow[y=2] frl
            frs:f32[64,256] = integer_pow[y=1] frl
            frt:f32[64,256] = mul 2.0 frs
            fru:f32[64,256] = sub frq frr
            frv:f32[64,256] = max 0.0 fru
            frw:bool[64,256] = eq fru frv
            frx:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            fry:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 0.0
            frz:f32[64,256] = select_n frw fry frx
            fsa:bool[64,256] = eq 0.0 frv
            fsb:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 2.0
            fsc:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            fsd:f32[64,256] = select_n fsa fsc fsb
            fse:f32[64,256] = div frz fsd
            fsf:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] frl
            fsg:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] frv
            fsh:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] fri
            fsi:f32[64,256,1600] = sub fsh fsf
            fsj:f32[64,256,1] = add fsg 9.999999747378752e-06
            fsk:f32[64,256,1] = rsqrt fsj
            fsl:f32[64,256,1] = div fsk fsj
            fsm:f32[64,256,1] = mul -0.5 fsl
            fsn:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] fep
            fso:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] fsn
            fsp:f32[64,256,1600] = mul fsk fso
            fsq:f32[64,256,1600] = mul fsi fsp
            fsr:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] feq
            fss:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] fsr
            fst:f32[64,256,1600] = add fsq fss
            fsu:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] fst
            fsv:f16[1600,6400] = transpose[permutation=(1, 0)] fer
            fsw:f16[64,256,6400] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] fsu fsv
            fsx:f16[1,1,6400] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 6400)
            ] fes
            fsy:f16[64,256,6400] = add fsw fsx
            fsz:f16[64,256,6400] = integer_pow[y=3] fsy
            fta:f16[64,256,6400] = integer_pow[y=2] fsy
            ftb:f16[64,256,6400] = mul 3.0 fta
            ftc:f16[64,256,6400] = mul 0.044708251953125 fsz
            ftd:f16[64,256,6400] = add fsy ftc
            fte:f16[64,256,6400] = mul 0.7978515625 ftd
            ftf:f16[64,256,6400] = tanh fte
            ftg:f16[64,256,6400] = sub 1.0 ftf
            fth:f16[64,256,6400] = add 1.0 ftf
            fti:f16[64,256,6400] = mul 0.5 fth
            ftj:f16[64,256,6400] = mul fsy fti
            ftk:f16[6400,1600] = transpose[permutation=(1, 0)] fet
            ftl:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] ftj ftk
            ftm:f16[1,1,1600] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 1600)
            ] feu
            ftn:f16[64,256,1600] = add ftl ftm
            fto:f16[64,256,1600] = add fri ftn
            ftp:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] fto
            ftq:f32[64,256] = reduce_sum[axes=(2,)] ftp
            ftr:f32[64,256] = div ftq 1600.0
            fts:f32[64,256,1600] = integer_pow[y=2] ftp
            ftt:f32[64,256,1600] = integer_pow[y=1] ftp
            ftu:f32[64,256,1600] = mul 2.0 ftt
            ftv:f32[64,256] = reduce_sum[axes=(2,)] fts
            ftw:f32[64,256] = div ftv 1600.0
            ftx:f32[64,256] = integer_pow[y=2] ftr
            fty:f32[64,256] = integer_pow[y=1] ftr
            ftz:f32[64,256] = mul 2.0 fty
            fua:f32[64,256] = sub ftw ftx
            fub:f32[64,256] = max 0.0 fua
            fuc:bool[64,256] = eq fua fub
            fud:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            fue:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 0.0
            fuf:f32[64,256] = select_n fuc fue fud
            fug:bool[64,256] = eq 0.0 fub
            fuh:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 2.0
            fui:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            fuj:f32[64,256] = select_n fug fui fuh
            fuk:f32[64,256] = div fuf fuj
            ful:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] ftr
            fum:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] fub
            fun:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] fto
            fuo:f32[64,256,1600] = sub fun ful
            fup:f32[64,256,1] = add fum 9.999999747378752e-06
            fuq:f32[64,256,1] = rsqrt fup
            fur:f32[64,256,1] = div fuq fup
            fus:f32[64,256,1] = mul -0.5 fur
            fut:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] fev
            fuu:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] fut
            fuv:f32[64,256,1600] = mul fuq fuu
            fuw:f32[64,256,1600] = mul fuo fuv
            fux:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] few
            fuy:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] fux
            fuz:f32[64,256,1600] = add fuw fuy
            fva:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] fuz
            fvb:i32[1024] = iota[dimension=0 dtype=int32 shape=(1024,)] 
            fvc:i32[1,1024] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 1024)
            ] fvb
            fvd:i32[1,1024,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(1, 1024, 1)
            ] fvc
            fve:i32[1,1,1024] = broadcast_in_dim[
              broadcast_dimensions=(0, 2)
              shape=(1, 1, 1024)
            ] fvc
            fvf:bool[1,1024,1024] = ge fvd fve
            fvg:bool[1,1,1024,1024] = broadcast_in_dim[
              broadcast_dimensions=(0, 2, 3)
              shape=(1, 1, 1024, 1024)
            ] fvf
            fvh:f16[1600,4800] = transpose[permutation=(1, 0)] fex
            fvi:f16[64,256,4800] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] fva fvh
            fvj:f16[1,1,4800] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 4800)
            ] fey
            fvk:f16[64,256,4800] = add fvi fvj
            fvl:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 1600)
              start_indices=(0, 0, 0)
              strides=None
            ] fvk
            fvm:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 3200)
              start_indices=(0, 0, 1600)
              strides=None
            ] fvk
            fvn:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 4800)
              start_indices=(0, 0, 3200)
              strides=None
            ] fvk
            fvo:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] fvl
            fvp:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] fvm
            fvq:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] fvn
            fvr:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
            fvs:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
            fvt:i32[2] = concatenate[dimension=0] fvr fvs
            fvu:bool[1,1,256,256] = gather[
              dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2, 3), collapsed_slice_dims=(), start_index_map=(2, 3))
              fill_value=None
              indices_are_sorted=True
              mode=GatherScatterMode.PROMISE_IN_BOUNDS
              slice_sizes=(1, 1, 256, 256)
              unique_indices=True
            ] fvg fvt
            fvv:bool[1,256,256] = squeeze[dimensions=(0,)] fvu
            fvw:bool[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(64, 1, 256, 256)
            ] fvv
            fvx:i32[64,1,1,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 3)
              shape=(64, 1, 1, 256)
            ] fea
            fvy:i32[64,1,256] = squeeze[dimensions=(2,)] fvx
            fvz:i32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 3)
              shape=(64, 1, 256, 256)
            ] fvy
            fwa:bool[64,1,256,256] = ne fvz 0
            fwb:bool[64,1,256,256] = and fwa fvw
            fwc:f32[64,1,256,256] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] fwb
            fwd:bool[64,1,256,256] = gt fwc 0.0
            fwe:f32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 1, 256, 256)
            ] 0.0
            fwf:f16[64,1,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] fwe
            fwg:f32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 1, 256, 256)
            ] -10000.0
            fwh:f16[64,1,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] fwg
            fwi:f16[64,1,256,256] = select_n fwd fwh fwf
            fwj:f32[] = sqrt 64.0
            fwk:f16[] = convert_element_type[new_dtype=float16 weak_type=False] fwj
            fwl:f16[64,256,25,64] = div fvo fwk
            fwm:f16[64,25,256,256] = dot_general[
              dimension_numbers=(((3,), (3,)), ((0, 2), (0, 2)))
              precision=None
              preferred_element_type=None
            ] fwl fvp
            fwn:f16[64,25,256,256] = add fwm fwi
            fwo:f16[64,25,256] = reduce_max[axes=(3,)] fwn
            fwp:f16[64,25,256,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 1)
            ] fwo
            fwq:f16[64,25,256,1] = stop_gradient fwp
            fwr:f16[64,25,256,256] = sub fwn fwq
            fws:f16[64,25,256,256] = exp fwr
            fwt:f32[64,25,256,256] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] fws
            fwu:f32[64,25,256] = reduce_sum[axes=(3,)] fwt
            fwv:f32[64,25,256,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 1)
            ] fwu
            fww:f16[64,25,256,1] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] fwv
            fwx:f16[64,25,256,256] = div fws fww
            fwy:f16[64,25,256,1] = integer_pow[y=-2] fww
            fwz:f16[64,25,64,256] = dot_general[
              dimension_numbers=(((1,), (3,)), ((0, 2), (0, 1)))
              precision=None
              preferred_element_type=None
            ] fvq fwx
            fxa:f16[64,256,25,64] = transpose[permutation=(0, 3, 1, 2)] fwz
            fxb:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] fxa
            fxc:f16[1600,1600] = transpose[permutation=(1, 0)] fez
            fxd:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] fxb fxc
            fxe:f16[1,1,1600] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 1600)
            ] ffa
            fxf:f16[64,256,1600] = add fxd fxe
            fxg:f16[64,256,1600] = add fxf fto
            fxh:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] fxg
            fxi:f32[64,256] = reduce_sum[axes=(2,)] fxh
            fxj:f32[64,256] = div fxi 1600.0
            fxk:f32[64,256,1600] = integer_pow[y=2] fxh
            fxl:f32[64,256,1600] = integer_pow[y=1] fxh
            fxm:f32[64,256,1600] = mul 2.0 fxl
            fxn:f32[64,256] = reduce_sum[axes=(2,)] fxk
            fxo:f32[64,256] = div fxn 1600.0
            fxp:f32[64,256] = integer_pow[y=2] fxj
            fxq:f32[64,256] = integer_pow[y=1] fxj
            fxr:f32[64,256] = mul 2.0 fxq
            fxs:f32[64,256] = sub fxo fxp
            fxt:f32[64,256] = max 0.0 fxs
            fxu:bool[64,256] = eq fxs fxt
            fxv:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            fxw:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 0.0
            fxx:f32[64,256] = select_n fxu fxw fxv
            fxy:bool[64,256] = eq 0.0 fxt
            fxz:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 2.0
            fya:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            fyb:f32[64,256] = select_n fxy fya fxz
            fyc:f32[64,256] = div fxx fyb
            fyd:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] fxj
            fye:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] fxt
            fyf:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] fxg
            fyg:f32[64,256,1600] = sub fyf fyd
            fyh:f32[64,256,1] = add fye 9.999999747378752e-06
            fyi:f32[64,256,1] = rsqrt fyh
            fyj:f32[64,256,1] = div fyi fyh
            fyk:f32[64,256,1] = mul -0.5 fyj
            fyl:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] ffb
            fym:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] fyl
            fyn:f32[64,256,1600] = mul fyi fym
            fyo:f32[64,256,1600] = mul fyg fyn
            fyp:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] ffc
            fyq:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] fyp
            fyr:f32[64,256,1600] = add fyo fyq
            fys:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] fyr
            fyt:f16[1600,6400] = transpose[permutation=(1, 0)] ffd
            fyu:f16[64,256,6400] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] fys fyt
            fyv:f16[1,1,6400] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 6400)
            ] ffe
            fyw:f16[64,256,6400] = add fyu fyv
            fyx:f16[64,256,6400] = integer_pow[y=3] fyw
            fyy:f16[64,256,6400] = integer_pow[y=2] fyw
            fyz:f16[64,256,6400] = mul 3.0 fyy
            fza:f16[64,256,6400] = mul 0.044708251953125 fyx
            fzb:f16[64,256,6400] = add fyw fza
            fzc:f16[64,256,6400] = mul 0.7978515625 fzb
            fzd:f16[64,256,6400] = tanh fzc
            fze:f16[64,256,6400] = sub 1.0 fzd
            fzf:f16[64,256,6400] = add 1.0 fzd
            fzg:f16[64,256,6400] = mul 0.5 fzf
            fzh:f16[64,256,6400] = mul fyw fzg
            fzi:f16[6400,1600] = transpose[permutation=(1, 0)] fff
            fzj:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] fzh fzi
            fzk:f16[1,1,1600] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 1600)
            ] ffg
            fzl:f16[64,256,1600] = add fzj fzk
            fzm:f16[64,256,1600] = add fxg fzl
            fzn:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] fzm
            fzo:f32[64,256] = reduce_sum[axes=(2,)] fzn
            fzp:f32[64,256] = div fzo 1600.0
            fzq:f32[64,256,1600] = integer_pow[y=2] fzn
            fzr:f32[64,256,1600] = integer_pow[y=1] fzn
            fzs:f32[64,256,1600] = mul 2.0 fzr
            fzt:f32[64,256] = reduce_sum[axes=(2,)] fzq
            fzu:f32[64,256] = div fzt 1600.0
            fzv:f32[64,256] = integer_pow[y=2] fzp
            fzw:f32[64,256] = integer_pow[y=1] fzp
            fzx:f32[64,256] = mul 2.0 fzw
            fzy:f32[64,256] = sub fzu fzv
            fzz:f32[64,256] = max 0.0 fzy
            gaa:bool[64,256] = eq fzy fzz
            gab:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            gac:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 0.0
            gad:f32[64,256] = select_n gaa gac gab
            gae:bool[64,256] = eq 0.0 fzz
            gaf:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 2.0
            gag:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            gah:f32[64,256] = select_n gae gag gaf
            gai:f32[64,256] = div gad gah
            gaj:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] fzp
            gak:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] fzz
            gal:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] fzm
            gam:f32[64,256,1600] = sub gal gaj
            gan:f32[64,256,1] = add gak 9.999999747378752e-06
            gao:f32[64,256,1] = rsqrt gan
            gap:f32[64,256,1] = div gao gan
            gaq:f32[64,256,1] = mul -0.5 gap
            gar:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] ffh
            gas:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] gar
            gat:f32[64,256,1600] = mul gao gas
            gau:f32[64,256,1600] = mul gam gat
            gav:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] ffi
            gaw:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] gav
            gax:f32[64,256,1600] = add gau gaw
            gay:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] gax
            gaz:i32[1024] = iota[dimension=0 dtype=int32 shape=(1024,)] 
            gba:i32[1,1024] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 1024)
            ] gaz
            gbb:i32[1,1024,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(1, 1024, 1)
            ] gba
            gbc:i32[1,1,1024] = broadcast_in_dim[
              broadcast_dimensions=(0, 2)
              shape=(1, 1, 1024)
            ] gba
            gbd:bool[1,1024,1024] = ge gbb gbc
            gbe:bool[1,1,1024,1024] = broadcast_in_dim[
              broadcast_dimensions=(0, 2, 3)
              shape=(1, 1, 1024, 1024)
            ] gbd
            gbf:f16[1600,4800] = transpose[permutation=(1, 0)] ffj
            gbg:f16[64,256,4800] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] gay gbf
            gbh:f16[1,1,4800] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 4800)
            ] ffk
            gbi:f16[64,256,4800] = add gbg gbh
            gbj:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 1600)
              start_indices=(0, 0, 0)
              strides=None
            ] gbi
            gbk:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 3200)
              start_indices=(0, 0, 1600)
              strides=None
            ] gbi
            gbl:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 4800)
              start_indices=(0, 0, 3200)
              strides=None
            ] gbi
            gbm:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] gbj
            gbn:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] gbk
            gbo:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] gbl
            gbp:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
            gbq:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
            gbr:i32[2] = concatenate[dimension=0] gbp gbq
            gbs:bool[1,1,256,256] = gather[
              dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2, 3), collapsed_slice_dims=(), start_index_map=(2, 3))
              fill_value=None
              indices_are_sorted=True
              mode=GatherScatterMode.PROMISE_IN_BOUNDS
              slice_sizes=(1, 1, 256, 256)
              unique_indices=True
            ] gbe gbr
            gbt:bool[1,256,256] = squeeze[dimensions=(0,)] gbs
            gbu:bool[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(64, 1, 256, 256)
            ] gbt
            gbv:i32[64,1,1,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 3)
              shape=(64, 1, 1, 256)
            ] fea
            gbw:i32[64,1,256] = squeeze[dimensions=(2,)] gbv
            gbx:i32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 3)
              shape=(64, 1, 256, 256)
            ] gbw
            gby:bool[64,1,256,256] = ne gbx 0
            gbz:bool[64,1,256,256] = and gby gbu
            gca:f32[64,1,256,256] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] gbz
            gcb:bool[64,1,256,256] = gt gca 0.0
            gcc:f32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 1, 256, 256)
            ] 0.0
            gcd:f16[64,1,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] gcc
            gce:f32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 1, 256, 256)
            ] -10000.0
            gcf:f16[64,1,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] gce
            gcg:f16[64,1,256,256] = select_n gcb gcf gcd
            gch:f32[] = sqrt 64.0
            gci:f16[] = convert_element_type[new_dtype=float16 weak_type=False] gch
            gcj:f16[64,256,25,64] = div gbm gci
            gck:f16[64,25,256,256] = dot_general[
              dimension_numbers=(((3,), (3,)), ((0, 2), (0, 2)))
              precision=None
              preferred_element_type=None
            ] gcj gbn
            gcl:f16[64,25,256,256] = add gck gcg
            gcm:f16[64,25,256] = reduce_max[axes=(3,)] gcl
            gcn:f16[64,25,256,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 1)
            ] gcm
            gco:f16[64,25,256,1] = stop_gradient gcn
            gcp:f16[64,25,256,256] = sub gcl gco
            gcq:f16[64,25,256,256] = exp gcp
            gcr:f32[64,25,256,256] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] gcq
            gcs:f32[64,25,256] = reduce_sum[axes=(3,)] gcr
            gct:f32[64,25,256,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 1)
            ] gcs
            gcu:f16[64,25,256,1] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] gct
            gcv:f16[64,25,256,256] = div gcq gcu
            gcw:f16[64,25,256,1] = integer_pow[y=-2] gcu
            gcx:f16[64,25,64,256] = dot_general[
              dimension_numbers=(((1,), (3,)), ((0, 2), (0, 1)))
              precision=None
              preferred_element_type=None
            ] gbo gcv
            gcy:f16[64,256,25,64] = transpose[permutation=(0, 3, 1, 2)] gcx
            gcz:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] gcy
            gda:f16[1600,1600] = transpose[permutation=(1, 0)] ffl
            gdb:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] gcz gda
            gdc:f16[1,1,1600] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 1600)
            ] ffm
            gdd:f16[64,256,1600] = add gdb gdc
            gde:f16[64,256,1600] = add gdd fzm
          in (gde, gcz, gda, gbo, gcw, gcq, gcu, gcj, gbn, gci, gcv, gay, gbf, gam,
            gao, gas, gaq, gai, fzx, fzs, gat, fzh, fzi, fyw, fze, fzd, fyz, fzg,
            fys, fyt, fyg, fyi, fym, fyk, fyc, fxr, fxm, fyn, fxb, fxc, fvq, fwy,
            fws, fww, fwl, fvp, fwk, fwx, fva, fvh, fuo, fuq, fuu, fus, fuk, ftz,
            ftu, fuv, ftj, ftk, fsy, ftg, ftf, ftb, fti, fsu, fsv, fsi, fsk, fso,
            fsm, fse, frt, fro, fsp, frd, fre, fps, fra, fqu, fqy, fqn, fpr, fqm,
            fqz, fpc, fpj, foq, fos, fow, fou, fom, fob, fnw, fox, fnl, fnm, fna,
            fni, fnh, fnd, fnk, fmw, fmx, fmk, fmm, fmq, fmo, fmg, flv, flq, fmr,
            flf, flg, fju, flc, fkw, fla, fkp, fjt, fko, flb, fje, fjl, fis, fiu,
            fiy, fiw, fio, fid, fhy, fiz, fhn, fho, fhc, fhk, fhj, fhf, fhm, fgy,
            fgz, fgm, fgo, fgs, fgq, fgi, ffx, ffs, fgt) }
        name=13
      ] dsn bhg bhh bhi bhj bhk bhl bhm bhn bho bhp bcb bhq bhr bhs bht bhu bhv bhw
        bhx bhy bhz bia bib bic bid bie bif big bih bii bij bik bil bim bin bio bip
        biq bir bis bit biu biv biw bix biy biz bja bjb
      gdf:f16[64,256,1600] gdg:f16[64,256,1600] gdh:f16[1600,1600] gdi:f16[64,256,25,64]
        gdj:f16[64,25,256,1] gdk:f16[64,25,256,256] gdl:f16[64,25,256,1] gdm:f16[64,256,25,64]
        gdn:f16[64,256,25,64] gdo:f16[] gdp:f16[64,25,256,256] gdq:f16[64,256,1600]
        gdr:f16[1600,4800] gds:f32[64,256,1600] gdt:f32[64,256,1] gdu:f32[1,1,1600]
        gdv:f32[64,256,1] gdw:f32[64,256] gdx:f32[64,256] gdy:f32[64,256,1600] gdz:f32[64,256,1600]
        gea:f16[64,256,6400] geb:f16[6400,1600] gec:f16[64,256,6400] ged:f16[64,256,6400]
        gee:f16[64,256,6400] gef:f16[64,256,6400] geg:f16[64,256,6400] geh:f16[64,256,1600]
        gei:f16[1600,6400] gej:f32[64,256,1600] gek:f32[64,256,1] gel:f32[1,1,1600]
        gem:f32[64,256,1] gen:f32[64,256] geo:f32[64,256] gep:f32[64,256,1600] geq:f32[64,256,1600]
        ger:f16[64,256,1600] ges:f16[1600,1600] get:f16[64,256,25,64] geu:f16[64,25,256,1]
        gev:f16[64,25,256,256] gew:f16[64,25,256,1] gex:f16[64,256,25,64] gey:f16[64,256,25,64]
        gez:f16[] gfa:f16[64,25,256,256] gfb:f16[64,256,1600] gfc:f16[1600,4800]
        gfd:f32[64,256,1600] gfe:f32[64,256,1] gff:f32[1,1,1600] gfg:f32[64,256,1]
        gfh:f32[64,256] gfi:f32[64,256] gfj:f32[64,256,1600] gfk:f32[64,256,1600]
        gfl:f16[64,256,6400] gfm:f16[6400,1600] gfn:f16[64,256,6400] gfo:f16[64,256,6400]
        gfp:f16[64,256,6400] gfq:f16[64,256,6400] gfr:f16[64,256,6400] gfs:f16[64,256,1600]
        gft:f16[1600,6400] gfu:f32[64,256,1600] gfv:f32[64,256,1] gfw:f32[1,1,1600]
        gfx:f32[64,256,1] gfy:f32[64,256] gfz:f32[64,256] gga:f32[64,256,1600] ggb:f32[64,256,1600]
        ggc:f16[64,256,1600] ggd:f16[1600,1600] gge:f16[64,256,25,64] ggf:f16[64,25,256,1]
        ggg:f16[64,25,256,256] ggh:f16[64,25,256,1] ggi:f16[64,256,25,64] ggj:f16[64,256,25,64]
        ggk:f16[] ggl:f16[64,25,256,256] ggm:f16[64,256,1600] ggn:f16[1600,4800]
        ggo:f32[64,256,1600] ggp:f32[64,256,1] ggq:f32[1,1,1600] ggr:f32[64,256,1]
        ggs:f32[64,256] ggt:f32[64,256] ggu:f32[64,256,1600] ggv:f32[64,256,1600]
        ggw:f16[64,256,6400] ggx:f16[6400,1600] ggy:f16[64,256,6400] ggz:f16[64,256,6400]
        gha:f16[64,256,6400] ghb:f16[64,256,6400] ghc:f16[64,256,6400] ghd:f16[64,256,1600]
        ghe:f16[1600,6400] ghf:f32[64,256,1600] ghg:f32[64,256,1] ghh:f32[1,1,1600]
        ghi:f32[64,256,1] ghj:f32[64,256] ghk:f32[64,256] ghl:f32[64,256,1600] ghm:f32[64,256,1600]
        ghn:f16[64,256,1600] gho:f16[1600,1600] ghp:f16[64,256,25,64] ghq:f16[64,25,256,1]
        ghr:f16[64,25,256,256] ghs:f16[64,25,256,1] ght:f16[64,256,25,64] ghu:f16[64,256,25,64]
        ghv:f16[] ghw:f16[64,25,256,256] ghx:f16[64,256,1600] ghy:f16[1600,4800]
        ghz:f32[64,256,1600] gia:f32[64,256,1] gib:f32[1,1,1600] gic:f32[64,256,1]
        gid:f32[64,256] gie:f32[64,256] gif:f32[64,256,1600] gig:f32[64,256,1600]
        gih:f16[64,256,6400] gii:f16[6400,1600] gij:f16[64,256,6400] gik:f16[64,256,6400]
        gil:f16[64,256,6400] gim:f16[64,256,6400] gin:f16[64,256,6400] gio:f16[64,256,1600]
        gip:f16[1600,6400] giq:f32[64,256,1600] gir:f32[64,256,1] gis:f32[1,1,1600]
        git:f32[64,256,1] giu:f32[64,256] giv:f32[64,256] giw:f32[64,256,1600] gix:f32[64,256,1600] = named_call[
        call_jaxpr={ lambda ; giy:f16[64,256,1600] giz:f16[1600] gja:f16[1600] gjb:f16[6400,1600]
            gjc:f16[6400] gjd:f16[1600,6400] gje:f16[1600] gjf:f16[1600] gjg:f16[1600]
            gjh:f16[4800,1600] gji:f16[4800] gjj:i32[64,256] gjk:f16[1600,1600] gjl:f16[1600]
            gjm:f16[1600] gjn:f16[1600] gjo:f16[6400,1600] gjp:f16[6400] gjq:f16[1600,6400]
            gjr:f16[1600] gjs:f16[1600] gjt:f16[1600] gju:f16[4800,1600] gjv:f16[4800]
            gjw:f16[1600,1600] gjx:f16[1600] gjy:f16[1600] gjz:f16[1600] gka:f16[6400,1600]
            gkb:f16[6400] gkc:f16[1600,6400] gkd:f16[1600] gke:f16[1600] gkf:f16[1600]
            gkg:f16[4800,1600] gkh:f16[4800] gki:f16[1600,1600] gkj:f16[1600] gkk:f16[1600]
            gkl:f16[1600] gkm:f16[6400,1600] gkn:f16[6400] gko:f16[1600,6400] gkp:f16[1600]
            gkq:f16[1600] gkr:f16[1600] gks:f16[4800,1600] gkt:f16[4800] gku:f16[1600,1600]
            gkv:f16[1600]. let
            gkw:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] giy
            gkx:f32[64,256] = reduce_sum[axes=(2,)] gkw
            gky:f32[64,256] = div gkx 1600.0
            gkz:f32[64,256,1600] = integer_pow[y=2] gkw
            gla:f32[64,256,1600] = integer_pow[y=1] gkw
            glb:f32[64,256,1600] = mul 2.0 gla
            glc:f32[64,256] = reduce_sum[axes=(2,)] gkz
            gld:f32[64,256] = div glc 1600.0
            gle:f32[64,256] = integer_pow[y=2] gky
            glf:f32[64,256] = integer_pow[y=1] gky
            glg:f32[64,256] = mul 2.0 glf
            glh:f32[64,256] = sub gld gle
            gli:f32[64,256] = max 0.0 glh
            glj:bool[64,256] = eq glh gli
            glk:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            gll:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 0.0
            glm:f32[64,256] = select_n glj gll glk
            gln:bool[64,256] = eq 0.0 gli
            glo:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 2.0
            glp:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            glq:f32[64,256] = select_n gln glp glo
            glr:f32[64,256] = div glm glq
            gls:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] gky
            glt:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] gli
            glu:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] giy
            glv:f32[64,256,1600] = sub glu gls
            glw:f32[64,256,1] = add glt 9.999999747378752e-06
            glx:f32[64,256,1] = rsqrt glw
            gly:f32[64,256,1] = div glx glw
            glz:f32[64,256,1] = mul -0.5 gly
            gma:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] giz
            gmb:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] gma
            gmc:f32[64,256,1600] = mul glx gmb
            gmd:f32[64,256,1600] = mul glv gmc
            gme:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] gja
            gmf:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] gme
            gmg:f32[64,256,1600] = add gmd gmf
            gmh:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] gmg
            gmi:f16[1600,6400] = transpose[permutation=(1, 0)] gjb
            gmj:f16[64,256,6400] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] gmh gmi
            gmk:f16[1,1,6400] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 6400)
            ] gjc
            gml:f16[64,256,6400] = add gmj gmk
            gmm:f16[64,256,6400] = integer_pow[y=3] gml
            gmn:f16[64,256,6400] = integer_pow[y=2] gml
            gmo:f16[64,256,6400] = mul 3.0 gmn
            gmp:f16[64,256,6400] = mul 0.044708251953125 gmm
            gmq:f16[64,256,6400] = add gml gmp
            gmr:f16[64,256,6400] = mul 0.7978515625 gmq
            gms:f16[64,256,6400] = tanh gmr
            gmt:f16[64,256,6400] = sub 1.0 gms
            gmu:f16[64,256,6400] = add 1.0 gms
            gmv:f16[64,256,6400] = mul 0.5 gmu
            gmw:f16[64,256,6400] = mul gml gmv
            gmx:f16[6400,1600] = transpose[permutation=(1, 0)] gjd
            gmy:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] gmw gmx
            gmz:f16[1,1,1600] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 1600)
            ] gje
            gna:f16[64,256,1600] = add gmy gmz
            gnb:f16[64,256,1600] = add giy gna
            gnc:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] gnb
            gnd:f32[64,256] = reduce_sum[axes=(2,)] gnc
            gne:f32[64,256] = div gnd 1600.0
            gnf:f32[64,256,1600] = integer_pow[y=2] gnc
            gng:f32[64,256,1600] = integer_pow[y=1] gnc
            gnh:f32[64,256,1600] = mul 2.0 gng
            gni:f32[64,256] = reduce_sum[axes=(2,)] gnf
            gnj:f32[64,256] = div gni 1600.0
            gnk:f32[64,256] = integer_pow[y=2] gne
            gnl:f32[64,256] = integer_pow[y=1] gne
            gnm:f32[64,256] = mul 2.0 gnl
            gnn:f32[64,256] = sub gnj gnk
            gno:f32[64,256] = max 0.0 gnn
            gnp:bool[64,256] = eq gnn gno
            gnq:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            gnr:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 0.0
            gns:f32[64,256] = select_n gnp gnr gnq
            gnt:bool[64,256] = eq 0.0 gno
            gnu:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 2.0
            gnv:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            gnw:f32[64,256] = select_n gnt gnv gnu
            gnx:f32[64,256] = div gns gnw
            gny:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] gne
            gnz:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] gno
            goa:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] gnb
            gob:f32[64,256,1600] = sub goa gny
            goc:f32[64,256,1] = add gnz 9.999999747378752e-06
            god:f32[64,256,1] = rsqrt goc
            goe:f32[64,256,1] = div god goc
            gof:f32[64,256,1] = mul -0.5 goe
            gog:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] gjf
            goh:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] gog
            goi:f32[64,256,1600] = mul god goh
            goj:f32[64,256,1600] = mul gob goi
            gok:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] gjg
            gol:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] gok
            gom:f32[64,256,1600] = add goj gol
            gon:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] gom
            goo:i32[1024] = iota[dimension=0 dtype=int32 shape=(1024,)] 
            gop:i32[1,1024] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 1024)
            ] goo
            goq:i32[1,1024,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(1, 1024, 1)
            ] gop
            gor:i32[1,1,1024] = broadcast_in_dim[
              broadcast_dimensions=(0, 2)
              shape=(1, 1, 1024)
            ] gop
            gos:bool[1,1024,1024] = ge goq gor
            got:bool[1,1,1024,1024] = broadcast_in_dim[
              broadcast_dimensions=(0, 2, 3)
              shape=(1, 1, 1024, 1024)
            ] gos
            gou:f16[1600,4800] = transpose[permutation=(1, 0)] gjh
            gov:f16[64,256,4800] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] gon gou
            gow:f16[1,1,4800] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 4800)
            ] gji
            gox:f16[64,256,4800] = add gov gow
            goy:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 1600)
              start_indices=(0, 0, 0)
              strides=None
            ] gox
            goz:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 3200)
              start_indices=(0, 0, 1600)
              strides=None
            ] gox
            gpa:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 4800)
              start_indices=(0, 0, 3200)
              strides=None
            ] gox
            gpb:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] goy
            gpc:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] goz
            gpd:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] gpa
            gpe:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
            gpf:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
            gpg:i32[2] = concatenate[dimension=0] gpe gpf
            gph:bool[1,1,256,256] = gather[
              dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2, 3), collapsed_slice_dims=(), start_index_map=(2, 3))
              fill_value=None
              indices_are_sorted=True
              mode=GatherScatterMode.PROMISE_IN_BOUNDS
              slice_sizes=(1, 1, 256, 256)
              unique_indices=True
            ] got gpg
            gpi:bool[1,256,256] = squeeze[dimensions=(0,)] gph
            gpj:bool[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(64, 1, 256, 256)
            ] gpi
            gpk:i32[64,1,1,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 3)
              shape=(64, 1, 1, 256)
            ] gjj
            gpl:i32[64,1,256] = squeeze[dimensions=(2,)] gpk
            gpm:i32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 3)
              shape=(64, 1, 256, 256)
            ] gpl
            gpn:bool[64,1,256,256] = ne gpm 0
            gpo:bool[64,1,256,256] = and gpn gpj
            gpp:f32[64,1,256,256] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] gpo
            gpq:bool[64,1,256,256] = gt gpp 0.0
            gpr:f32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 1, 256, 256)
            ] 0.0
            gps:f16[64,1,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] gpr
            gpt:f32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 1, 256, 256)
            ] -10000.0
            gpu:f16[64,1,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] gpt
            gpv:f16[64,1,256,256] = select_n gpq gpu gps
            gpw:f32[] = sqrt 64.0
            gpx:f16[] = convert_element_type[new_dtype=float16 weak_type=False] gpw
            gpy:f16[64,256,25,64] = div gpb gpx
            gpz:f16[64,25,256,256] = dot_general[
              dimension_numbers=(((3,), (3,)), ((0, 2), (0, 2)))
              precision=None
              preferred_element_type=None
            ] gpy gpc
            gqa:f16[64,25,256,256] = add gpz gpv
            gqb:f16[64,25,256] = reduce_max[axes=(3,)] gqa
            gqc:f16[64,25,256,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 1)
            ] gqb
            gqd:f16[64,25,256,1] = stop_gradient gqc
            gqe:f16[64,25,256,256] = sub gqa gqd
            gqf:f16[64,25,256,256] = exp gqe
            gqg:f32[64,25,256,256] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] gqf
            gqh:f32[64,25,256] = reduce_sum[axes=(3,)] gqg
            gqi:f32[64,25,256,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 1)
            ] gqh
            gqj:f16[64,25,256,1] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] gqi
            gqk:f16[64,25,256,256] = div gqf gqj
            gql:f16[64,25,256,1] = integer_pow[y=-2] gqj
            gqm:f16[64,25,64,256] = dot_general[
              dimension_numbers=(((1,), (3,)), ((0, 2), (0, 1)))
              precision=None
              preferred_element_type=None
            ] gpd gqk
            gqn:f16[64,256,25,64] = transpose[permutation=(0, 3, 1, 2)] gqm
            gqo:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] gqn
            gqp:f16[1600,1600] = transpose[permutation=(1, 0)] gjk
            gqq:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] gqo gqp
            gqr:f16[1,1,1600] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 1600)
            ] gjl
            gqs:f16[64,256,1600] = add gqq gqr
            gqt:f16[64,256,1600] = add gqs gnb
            gqu:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] gqt
            gqv:f32[64,256] = reduce_sum[axes=(2,)] gqu
            gqw:f32[64,256] = div gqv 1600.0
            gqx:f32[64,256,1600] = integer_pow[y=2] gqu
            gqy:f32[64,256,1600] = integer_pow[y=1] gqu
            gqz:f32[64,256,1600] = mul 2.0 gqy
            gra:f32[64,256] = reduce_sum[axes=(2,)] gqx
            grb:f32[64,256] = div gra 1600.0
            grc:f32[64,256] = integer_pow[y=2] gqw
            grd:f32[64,256] = integer_pow[y=1] gqw
            gre:f32[64,256] = mul 2.0 grd
            grf:f32[64,256] = sub grb grc
            grg:f32[64,256] = max 0.0 grf
            grh:bool[64,256] = eq grf grg
            gri:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            grj:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 0.0
            grk:f32[64,256] = select_n grh grj gri
            grl:bool[64,256] = eq 0.0 grg
            grm:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 2.0
            grn:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            gro:f32[64,256] = select_n grl grn grm
            grp:f32[64,256] = div grk gro
            grq:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] gqw
            grr:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] grg
            grs:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] gqt
            grt:f32[64,256,1600] = sub grs grq
            gru:f32[64,256,1] = add grr 9.999999747378752e-06
            grv:f32[64,256,1] = rsqrt gru
            grw:f32[64,256,1] = div grv gru
            grx:f32[64,256,1] = mul -0.5 grw
            gry:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] gjm
            grz:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] gry
            gsa:f32[64,256,1600] = mul grv grz
            gsb:f32[64,256,1600] = mul grt gsa
            gsc:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] gjn
            gsd:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] gsc
            gse:f32[64,256,1600] = add gsb gsd
            gsf:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] gse
            gsg:f16[1600,6400] = transpose[permutation=(1, 0)] gjo
            gsh:f16[64,256,6400] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] gsf gsg
            gsi:f16[1,1,6400] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 6400)
            ] gjp
            gsj:f16[64,256,6400] = add gsh gsi
            gsk:f16[64,256,6400] = integer_pow[y=3] gsj
            gsl:f16[64,256,6400] = integer_pow[y=2] gsj
            gsm:f16[64,256,6400] = mul 3.0 gsl
            gsn:f16[64,256,6400] = mul 0.044708251953125 gsk
            gso:f16[64,256,6400] = add gsj gsn
            gsp:f16[64,256,6400] = mul 0.7978515625 gso
            gsq:f16[64,256,6400] = tanh gsp
            gsr:f16[64,256,6400] = sub 1.0 gsq
            gss:f16[64,256,6400] = add 1.0 gsq
            gst:f16[64,256,6400] = mul 0.5 gss
            gsu:f16[64,256,6400] = mul gsj gst
            gsv:f16[6400,1600] = transpose[permutation=(1, 0)] gjq
            gsw:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] gsu gsv
            gsx:f16[1,1,1600] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 1600)
            ] gjr
            gsy:f16[64,256,1600] = add gsw gsx
            gsz:f16[64,256,1600] = add gqt gsy
            gta:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] gsz
            gtb:f32[64,256] = reduce_sum[axes=(2,)] gta
            gtc:f32[64,256] = div gtb 1600.0
            gtd:f32[64,256,1600] = integer_pow[y=2] gta
            gte:f32[64,256,1600] = integer_pow[y=1] gta
            gtf:f32[64,256,1600] = mul 2.0 gte
            gtg:f32[64,256] = reduce_sum[axes=(2,)] gtd
            gth:f32[64,256] = div gtg 1600.0
            gti:f32[64,256] = integer_pow[y=2] gtc
            gtj:f32[64,256] = integer_pow[y=1] gtc
            gtk:f32[64,256] = mul 2.0 gtj
            gtl:f32[64,256] = sub gth gti
            gtm:f32[64,256] = max 0.0 gtl
            gtn:bool[64,256] = eq gtl gtm
            gto:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            gtp:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 0.0
            gtq:f32[64,256] = select_n gtn gtp gto
            gtr:bool[64,256] = eq 0.0 gtm
            gts:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 2.0
            gtt:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            gtu:f32[64,256] = select_n gtr gtt gts
            gtv:f32[64,256] = div gtq gtu
            gtw:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] gtc
            gtx:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] gtm
            gty:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] gsz
            gtz:f32[64,256,1600] = sub gty gtw
            gua:f32[64,256,1] = add gtx 9.999999747378752e-06
            gub:f32[64,256,1] = rsqrt gua
            guc:f32[64,256,1] = div gub gua
            gud:f32[64,256,1] = mul -0.5 guc
            gue:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] gjs
            guf:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] gue
            gug:f32[64,256,1600] = mul gub guf
            guh:f32[64,256,1600] = mul gtz gug
            gui:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] gjt
            guj:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] gui
            guk:f32[64,256,1600] = add guh guj
            gul:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] guk
            gum:i32[1024] = iota[dimension=0 dtype=int32 shape=(1024,)] 
            gun:i32[1,1024] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 1024)
            ] gum
            guo:i32[1,1024,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(1, 1024, 1)
            ] gun
            gup:i32[1,1,1024] = broadcast_in_dim[
              broadcast_dimensions=(0, 2)
              shape=(1, 1, 1024)
            ] gun
            guq:bool[1,1024,1024] = ge guo gup
            gur:bool[1,1,1024,1024] = broadcast_in_dim[
              broadcast_dimensions=(0, 2, 3)
              shape=(1, 1, 1024, 1024)
            ] guq
            gus:f16[1600,4800] = transpose[permutation=(1, 0)] gju
            gut:f16[64,256,4800] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] gul gus
            guu:f16[1,1,4800] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 4800)
            ] gjv
            guv:f16[64,256,4800] = add gut guu
            guw:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 1600)
              start_indices=(0, 0, 0)
              strides=None
            ] guv
            gux:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 3200)
              start_indices=(0, 0, 1600)
              strides=None
            ] guv
            guy:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 4800)
              start_indices=(0, 0, 3200)
              strides=None
            ] guv
            guz:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] guw
            gva:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] gux
            gvb:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] guy
            gvc:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
            gvd:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
            gve:i32[2] = concatenate[dimension=0] gvc gvd
            gvf:bool[1,1,256,256] = gather[
              dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2, 3), collapsed_slice_dims=(), start_index_map=(2, 3))
              fill_value=None
              indices_are_sorted=True
              mode=GatherScatterMode.PROMISE_IN_BOUNDS
              slice_sizes=(1, 1, 256, 256)
              unique_indices=True
            ] gur gve
            gvg:bool[1,256,256] = squeeze[dimensions=(0,)] gvf
            gvh:bool[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(64, 1, 256, 256)
            ] gvg
            gvi:i32[64,1,1,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 3)
              shape=(64, 1, 1, 256)
            ] gjj
            gvj:i32[64,1,256] = squeeze[dimensions=(2,)] gvi
            gvk:i32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 3)
              shape=(64, 1, 256, 256)
            ] gvj
            gvl:bool[64,1,256,256] = ne gvk 0
            gvm:bool[64,1,256,256] = and gvl gvh
            gvn:f32[64,1,256,256] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] gvm
            gvo:bool[64,1,256,256] = gt gvn 0.0
            gvp:f32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 1, 256, 256)
            ] 0.0
            gvq:f16[64,1,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] gvp
            gvr:f32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 1, 256, 256)
            ] -10000.0
            gvs:f16[64,1,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] gvr
            gvt:f16[64,1,256,256] = select_n gvo gvs gvq
            gvu:f32[] = sqrt 64.0
            gvv:f16[] = convert_element_type[new_dtype=float16 weak_type=False] gvu
            gvw:f16[64,256,25,64] = div guz gvv
            gvx:f16[64,25,256,256] = dot_general[
              dimension_numbers=(((3,), (3,)), ((0, 2), (0, 2)))
              precision=None
              preferred_element_type=None
            ] gvw gva
            gvy:f16[64,25,256,256] = add gvx gvt
            gvz:f16[64,25,256] = reduce_max[axes=(3,)] gvy
            gwa:f16[64,25,256,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 1)
            ] gvz
            gwb:f16[64,25,256,1] = stop_gradient gwa
            gwc:f16[64,25,256,256] = sub gvy gwb
            gwd:f16[64,25,256,256] = exp gwc
            gwe:f32[64,25,256,256] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] gwd
            gwf:f32[64,25,256] = reduce_sum[axes=(3,)] gwe
            gwg:f32[64,25,256,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 1)
            ] gwf
            gwh:f16[64,25,256,1] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] gwg
            gwi:f16[64,25,256,256] = div gwd gwh
            gwj:f16[64,25,256,1] = integer_pow[y=-2] gwh
            gwk:f16[64,25,64,256] = dot_general[
              dimension_numbers=(((1,), (3,)), ((0, 2), (0, 1)))
              precision=None
              preferred_element_type=None
            ] gvb gwi
            gwl:f16[64,256,25,64] = transpose[permutation=(0, 3, 1, 2)] gwk
            gwm:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] gwl
            gwn:f16[1600,1600] = transpose[permutation=(1, 0)] gjw
            gwo:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] gwm gwn
            gwp:f16[1,1,1600] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 1600)
            ] gjx
            gwq:f16[64,256,1600] = add gwo gwp
            gwr:f16[64,256,1600] = add gwq gsz
            gws:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] gwr
            gwt:f32[64,256] = reduce_sum[axes=(2,)] gws
            gwu:f32[64,256] = div gwt 1600.0
            gwv:f32[64,256,1600] = integer_pow[y=2] gws
            gww:f32[64,256,1600] = integer_pow[y=1] gws
            gwx:f32[64,256,1600] = mul 2.0 gww
            gwy:f32[64,256] = reduce_sum[axes=(2,)] gwv
            gwz:f32[64,256] = div gwy 1600.0
            gxa:f32[64,256] = integer_pow[y=2] gwu
            gxb:f32[64,256] = integer_pow[y=1] gwu
            gxc:f32[64,256] = mul 2.0 gxb
            gxd:f32[64,256] = sub gwz gxa
            gxe:f32[64,256] = max 0.0 gxd
            gxf:bool[64,256] = eq gxd gxe
            gxg:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            gxh:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 0.0
            gxi:f32[64,256] = select_n gxf gxh gxg
            gxj:bool[64,256] = eq 0.0 gxe
            gxk:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 2.0
            gxl:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            gxm:f32[64,256] = select_n gxj gxl gxk
            gxn:f32[64,256] = div gxi gxm
            gxo:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] gwu
            gxp:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] gxe
            gxq:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] gwr
            gxr:f32[64,256,1600] = sub gxq gxo
            gxs:f32[64,256,1] = add gxp 9.999999747378752e-06
            gxt:f32[64,256,1] = rsqrt gxs
            gxu:f32[64,256,1] = div gxt gxs
            gxv:f32[64,256,1] = mul -0.5 gxu
            gxw:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] gjy
            gxx:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] gxw
            gxy:f32[64,256,1600] = mul gxt gxx
            gxz:f32[64,256,1600] = mul gxr gxy
            gya:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] gjz
            gyb:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] gya
            gyc:f32[64,256,1600] = add gxz gyb
            gyd:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] gyc
            gye:f16[1600,6400] = transpose[permutation=(1, 0)] gka
            gyf:f16[64,256,6400] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] gyd gye
            gyg:f16[1,1,6400] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 6400)
            ] gkb
            gyh:f16[64,256,6400] = add gyf gyg
            gyi:f16[64,256,6400] = integer_pow[y=3] gyh
            gyj:f16[64,256,6400] = integer_pow[y=2] gyh
            gyk:f16[64,256,6400] = mul 3.0 gyj
            gyl:f16[64,256,6400] = mul 0.044708251953125 gyi
            gym:f16[64,256,6400] = add gyh gyl
            gyn:f16[64,256,6400] = mul 0.7978515625 gym
            gyo:f16[64,256,6400] = tanh gyn
            gyp:f16[64,256,6400] = sub 1.0 gyo
            gyq:f16[64,256,6400] = add 1.0 gyo
            gyr:f16[64,256,6400] = mul 0.5 gyq
            gys:f16[64,256,6400] = mul gyh gyr
            gyt:f16[6400,1600] = transpose[permutation=(1, 0)] gkc
            gyu:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] gys gyt
            gyv:f16[1,1,1600] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 1600)
            ] gkd
            gyw:f16[64,256,1600] = add gyu gyv
            gyx:f16[64,256,1600] = add gwr gyw
            gyy:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] gyx
            gyz:f32[64,256] = reduce_sum[axes=(2,)] gyy
            gza:f32[64,256] = div gyz 1600.0
            gzb:f32[64,256,1600] = integer_pow[y=2] gyy
            gzc:f32[64,256,1600] = integer_pow[y=1] gyy
            gzd:f32[64,256,1600] = mul 2.0 gzc
            gze:f32[64,256] = reduce_sum[axes=(2,)] gzb
            gzf:f32[64,256] = div gze 1600.0
            gzg:f32[64,256] = integer_pow[y=2] gza
            gzh:f32[64,256] = integer_pow[y=1] gza
            gzi:f32[64,256] = mul 2.0 gzh
            gzj:f32[64,256] = sub gzf gzg
            gzk:f32[64,256] = max 0.0 gzj
            gzl:bool[64,256] = eq gzj gzk
            gzm:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            gzn:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 0.0
            gzo:f32[64,256] = select_n gzl gzn gzm
            gzp:bool[64,256] = eq 0.0 gzk
            gzq:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 2.0
            gzr:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            gzs:f32[64,256] = select_n gzp gzr gzq
            gzt:f32[64,256] = div gzo gzs
            gzu:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] gza
            gzv:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] gzk
            gzw:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] gyx
            gzx:f32[64,256,1600] = sub gzw gzu
            gzy:f32[64,256,1] = add gzv 9.999999747378752e-06
            gzz:f32[64,256,1] = rsqrt gzy
            haa:f32[64,256,1] = div gzz gzy
            hab:f32[64,256,1] = mul -0.5 haa
            hac:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] gke
            had:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] hac
            hae:f32[64,256,1600] = mul gzz had
            haf:f32[64,256,1600] = mul gzx hae
            hag:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] gkf
            hah:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] hag
            hai:f32[64,256,1600] = add haf hah
            haj:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] hai
            hak:i32[1024] = iota[dimension=0 dtype=int32 shape=(1024,)] 
            hal:i32[1,1024] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 1024)
            ] hak
            ham:i32[1,1024,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(1, 1024, 1)
            ] hal
            han:i32[1,1,1024] = broadcast_in_dim[
              broadcast_dimensions=(0, 2)
              shape=(1, 1, 1024)
            ] hal
            hao:bool[1,1024,1024] = ge ham han
            hap:bool[1,1,1024,1024] = broadcast_in_dim[
              broadcast_dimensions=(0, 2, 3)
              shape=(1, 1, 1024, 1024)
            ] hao
            haq:f16[1600,4800] = transpose[permutation=(1, 0)] gkg
            har:f16[64,256,4800] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] haj haq
            has:f16[1,1,4800] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 4800)
            ] gkh
            hat:f16[64,256,4800] = add har has
            hau:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 1600)
              start_indices=(0, 0, 0)
              strides=None
            ] hat
            hav:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 3200)
              start_indices=(0, 0, 1600)
              strides=None
            ] hat
            haw:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 4800)
              start_indices=(0, 0, 3200)
              strides=None
            ] hat
            hax:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] hau
            hay:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] hav
            haz:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] haw
            hba:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
            hbb:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
            hbc:i32[2] = concatenate[dimension=0] hba hbb
            hbd:bool[1,1,256,256] = gather[
              dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2, 3), collapsed_slice_dims=(), start_index_map=(2, 3))
              fill_value=None
              indices_are_sorted=True
              mode=GatherScatterMode.PROMISE_IN_BOUNDS
              slice_sizes=(1, 1, 256, 256)
              unique_indices=True
            ] hap hbc
            hbe:bool[1,256,256] = squeeze[dimensions=(0,)] hbd
            hbf:bool[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(64, 1, 256, 256)
            ] hbe
            hbg:i32[64,1,1,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 3)
              shape=(64, 1, 1, 256)
            ] gjj
            hbh:i32[64,1,256] = squeeze[dimensions=(2,)] hbg
            hbi:i32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 3)
              shape=(64, 1, 256, 256)
            ] hbh
            hbj:bool[64,1,256,256] = ne hbi 0
            hbk:bool[64,1,256,256] = and hbj hbf
            hbl:f32[64,1,256,256] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] hbk
            hbm:bool[64,1,256,256] = gt hbl 0.0
            hbn:f32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 1, 256, 256)
            ] 0.0
            hbo:f16[64,1,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] hbn
            hbp:f32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 1, 256, 256)
            ] -10000.0
            hbq:f16[64,1,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] hbp
            hbr:f16[64,1,256,256] = select_n hbm hbq hbo
            hbs:f32[] = sqrt 64.0
            hbt:f16[] = convert_element_type[new_dtype=float16 weak_type=False] hbs
            hbu:f16[64,256,25,64] = div hax hbt
            hbv:f16[64,25,256,256] = dot_general[
              dimension_numbers=(((3,), (3,)), ((0, 2), (0, 2)))
              precision=None
              preferred_element_type=None
            ] hbu hay
            hbw:f16[64,25,256,256] = add hbv hbr
            hbx:f16[64,25,256] = reduce_max[axes=(3,)] hbw
            hby:f16[64,25,256,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 1)
            ] hbx
            hbz:f16[64,25,256,1] = stop_gradient hby
            hca:f16[64,25,256,256] = sub hbw hbz
            hcb:f16[64,25,256,256] = exp hca
            hcc:f32[64,25,256,256] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] hcb
            hcd:f32[64,25,256] = reduce_sum[axes=(3,)] hcc
            hce:f32[64,25,256,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 1)
            ] hcd
            hcf:f16[64,25,256,1] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] hce
            hcg:f16[64,25,256,256] = div hcb hcf
            hch:f16[64,25,256,1] = integer_pow[y=-2] hcf
            hci:f16[64,25,64,256] = dot_general[
              dimension_numbers=(((1,), (3,)), ((0, 2), (0, 1)))
              precision=None
              preferred_element_type=None
            ] haz hcg
            hcj:f16[64,256,25,64] = transpose[permutation=(0, 3, 1, 2)] hci
            hck:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] hcj
            hcl:f16[1600,1600] = transpose[permutation=(1, 0)] gki
            hcm:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] hck hcl
            hcn:f16[1,1,1600] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 1600)
            ] gkj
            hco:f16[64,256,1600] = add hcm hcn
            hcp:f16[64,256,1600] = add hco gyx
            hcq:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] hcp
            hcr:f32[64,256] = reduce_sum[axes=(2,)] hcq
            hcs:f32[64,256] = div hcr 1600.0
            hct:f32[64,256,1600] = integer_pow[y=2] hcq
            hcu:f32[64,256,1600] = integer_pow[y=1] hcq
            hcv:f32[64,256,1600] = mul 2.0 hcu
            hcw:f32[64,256] = reduce_sum[axes=(2,)] hct
            hcx:f32[64,256] = div hcw 1600.0
            hcy:f32[64,256] = integer_pow[y=2] hcs
            hcz:f32[64,256] = integer_pow[y=1] hcs
            hda:f32[64,256] = mul 2.0 hcz
            hdb:f32[64,256] = sub hcx hcy
            hdc:f32[64,256] = max 0.0 hdb
            hdd:bool[64,256] = eq hdb hdc
            hde:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            hdf:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 0.0
            hdg:f32[64,256] = select_n hdd hdf hde
            hdh:bool[64,256] = eq 0.0 hdc
            hdi:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 2.0
            hdj:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            hdk:f32[64,256] = select_n hdh hdj hdi
            hdl:f32[64,256] = div hdg hdk
            hdm:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] hcs
            hdn:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] hdc
            hdo:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] hcp
            hdp:f32[64,256,1600] = sub hdo hdm
            hdq:f32[64,256,1] = add hdn 9.999999747378752e-06
            hdr:f32[64,256,1] = rsqrt hdq
            hds:f32[64,256,1] = div hdr hdq
            hdt:f32[64,256,1] = mul -0.5 hds
            hdu:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] gkk
            hdv:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] hdu
            hdw:f32[64,256,1600] = mul hdr hdv
            hdx:f32[64,256,1600] = mul hdp hdw
            hdy:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] gkl
            hdz:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] hdy
            hea:f32[64,256,1600] = add hdx hdz
            heb:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] hea
            hec:f16[1600,6400] = transpose[permutation=(1, 0)] gkm
            hed:f16[64,256,6400] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] heb hec
            hee:f16[1,1,6400] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 6400)
            ] gkn
            hef:f16[64,256,6400] = add hed hee
            heg:f16[64,256,6400] = integer_pow[y=3] hef
            heh:f16[64,256,6400] = integer_pow[y=2] hef
            hei:f16[64,256,6400] = mul 3.0 heh
            hej:f16[64,256,6400] = mul 0.044708251953125 heg
            hek:f16[64,256,6400] = add hef hej
            hel:f16[64,256,6400] = mul 0.7978515625 hek
            hem:f16[64,256,6400] = tanh hel
            hen:f16[64,256,6400] = sub 1.0 hem
            heo:f16[64,256,6400] = add 1.0 hem
            hep:f16[64,256,6400] = mul 0.5 heo
            heq:f16[64,256,6400] = mul hef hep
            her:f16[6400,1600] = transpose[permutation=(1, 0)] gko
            hes:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] heq her
            het:f16[1,1,1600] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 1600)
            ] gkp
            heu:f16[64,256,1600] = add hes het
            hev:f16[64,256,1600] = add hcp heu
            hew:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] hev
            hex:f32[64,256] = reduce_sum[axes=(2,)] hew
            hey:f32[64,256] = div hex 1600.0
            hez:f32[64,256,1600] = integer_pow[y=2] hew
            hfa:f32[64,256,1600] = integer_pow[y=1] hew
            hfb:f32[64,256,1600] = mul 2.0 hfa
            hfc:f32[64,256] = reduce_sum[axes=(2,)] hez
            hfd:f32[64,256] = div hfc 1600.0
            hfe:f32[64,256] = integer_pow[y=2] hey
            hff:f32[64,256] = integer_pow[y=1] hey
            hfg:f32[64,256] = mul 2.0 hff
            hfh:f32[64,256] = sub hfd hfe
            hfi:f32[64,256] = max 0.0 hfh
            hfj:bool[64,256] = eq hfh hfi
            hfk:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            hfl:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 0.0
            hfm:f32[64,256] = select_n hfj hfl hfk
            hfn:bool[64,256] = eq 0.0 hfi
            hfo:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 2.0
            hfp:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            hfq:f32[64,256] = select_n hfn hfp hfo
            hfr:f32[64,256] = div hfm hfq
            hfs:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] hey
            hft:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] hfi
            hfu:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] hev
            hfv:f32[64,256,1600] = sub hfu hfs
            hfw:f32[64,256,1] = add hft 9.999999747378752e-06
            hfx:f32[64,256,1] = rsqrt hfw
            hfy:f32[64,256,1] = div hfx hfw
            hfz:f32[64,256,1] = mul -0.5 hfy
            hga:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] gkq
            hgb:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] hga
            hgc:f32[64,256,1600] = mul hfx hgb
            hgd:f32[64,256,1600] = mul hfv hgc
            hge:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] gkr
            hgf:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] hge
            hgg:f32[64,256,1600] = add hgd hgf
            hgh:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] hgg
            hgi:i32[1024] = iota[dimension=0 dtype=int32 shape=(1024,)] 
            hgj:i32[1,1024] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 1024)
            ] hgi
            hgk:i32[1,1024,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(1, 1024, 1)
            ] hgj
            hgl:i32[1,1,1024] = broadcast_in_dim[
              broadcast_dimensions=(0, 2)
              shape=(1, 1, 1024)
            ] hgj
            hgm:bool[1,1024,1024] = ge hgk hgl
            hgn:bool[1,1,1024,1024] = broadcast_in_dim[
              broadcast_dimensions=(0, 2, 3)
              shape=(1, 1, 1024, 1024)
            ] hgm
            hgo:f16[1600,4800] = transpose[permutation=(1, 0)] gks
            hgp:f16[64,256,4800] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] hgh hgo
            hgq:f16[1,1,4800] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 4800)
            ] gkt
            hgr:f16[64,256,4800] = add hgp hgq
            hgs:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 1600)
              start_indices=(0, 0, 0)
              strides=None
            ] hgr
            hgt:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 3200)
              start_indices=(0, 0, 1600)
              strides=None
            ] hgr
            hgu:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 4800)
              start_indices=(0, 0, 3200)
              strides=None
            ] hgr
            hgv:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] hgs
            hgw:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] hgt
            hgx:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] hgu
            hgy:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
            hgz:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
            hha:i32[2] = concatenate[dimension=0] hgy hgz
            hhb:bool[1,1,256,256] = gather[
              dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2, 3), collapsed_slice_dims=(), start_index_map=(2, 3))
              fill_value=None
              indices_are_sorted=True
              mode=GatherScatterMode.PROMISE_IN_BOUNDS
              slice_sizes=(1, 1, 256, 256)
              unique_indices=True
            ] hgn hha
            hhc:bool[1,256,256] = squeeze[dimensions=(0,)] hhb
            hhd:bool[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(64, 1, 256, 256)
            ] hhc
            hhe:i32[64,1,1,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 3)
              shape=(64, 1, 1, 256)
            ] gjj
            hhf:i32[64,1,256] = squeeze[dimensions=(2,)] hhe
            hhg:i32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 3)
              shape=(64, 1, 256, 256)
            ] hhf
            hhh:bool[64,1,256,256] = ne hhg 0
            hhi:bool[64,1,256,256] = and hhh hhd
            hhj:f32[64,1,256,256] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] hhi
            hhk:bool[64,1,256,256] = gt hhj 0.0
            hhl:f32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 1, 256, 256)
            ] 0.0
            hhm:f16[64,1,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] hhl
            hhn:f32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 1, 256, 256)
            ] -10000.0
            hho:f16[64,1,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] hhn
            hhp:f16[64,1,256,256] = select_n hhk hho hhm
            hhq:f32[] = sqrt 64.0
            hhr:f16[] = convert_element_type[new_dtype=float16 weak_type=False] hhq
            hhs:f16[64,256,25,64] = div hgv hhr
            hht:f16[64,25,256,256] = dot_general[
              dimension_numbers=(((3,), (3,)), ((0, 2), (0, 2)))
              precision=None
              preferred_element_type=None
            ] hhs hgw
            hhu:f16[64,25,256,256] = add hht hhp
            hhv:f16[64,25,256] = reduce_max[axes=(3,)] hhu
            hhw:f16[64,25,256,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 1)
            ] hhv
            hhx:f16[64,25,256,1] = stop_gradient hhw
            hhy:f16[64,25,256,256] = sub hhu hhx
            hhz:f16[64,25,256,256] = exp hhy
            hia:f32[64,25,256,256] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] hhz
            hib:f32[64,25,256] = reduce_sum[axes=(3,)] hia
            hic:f32[64,25,256,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 1)
            ] hib
            hid:f16[64,25,256,1] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] hic
            hie:f16[64,25,256,256] = div hhz hid
            hif:f16[64,25,256,1] = integer_pow[y=-2] hid
            hig:f16[64,25,64,256] = dot_general[
              dimension_numbers=(((1,), (3,)), ((0, 2), (0, 1)))
              precision=None
              preferred_element_type=None
            ] hgx hie
            hih:f16[64,256,25,64] = transpose[permutation=(0, 3, 1, 2)] hig
            hii:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] hih
            hij:f16[1600,1600] = transpose[permutation=(1, 0)] gku
            hik:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] hii hij
            hil:f16[1,1,1600] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 1600)
            ] gkv
            him:f16[64,256,1600] = add hik hil
            hin:f16[64,256,1600] = add him hev
          in (hin, hii, hij, hgx, hif, hhz, hid, hhs, hgw, hhr, hie, hgh, hgo, hfv,
            hfx, hgb, hfz, hfr, hfg, hfb, hgc, heq, her, hef, hen, hem, hei, hep,
            heb, hec, hdp, hdr, hdv, hdt, hdl, hda, hcv, hdw, hck, hcl, haz, hch,
            hcb, hcf, hbu, hay, hbt, hcg, haj, haq, gzx, gzz, had, hab, gzt, gzi,
            gzd, hae, gys, gyt, gyh, gyp, gyo, gyk, gyr, gyd, gye, gxr, gxt, gxx,
            gxv, gxn, gxc, gwx, gxy, gwm, gwn, gvb, gwj, gwd, gwh, gvw, gva, gvv,
            gwi, gul, gus, gtz, gub, guf, gud, gtv, gtk, gtf, gug, gsu, gsv, gsj,
            gsr, gsq, gsm, gst, gsf, gsg, grt, grv, grz, grx, grp, gre, gqz, gsa,
            gqo, gqp, gpd, gql, gqf, gqj, gpy, gpc, gpx, gqk, gon, gou, gob, god,
            goh, gof, gnx, gnm, gnh, goi, gmw, gmx, gml, gmt, gms, gmo, gmv, gmh,
            gmi, glv, glx, gmb, glz, glr, glg, glb, gmc) }
        name=14
      ] exw bjc bjd bje bjf bjg bjh bji bjj bjk bjl bcb bjm bjn bjo bjp bjq bjr bjs
        bjt bju bjv bjw bjx bjy bjz bka bkb bkc bkd bke bkf bkg bkh bki bkj bkk bkl
        bkm bkn bko bkp bkq bkr bks bkt bku bkv bkw bkx
    in (bkz, bla, blb, blc, bld, ble, blf, blg, blh, bli, blj, blk, bll, blm, bln,
      blo, blp, blq, blr, bls, blt, blu, blv, blw, blx, bly, blz, bma, bmb, bmc,
      bmd, bme, bmf, bmg, bmh, bmi, bmj, bmk, bml, bmm, bmn, bmo, bmp, bmq, bmr,
      bms, bmt, bmu, bmv, bmw, bmx, bmy, bmz, bna, bnb, bnc, bnd, bne, bnf, bng,
      bnh, bni, bnj, bnk, bnl, bnm, bnn, bno, bnp, bnq, bnr, bns, bnt, bnu, bnv,
      bnw, bnx, bny, bnz, boa, bob, boc, bod, boe, bof, bog, boh, boi, boj, bok,
      bol, bom, bon, boo, bop, boq, bor, bos, bot, bou, bov, bow, box, boy, boz,
      bpa, bpb, bpc, bpd, bpe, bpf, bpg, bph, bpi, bpj, bpk, bpl, bpm, bpn, bpo,
      bpp, bpq, bpr, bps, bpt, bpu, bpv, bpw, bpx, bpy, bpz, cnf, cng, cnh, cni,
      cnj, cnk, cnl, cnm, cnn, cno, cnp, cnq, cnr, cns, cnt, cnu, cnv, cnw, cnx,
      cny, cnz, coa, cob, coc, cod, coe, cof, cog, coh, coi, coj, cok, col, com,
      con, coo, cop, coq, cor, cos, cot, cou, cov, cow, cox, coy, coz, cpa, cpb,
      cpc, cpd, cpe, cpf, cpg, cph, cpi, cpj, cpk, cpl, cpm, cpn, cpo, cpp, cpq,
      cpr, cps, cpt, cpu, cpv, cpw, cpx, cpy, cpz, cqa, cqb, cqc, cqd, cqe, cqf,
      cqg, cqh, cqi, cqj, cqk, cql, cqm, cqn, cqo, cqp, cqq, cqr, cqs, cqt, cqu,
      cqv, cqw, cqx, cqy, cqz, cra, crb, crc, crd, cre, crf, crg, crh, cri, crj,
      crk, crl, crm, crn, cro, crp, crq, crr, crs, crt, cru, crv, crw, crx, cry,
      crz, csa, csb, csc, csd, cse, csf, csg, csh, csi, csj, csk, csl, csm, csn,
      cso, csp, csq, csr, css, cst, csu, csv, csw, dso, dsp, dsq, dsr, dss, dst,
      dsu, dsv, dsw, dsx, dsy, dsz, dta, dtb, dtc, dtd, dte, dtf, dtg, dth, dti,
      dtj, dtk, dtl, dtm, dtn, dto, dtp, dtq, dtr, dts, dtt, dtu, dtv, dtw, dtx,
      dty, dtz, dua, dub, duc, dud, due, duf, dug, duh, dui, duj, duk, dul, dum,
      dun, duo, dup, duq, dur, dus, dut, duu, duv, duw, dux, duy, duz, dva, dvb,
      dvc, dvd, dve, dvf, dvg, dvh, dvi, dvj, dvk, dvl, dvm, dvn, dvo, dvp, dvq,
      dvr, dvs, dvt, dvu, dvv, dvw, dvx, dvy, dvz, dwa, dwb, dwc, dwd, dwe, dwf,
      dwg, dwh, dwi, dwj, dwk, dwl, dwm, dwn, dwo, dwp, dwq, dwr, dws, dwt, dwu,
      dwv, dww, dwx, dwy, dwz, dxa, dxb, dxc, dxd, dxe, dxf, dxg, dxh, dxi, dxj,
      dxk, dxl, dxm, dxn, dxo, dxp, dxq, dxr, dxs, dxt, dxu, dxv, dxw, dxx, dxy,
      dxz, dya, dyb, dyc, dyd, dye, dyf, exx, exy, exz, eya, eyb, eyc, eyd, eye,
      eyf, eyg, eyh, eyi, eyj, eyk, eyl, eym, eyn, eyo, eyp, eyq, eyr, eys, eyt,
      eyu, eyv, eyw, eyx, eyy, eyz, eza, ezb, ezc, ezd, eze, ezf, ezg, ezh, ezi,
      ezj, ezk, ezl, ezm, ezn, ezo, ezp, ezq, ezr, ezs, ezt, ezu, ezv, ezw, ezx,
      ezy, ezz, faa, fab, fac, fad, fae, faf, fag, fah, fai, faj, fak, fal, fam,
      fan, fao, fap, faq, far, fas, fat, fau, fav, faw, fax, fay, faz, fba, fbb,
      fbc, fbd, fbe, fbf, fbg, fbh, fbi, fbj, fbk, fbl, fbm, fbn, fbo, fbp, fbq,
      fbr, fbs, fbt, fbu, fbv, fbw, fbx, fby, fbz, fca, fcb, fcc, fcd, fce, fcf,
      fcg, fch, fci, fcj, fck, fcl, fcm, fcn, fco, fcp, fcq, fcr, fcs, fct, fcu,
      fcv, fcw, fcx, fcy, fcz, fda, fdb, fdc, fdd, fde, fdf, fdg, fdh, fdi, fdj,
      fdk, fdl, fdm, fdn, fdo, gdf, gdg, gdh, gdi, gdj, gdk, gdl, gdm, gdn, gdo,
      gdp, gdq, gdr, gds, gdt, gdu, gdv, gdw, gdx, gdy, gdz, gea, geb, gec, ged,
      gee, gef, geg, geh, gei, gej, gek, gel, gem, gen, geo, gep, geq, ger, ges,
      get, geu, gev, gew, gex, gey, gez, gfa, gfb, gfc, gfd, gfe, gff, gfg, gfh,
      gfi, gfj, gfk, gfl, gfm, gfn, gfo, gfp, gfq, gfr, gfs, gft, gfu, gfv, gfw,
      gfx, gfy, gfz, gga, ggb, ggc, ggd, gge, ggf, ggg, ggh, ggi, ggj, ggk, ggl,
      ggm, ggn, ggo, ggp, ggq, ggr, ggs, ggt, ggu, ggv, ggw, ggx, ggy, ggz, gha,
      ghb, ghc, ghd, ghe, ghf, ghg, ghh, ghi, ghj, ghk, ghl, ghm, ghn, gho, ghp,
      ghq, ghr, ghs, ght, ghu, ghv, ghw, ghx, ghy, ghz, gia, gib, gic, gid, gie,
      gif, gig, gih, gii, gij, gik, gil, gim, gin, gio, gip, giq, gir, gis, git,
      giu, giv, giw, gix) }
  name=1
] hio hip hiq hir his hit hiu hiv hiw hix hiy hiz hja hjb hjc hjd hje hjf hjg hjh
  hji hjj hjk hjl hjm hjn hjo hjp hjq hjr hjs hjt hju hjv hjw hjx hjy hjz hka hkb
  hkc hkd hke hkf hkg hkh hki hkj hkk hkl hkm hkn hko hkp hkq hkr hks hkt hku hkv
  hkw hkx hky hkz hla hlb hlc hld hle hlf hlg hlh hli hlj hlk hll hlm hln hlo hlp
  hlq hlr hls hlt hlu hlv hlw hlx hly hlz hma hmb hmc hmd hme hmf hmg hmh hmi hmj
  hmk hml hmm hmn hmo hmp hmq hmr hms hmt hmu hmv hmw hmx hmy hmz hna hnb hnc hnd
  hne hnf hng hnh hni hnj hnk hnl hnm hnn hno hnp hnq hnr hns hnt hnu hnv hnw hnx
  hny hnz hoa hob hoc hod hoe hof hog hoh hoi hoj hok hol hom hon hoo hop hoq hor
  hos hot hou hov how hox hoy hoz hpa hpb hpc hpd hpe hpf hpg hph hpi hpj hpk hpl
  hpm hpn hpo hpp hpq hpr hps hpt hpu hpv hpw hpx hpy hpz hqa hqb hqc hqd hqe hqf
  hqg hqh hqi hqj hqk hql hqm hqn hqo hqp hqq hqr hqs hqt hqu hqv hqw hqx hqy hqz
  hra hrb hrc hrd hre hrf hrg hrh hri hrj hrk hrl hrm hrn hro hrp
eqn: a:f16[64,256,1600] b:f16[1600,1600] c:f16[64,256,25,64] d:f16[64,25,256,1] e:f16[64,25,256,256]
  f:f16[64,25,256,1] g:f16[64,256,25,64] h:f16[64,256,25,64] i:f16[] j:f16[64,25,256,256]
  k:f16[64,256,1600] l:f16[1600,4800] m:f32[64,256,1600] n:f32[64,256,1] o:f32[1,1,1600]
  p:f32[64,256,1] q:f32[64,256] r:f32[64,256] s:f32[64,256,1600] t:f32[64,256,1600]
  u:f16[64,256,6400] v:f16[6400,1600] w:f16[64,256,6400] x:f16[64,256,6400] y:f16[64,256,6400]
  z:f16[64,256,6400] ba:f16[64,256,6400] bb:f16[64,256,1600] bc:f16[1600,6400] bd:f32[64,256,1600]
  be:f32[64,256,1] bf:f32[1,1,1600] bg:f32[64,256,1] bh:f32[64,256] bi:f32[64,256]
  bj:f32[64,256,1600] bk:f32[64,256,1600] bl:f16[64,256,1600] bm:f16[1600,1600] bn:f16[64,256,25,64]
  bo:f16[64,25,256,1] bp:f16[64,25,256,256] bq:f16[64,25,256,1] br:f16[64,256,25,64]
  bs:f16[64,256,25,64] bt:f16[] bu:f16[64,25,256,256] bv:f16[64,256,1600] bw:f16[1600,4800]
  bx:f32[64,256,1600] by:f32[64,256,1] bz:f32[1,1,1600] ca:f32[64,256,1] cb:f32[64,256]
  cc:f32[64,256] cd:f32[64,256,1600] ce:f32[64,256,1600] cf:f16[64,256,6400] cg:f16[6400,1600]
  ch:f16[64,256,6400] ci:f16[64,256,6400] cj:f16[64,256,6400] ck:f16[64,256,6400]
  cl:f16[64,256,6400] cm:f16[64,256,1600] cn:f16[1600,6400] co:f32[64,256,1600] cp:f32[64,256,1]
  cq:f32[1,1,1600] cr:f32[64,256,1] cs:f32[64,256] ct:f32[64,256] cu:f32[64,256,1600]
  cv:f32[64,256,1600] cw:f16[64,256,1600] cx:f16[1600,1600] cy:f16[64,256,25,64]
  cz:f16[64,25,256,1] da:f16[64,25,256,256] db:f16[64,25,256,1] dc:f16[64,256,25,64]
  dd:f16[64,256,25,64] de:f16[] df:f16[64,25,256,256] dg:f16[64,256,1600] dh:f16[1600,4800]
  di:f32[64,256,1600] dj:f32[64,256,1] dk:f32[1,1,1600] dl:f32[64,256,1] dm:f32[64,256]
  dn:f32[64,256] do:f32[64,256,1600] dp:f32[64,256,1600] dq:f16[64,256,6400] dr:f16[6400,1600]
  ds:f16[64,256,6400] dt:f16[64,256,6400] du:f16[64,256,6400] dv:f16[64,256,6400]
  dw:f16[64,256,6400] dx:f16[64,256,1600] dy:f16[1600,6400] dz:f32[64,256,1600] ea:f32[64,256,1]
  eb:f32[1,1,1600] ec:f32[64,256,1] ed:f32[64,256] ee:f32[64,256] ef:f32[64,256,1600]
  eg:f32[64,256,1600] eh:f16[64,256,1600] ei:f16[1600,1600] ej:f16[64,256,25,64]
  ek:f16[64,25,256,1] el:f16[64,25,256,256] em:f16[64,25,256,1] en:f16[64,256,25,64]
  eo:f16[64,256,25,64] ep:f16[] eq:f16[64,25,256,256] er:f16[64,256,1600] es:f16[1600,4800]
  et:f32[64,256,1600] eu:f32[64,256,1] ev:f32[1,1,1600] ew:f32[64,256,1] ex:f32[64,256]
  ey:f32[64,256] ez:f32[64,256,1600] fa:f32[64,256,1600] fb:f16[64,256,1600] fc:f16[1600,1600]
  fd:f16[64,256,25,64] fe:f16[64,25,256,1] ff:f16[64,25,256,256] fg:f16[64,25,256,1]
  fh:f16[64,256,25,64] fi:f16[64,256,25,64] fj:f16[] fk:f16[64,25,256,256] fl:f16[64,256,1600]
  fm:f16[1600,4800] fn:f32[64,256,1600] fo:f32[64,256,1] fp:f32[1,1,1600] fq:f32[64,256,1]
  fr:f32[64,256] fs:f32[64,256] ft:f32[64,256,1600] fu:f32[64,256,1600] fv:f16[64,256,6400]
  fw:f16[6400,1600] fx:f16[64,256,6400] fy:f16[64,256,6400] fz:f16[64,256,6400] ga:f16[64,256,6400]
  gb:f16[64,256,6400] gc:f16[64,256,1600] gd:f16[1600,6400] ge:f32[64,256,1600] gf:f32[64,256,1]
  gg:f32[1,1,1600] gh:f32[64,256,1] gi:f32[64,256] gj:f32[64,256] gk:f32[64,256,1600]
  gl:f32[64,256,1600] gm:f16[64,256,1600] gn:f16[1600,1600] go:f16[64,256,25,64]
  gp:f16[64,25,256,1] gq:f16[64,25,256,256] gr:f16[64,25,256,1] gs:f16[64,256,25,64]
  gt:f16[64,256,25,64] gu:f16[] gv:f16[64,25,256,256] gw:f16[64,256,1600] gx:f16[1600,4800]
  gy:f32[64,256,1600] gz:f32[64,256,1] ha:f32[1,1,1600] hb:f32[64,256,1] hc:f32[64,256]
  hd:f32[64,256] he:f32[64,256,1600] hf:f32[64,256,1600] hg:f16[64,256,6400] hh:f16[6400,1600]
  hi:f16[64,256,6400] hj:f16[64,256,6400] hk:f16[64,256,6400] hl:f16[64,256,6400]
  hm:f16[64,256,6400] hn:f16[64,256,1600] ho:f16[1600,6400] hp:f32[64,256,1600] hq:f32[64,256,1]
  hr:f32[1,1,1600] hs:f32[64,256,1] ht:f32[64,256] hu:f32[64,256] hv:f32[64,256,1600]
  hw:f32[64,256,1600] hx:f16[64,256,1600] hy:f16[1600,1600] hz:f16[64,256,25,64]
  ia:f16[64,25,256,1] ib:f16[64,25,256,256] ic:f16[64,25,256,1] id:f16[64,256,25,64]
  ie:f16[64,256,25,64] if:f16[] ig:f16[64,25,256,256] ih:f16[64,256,1600] ii:f16[1600,4800]
  ij:f32[64,256,1600] ik:f32[64,256,1] il:f32[1,1,1600] im:f32[64,256,1] in:f32[64,256]
  io:f32[64,256] ip:f32[64,256,1600] iq:f32[64,256,1600] ir:f16[64,256,6400] is:f16[6400,1600]
  it:f16[64,256,6400] iu:f16[64,256,6400] iv:f16[64,256,6400] iw:f16[64,256,6400]
  ix:f16[64,256,6400] iy:f16[64,256,1600] iz:f16[1600,6400] ja:f32[64,256,1600] jb:f32[64,256,1]
  jc:f32[1,1,1600] jd:f32[64,256,1] je:f32[64,256] jf:f32[64,256] jg:f32[64,256,1600]
  jh:f32[64,256,1600] ji:f16[64,256,1600] jj:f16[1600,1600] jk:f16[64,256,25,64]
  jl:f16[64,25,256,1] jm:f16[64,25,256,256] jn:f16[64,25,256,1] jo:f16[64,256,25,64]
  jp:f16[64,256,25,64] jq:f16[] jr:f16[64,25,256,256] js:f16[64,256,1600] jt:f16[1600,4800]
  ju:f32[64,256,1600] jv:f32[64,256,1] jw:f32[1,1,1600] jx:f32[64,256,1] jy:f32[64,256]
  jz:f32[64,256] ka:f32[64,256,1600] kb:f32[64,256,1600] kc:f16[64,256,6400] kd:f16[6400,1600]
  ke:f16[64,256,6400] kf:f16[64,256,6400] kg:f16[64,256,6400] kh:f16[64,256,6400]
  ki:f16[64,256,6400] kj:f16[64,256,1600] kk:f16[1600,6400] kl:f32[64,256,1600] km:f32[64,256,1]
  kn:f32[1,1,1600] ko:f32[64,256,1] kp:f32[64,256] kq:f32[64,256] kr:f32[64,256,1600]
  ks:f32[64,256,1600] kt:f16[64,256,1600] ku:f16[1600,1600] kv:f16[64,256,25,64]
  kw:f16[64,25,256,1] kx:f16[64,25,256,256] ky:f16[64,25,256,1] kz:f16[64,256,25,64]
  la:f16[64,256,25,64] lb:f16[] lc:f16[64,25,256,256] ld:f16[64,256,1600] le:f16[1600,4800]
  lf:f32[64,256,1600] lg:f32[64,256,1] lh:f32[1,1,1600] li:f32[64,256,1] lj:f32[64,256]
  lk:f32[64,256] ll:f32[64,256,1600] lm:f32[64,256,1600] ln:f16[64,256,6400] lo:f16[6400,1600]
  lp:f16[64,256,6400] lq:f16[64,256,6400] lr:f16[64,256,6400] ls:f16[64,256,6400]
  lt:f16[64,256,6400] lu:f16[64,256,1600] lv:f16[1600,6400] lw:f32[64,256,1600] lx:f32[64,256,1]
  ly:f32[1,1,1600] lz:f32[64,256,1] ma:f32[64,256] mb:f32[64,256] mc:f32[64,256,1600]
  md:f32[64,256,1600] me:f16[64,256,1600] mf:f16[1600,1600] mg:f16[64,256,25,64]
  mh:f16[64,25,256,1] mi:f16[64,25,256,256] mj:f16[64,25,256,1] mk:f16[64,256,25,64]
  ml:f16[64,256,25,64] mm:f16[] mn:f16[64,25,256,256] mo:f16[64,256,1600] mp:f16[1600,4800]
  mq:f32[64,256,1600] mr:f32[64,256,1] ms:f32[1,1,1600] mt:f32[64,256,1] mu:f32[64,256]
  mv:f32[64,256] mw:f32[64,256,1600] mx:f32[64,256,1600] my:f16[64,256,6400] mz:f16[6400,1600]
  na:f16[64,256,6400] nb:f16[64,256,6400] nc:f16[64,256,6400] nd:f16[64,256,6400]
  ne:f16[64,256,6400] nf:f16[64,256,1600] ng:f16[1600,6400] nh:f32[64,256,1600] ni:f32[64,256,1]
  nj:f32[1,1,1600] nk:f32[64,256,1] nl:f32[64,256] nm:f32[64,256] nn:f32[64,256,1600]
  no:f32[64,256,1600] np:f16[64,256,1600] nq:f16[1600,1600] nr:f16[64,256,25,64]
  ns:f16[64,25,256,1] nt:f16[64,25,256,256] nu:f16[64,25,256,1] nv:f16[64,256,25,64]
  nw:f16[64,256,25,64] nx:f16[] ny:f16[64,25,256,256] nz:f16[64,256,1600] oa:f16[1600,4800]
  ob:f32[64,256,1600] oc:f32[64,256,1] od:f32[1,1,1600] oe:f32[64,256,1] of:f32[64,256]
  og:f32[64,256] oh:f32[64,256,1600] oi:f32[64,256,1600] oj:f16[64,256,6400] ok:f16[6400,1600]
  ol:f16[64,256,6400] om:f16[64,256,6400] on:f16[64,256,6400] oo:f16[64,256,6400]
  op:f16[64,256,6400] oq:f16[64,256,1600] or:f16[1600,6400] os:f32[64,256,1600] ot:f32[64,256,1]
  ou:f32[1,1,1600] ov:f32[64,256,1] ow:f32[64,256] ox:f32[64,256] oy:f32[64,256,1600]
  oz:f32[64,256,1600] pa:f16[64,256,1600] pb:f16[1600,1600] pc:f16[64,256,25,64]
  pd:f16[64,25,256,1] pe:f16[64,25,256,256] pf:f16[64,25,256,1] pg:f16[64,256,25,64]
  ph:f16[64,256,25,64] pi:f16[] pj:f16[64,25,256,256] pk:f16[64,256,1600] pl:f16[1600,4800]
  pm:f32[64,256,1600] pn:f32[64,256,1] po:f32[1,1,1600] pp:f32[64,256,1] pq:f32[64,256]
  pr:f32[64,256] ps:f32[64,256,1600] pt:f32[64,256,1600] pu:f16[64,256,6400] pv:f16[6400,1600]
  pw:f16[64,256,6400] px:f16[64,256,6400] py:f16[64,256,6400] pz:f16[64,256,6400]
  qa:f16[64,256,6400] qb:f16[64,256,1600] qc:f16[1600,6400] qd:f32[64,256,1600] qe:f32[64,256,1]
  qf:f32[1,1,1600] qg:f32[64,256,1] qh:f32[64,256] qi:f32[64,256] qj:f32[64,256,1600]
  qk:f32[64,256,1600] ql:f16[64,256,1600] qm:f16[1600,1600] qn:f16[64,256,25,64]
  qo:f16[64,25,256,1] qp:f16[64,25,256,256] qq:f16[64,25,256,1] qr:f16[64,256,25,64]
  qs:f16[64,256,25,64] qt:f16[] qu:f16[64,25,256,256] qv:f16[64,256,1600] qw:f16[1600,4800]
  qx:f32[64,256,1600] qy:f32[64,256,1] qz:f32[1,1,1600] ra:f32[64,256,1] rb:f32[64,256]
  rc:f32[64,256] rd:f32[64,256,1600] re:f32[64,256,1600] rf:f16[64,256,6400] rg:f16[6400,1600]
  rh:f16[64,256,6400] ri:f16[64,256,6400] rj:f16[64,256,6400] rk:f16[64,256,6400]
  rl:f16[64,256,6400] rm:f16[64,256,1600] rn:f16[1600,6400] ro:f32[64,256,1600] rp:f32[64,256,1]
  rq:f32[1,1,1600] rr:f32[64,256,1] rs:f32[64,256] rt:f32[64,256] ru:f32[64,256,1600]
  rv:f32[64,256,1600] rw:f16[64,256,1600] rx:f16[1600,1600] ry:f16[64,256,25,64]
  rz:f16[64,25,256,1] sa:f16[64,25,256,256] sb:f16[64,25,256,1] sc:f16[64,256,25,64]
  sd:f16[64,256,25,64] se:f16[] sf:f16[64,25,256,256] sg:f16[64,256,1600] sh:f16[1600,4800]
  si:f32[64,256,1600] sj:f32[64,256,1] sk:f32[1,1,1600] sl:f32[64,256,1] sm:f32[64,256]
  sn:f32[64,256] so:f32[64,256,1600] sp:f32[64,256,1600] sq:f16[64,256,6400] sr:f16[6400,1600]
  ss:f16[64,256,6400] st:f16[64,256,6400] su:f16[64,256,6400] sv:f16[64,256,6400]
  sw:f16[64,256,6400] sx:f16[64,256,1600] sy:f16[1600,6400] sz:f32[64,256,1600] ta:f32[64,256,1]
  tb:f32[1,1,1600] tc:f32[64,256,1] td:f32[64,256] te:f32[64,256] tf:f32[64,256,1600]
  tg:f32[64,256,1600] th:f16[64,256,1600] ti:f16[1600,1600] tj:f16[64,256,25,64]
  tk:f16[64,25,256,1] tl:f16[64,25,256,256] tm:f16[64,25,256,1] tn:f16[64,256,25,64]
  to:f16[64,256,25,64] tp:f16[] tq:f16[64,25,256,256] tr:f16[64,256,1600] ts:f16[1600,4800]
  tt:f32[64,256,1600] tu:f32[64,256,1] tv:f32[1,1,1600] tw:f32[64,256,1] tx:f32[64,256]
  ty:f32[64,256] tz:f32[64,256,1600] ua:f32[64,256,1600] ub:f16[64,256,6400] uc:f16[6400,1600]
  ud:f16[64,256,6400] ue:f16[64,256,6400] uf:f16[64,256,6400] ug:f16[64,256,6400]
  uh:f16[64,256,6400] ui:f16[64,256,1600] uj:f16[1600,6400] uk:f32[64,256,1600] ul:f32[64,256,1]
  um:f32[1,1,1600] un:f32[64,256,1] uo:f32[64,256] up:f32[64,256] uq:f32[64,256,1600]
  ur:f32[64,256,1600] us:f16[64,256,1600] ut:f16[1600,1600] uu:f16[64,256,25,64]
  uv:f16[64,25,256,1] uw:f16[64,25,256,256] ux:f16[64,25,256,1] uy:f16[64,256,25,64]
  uz:f16[64,256,25,64] va:f16[] vb:f16[64,25,256,256] vc:f16[64,256,1600] vd:f16[1600,4800]
  ve:f32[64,256,1600] vf:f32[64,256,1] vg:f32[1,1,1600] vh:f32[64,256,1] vi:f32[64,256]
  vj:f32[64,256] vk:f32[64,256,1600] vl:f32[64,256,1600] vm:f16[64,256,6400] vn:f16[6400,1600]
  vo:f16[64,256,6400] vp:f16[64,256,6400] vq:f16[64,256,6400] vr:f16[64,256,6400]
  vs:f16[64,256,6400] vt:f16[64,256,1600] vu:f16[1600,6400] vv:f32[64,256,1600] vw:f32[64,256,1]
  vx:f32[1,1,1600] vy:f32[64,256,1] vz:f32[64,256] wa:f32[64,256] wb:f32[64,256,1600]
  wc:f32[64,256,1600] wd:f16[64,256,1600] we:f16[64,256,1600] wf:f16[1600,1600] wg:f16[64,256,25,64]
  wh:f16[64,25,256,1] wi:f16[64,25,256,256] wj:f16[64,25,256,1] wk:f16[64,256,25,64]
  wl:f16[64,256,25,64] wm:f16[] wn:f16[64,25,256,256] wo:f16[64,256,1600] wp:f16[1600,4800]
  wq:f32[64,256,1600] wr:f32[64,256,1] ws:f32[1,1,1600] wt:f32[64,256,1] wu:f32[64,256]
  wv:f32[64,256] ww:f32[64,256,1600] wx:f32[64,256,1600] wy:f16[64,256,6400] wz:f16[6400,1600]
  xa:f16[64,256,6400] xb:f16[64,256,6400] xc:f16[64,256,6400] xd:f16[64,256,6400]
  xe:f16[64,256,6400] xf:f16[64,256,1600] xg:f16[1600,6400] xh:f32[64,256,1600] xi:f32[64,256,1]
  xj:f32[1,1,1600] xk:f32[64,256,1] xl:f32[64,256] xm:f32[64,256] xn:f32[64,256,1600]
  xo:f32[64,256,1600] xp:f16[64,256,1600] xq:f16[1600,1600] xr:f16[64,256,25,64]
  xs:f16[64,25,256,1] xt:f16[64,25,256,256] xu:f16[64,25,256,1] xv:f16[64,256,25,64]
  xw:f16[64,256,25,64] xx:f16[] xy:f16[64,25,256,256] xz:f16[64,256,1600] ya:f16[1600,4800]
  yb:f32[64,256,1600] yc:f32[64,256,1] yd:f32[1,1,1600] ye:f32[64,256,1] yf:f32[64,256]
  yg:f32[64,256] yh:f32[64,256,1600] yi:f32[64,256,1600] yj:f16[64,256,6400] yk:f16[6400,1600]
  yl:f16[64,256,6400] ym:f16[64,256,6400] yn:f16[64,256,6400] yo:f16[64,256,6400]
  yp:f16[64,256,6400] yq:f16[64,256,1600] yr:f16[1600,6400] ys:f32[64,256,1600] yt:f32[64,256,1]
  yu:f32[1,1,1600] yv:f32[64,256,1] yw:f32[64,256] yx:f32[64,256] yy:f32[64,256,1600]
  yz:f32[64,256,1600] za:f16[64,256,1600] zb:f16[1600,1600] zc:f16[64,256,25,64]
  zd:f16[64,25,256,1] ze:f16[64,25,256,256] zf:f16[64,25,256,1] zg:f16[64,256,25,64]
  zh:f16[64,256,25,64] zi:f16[] zj:f16[64,25,256,256] zk:f16[64,256,1600] zl:f16[1600,4800]
  zm:f32[64,256,1600] zn:f32[64,256,1] zo:f32[1,1,1600] zp:f32[64,256,1] zq:f32[64,256]
  zr:f32[64,256] zs:f32[64,256,1600] zt:f32[64,256,1600] zu:f16[64,256,6400] zv:f16[6400,1600]
  zw:f16[64,256,6400] zx:f16[64,256,6400] zy:f16[64,256,6400] zz:f16[64,256,6400]
  baa:f16[64,256,6400] bab:f16[64,256,1600] bac:f16[1600,6400] bad:f32[64,256,1600]
  bae:f32[64,256,1] baf:f32[1,1,1600] bag:f32[64,256,1] bah:f32[64,256] bai:f32[64,256]
  baj:f32[64,256,1600] bak:f32[64,256,1600] bal:f16[64,256,1600] bam:f16[1600,1600]
  ban:f16[64,256,25,64] bao:f16[64,25,256,1] bap:f16[64,25,256,256] baq:f16[64,25,256,1]
  bar:f16[64,256,25,64] bas:f16[64,256,25,64] bat:f16[] bau:f16[64,25,256,256] bav:f16[64,256,1600]
  baw:f16[1600,4800] bax:f32[64,256,1600] bay:f32[64,256,1] baz:f32[1,1,1600] bba:f32[64,256,1]
  bbb:f32[64,256] bbc:f32[64,256] bbd:f32[64,256,1600] bbe:f32[64,256,1600] bbf:f16[64,256,6400]
  bbg:f16[6400,1600] bbh:f16[64,256,6400] bbi:f16[64,256,6400] bbj:f16[64,256,6400]
  bbk:f16[64,256,6400] bbl:f16[64,256,6400] bbm:f16[64,256,1600] bbn:f16[1600,6400]
  bbo:f32[64,256,1600] bbp:f32[64,256,1] bbq:f32[1,1,1600] bbr:f32[64,256,1] bbs:f32[64,256]
  bbt:f32[64,256] bbu:f32[64,256,1600] bbv:f32[64,256,1600] = pipeline_marker[
  mark_type=end
  name=1
] bbw bbx bby bbz bca bcb bcc bcd bce bcf bcg bch bci bcj bck bcl bcm bcn bco bcp
  bcq bcr bcs bct bcu bcv bcw bcx bcy bcz bda bdb bdc bdd bde bdf bdg bdh bdi bdj
  bdk bdl bdm bdn bdo bdp bdq bdr bds bdt bdu bdv bdw bdx bdy bdz bea beb bec bed
  bee bef beg beh bei bej bek bel bem ben beo bep beq ber bes bet beu bev bew bex
  bey bez bfa bfb bfc bfd bfe bff bfg bfh bfi bfj bfk bfl bfm bfn bfo bfp bfq bfr
  bfs bft bfu bfv bfw bfx bfy bfz bga bgb bgc bgd bge bgf bgg bgh bgi bgj bgk bgl
  bgm bgn bgo bgp bgq bgr bgs bgt bgu bgv bgw bgx bgy bgz bha bhb bhc bhd bhe bhf
  bhg bhh bhi bhj bhk bhl bhm bhn bho bhp bhq bhr bhs bht bhu bhv bhw bhx bhy bhz
  bia bib bic bid bie bif big bih bii bij bik bil bim bin bio bip biq bir bis bit
  biu biv biw bix biy biz bja bjb bjc bjd bje bjf bjg bjh bji bjj bjk bjl bjm bjn
  bjo bjp bjq bjr bjs bjt bju bjv bjw bjx bjy bjz bka bkb bkc bkd bke bkf bkg bkh
  bki bkj bkk bkl bkm bkn bko bkp bkq bkr bks bkt bku bkv bkw bkx bky bkz bla blb
  blc bld ble blf blg blh bli blj blk bll blm bln blo blp blq blr bls blt blu blv
  blw blx bly blz bma bmb bmc bmd bme bmf bmg bmh bmi bmj bmk bml bmm bmn bmo bmp
  bmq bmr bms bmt bmu bmv bmw bmx bmy bmz bna bnb bnc bnd bne bnf bng bnh bni bnj
  bnk bnl bnm bnn bno bnp bnq bnr bns bnt bnu bnv bnw bnx bny bnz boa bob boc bod
  boe bof bog boh boi boj bok bol bom bon boo bop boq bor bos bot bou bov bow box
  boy boz bpa bpb bpc bpd bpe bpf bpg bph bpi bpj bpk bpl bpm bpn bpo bpp bpq bpr
  bps bpt bpu bpv bpw bpx bpy bpz bqa bqb bqc bqd bqe bqf bqg bqh bqi bqj bqk bql
  bqm bqn bqo bqp bqq bqr bqs bqt bqu bqv bqw bqx bqy bqz bra brb brc brd bre brf
  brg brh bri brj brk brl brm brn bro brp brq brr brs brt bru brv brw brx bry brz
  bsa bsb bsc bsd bse bsf bsg bsh bsi bsj bsk bsl bsm bsn bso bsp bsq bsr bss bst
  bsu bsv bsw bsx bsy bsz bta btb btc btd bte btf btg bth bti btj btk btl btm btn
  bto btp btq btr bts btt btu btv btw btx bty btz bua bub buc bud bue buf bug buh
  bui buj buk bul bum bun buo bup buq bur bus but buu buv buw bux buy buz bva bvb
  bvc bvd bve bvf bvg bvh bvi bvj bvk bvl bvm bvn bvo bvp bvq bvr bvs bvt bvu bvv
  bvw bvx bvy bvz bwa bwb bwc bwd bwe bwf bwg bwh bwi bwj bwk bwl bwm bwn bwo bwp
  bwq bwr bws bwt bwu bwv bww bwx bwy bwz bxa bxb bxc bxd bxe bxf bxg bxh bxi bxj
  bxk bxl bxm bxn bxo bxp bxq bxr bxs bxt bxu bxv bxw bxx bxy bxz bya byb byc byd
  bye byf byg byh byi byj byk byl bym byn byo byp byq byr bys byt byu byv byw byx
  byy byz bza bzb bzc bzd bze bzf bzg bzh bzi bzj bzk bzl bzm bzn bzo bzp bzq bzr
  bzs bzt bzu bzv bzw bzx bzy bzz caa cab cac cad cae caf cag cah cai caj cak cal
  cam can cao cap caq car cas cat cau cav caw cax cay caz cba cbb cbc cbd cbe cbf
  cbg cbh cbi cbj cbk cbl cbm cbn cbo cbp cbq cbr cbs cbt cbu cbv cbw cbx cby cbz
  cca ccb ccc ccd cce ccf ccg cch cci ccj cck ccl ccm ccn cco ccp ccq ccr ccs cct
  ccu ccv ccw ccx ccy ccz cda cdb cdc cdd cde cdf cdg cdh cdi cdj cdk cdl cdm cdn
  cdo cdp cdq cdr
input_var_mem_size
[fsz, vy, vx, vu, vt, dwu, vw, vv, wa, vz, wc, wb, we, wd, be, bd, ba, z, bc, bb, bg, bf, bi, bh, bk, bj, bq, bp, bm, bl, bo, bn, bs, br, bu, bt, bw, bv, cc, cb, by, bx, ca, bz, ce, cd, cg, cf, ci, ch, co, cn, ck, cj, cm, cl, cq, cp, cs, cr, cu, ct, da, cz, cw, cv, cy, cx, dc, db, de, dd, dg, df, dm, dl, di, dh, dk, dj, do, dn, dq, dp, ds, dr, dy, dx, du, dt, dw, dv, ea, dz, ec, eb, ee, ed, ek, ej, eg, ef, ei, eh, em, el, eo, en, eq, ep, ew, ev, es, er, eu, et, ey, ex, fa, ez, fc, fb, fi, fh, fe, fd, fg, ff, fk, fj, fm, fl, fo, fn, gg, gf, gc, gb, ge, gd, gi, gh, gk, gj, gm, gl, gs, gr, go, gn, gq, gp, gu, gt, gw, gv, gy, gx, he, hd, ha, gz, hc, hb, hg, hf, hi, hh, hk, hj, hq, hp, hm, hl, ho, hn, hs, hr, hu, ht, hw, hv, ic, ib, hy, hx, ia, hz, ie, id, ig, if, ii, ih, io, in, ik, ij, im, il, iq, ip, is, ir, iu, it, ja, iz, iw, iv, iy, ix, jc, jb, je, jd, jg, jf, jm, jl, ji, jh, jk, jj, jo, jn, jq, jp, js, jr, jy, jx, ju, jt, jw, jv]
[(64, 256, 1600), (1600,), (1600,), (4800, 1600), (4800,), (64, 256), (1600, 1600), (1600,), (1600,), (1600,), (6400, 1600), (6400,), (1600, 6400), (1600,), (1600,), (1600,), (4800, 1600), (4800,), (1600, 1600), (1600,), (1600,), (1600,), (6400, 1600), (6400,), (1600, 6400), (1600,), (1600,), (1600,), (4800, 1600), (4800,), (1600, 1600), (1600,), (1600,), (1600,), (6400, 1600), (6400,), (1600, 6400), (1600,), (1600,), (1600,), (4800, 1600), (4800,), (1600, 1600), (1600,), (1600,), (1600,), (6400, 1600), (6400,), (1600, 6400), (1600,), (1600,), (1600,), (4800, 1600), (4800,), (1600, 1600), (1600,), (1600,), (1600,), (6400, 1600), (6400,), (1600, 6400), (1600,), (1600,), (1600,), (4800, 1600), (4800,), (1600, 1600), (1600,), (1600,), (1600,), (6400, 1600), (6400,), (1600, 6400), (1600,), (1600,), (1600,), (4800, 1600), (4800,), (1600, 1600), (1600,), (1600,), (1600,), (6400, 1600), (6400,), (1600, 6400), (1600,), (1600,), (1600,), (4800, 1600), (4800,), (1600, 1600), (1600,), (1600,), (1600,), (6400, 1600), (6400,), (1600, 6400), (1600,), (1600,), (1600,), (4800, 1600), (4800,), (1600, 1600), (1600,), (1600,), (1600,), (6400, 1600), (6400,), (1600, 6400), (1600,), (1600,), (1600,), (4800, 1600), (4800,), (1600, 1600), (1600,), (1600,), (1600,), (6400, 1600), (6400,), (1600, 6400), (1600,), (1600,), (1600,), (4800, 1600), (4800,), (1600, 1600), (1600,), (1600,), (1600,), (6400, 1600), (6400,), (1600, 6400), (1600,), (1600,), (1600,), (4800, 1600), (4800,), (1600, 1600), (1600,), (1600,), (1600,), (6400, 1600), (6400,), (1600, 6400), (1600,), (1600,), (1600,), (4800, 1600), (4800,), (1600, 1600), (1600,), (1600,), (1600,), (6400, 1600), (6400,), (1600, 6400), (1600,), (1600,), (1600,), (4800, 1600), (4800,), (1600, 1600), (1600,), (1600,), (1600,), (6400, 1600), (6400,), (1600, 6400), (1600,), (1600,), (1600,), (4800, 1600), (4800,), (1600, 1600), (1600,), (1600,), (1600,), (6400, 1600), (6400,), (1600, 6400), (1600,), (1600,), (1600,), (4800, 1600), (4800,), (1600, 1600), (1600,), (1600,), (1600,), (6400, 1600), (6400,), (1600, 6400), (1600,), (1600,), (1600,), (4800, 1600), (4800,), (1600, 1600), (1600,), (1600,), (1600,), (6400, 1600), (6400,), (1600, 6400), (1600,), (1600,), (1600,), (4800, 1600), (4800,), (1600, 1600), (1600,), (1600,), (1600,), (6400, 1600), (6400,), (1600, 6400), (1600,), (1600,), (1600,), (4800, 1600), (4800,), (1600, 1600), (1600,), (1600,), (1600,), (6400, 1600), (6400,), (1600, 6400), (1600,), (1600,), (1600,), (4800, 1600), (4800,), (1600, 1600), (1600,)]
param_size: 0.5779374241828918 [GiB] 
jaxpr.eqns, len: 3
eqn: a:f16[64,256,1600] b:f16[1600] c:f16[1600] d:f16[6400,1600] e:f16[6400] f:f16[1600,6400]
  g:f16[1600] h:f16[1600] i:f16[1600] j:f16[4800,1600] k:f16[4800] l:i32[64,256]
  m:f16[1600,1600] n:f16[1600] o:f16[1600] p:f16[1600] q:f16[6400,1600] r:f16[6400]
  s:f16[1600,6400] t:f16[1600] u:f16[1600] v:f16[1600] w:f16[4800,1600] x:f16[4800]
  y:f16[1600,1600] z:f16[1600] ba:f16[1600] bb:f16[1600] bc:f16[6400,1600] bd:f16[6400]
  be:f16[1600,6400] bf:f16[1600] bg:f16[1600] bh:f16[1600] bi:f16[4800,1600] bj:f16[4800]
  bk:f16[1600,1600] bl:f16[1600] bm:f16[1600] bn:f16[1600] bo:f16[6400,1600] bp:f16[6400]
  bq:f16[1600,6400] br:f16[1600] bs:f16[1600] bt:f16[1600] bu:f16[4800,1600] bv:f16[4800]
  bw:f16[1600,1600] bx:f16[1600] by:f16[1600] bz:f16[1600] ca:f16[6400,1600] cb:f16[6400]
  cc:f16[1600,6400] cd:f16[1600] ce:f16[1600] cf:f16[1600] cg:f16[4800,1600] ch:f16[4800]
  ci:f16[1600,1600] cj:f16[1600] ck:f16[1600] cl:f16[1600] cm:f16[6400,1600] cn:f16[6400]
  co:f16[1600,6400] cp:f16[1600] cq:f16[1600] cr:f16[1600] cs:f16[4800,1600] ct:f16[4800]
  cu:f16[1600,1600] cv:f16[1600] cw:f16[1600] cx:f16[1600] cy:f16[6400,1600] cz:f16[6400]
  da:f16[1600,6400] db:f16[1600] dc:f16[1600] dd:f16[1600] de:f16[4800,1600] df:f16[4800]
  dg:f16[1600,1600] dh:f16[1600] di:f16[1600] dj:f16[1600] dk:f16[6400,1600] dl:f16[6400]
  dm:f16[1600,6400] dn:f16[1600] do:f16[1600] dp:f16[1600] dq:f16[4800,1600] dr:f16[4800]
  ds:f16[1600,1600] dt:f16[1600] du:f16[1600] dv:f16[1600] dw:f16[6400,1600] dx:f16[6400]
  dy:f16[1600,6400] dz:f16[1600] ea:f16[1600] eb:f16[1600] ec:f16[4800,1600] ed:f16[4800]
  ee:f16[1600,1600] ef:f16[1600] eg:f16[1600] eh:f16[1600] ei:f16[6400,1600] ej:f16[6400]
  ek:f16[1600,6400] el:f16[1600] em:f16[1600] en:f16[1600] eo:f16[4800,1600] ep:f16[4800]
  eq:f16[1600,1600] er:f16[1600] es:f16[1600] et:f16[1600] eu:f16[6400,1600] ev:f16[6400]
  ew:f16[1600,6400] ex:f16[1600] ey:f16[1600] ez:f16[1600] fa:f16[4800,1600] fb:f16[4800]
  fc:f16[1600,1600] fd:f16[1600] fe:f16[1600] ff:f16[1600] fg:f16[6400,1600] fh:f16[6400]
  fi:f16[1600,6400] fj:f16[1600] = pipeline_marker[mark_type=start name=2] fk fl
  fm fn fo fp fq fr fs ft fu fv fw fx fy fz ga gb gc gd ge gf gg gh gi gj gk gl gm
  gn go gp gq gr gs gt gu gv gw gx gy gz ha hb hc hd he hf hg hh hi hj hk hl hm hn
  ho hp hq hr hs ht hu hv hw hx hy hz ia ib ic id ie if ig ih ii ij ik il im in io
  ip iq ir is it iu iv iw ix iy iz ja jb jc jd je jf jg jh ji jj jk jl jm jn jo jp
  jq jr js jt ju jv jw jx jy jz ka kb kc kd ke kf kg kh ki kj kk kl km kn ko kp kq
  kr ks kt
eqn: a:f16[64,256,1600] b:f16[1600,1600] c:f16[64,256,25,64] d:f16[64,25,256,1] e:f16[64,25,256,256]
  f:f16[64,25,256,1] g:f16[64,256,25,64] h:f16[64,256,25,64] i:f16[] j:f16[64,25,256,256]
  k:f16[64,256,1600] l:f16[1600,4800] m:f32[64,256,1600] n:f32[64,256,1] o:f32[1,1,1600]
  p:f32[64,256,1] q:f32[64,256] r:f32[64,256] s:f32[64,256,1600] t:f32[64,256,1600]
  u:f16[64,256,6400] v:f16[6400,1600] w:f16[64,256,6400] x:f16[64,256,6400] y:f16[64,256,6400]
  z:f16[64,256,6400] ba:f16[64,256,6400] bb:f16[64,256,1600] bc:f16[1600,6400] bd:f32[64,256,1600]
  be:f32[64,256,1] bf:f32[1,1,1600] bg:f32[64,256,1] bh:f32[64,256] bi:f32[64,256]
  bj:f32[64,256,1600] bk:f32[64,256,1600] bl:f16[64,256,1600] bm:f16[1600,1600] bn:f16[64,256,25,64]
  bo:f16[64,25,256,1] bp:f16[64,25,256,256] bq:f16[64,25,256,1] br:f16[64,256,25,64]
  bs:f16[64,256,25,64] bt:f16[] bu:f16[64,25,256,256] bv:f16[64,256,1600] bw:f16[1600,4800]
  bx:f32[64,256,1600] by:f32[64,256,1] bz:f32[1,1,1600] ca:f32[64,256,1] cb:f32[64,256]
  cc:f32[64,256] cd:f32[64,256,1600] ce:f32[64,256,1600] cf:f16[64,256,6400] cg:f16[6400,1600]
  ch:f16[64,256,6400] ci:f16[64,256,6400] cj:f16[64,256,6400] ck:f16[64,256,6400]
  cl:f16[64,256,6400] cm:f16[64,256,1600] cn:f16[1600,6400] co:f32[64,256,1600] cp:f32[64,256,1]
  cq:f32[1,1,1600] cr:f32[64,256,1] cs:f32[64,256] ct:f32[64,256] cu:f32[64,256,1600]
  cv:f32[64,256,1600] cw:f16[64,256,1600] cx:f16[1600,1600] cy:f16[64,256,25,64]
  cz:f16[64,25,256,1] da:f16[64,25,256,256] db:f16[64,25,256,1] dc:f16[64,256,25,64]
  dd:f16[64,256,25,64] de:f16[] df:f16[64,25,256,256] dg:f16[64,256,1600] dh:f16[1600,4800]
  di:f32[64,256,1600] dj:f32[64,256,1] dk:f32[1,1,1600] dl:f32[64,256,1] dm:f32[64,256]
  dn:f32[64,256] do:f32[64,256,1600] dp:f32[64,256,1600] dq:f16[64,256,6400] dr:f16[6400,1600]
  ds:f16[64,256,6400] dt:f16[64,256,6400] du:f16[64,256,6400] dv:f16[64,256,6400]
  dw:f16[64,256,6400] dx:f16[64,256,1600] dy:f16[1600,6400] dz:f32[64,256,1600] ea:f32[64,256,1]
  eb:f32[1,1,1600] ec:f32[64,256,1] ed:f32[64,256] ee:f32[64,256] ef:f32[64,256,1600]
  eg:f32[64,256,1600] eh:f16[64,256,1600] ei:f16[1600,1600] ej:f16[64,256,25,64]
  ek:f16[64,25,256,1] el:f16[64,25,256,256] em:f16[64,25,256,1] en:f16[64,256,25,64]
  eo:f16[64,256,25,64] ep:f16[] eq:f16[64,25,256,256] er:f16[64,256,1600] es:f16[1600,4800]
  et:f32[64,256,1600] eu:f32[64,256,1] ev:f32[1,1,1600] ew:f32[64,256,1] ex:f32[64,256]
  ey:f32[64,256] ez:f32[64,256,1600] fa:f32[64,256,1600] fb:f16[64,256,6400] fc:f16[6400,1600]
  fd:f16[64,256,6400] fe:f16[64,256,6400] ff:f16[64,256,6400] fg:f16[64,256,6400]
  fh:f16[64,256,6400] fi:f16[64,256,1600] fj:f16[1600,6400] fk:f32[64,256,1600] fl:f32[64,256,1]
  fm:f32[1,1,1600] fn:f32[64,256,1] fo:f32[64,256] fp:f32[64,256] fq:f32[64,256,1600]
  fr:f32[64,256,1600] fs:f16[64,256,6400] ft:f16[6400,1600] fu:f16[64,256,6400] fv:f16[64,256,6400]
  fw:f16[64,256,6400] fx:f16[64,256,6400] fy:f16[64,256,6400] fz:f16[64,256,1600]
  ga:f16[1600,6400] gb:f32[64,256,1600] gc:f32[64,256,1] gd:f32[1,1,1600] ge:f32[64,256,1]
  gf:f32[64,256] gg:f32[64,256] gh:f32[64,256,1600] gi:f32[64,256,1600] gj:f16[64,256,1600]
  gk:f16[1600,1600] gl:f16[64,256,25,64] gm:f16[64,25,256,1] gn:f16[64,25,256,256]
  go:f16[64,25,256,1] gp:f16[64,256,25,64] gq:f16[64,256,25,64] gr:f16[] gs:f16[64,25,256,256]
  gt:f16[64,256,1600] gu:f16[1600,4800] gv:f32[64,256,1600] gw:f32[64,256,1] gx:f32[1,1,1600]
  gy:f32[64,256,1] gz:f32[64,256] ha:f32[64,256] hb:f32[64,256,1600] hc:f32[64,256,1600]
  hd:f16[64,256,6400] he:f16[6400,1600] hf:f16[64,256,6400] hg:f16[64,256,6400] hh:f16[64,256,6400]
  hi:f16[64,256,6400] hj:f16[64,256,6400] hk:f16[64,256,1600] hl:f16[1600,6400] hm:f32[64,256,1600]
  hn:f32[64,256,1] ho:f32[1,1,1600] hp:f32[64,256,1] hq:f32[64,256] hr:f32[64,256]
  hs:f32[64,256,1600] ht:f32[64,256,1600] hu:f16[64,256,1600] hv:f16[1600,1600] hw:f16[64,256,25,64]
  hx:f16[64,25,256,1] hy:f16[64,25,256,256] hz:f16[64,25,256,1] ia:f16[64,256,25,64]
  ib:f16[64,256,25,64] ic:f16[] id:f16[64,25,256,256] ie:f16[64,256,1600] if:f16[1600,4800]
  ig:f32[64,256,1600] ih:f32[64,256,1] ii:f32[1,1,1600] ij:f32[64,256,1] ik:f32[64,256]
  il:f32[64,256] im:f32[64,256,1600] in:f32[64,256,1600] io:f16[64,256,6400] ip:f16[6400,1600]
  iq:f16[64,256,6400] ir:f16[64,256,6400] is:f16[64,256,6400] it:f16[64,256,6400]
  iu:f16[64,256,6400] iv:f16[64,256,1600] iw:f16[1600,6400] ix:f32[64,256,1600] iy:f32[64,256,1]
  iz:f32[1,1,1600] ja:f32[64,256,1] jb:f32[64,256] jc:f32[64,256] jd:f32[64,256,1600]
  je:f32[64,256,1600] jf:f16[64,256,1600] jg:f16[1600,1600] jh:f16[64,256,25,64]
  ji:f16[64,25,256,1] jj:f16[64,25,256,256] jk:f16[64,25,256,1] jl:f16[64,256,25,64]
  jm:f16[64,256,25,64] jn:f16[] jo:f16[64,25,256,256] jp:f16[64,256,1600] jq:f16[1600,4800]
  jr:f32[64,256,1600] js:f32[64,256,1] jt:f32[1,1,1600] ju:f32[64,256,1] jv:f32[64,256]
  jw:f32[64,256] jx:f32[64,256,1600] jy:f32[64,256,1600] jz:f16[64,256,6400] ka:f16[6400,1600]
  kb:f16[64,256,6400] kc:f16[64,256,6400] kd:f16[64,256,6400] ke:f16[64,256,6400]
  kf:f16[64,256,6400] kg:f16[64,256,1600] kh:f16[1600,6400] ki:f32[64,256,1600] kj:f32[64,256,1]
  kk:f32[1,1,1600] kl:f32[64,256,1] km:f32[64,256] kn:f32[64,256] ko:f32[64,256,1600]
  kp:f32[64,256,1600] kq:f16[64,256,1600] kr:f16[64,256,6400] ks:f16[6400,1600] kt:f16[64,256,6400]
  ku:f16[64,256,6400] kv:f16[64,256,6400] kw:f16[64,256,6400] kx:f16[64,256,6400]
  ky:f16[64,256,1600] kz:f16[1600,6400] la:f32[64,256,1600] lb:f32[64,256,1] lc:f32[1,1,1600]
  ld:f32[64,256,1] le:f32[64,256] lf:f32[64,256] lg:f32[64,256,1600] lh:f32[64,256,1600]
  li:f16[64,256,1600] lj:f16[1600,1600] lk:f16[64,256,25,64] ll:f16[64,25,256,1]
  lm:f16[64,25,256,256] ln:f16[64,25,256,1] lo:f16[64,256,25,64] lp:f16[64,256,25,64]
  lq:f16[] lr:f16[64,25,256,256] ls:f16[64,256,1600] lt:f16[1600,4800] lu:f32[64,256,1600]
  lv:f32[64,256,1] lw:f32[1,1,1600] lx:f32[64,256,1] ly:f32[64,256] lz:f32[64,256]
  ma:f32[64,256,1600] mb:f32[64,256,1600] mc:f16[64,256,6400] md:f16[6400,1600] me:f16[64,256,6400]
  mf:f16[64,256,6400] mg:f16[64,256,6400] mh:f16[64,256,6400] mi:f16[64,256,6400]
  mj:f16[64,256,1600] mk:f16[1600,6400] ml:f32[64,256,1600] mm:f32[64,256,1] mn:f32[1,1,1600]
  mo:f32[64,256,1] mp:f32[64,256] mq:f32[64,256] mr:f32[64,256,1600] ms:f32[64,256,1600]
  mt:f16[64,256,1600] mu:f16[1600,1600] mv:f16[64,256,25,64] mw:f16[64,25,256,1]
  mx:f16[64,25,256,256] my:f16[64,25,256,1] mz:f16[64,256,25,64] na:f16[64,256,25,64]
  nb:f16[] nc:f16[64,25,256,256] nd:f16[64,256,1600] ne:f16[1600,4800] nf:f32[64,256,1600]
  ng:f32[64,256,1] nh:f32[1,1,1600] ni:f32[64,256,1] nj:f32[64,256] nk:f32[64,256]
  nl:f32[64,256,1600] nm:f32[64,256,1600] nn:f16[64,256,6400] no:f16[6400,1600] np:f16[64,256,6400]
  nq:f16[64,256,6400] nr:f16[64,256,6400] ns:f16[64,256,6400] nt:f16[64,256,6400]
  nu:f16[64,256,1600] nv:f16[1600,6400] nw:f32[64,256,1600] nx:f32[64,256,1] ny:f32[1,1,1600]
  nz:f32[64,256,1] oa:f32[64,256] ob:f32[64,256] oc:f32[64,256,1600] od:f32[64,256,1600]
  oe:f16[64,256,1600] of:f16[1600,1600] og:f16[64,256,25,64] oh:f16[64,25,256,1]
  oi:f16[64,25,256,256] oj:f16[64,25,256,1] ok:f16[64,256,25,64] ol:f16[64,256,25,64]
  om:f16[] on:f16[64,25,256,256] oo:f16[64,256,1600] op:f16[1600,4800] oq:f32[64,256,1600]
  or:f32[64,256,1] os:f32[1,1,1600] ot:f32[64,256,1] ou:f32[64,256] ov:f32[64,256]
  ow:f32[64,256,1600] ox:f32[64,256,1600] oy:f16[64,256,6400] oz:f16[6400,1600] pa:f16[64,256,6400]
  pb:f16[64,256,6400] pc:f16[64,256,6400] pd:f16[64,256,6400] pe:f16[64,256,6400]
  pf:f16[64,256,1600] pg:f16[1600,6400] ph:f32[64,256,1600] pi:f32[64,256,1] pj:f32[1,1,1600]
  pk:f32[64,256,1] pl:f32[64,256] pm:f32[64,256] pn:f32[64,256,1600] po:f32[64,256,1600]
  pp:f16[64,256,1600] pq:f16[1600,1600] pr:f16[64,256,25,64] ps:f16[64,25,256,1]
  pt:f16[64,25,256,256] pu:f16[64,25,256,1] pv:f16[64,256,25,64] pw:f16[64,256,25,64]
  px:f16[] py:f16[64,25,256,256] pz:f16[64,256,1600] qa:f16[1600,4800] qb:f32[64,256,1600]
  qc:f32[64,256,1] qd:f32[1,1,1600] qe:f32[64,256,1] qf:f32[64,256] qg:f32[64,256]
  qh:f32[64,256,1600] qi:f32[64,256,1600] = named_call[
  call_jaxpr={ lambda ; qj:f16[64,256,1600] qk:f16[1600] ql:f16[1600] qm:f16[6400,1600]
      qn:f16[6400] qo:f16[1600,6400] qp:f16[1600] qq:f16[1600] qr:f16[1600] qs:f16[4800,1600]
      qt:f16[4800] qu:i32[64,256] qv:f16[1600,1600] qw:f16[1600] qx:f16[1600] qy:f16[1600]
      qz:f16[6400,1600] ra:f16[6400] rb:f16[1600,6400] rc:f16[1600] rd:f16[1600]
      re:f16[1600] rf:f16[4800,1600] rg:f16[4800] rh:f16[1600,1600] ri:f16[1600]
      rj:f16[1600] rk:f16[1600] rl:f16[6400,1600] rm:f16[6400] rn:f16[1600,6400]
      ro:f16[1600] rp:f16[1600] rq:f16[1600] rr:f16[4800,1600] rs:f16[4800] rt:f16[1600,1600]
      ru:f16[1600] rv:f16[1600] rw:f16[1600] rx:f16[6400,1600] ry:f16[6400] rz:f16[1600,6400]
      sa:f16[1600] sb:f16[1600] sc:f16[1600] sd:f16[4800,1600] se:f16[4800] sf:f16[1600,1600]
      sg:f16[1600] sh:f16[1600] si:f16[1600] sj:f16[6400,1600] sk:f16[6400] sl:f16[1600,6400]
      sm:f16[1600] sn:f16[1600] so:f16[1600] sp:f16[4800,1600] sq:f16[4800] sr:f16[1600,1600]
      ss:f16[1600] st:f16[1600] su:f16[1600] sv:f16[6400,1600] sw:f16[6400] sx:f16[1600,6400]
      sy:f16[1600] sz:f16[1600] ta:f16[1600] tb:f16[4800,1600] tc:f16[4800] td:f16[1600,1600]
      te:f16[1600] tf:f16[1600] tg:f16[1600] th:f16[6400,1600] ti:f16[6400] tj:f16[1600,6400]
      tk:f16[1600] tl:f16[1600] tm:f16[1600] tn:f16[4800,1600] to:f16[4800] tp:f16[1600,1600]
      tq:f16[1600] tr:f16[1600] ts:f16[1600] tt:f16[6400,1600] tu:f16[6400] tv:f16[1600,6400]
      tw:f16[1600] tx:f16[1600] ty:f16[1600] tz:f16[4800,1600] ua:f16[4800] ub:f16[1600,1600]
      uc:f16[1600] ud:f16[1600] ue:f16[1600] uf:f16[6400,1600] ug:f16[6400] uh:f16[1600,6400]
      ui:f16[1600] uj:f16[1600] uk:f16[1600] ul:f16[4800,1600] um:f16[4800] un:f16[1600,1600]
      uo:f16[1600] up:f16[1600] uq:f16[1600] ur:f16[6400,1600] us:f16[6400] ut:f16[1600,6400]
      uu:f16[1600] uv:f16[1600] uw:f16[1600] ux:f16[4800,1600] uy:f16[4800] uz:f16[1600,1600]
      va:f16[1600] vb:f16[1600] vc:f16[1600] vd:f16[6400,1600] ve:f16[6400] vf:f16[1600,6400]
      vg:f16[1600] vh:f16[1600] vi:f16[1600] vj:f16[4800,1600] vk:f16[4800] vl:f16[1600,1600]
      vm:f16[1600] vn:f16[1600] vo:f16[1600] vp:f16[6400,1600] vq:f16[6400] vr:f16[1600,6400]
      vs:f16[1600]. let
      vt:f16[64,256,1600] vu:f16[64,256,1600] vv:f16[1600,1600] vw:f16[64,256,25,64]
        vx:f16[64,25,256,1] vy:f16[64,25,256,256] vz:f16[64,25,256,1] wa:f16[64,256,25,64]
        wb:f16[64,256,25,64] wc:f16[] wd:f16[64,25,256,256] we:f16[64,256,1600] wf:f16[1600,4800]
        wg:f32[64,256,1600] wh:f32[64,256,1] wi:f32[1,1,1600] wj:f32[64,256,1] wk:f32[64,256]
        wl:f32[64,256] wm:f32[64,256,1600] wn:f32[64,256,1600] wo:f16[64,256,6400]
        wp:f16[6400,1600] wq:f16[64,256,6400] wr:f16[64,256,6400] ws:f16[64,256,6400]
        wt:f16[64,256,6400] wu:f16[64,256,6400] wv:f16[64,256,1600] ww:f16[1600,6400]
        wx:f32[64,256,1600] wy:f32[64,256,1] wz:f32[1,1,1600] xa:f32[64,256,1] xb:f32[64,256]
        xc:f32[64,256] xd:f32[64,256,1600] xe:f32[64,256,1600] xf:f16[64,256,1600]
        xg:f16[1600,1600] xh:f16[64,256,25,64] xi:f16[64,25,256,1] xj:f16[64,25,256,256]
        xk:f16[64,25,256,1] xl:f16[64,256,25,64] xm:f16[64,256,25,64] xn:f16[] xo:f16[64,25,256,256]
        xp:f16[64,256,1600] xq:f16[1600,4800] xr:f32[64,256,1600] xs:f32[64,256,1]
        xt:f32[1,1,1600] xu:f32[64,256,1] xv:f32[64,256] xw:f32[64,256] xx:f32[64,256,1600]
        xy:f32[64,256,1600] xz:f16[64,256,6400] ya:f16[6400,1600] yb:f16[64,256,6400]
        yc:f16[64,256,6400] yd:f16[64,256,6400] ye:f16[64,256,6400] yf:f16[64,256,6400]
        yg:f16[64,256,1600] yh:f16[1600,6400] yi:f32[64,256,1600] yj:f32[64,256,1]
        yk:f32[1,1,1600] yl:f32[64,256,1] ym:f32[64,256] yn:f32[64,256] yo:f32[64,256,1600]
        yp:f32[64,256,1600] yq:f16[64,256,1600] yr:f16[1600,1600] ys:f16[64,256,25,64]
        yt:f16[64,25,256,1] yu:f16[64,25,256,256] yv:f16[64,25,256,1] yw:f16[64,256,25,64]
        yx:f16[64,256,25,64] yy:f16[] yz:f16[64,25,256,256] za:f16[64,256,1600] zb:f16[1600,4800]
        zc:f32[64,256,1600] zd:f32[64,256,1] ze:f32[1,1,1600] zf:f32[64,256,1] zg:f32[64,256]
        zh:f32[64,256] zi:f32[64,256,1600] zj:f32[64,256,1600] zk:f16[64,256,6400]
        zl:f16[6400,1600] zm:f16[64,256,6400] zn:f16[64,256,6400] zo:f16[64,256,6400]
        zp:f16[64,256,6400] zq:f16[64,256,6400] zr:f16[64,256,1600] zs:f16[1600,6400]
        zt:f32[64,256,1600] zu:f32[64,256,1] zv:f32[1,1,1600] zw:f32[64,256,1] zx:f32[64,256]
        zy:f32[64,256] zz:f32[64,256,1600] baa:f32[64,256,1600] bab:f16[64,256,1600]
        bac:f16[1600,1600] bad:f16[64,256,25,64] bae:f16[64,25,256,1] baf:f16[64,25,256,256]
        bag:f16[64,25,256,1] bah:f16[64,256,25,64] bai:f16[64,256,25,64] baj:f16[]
        bak:f16[64,25,256,256] bal:f16[64,256,1600] bam:f16[1600,4800] ban:f32[64,256,1600]
        bao:f32[64,256,1] bap:f32[1,1,1600] baq:f32[64,256,1] bar:f32[64,256] bas:f32[64,256]
        bat:f32[64,256,1600] bau:f32[64,256,1600] bav:f16[64,256,6400] baw:f16[6400,1600]
        bax:f16[64,256,6400] bay:f16[64,256,6400] baz:f16[64,256,6400] bba:f16[64,256,6400]
        bbb:f16[64,256,6400] bbc:f16[64,256,1600] bbd:f16[1600,6400] bbe:f32[64,256,1600]
        bbf:f32[64,256,1] bbg:f32[1,1,1600] bbh:f32[64,256,1] bbi:f32[64,256] bbj:f32[64,256]
        bbk:f32[64,256,1600] bbl:f32[64,256,1600] = named_call[
        call_jaxpr={ lambda ; bbm:f16[64,256,1600] bbn:f16[1600] bbo:f16[1600] bbp:f16[6400,1600]
            bbq:f16[6400] bbr:f16[1600,6400] bbs:f16[1600] bbt:f16[1600] bbu:f16[1600]
            bbv:f16[4800,1600] bbw:f16[4800] bbx:i32[64,256] bby:f16[1600,1600] bbz:f16[1600]
            bca:f16[1600] bcb:f16[1600] bcc:f16[6400,1600] bcd:f16[6400] bce:f16[1600,6400]
            bcf:f16[1600] bcg:f16[1600] bch:f16[1600] bci:f16[4800,1600] bcj:f16[4800]
            bck:f16[1600,1600] bcl:f16[1600] bcm:f16[1600] bcn:f16[1600] bco:f16[6400,1600]
            bcp:f16[6400] bcq:f16[1600,6400] bcr:f16[1600] bcs:f16[1600] bct:f16[1600]
            bcu:f16[4800,1600] bcv:f16[4800] bcw:f16[1600,1600] bcx:f16[1600] bcy:f16[1600]
            bcz:f16[1600] bda:f16[6400,1600] bdb:f16[6400] bdc:f16[1600,6400] bdd:f16[1600]
            bde:f16[1600] bdf:f16[1600] bdg:f16[4800,1600] bdh:f16[4800] bdi:f16[1600,1600]
            bdj:f16[1600]. let
            bdk:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bbm
            bdl:f32[64,256] = reduce_sum[axes=(2,)] bdk
            bdm:f32[64,256] = div bdl 1600.0
            bdn:f32[64,256,1600] = integer_pow[y=2] bdk
            bdo:f32[64,256,1600] = integer_pow[y=1] bdk
            bdp:f32[64,256,1600] = mul 2.0 bdo
            bdq:f32[64,256] = reduce_sum[axes=(2,)] bdn
            bdr:f32[64,256] = div bdq 1600.0
            bds:f32[64,256] = integer_pow[y=2] bdm
            bdt:f32[64,256] = integer_pow[y=1] bdm
            bdu:f32[64,256] = mul 2.0 bdt
            bdv:f32[64,256] = sub bdr bds
            bdw:f32[64,256] = max 0.0 bdv
            bdx:bool[64,256] = eq bdv bdw
            bdy:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            bdz:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 0.0
            bea:f32[64,256] = select_n bdx bdz bdy
            beb:bool[64,256] = eq 0.0 bdw
            bec:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 2.0
            bed:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            bee:f32[64,256] = select_n beb bed bec
            bef:f32[64,256] = div bea bee
            beg:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] bdm
            beh:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] bdw
            bei:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bbm
            bej:f32[64,256,1600] = sub bei beg
            bek:f32[64,256,1] = add beh 9.999999747378752e-06
            bel:f32[64,256,1] = rsqrt bek
            bem:f32[64,256,1] = div bel bek
            ben:f32[64,256,1] = mul -0.5 bem
            beo:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] bbn
            bep:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] beo
            beq:f32[64,256,1600] = mul bel bep
            ber:f32[64,256,1600] = mul bej beq
            bes:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] bbo
            bet:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bes
            beu:f32[64,256,1600] = add ber bet
            bev:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] beu
            bew:f16[1600,6400] = transpose[permutation=(1, 0)] bbp
            bex:f16[64,256,6400] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] bev bew
            bey:f16[1,1,6400] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 6400)
            ] bbq
            bez:f16[64,256,6400] = add bex bey
            bfa:f16[64,256,6400] = integer_pow[y=3] bez
            bfb:f16[64,256,6400] = integer_pow[y=2] bez
            bfc:f16[64,256,6400] = mul 3.0 bfb
            bfd:f16[64,256,6400] = mul 0.044708251953125 bfa
            bfe:f16[64,256,6400] = add bez bfd
            bff:f16[64,256,6400] = mul 0.7978515625 bfe
            bfg:f16[64,256,6400] = tanh bff
            bfh:f16[64,256,6400] = sub 1.0 bfg
            bfi:f16[64,256,6400] = add 1.0 bfg
            bfj:f16[64,256,6400] = mul 0.5 bfi
            bfk:f16[64,256,6400] = mul bez bfj
            bfl:f16[6400,1600] = transpose[permutation=(1, 0)] bbr
            bfm:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] bfk bfl
            bfn:f16[1,1,1600] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 1600)
            ] bbs
            bfo:f16[64,256,1600] = add bfm bfn
            bfp:f16[64,256,1600] = add bbm bfo
            bfq:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bfp
            bfr:f32[64,256] = reduce_sum[axes=(2,)] bfq
            bfs:f32[64,256] = div bfr 1600.0
            bft:f32[64,256,1600] = integer_pow[y=2] bfq
            bfu:f32[64,256,1600] = integer_pow[y=1] bfq
            bfv:f32[64,256,1600] = mul 2.0 bfu
            bfw:f32[64,256] = reduce_sum[axes=(2,)] bft
            bfx:f32[64,256] = div bfw 1600.0
            bfy:f32[64,256] = integer_pow[y=2] bfs
            bfz:f32[64,256] = integer_pow[y=1] bfs
            bga:f32[64,256] = mul 2.0 bfz
            bgb:f32[64,256] = sub bfx bfy
            bgc:f32[64,256] = max 0.0 bgb
            bgd:bool[64,256] = eq bgb bgc
            bge:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            bgf:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 0.0
            bgg:f32[64,256] = select_n bgd bgf bge
            bgh:bool[64,256] = eq 0.0 bgc
            bgi:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 2.0
            bgj:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            bgk:f32[64,256] = select_n bgh bgj bgi
            bgl:f32[64,256] = div bgg bgk
            bgm:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] bfs
            bgn:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] bgc
            bgo:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bfp
            bgp:f32[64,256,1600] = sub bgo bgm
            bgq:f32[64,256,1] = add bgn 9.999999747378752e-06
            bgr:f32[64,256,1] = rsqrt bgq
            bgs:f32[64,256,1] = div bgr bgq
            bgt:f32[64,256,1] = mul -0.5 bgs
            bgu:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] bbt
            bgv:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bgu
            bgw:f32[64,256,1600] = mul bgr bgv
            bgx:f32[64,256,1600] = mul bgp bgw
            bgy:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] bbu
            bgz:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bgy
            bha:f32[64,256,1600] = add bgx bgz
            bhb:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bha
            bhc:i32[1024] = iota[dimension=0 dtype=int32 shape=(1024,)] 
            bhd:i32[1,1024] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 1024)
            ] bhc
            bhe:i32[1,1024,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(1, 1024, 1)
            ] bhd
            bhf:i32[1,1,1024] = broadcast_in_dim[
              broadcast_dimensions=(0, 2)
              shape=(1, 1, 1024)
            ] bhd
            bhg:bool[1,1024,1024] = ge bhe bhf
            bhh:bool[1,1,1024,1024] = broadcast_in_dim[
              broadcast_dimensions=(0, 2, 3)
              shape=(1, 1, 1024, 1024)
            ] bhg
            bhi:f16[1600,4800] = transpose[permutation=(1, 0)] bbv
            bhj:f16[64,256,4800] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] bhb bhi
            bhk:f16[1,1,4800] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 4800)
            ] bbw
            bhl:f16[64,256,4800] = add bhj bhk
            bhm:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 1600)
              start_indices=(0, 0, 0)
              strides=None
            ] bhl
            bhn:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 3200)
              start_indices=(0, 0, 1600)
              strides=None
            ] bhl
            bho:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 4800)
              start_indices=(0, 0, 3200)
              strides=None
            ] bhl
            bhp:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] bhm
            bhq:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] bhn
            bhr:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] bho
            bhs:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
            bht:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
            bhu:i32[2] = concatenate[dimension=0] bhs bht
            bhv:bool[1,1,256,256] = gather[
              dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2, 3), collapsed_slice_dims=(), start_index_map=(2, 3))
              fill_value=None
              indices_are_sorted=True
              mode=GatherScatterMode.PROMISE_IN_BOUNDS
              slice_sizes=(1, 1, 256, 256)
              unique_indices=True
            ] bhh bhu
            bhw:bool[1,256,256] = squeeze[dimensions=(0,)] bhv
            bhx:bool[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(64, 1, 256, 256)
            ] bhw
            bhy:i32[64,1,1,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 3)
              shape=(64, 1, 1, 256)
            ] bbx
            bhz:i32[64,1,256] = squeeze[dimensions=(2,)] bhy
            bia:i32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 3)
              shape=(64, 1, 256, 256)
            ] bhz
            bib:bool[64,1,256,256] = ne bia 0
            bic:bool[64,1,256,256] = and bib bhx
            bid:f32[64,1,256,256] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bic
            bie:bool[64,1,256,256] = gt bid 0.0
            bif:f32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 1, 256, 256)
            ] 0.0
            big:f16[64,1,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bif
            bih:f32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 1, 256, 256)
            ] -10000.0
            bii:f16[64,1,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bih
            bij:f16[64,1,256,256] = select_n bie bii big
            bik:f32[] = sqrt 64.0
            bil:f16[] = convert_element_type[new_dtype=float16 weak_type=False] bik
            bim:f16[64,256,25,64] = div bhp bil
            bin:f16[64,25,256,256] = dot_general[
              dimension_numbers=(((3,), (3,)), ((0, 2), (0, 2)))
              precision=None
              preferred_element_type=None
            ] bim bhq
            bio:f16[64,25,256,256] = add bin bij
            bip:f16[64,25,256] = reduce_max[axes=(3,)] bio
            biq:f16[64,25,256,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 1)
            ] bip
            bir:f16[64,25,256,1] = stop_gradient biq
            bis:f16[64,25,256,256] = sub bio bir
            bit:f16[64,25,256,256] = exp bis
            biu:f32[64,25,256,256] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bit
            biv:f32[64,25,256] = reduce_sum[axes=(3,)] biu
            biw:f32[64,25,256,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 1)
            ] biv
            bix:f16[64,25,256,1] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] biw
            biy:f16[64,25,256,256] = div bit bix
            biz:f16[64,25,256,1] = integer_pow[y=-2] bix
            bja:f16[64,25,64,256] = dot_general[
              dimension_numbers=(((1,), (3,)), ((0, 2), (0, 1)))
              precision=None
              preferred_element_type=None
            ] bhr biy
            bjb:f16[64,256,25,64] = transpose[permutation=(0, 3, 1, 2)] bja
            bjc:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] bjb
            bjd:f16[1600,1600] = transpose[permutation=(1, 0)] bby
            bje:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] bjc bjd
            bjf:f16[1,1,1600] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 1600)
            ] bbz
            bjg:f16[64,256,1600] = add bje bjf
            bjh:f16[64,256,1600] = add bjg bfp
            bji:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bjh
            bjj:f32[64,256] = reduce_sum[axes=(2,)] bji
            bjk:f32[64,256] = div bjj 1600.0
            bjl:f32[64,256,1600] = integer_pow[y=2] bji
            bjm:f32[64,256,1600] = integer_pow[y=1] bji
            bjn:f32[64,256,1600] = mul 2.0 bjm
            bjo:f32[64,256] = reduce_sum[axes=(2,)] bjl
            bjp:f32[64,256] = div bjo 1600.0
            bjq:f32[64,256] = integer_pow[y=2] bjk
            bjr:f32[64,256] = integer_pow[y=1] bjk
            bjs:f32[64,256] = mul 2.0 bjr
            bjt:f32[64,256] = sub bjp bjq
            bju:f32[64,256] = max 0.0 bjt
            bjv:bool[64,256] = eq bjt bju
            bjw:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            bjx:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 0.0
            bjy:f32[64,256] = select_n bjv bjx bjw
            bjz:bool[64,256] = eq 0.0 bju
            bka:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 2.0
            bkb:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            bkc:f32[64,256] = select_n bjz bkb bka
            bkd:f32[64,256] = div bjy bkc
            bke:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] bjk
            bkf:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] bju
            bkg:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bjh
            bkh:f32[64,256,1600] = sub bkg bke
            bki:f32[64,256,1] = add bkf 9.999999747378752e-06
            bkj:f32[64,256,1] = rsqrt bki
            bkk:f32[64,256,1] = div bkj bki
            bkl:f32[64,256,1] = mul -0.5 bkk
            bkm:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] bca
            bkn:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bkm
            bko:f32[64,256,1600] = mul bkj bkn
            bkp:f32[64,256,1600] = mul bkh bko
            bkq:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] bcb
            bkr:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bkq
            bks:f32[64,256,1600] = add bkp bkr
            bkt:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bks
            bku:f16[1600,6400] = transpose[permutation=(1, 0)] bcc
            bkv:f16[64,256,6400] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] bkt bku
            bkw:f16[1,1,6400] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 6400)
            ] bcd
            bkx:f16[64,256,6400] = add bkv bkw
            bky:f16[64,256,6400] = integer_pow[y=3] bkx
            bkz:f16[64,256,6400] = integer_pow[y=2] bkx
            bla:f16[64,256,6400] = mul 3.0 bkz
            blb:f16[64,256,6400] = mul 0.044708251953125 bky
            blc:f16[64,256,6400] = add bkx blb
            bld:f16[64,256,6400] = mul 0.7978515625 blc
            ble:f16[64,256,6400] = tanh bld
            blf:f16[64,256,6400] = sub 1.0 ble
            blg:f16[64,256,6400] = add 1.0 ble
            blh:f16[64,256,6400] = mul 0.5 blg
            bli:f16[64,256,6400] = mul bkx blh
            blj:f16[6400,1600] = transpose[permutation=(1, 0)] bce
            blk:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] bli blj
            bll:f16[1,1,1600] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 1600)
            ] bcf
            blm:f16[64,256,1600] = add blk bll
            bln:f16[64,256,1600] = add bjh blm
            blo:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bln
            blp:f32[64,256] = reduce_sum[axes=(2,)] blo
            blq:f32[64,256] = div blp 1600.0
            blr:f32[64,256,1600] = integer_pow[y=2] blo
            bls:f32[64,256,1600] = integer_pow[y=1] blo
            blt:f32[64,256,1600] = mul 2.0 bls
            blu:f32[64,256] = reduce_sum[axes=(2,)] blr
            blv:f32[64,256] = div blu 1600.0
            blw:f32[64,256] = integer_pow[y=2] blq
            blx:f32[64,256] = integer_pow[y=1] blq
            bly:f32[64,256] = mul 2.0 blx
            blz:f32[64,256] = sub blv blw
            bma:f32[64,256] = max 0.0 blz
            bmb:bool[64,256] = eq blz bma
            bmc:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            bmd:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 0.0
            bme:f32[64,256] = select_n bmb bmd bmc
            bmf:bool[64,256] = eq 0.0 bma
            bmg:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 2.0
            bmh:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            bmi:f32[64,256] = select_n bmf bmh bmg
            bmj:f32[64,256] = div bme bmi
            bmk:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] blq
            bml:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] bma
            bmm:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bln
            bmn:f32[64,256,1600] = sub bmm bmk
            bmo:f32[64,256,1] = add bml 9.999999747378752e-06
            bmp:f32[64,256,1] = rsqrt bmo
            bmq:f32[64,256,1] = div bmp bmo
            bmr:f32[64,256,1] = mul -0.5 bmq
            bms:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] bcg
            bmt:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bms
            bmu:f32[64,256,1600] = mul bmp bmt
            bmv:f32[64,256,1600] = mul bmn bmu
            bmw:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] bch
            bmx:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bmw
            bmy:f32[64,256,1600] = add bmv bmx
            bmz:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bmy
            bna:i32[1024] = iota[dimension=0 dtype=int32 shape=(1024,)] 
            bnb:i32[1,1024] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 1024)
            ] bna
            bnc:i32[1,1024,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(1, 1024, 1)
            ] bnb
            bnd:i32[1,1,1024] = broadcast_in_dim[
              broadcast_dimensions=(0, 2)
              shape=(1, 1, 1024)
            ] bnb
            bne:bool[1,1024,1024] = ge bnc bnd
            bnf:bool[1,1,1024,1024] = broadcast_in_dim[
              broadcast_dimensions=(0, 2, 3)
              shape=(1, 1, 1024, 1024)
            ] bne
            bng:f16[1600,4800] = transpose[permutation=(1, 0)] bci
            bnh:f16[64,256,4800] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] bmz bng
            bni:f16[1,1,4800] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 4800)
            ] bcj
            bnj:f16[64,256,4800] = add bnh bni
            bnk:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 1600)
              start_indices=(0, 0, 0)
              strides=None
            ] bnj
            bnl:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 3200)
              start_indices=(0, 0, 1600)
              strides=None
            ] bnj
            bnm:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 4800)
              start_indices=(0, 0, 3200)
              strides=None
            ] bnj
            bnn:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] bnk
            bno:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] bnl
            bnp:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] bnm
            bnq:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
            bnr:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
            bns:i32[2] = concatenate[dimension=0] bnq bnr
            bnt:bool[1,1,256,256] = gather[
              dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2, 3), collapsed_slice_dims=(), start_index_map=(2, 3))
              fill_value=None
              indices_are_sorted=True
              mode=GatherScatterMode.PROMISE_IN_BOUNDS
              slice_sizes=(1, 1, 256, 256)
              unique_indices=True
            ] bnf bns
            bnu:bool[1,256,256] = squeeze[dimensions=(0,)] bnt
            bnv:bool[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(64, 1, 256, 256)
            ] bnu
            bnw:i32[64,1,1,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 3)
              shape=(64, 1, 1, 256)
            ] bbx
            bnx:i32[64,1,256] = squeeze[dimensions=(2,)] bnw
            bny:i32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 3)
              shape=(64, 1, 256, 256)
            ] bnx
            bnz:bool[64,1,256,256] = ne bny 0
            boa:bool[64,1,256,256] = and bnz bnv
            bob:f32[64,1,256,256] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] boa
            boc:bool[64,1,256,256] = gt bob 0.0
            bod:f32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 1, 256, 256)
            ] 0.0
            boe:f16[64,1,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bod
            bof:f32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 1, 256, 256)
            ] -10000.0
            bog:f16[64,1,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bof
            boh:f16[64,1,256,256] = select_n boc bog boe
            boi:f32[] = sqrt 64.0
            boj:f16[] = convert_element_type[new_dtype=float16 weak_type=False] boi
            bok:f16[64,256,25,64] = div bnn boj
            bol:f16[64,25,256,256] = dot_general[
              dimension_numbers=(((3,), (3,)), ((0, 2), (0, 2)))
              precision=None
              preferred_element_type=None
            ] bok bno
            bom:f16[64,25,256,256] = add bol boh
            bon:f16[64,25,256] = reduce_max[axes=(3,)] bom
            boo:f16[64,25,256,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 1)
            ] bon
            bop:f16[64,25,256,1] = stop_gradient boo
            boq:f16[64,25,256,256] = sub bom bop
            bor:f16[64,25,256,256] = exp boq
            bos:f32[64,25,256,256] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bor
            bot:f32[64,25,256] = reduce_sum[axes=(3,)] bos
            bou:f32[64,25,256,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 1)
            ] bot
            bov:f16[64,25,256,1] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bou
            bow:f16[64,25,256,256] = div bor bov
            box:f16[64,25,256,1] = integer_pow[y=-2] bov
            boy:f16[64,25,64,256] = dot_general[
              dimension_numbers=(((1,), (3,)), ((0, 2), (0, 1)))
              precision=None
              preferred_element_type=None
            ] bnp bow
            boz:f16[64,256,25,64] = transpose[permutation=(0, 3, 1, 2)] boy
            bpa:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] boz
            bpb:f16[1600,1600] = transpose[permutation=(1, 0)] bck
            bpc:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] bpa bpb
            bpd:f16[1,1,1600] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 1600)
            ] bcl
            bpe:f16[64,256,1600] = add bpc bpd
            bpf:f16[64,256,1600] = add bpe bln
            bpg:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bpf
            bph:f32[64,256] = reduce_sum[axes=(2,)] bpg
            bpi:f32[64,256] = div bph 1600.0
            bpj:f32[64,256,1600] = integer_pow[y=2] bpg
            bpk:f32[64,256,1600] = integer_pow[y=1] bpg
            bpl:f32[64,256,1600] = mul 2.0 bpk
            bpm:f32[64,256] = reduce_sum[axes=(2,)] bpj
            bpn:f32[64,256] = div bpm 1600.0
            bpo:f32[64,256] = integer_pow[y=2] bpi
            bpp:f32[64,256] = integer_pow[y=1] bpi
            bpq:f32[64,256] = mul 2.0 bpp
            bpr:f32[64,256] = sub bpn bpo
            bps:f32[64,256] = max 0.0 bpr
            bpt:bool[64,256] = eq bpr bps
            bpu:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            bpv:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 0.0
            bpw:f32[64,256] = select_n bpt bpv bpu
            bpx:bool[64,256] = eq 0.0 bps
            bpy:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 2.0
            bpz:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            bqa:f32[64,256] = select_n bpx bpz bpy
            bqb:f32[64,256] = div bpw bqa
            bqc:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] bpi
            bqd:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] bps
            bqe:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bpf
            bqf:f32[64,256,1600] = sub bqe bqc
            bqg:f32[64,256,1] = add bqd 9.999999747378752e-06
            bqh:f32[64,256,1] = rsqrt bqg
            bqi:f32[64,256,1] = div bqh bqg
            bqj:f32[64,256,1] = mul -0.5 bqi
            bqk:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] bcm
            bql:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bqk
            bqm:f32[64,256,1600] = mul bqh bql
            bqn:f32[64,256,1600] = mul bqf bqm
            bqo:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] bcn
            bqp:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bqo
            bqq:f32[64,256,1600] = add bqn bqp
            bqr:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bqq
            bqs:f16[1600,6400] = transpose[permutation=(1, 0)] bco
            bqt:f16[64,256,6400] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] bqr bqs
            bqu:f16[1,1,6400] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 6400)
            ] bcp
            bqv:f16[64,256,6400] = add bqt bqu
            bqw:f16[64,256,6400] = integer_pow[y=3] bqv
            bqx:f16[64,256,6400] = integer_pow[y=2] bqv
            bqy:f16[64,256,6400] = mul 3.0 bqx
            bqz:f16[64,256,6400] = mul 0.044708251953125 bqw
            bra:f16[64,256,6400] = add bqv bqz
            brb:f16[64,256,6400] = mul 0.7978515625 bra
            brc:f16[64,256,6400] = tanh brb
            brd:f16[64,256,6400] = sub 1.0 brc
            bre:f16[64,256,6400] = add 1.0 brc
            brf:f16[64,256,6400] = mul 0.5 bre
            brg:f16[64,256,6400] = mul bqv brf
            brh:f16[6400,1600] = transpose[permutation=(1, 0)] bcq
            bri:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] brg brh
            brj:f16[1,1,1600] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 1600)
            ] bcr
            brk:f16[64,256,1600] = add bri brj
            brl:f16[64,256,1600] = add bpf brk
            brm:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] brl
            brn:f32[64,256] = reduce_sum[axes=(2,)] brm
            bro:f32[64,256] = div brn 1600.0
            brp:f32[64,256,1600] = integer_pow[y=2] brm
            brq:f32[64,256,1600] = integer_pow[y=1] brm
            brr:f32[64,256,1600] = mul 2.0 brq
            brs:f32[64,256] = reduce_sum[axes=(2,)] brp
            brt:f32[64,256] = div brs 1600.0
            bru:f32[64,256] = integer_pow[y=2] bro
            brv:f32[64,256] = integer_pow[y=1] bro
            brw:f32[64,256] = mul 2.0 brv
            brx:f32[64,256] = sub brt bru
            bry:f32[64,256] = max 0.0 brx
            brz:bool[64,256] = eq brx bry
            bsa:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            bsb:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 0.0
            bsc:f32[64,256] = select_n brz bsb bsa
            bsd:bool[64,256] = eq 0.0 bry
            bse:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 2.0
            bsf:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            bsg:f32[64,256] = select_n bsd bsf bse
            bsh:f32[64,256] = div bsc bsg
            bsi:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] bro
            bsj:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] bry
            bsk:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] brl
            bsl:f32[64,256,1600] = sub bsk bsi
            bsm:f32[64,256,1] = add bsj 9.999999747378752e-06
            bsn:f32[64,256,1] = rsqrt bsm
            bso:f32[64,256,1] = div bsn bsm
            bsp:f32[64,256,1] = mul -0.5 bso
            bsq:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] bcs
            bsr:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bsq
            bss:f32[64,256,1600] = mul bsn bsr
            bst:f32[64,256,1600] = mul bsl bss
            bsu:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] bct
            bsv:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bsu
            bsw:f32[64,256,1600] = add bst bsv
            bsx:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bsw
            bsy:i32[1024] = iota[dimension=0 dtype=int32 shape=(1024,)] 
            bsz:i32[1,1024] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 1024)
            ] bsy
            bta:i32[1,1024,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(1, 1024, 1)
            ] bsz
            btb:i32[1,1,1024] = broadcast_in_dim[
              broadcast_dimensions=(0, 2)
              shape=(1, 1, 1024)
            ] bsz
            btc:bool[1,1024,1024] = ge bta btb
            btd:bool[1,1,1024,1024] = broadcast_in_dim[
              broadcast_dimensions=(0, 2, 3)
              shape=(1, 1, 1024, 1024)
            ] btc
            bte:f16[1600,4800] = transpose[permutation=(1, 0)] bcu
            btf:f16[64,256,4800] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] bsx bte
            btg:f16[1,1,4800] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 4800)
            ] bcv
            bth:f16[64,256,4800] = add btf btg
            bti:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 1600)
              start_indices=(0, 0, 0)
              strides=None
            ] bth
            btj:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 3200)
              start_indices=(0, 0, 1600)
              strides=None
            ] bth
            btk:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 4800)
              start_indices=(0, 0, 3200)
              strides=None
            ] bth
            btl:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] bti
            btm:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] btj
            btn:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] btk
            bto:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
            btp:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
            btq:i32[2] = concatenate[dimension=0] bto btp
            btr:bool[1,1,256,256] = gather[
              dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2, 3), collapsed_slice_dims=(), start_index_map=(2, 3))
              fill_value=None
              indices_are_sorted=True
              mode=GatherScatterMode.PROMISE_IN_BOUNDS
              slice_sizes=(1, 1, 256, 256)
              unique_indices=True
            ] btd btq
            bts:bool[1,256,256] = squeeze[dimensions=(0,)] btr
            btt:bool[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(64, 1, 256, 256)
            ] bts
            btu:i32[64,1,1,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 3)
              shape=(64, 1, 1, 256)
            ] bbx
            btv:i32[64,1,256] = squeeze[dimensions=(2,)] btu
            btw:i32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 3)
              shape=(64, 1, 256, 256)
            ] btv
            btx:bool[64,1,256,256] = ne btw 0
            bty:bool[64,1,256,256] = and btx btt
            btz:f32[64,1,256,256] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bty
            bua:bool[64,1,256,256] = gt btz 0.0
            bub:f32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 1, 256, 256)
            ] 0.0
            buc:f16[64,1,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bub
            bud:f32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 1, 256, 256)
            ] -10000.0
            bue:f16[64,1,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bud
            buf:f16[64,1,256,256] = select_n bua bue buc
            bug:f32[] = sqrt 64.0
            buh:f16[] = convert_element_type[new_dtype=float16 weak_type=False] bug
            bui:f16[64,256,25,64] = div btl buh
            buj:f16[64,25,256,256] = dot_general[
              dimension_numbers=(((3,), (3,)), ((0, 2), (0, 2)))
              precision=None
              preferred_element_type=None
            ] bui btm
            buk:f16[64,25,256,256] = add buj buf
            bul:f16[64,25,256] = reduce_max[axes=(3,)] buk
            bum:f16[64,25,256,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 1)
            ] bul
            bun:f16[64,25,256,1] = stop_gradient bum
            buo:f16[64,25,256,256] = sub buk bun
            bup:f16[64,25,256,256] = exp buo
            buq:f32[64,25,256,256] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bup
            bur:f32[64,25,256] = reduce_sum[axes=(3,)] buq
            bus:f32[64,25,256,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 1)
            ] bur
            but:f16[64,25,256,1] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bus
            buu:f16[64,25,256,256] = div bup but
            buv:f16[64,25,256,1] = integer_pow[y=-2] but
            buw:f16[64,25,64,256] = dot_general[
              dimension_numbers=(((1,), (3,)), ((0, 2), (0, 1)))
              precision=None
              preferred_element_type=None
            ] btn buu
            bux:f16[64,256,25,64] = transpose[permutation=(0, 3, 1, 2)] buw
            buy:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] bux
            buz:f16[1600,1600] = transpose[permutation=(1, 0)] bcw
            bva:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] buy buz
            bvb:f16[1,1,1600] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 1600)
            ] bcx
            bvc:f16[64,256,1600] = add bva bvb
            bvd:f16[64,256,1600] = add bvc brl
            bve:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bvd
            bvf:f32[64,256] = reduce_sum[axes=(2,)] bve
            bvg:f32[64,256] = div bvf 1600.0
            bvh:f32[64,256,1600] = integer_pow[y=2] bve
            bvi:f32[64,256,1600] = integer_pow[y=1] bve
            bvj:f32[64,256,1600] = mul 2.0 bvi
            bvk:f32[64,256] = reduce_sum[axes=(2,)] bvh
            bvl:f32[64,256] = div bvk 1600.0
            bvm:f32[64,256] = integer_pow[y=2] bvg
            bvn:f32[64,256] = integer_pow[y=1] bvg
            bvo:f32[64,256] = mul 2.0 bvn
            bvp:f32[64,256] = sub bvl bvm
            bvq:f32[64,256] = max 0.0 bvp
            bvr:bool[64,256] = eq bvp bvq
            bvs:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            bvt:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 0.0
            bvu:f32[64,256] = select_n bvr bvt bvs
            bvv:bool[64,256] = eq 0.0 bvq
            bvw:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 2.0
            bvx:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            bvy:f32[64,256] = select_n bvv bvx bvw
            bvz:f32[64,256] = div bvu bvy
            bwa:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] bvg
            bwb:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] bvq
            bwc:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bvd
            bwd:f32[64,256,1600] = sub bwc bwa
            bwe:f32[64,256,1] = add bwb 9.999999747378752e-06
            bwf:f32[64,256,1] = rsqrt bwe
            bwg:f32[64,256,1] = div bwf bwe
            bwh:f32[64,256,1] = mul -0.5 bwg
            bwi:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] bcy
            bwj:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bwi
            bwk:f32[64,256,1600] = mul bwf bwj
            bwl:f32[64,256,1600] = mul bwd bwk
            bwm:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] bcz
            bwn:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bwm
            bwo:f32[64,256,1600] = add bwl bwn
            bwp:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bwo
            bwq:f16[1600,6400] = transpose[permutation=(1, 0)] bda
            bwr:f16[64,256,6400] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] bwp bwq
            bws:f16[1,1,6400] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 6400)
            ] bdb
            bwt:f16[64,256,6400] = add bwr bws
            bwu:f16[64,256,6400] = integer_pow[y=3] bwt
            bwv:f16[64,256,6400] = integer_pow[y=2] bwt
            bww:f16[64,256,6400] = mul 3.0 bwv
            bwx:f16[64,256,6400] = mul 0.044708251953125 bwu
            bwy:f16[64,256,6400] = add bwt bwx
            bwz:f16[64,256,6400] = mul 0.7978515625 bwy
            bxa:f16[64,256,6400] = tanh bwz
            bxb:f16[64,256,6400] = sub 1.0 bxa
            bxc:f16[64,256,6400] = add 1.0 bxa
            bxd:f16[64,256,6400] = mul 0.5 bxc
            bxe:f16[64,256,6400] = mul bwt bxd
            bxf:f16[6400,1600] = transpose[permutation=(1, 0)] bdc
            bxg:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] bxe bxf
            bxh:f16[1,1,1600] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 1600)
            ] bdd
            bxi:f16[64,256,1600] = add bxg bxh
            bxj:f16[64,256,1600] = add bvd bxi
            bxk:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bxj
            bxl:f32[64,256] = reduce_sum[axes=(2,)] bxk
            bxm:f32[64,256] = div bxl 1600.0
            bxn:f32[64,256,1600] = integer_pow[y=2] bxk
            bxo:f32[64,256,1600] = integer_pow[y=1] bxk
            bxp:f32[64,256,1600] = mul 2.0 bxo
            bxq:f32[64,256] = reduce_sum[axes=(2,)] bxn
            bxr:f32[64,256] = div bxq 1600.0
            bxs:f32[64,256] = integer_pow[y=2] bxm
            bxt:f32[64,256] = integer_pow[y=1] bxm
            bxu:f32[64,256] = mul 2.0 bxt
            bxv:f32[64,256] = sub bxr bxs
            bxw:f32[64,256] = max 0.0 bxv
            bxx:bool[64,256] = eq bxv bxw
            bxy:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            bxz:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 0.0
            bya:f32[64,256] = select_n bxx bxz bxy
            byb:bool[64,256] = eq 0.0 bxw
            byc:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 2.0
            byd:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            bye:f32[64,256] = select_n byb byd byc
            byf:f32[64,256] = div bya bye
            byg:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] bxm
            byh:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] bxw
            byi:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bxj
            byj:f32[64,256,1600] = sub byi byg
            byk:f32[64,256,1] = add byh 9.999999747378752e-06
            byl:f32[64,256,1] = rsqrt byk
            bym:f32[64,256,1] = div byl byk
            byn:f32[64,256,1] = mul -0.5 bym
            byo:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] bde
            byp:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] byo
            byq:f32[64,256,1600] = mul byl byp
            byr:f32[64,256,1600] = mul byj byq
            bys:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] bdf
            byt:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bys
            byu:f32[64,256,1600] = add byr byt
            byv:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] byu
            byw:i32[1024] = iota[dimension=0 dtype=int32 shape=(1024,)] 
            byx:i32[1,1024] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 1024)
            ] byw
            byy:i32[1,1024,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(1, 1024, 1)
            ] byx
            byz:i32[1,1,1024] = broadcast_in_dim[
              broadcast_dimensions=(0, 2)
              shape=(1, 1, 1024)
            ] byx
            bza:bool[1,1024,1024] = ge byy byz
            bzb:bool[1,1,1024,1024] = broadcast_in_dim[
              broadcast_dimensions=(0, 2, 3)
              shape=(1, 1, 1024, 1024)
            ] bza
            bzc:f16[1600,4800] = transpose[permutation=(1, 0)] bdg
            bzd:f16[64,256,4800] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] byv bzc
            bze:f16[1,1,4800] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 4800)
            ] bdh
            bzf:f16[64,256,4800] = add bzd bze
            bzg:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 1600)
              start_indices=(0, 0, 0)
              strides=None
            ] bzf
            bzh:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 3200)
              start_indices=(0, 0, 1600)
              strides=None
            ] bzf
            bzi:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 4800)
              start_indices=(0, 0, 3200)
              strides=None
            ] bzf
            bzj:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] bzg
            bzk:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] bzh
            bzl:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] bzi
            bzm:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
            bzn:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
            bzo:i32[2] = concatenate[dimension=0] bzm bzn
            bzp:bool[1,1,256,256] = gather[
              dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2, 3), collapsed_slice_dims=(), start_index_map=(2, 3))
              fill_value=None
              indices_are_sorted=True
              mode=GatherScatterMode.PROMISE_IN_BOUNDS
              slice_sizes=(1, 1, 256, 256)
              unique_indices=True
            ] bzb bzo
            bzq:bool[1,256,256] = squeeze[dimensions=(0,)] bzp
            bzr:bool[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(64, 1, 256, 256)
            ] bzq
            bzs:i32[64,1,1,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 3)
              shape=(64, 1, 1, 256)
            ] bbx
            bzt:i32[64,1,256] = squeeze[dimensions=(2,)] bzs
            bzu:i32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 3)
              shape=(64, 1, 256, 256)
            ] bzt
            bzv:bool[64,1,256,256] = ne bzu 0
            bzw:bool[64,1,256,256] = and bzv bzr
            bzx:f32[64,1,256,256] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bzw
            bzy:bool[64,1,256,256] = gt bzx 0.0
            bzz:f32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 1, 256, 256)
            ] 0.0
            caa:f16[64,1,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bzz
            cab:f32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 1, 256, 256)
            ] -10000.0
            cac:f16[64,1,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] cab
            cad:f16[64,1,256,256] = select_n bzy cac caa
            cae:f32[] = sqrt 64.0
            caf:f16[] = convert_element_type[new_dtype=float16 weak_type=False] cae
            cag:f16[64,256,25,64] = div bzj caf
            cah:f16[64,25,256,256] = dot_general[
              dimension_numbers=(((3,), (3,)), ((0, 2), (0, 2)))
              precision=None
              preferred_element_type=None
            ] cag bzk
            cai:f16[64,25,256,256] = add cah cad
            caj:f16[64,25,256] = reduce_max[axes=(3,)] cai
            cak:f16[64,25,256,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 1)
            ] caj
            cal:f16[64,25,256,1] = stop_gradient cak
            cam:f16[64,25,256,256] = sub cai cal
            can:f16[64,25,256,256] = exp cam
            cao:f32[64,25,256,256] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] can
            cap:f32[64,25,256] = reduce_sum[axes=(3,)] cao
            caq:f32[64,25,256,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 1)
            ] cap
            car:f16[64,25,256,1] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] caq
            cas:f16[64,25,256,256] = div can car
            cat:f16[64,25,256,1] = integer_pow[y=-2] car
            cau:f16[64,25,64,256] = dot_general[
              dimension_numbers=(((1,), (3,)), ((0, 2), (0, 1)))
              precision=None
              preferred_element_type=None
            ] bzl cas
            cav:f16[64,256,25,64] = transpose[permutation=(0, 3, 1, 2)] cau
            caw:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] cav
            cax:f16[1600,1600] = transpose[permutation=(1, 0)] bdi
            cay:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] caw cax
            caz:f16[1,1,1600] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 1600)
            ] bdj
            cba:f16[64,256,1600] = add cay caz
            cbb:f16[64,256,1600] = add cba bxj
          in (cbb, caw, cax, bzl, cat, can, car, cag, bzk, caf, cas, byv, bzc, byj,
            byl, byp, byn, byf, bxu, bxp, byq, bxe, bxf, bwt, bxb, bxa, bww, bxd,
            bwp, bwq, bwd, bwf, bwj, bwh, bvz, bvo, bvj, bwk, buy, buz, btn, buv,
            bup, but, bui, btm, buh, buu, bsx, bte, bsl, bsn, bsr, bsp, bsh, brw,
            brr, bss, brg, brh, bqv, brd, brc, bqy, brf, bqr, bqs, bqf, bqh, bql,
            bqj, bqb, bpq, bpl, bqm, bpa, bpb, bnp, box, bor, bov, bok, bno, boj,
            bow, bmz, bng, bmn, bmp, bmt, bmr, bmj, bly, blt, bmu, bli, blj, bkx,
            blf, ble, bla, blh, bkt, bku, bkh, bkj, bkn, bkl, bkd, bjs, bjn, bko,
            bjc, bjd, bhr, biz, bit, bix, bim, bhq, bil, biy, bhb, bhi, bgp, bgr,
            bgv, bgt, bgl, bga, bfv, bgw, bfk, bfl, bez, bfh, bfg, bfc, bfj, bev,
            bew, bej, bel, bep, ben, bef, bdu, bdp, beq) }
        name=20
      ] qj qk ql qm qn qo qp qq qr qs qt qu qv qw qx qy qz ra rb rc rd re rf rg rh
        ri rj rk rl rm rn ro rp rq rr rs rt ru rv rw rx ry rz sa sb sc sd se sf sg
      cbc:f16[64,256,1600] cbd:f16[64,256,6400] cbe:f16[6400,1600] cbf:f16[64,256,6400]
        cbg:f16[64,256,6400] cbh:f16[64,256,6400] cbi:f16[64,256,6400] cbj:f16[64,256,6400]
        cbk:f16[64,256,1600] cbl:f16[1600,6400] cbm:f32[64,256,1600] cbn:f32[64,256,1]
        cbo:f32[1,1,1600] cbp:f32[64,256,1] cbq:f32[64,256] cbr:f32[64,256] cbs:f32[64,256,1600]
        cbt:f32[64,256,1600] cbu:f16[64,256,1600] cbv:f16[1600,1600] cbw:f16[64,256,25,64]
        cbx:f16[64,25,256,1] cby:f16[64,25,256,256] cbz:f16[64,25,256,1] cca:f16[64,256,25,64]
        ccb:f16[64,256,25,64] ccc:f16[] ccd:f16[64,25,256,256] cce:f16[64,256,1600]
        ccf:f16[1600,4800] ccg:f32[64,256,1600] cch:f32[64,256,1] cci:f32[1,1,1600]
        ccj:f32[64,256,1] cck:f32[64,256] ccl:f32[64,256] ccm:f32[64,256,1600] ccn:f32[64,256,1600]
        cco:f16[64,256,6400] ccp:f16[6400,1600] ccq:f16[64,256,6400] ccr:f16[64,256,6400]
        ccs:f16[64,256,6400] cct:f16[64,256,6400] ccu:f16[64,256,6400] ccv:f16[64,256,1600]
        ccw:f16[1600,6400] ccx:f32[64,256,1600] ccy:f32[64,256,1] ccz:f32[1,1,1600]
        cda:f32[64,256,1] cdb:f32[64,256] cdc:f32[64,256] cdd:f32[64,256,1600] cde:f32[64,256,1600]
        cdf:f16[64,256,1600] cdg:f16[1600,1600] cdh:f16[64,256,25,64] cdi:f16[64,25,256,1]
        cdj:f16[64,25,256,256] cdk:f16[64,25,256,1] cdl:f16[64,256,25,64] cdm:f16[64,256,25,64]
        cdn:f16[] cdo:f16[64,25,256,256] cdp:f16[64,256,1600] cdq:f16[1600,4800]
        cdr:f32[64,256,1600] cds:f32[64,256,1] cdt:f32[1,1,1600] cdu:f32[64,256,1]
        cdv:f32[64,256] cdw:f32[64,256] cdx:f32[64,256,1600] cdy:f32[64,256,1600]
        cdz:f16[64,256,6400] cea:f16[6400,1600] ceb:f16[64,256,6400] cec:f16[64,256,6400]
        ced:f16[64,256,6400] cee:f16[64,256,6400] cef:f16[64,256,6400] ceg:f16[64,256,1600]
        ceh:f16[1600,6400] cei:f32[64,256,1600] cej:f32[64,256,1] cek:f32[1,1,1600]
        cel:f32[64,256,1] cem:f32[64,256] cen:f32[64,256] ceo:f32[64,256,1600] cep:f32[64,256,1600]
        ceq:f16[64,256,1600] cer:f16[1600,1600] ces:f16[64,256,25,64] cet:f16[64,25,256,1]
        ceu:f16[64,25,256,256] cev:f16[64,25,256,1] cew:f16[64,256,25,64] cex:f16[64,256,25,64]
        cey:f16[] cez:f16[64,25,256,256] cfa:f16[64,256,1600] cfb:f16[1600,4800]
        cfc:f32[64,256,1600] cfd:f32[64,256,1] cfe:f32[1,1,1600] cff:f32[64,256,1]
        cfg:f32[64,256] cfh:f32[64,256] cfi:f32[64,256,1600] cfj:f32[64,256,1600]
        cfk:f16[64,256,6400] cfl:f16[6400,1600] cfm:f16[64,256,6400] cfn:f16[64,256,6400]
        cfo:f16[64,256,6400] cfp:f16[64,256,6400] cfq:f16[64,256,6400] cfr:f16[64,256,1600]
        cfs:f16[1600,6400] cft:f32[64,256,1600] cfu:f32[64,256,1] cfv:f32[1,1,1600]
        cfw:f32[64,256,1] cfx:f32[64,256] cfy:f32[64,256] cfz:f32[64,256,1600] cga:f32[64,256,1600] = named_call[
        call_jaxpr={ lambda ; cgb:f16[64,256,1600] cgc:f16[1600] cgd:f16[1600] cge:f16[6400,1600]
            cgf:f16[6400] cgg:f16[1600,6400] cgh:f16[1600] cgi:f16[1600] cgj:f16[1600]
            cgk:f16[4800,1600] cgl:f16[4800] cgm:i32[64,256] cgn:f16[1600,1600] cgo:f16[1600]
            cgp:f16[1600] cgq:f16[1600] cgr:f16[6400,1600] cgs:f16[6400] cgt:f16[1600,6400]
            cgu:f16[1600] cgv:f16[1600] cgw:f16[1600] cgx:f16[4800,1600] cgy:f16[4800]
            cgz:f16[1600,1600] cha:f16[1600] chb:f16[1600] chc:f16[1600] chd:f16[6400,1600]
            che:f16[6400] chf:f16[1600,6400] chg:f16[1600] chh:f16[1600] chi:f16[1600]
            chj:f16[4800,1600] chk:f16[4800] chl:f16[1600,1600] chm:f16[1600] chn:f16[1600]
            cho:f16[1600] chp:f16[6400,1600] chq:f16[6400] chr:f16[1600,6400] chs:f16[1600]. let
            cht:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] cgb
            chu:f32[64,256] = reduce_sum[axes=(2,)] cht
            chv:f32[64,256] = div chu 1600.0
            chw:f32[64,256,1600] = integer_pow[y=2] cht
            chx:f32[64,256,1600] = integer_pow[y=1] cht
            chy:f32[64,256,1600] = mul 2.0 chx
            chz:f32[64,256] = reduce_sum[axes=(2,)] chw
            cia:f32[64,256] = div chz 1600.0
            cib:f32[64,256] = integer_pow[y=2] chv
            cic:f32[64,256] = integer_pow[y=1] chv
            cid:f32[64,256] = mul 2.0 cic
            cie:f32[64,256] = sub cia cib
            cif:f32[64,256] = max 0.0 cie
            cig:bool[64,256] = eq cie cif
            cih:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            cii:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 0.0
            cij:f32[64,256] = select_n cig cii cih
            cik:bool[64,256] = eq 0.0 cif
            cil:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 2.0
            cim:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            cin:f32[64,256] = select_n cik cim cil
            cio:f32[64,256] = div cij cin
            cip:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] chv
            ciq:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] cif
            cir:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] cgb
            cis:f32[64,256,1600] = sub cir cip
            cit:f32[64,256,1] = add ciq 9.999999747378752e-06
            ciu:f32[64,256,1] = rsqrt cit
            civ:f32[64,256,1] = div ciu cit
            ciw:f32[64,256,1] = mul -0.5 civ
            cix:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] cgc
            ciy:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] cix
            ciz:f32[64,256,1600] = mul ciu ciy
            cja:f32[64,256,1600] = mul cis ciz
            cjb:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] cgd
            cjc:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] cjb
            cjd:f32[64,256,1600] = add cja cjc
            cje:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] cjd
            cjf:f16[1600,6400] = transpose[permutation=(1, 0)] cge
            cjg:f16[64,256,6400] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] cje cjf
            cjh:f16[1,1,6400] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 6400)
            ] cgf
            cji:f16[64,256,6400] = add cjg cjh
            cjj:f16[64,256,6400] = integer_pow[y=3] cji
            cjk:f16[64,256,6400] = integer_pow[y=2] cji
            cjl:f16[64,256,6400] = mul 3.0 cjk
            cjm:f16[64,256,6400] = mul 0.044708251953125 cjj
            cjn:f16[64,256,6400] = add cji cjm
            cjo:f16[64,256,6400] = mul 0.7978515625 cjn
            cjp:f16[64,256,6400] = tanh cjo
            cjq:f16[64,256,6400] = sub 1.0 cjp
            cjr:f16[64,256,6400] = add 1.0 cjp
            cjs:f16[64,256,6400] = mul 0.5 cjr
            cjt:f16[64,256,6400] = mul cji cjs
            cju:f16[6400,1600] = transpose[permutation=(1, 0)] cgg
            cjv:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] cjt cju
            cjw:f16[1,1,1600] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 1600)
            ] cgh
            cjx:f16[64,256,1600] = add cjv cjw
            cjy:f16[64,256,1600] = add cgb cjx
            cjz:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] cjy
            cka:f32[64,256] = reduce_sum[axes=(2,)] cjz
            ckb:f32[64,256] = div cka 1600.0
            ckc:f32[64,256,1600] = integer_pow[y=2] cjz
            ckd:f32[64,256,1600] = integer_pow[y=1] cjz
            cke:f32[64,256,1600] = mul 2.0 ckd
            ckf:f32[64,256] = reduce_sum[axes=(2,)] ckc
            ckg:f32[64,256] = div ckf 1600.0
            ckh:f32[64,256] = integer_pow[y=2] ckb
            cki:f32[64,256] = integer_pow[y=1] ckb
            ckj:f32[64,256] = mul 2.0 cki
            ckk:f32[64,256] = sub ckg ckh
            ckl:f32[64,256] = max 0.0 ckk
            ckm:bool[64,256] = eq ckk ckl
            ckn:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            cko:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 0.0
            ckp:f32[64,256] = select_n ckm cko ckn
            ckq:bool[64,256] = eq 0.0 ckl
            ckr:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 2.0
            cks:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            ckt:f32[64,256] = select_n ckq cks ckr
            cku:f32[64,256] = div ckp ckt
            ckv:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] ckb
            ckw:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] ckl
            ckx:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] cjy
            cky:f32[64,256,1600] = sub ckx ckv
            ckz:f32[64,256,1] = add ckw 9.999999747378752e-06
            cla:f32[64,256,1] = rsqrt ckz
            clb:f32[64,256,1] = div cla ckz
            clc:f32[64,256,1] = mul -0.5 clb
            cld:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] cgi
            cle:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] cld
            clf:f32[64,256,1600] = mul cla cle
            clg:f32[64,256,1600] = mul cky clf
            clh:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] cgj
            cli:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] clh
            clj:f32[64,256,1600] = add clg cli
            clk:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] clj
            cll:i32[1024] = iota[dimension=0 dtype=int32 shape=(1024,)] 
            clm:i32[1,1024] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 1024)
            ] cll
            cln:i32[1,1024,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(1, 1024, 1)
            ] clm
            clo:i32[1,1,1024] = broadcast_in_dim[
              broadcast_dimensions=(0, 2)
              shape=(1, 1, 1024)
            ] clm
            clp:bool[1,1024,1024] = ge cln clo
            clq:bool[1,1,1024,1024] = broadcast_in_dim[
              broadcast_dimensions=(0, 2, 3)
              shape=(1, 1, 1024, 1024)
            ] clp
            clr:f16[1600,4800] = transpose[permutation=(1, 0)] cgk
            cls:f16[64,256,4800] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] clk clr
            clt:f16[1,1,4800] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 4800)
            ] cgl
            clu:f16[64,256,4800] = add cls clt
            clv:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 1600)
              start_indices=(0, 0, 0)
              strides=None
            ] clu
            clw:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 3200)
              start_indices=(0, 0, 1600)
              strides=None
            ] clu
            clx:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 4800)
              start_indices=(0, 0, 3200)
              strides=None
            ] clu
            cly:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] clv
            clz:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] clw
            cma:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] clx
            cmb:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
            cmc:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
            cmd:i32[2] = concatenate[dimension=0] cmb cmc
            cme:bool[1,1,256,256] = gather[
              dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2, 3), collapsed_slice_dims=(), start_index_map=(2, 3))
              fill_value=None
              indices_are_sorted=True
              mode=GatherScatterMode.PROMISE_IN_BOUNDS
              slice_sizes=(1, 1, 256, 256)
              unique_indices=True
            ] clq cmd
            cmf:bool[1,256,256] = squeeze[dimensions=(0,)] cme
            cmg:bool[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(64, 1, 256, 256)
            ] cmf
            cmh:i32[64,1,1,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 3)
              shape=(64, 1, 1, 256)
            ] cgm
            cmi:i32[64,1,256] = squeeze[dimensions=(2,)] cmh
            cmj:i32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 3)
              shape=(64, 1, 256, 256)
            ] cmi
            cmk:bool[64,1,256,256] = ne cmj 0
            cml:bool[64,1,256,256] = and cmk cmg
            cmm:f32[64,1,256,256] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] cml
            cmn:bool[64,1,256,256] = gt cmm 0.0
            cmo:f32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 1, 256, 256)
            ] 0.0
            cmp:f16[64,1,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] cmo
            cmq:f32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 1, 256, 256)
            ] -10000.0
            cmr:f16[64,1,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] cmq
            cms:f16[64,1,256,256] = select_n cmn cmr cmp
            cmt:f32[] = sqrt 64.0
            cmu:f16[] = convert_element_type[new_dtype=float16 weak_type=False] cmt
            cmv:f16[64,256,25,64] = div cly cmu
            cmw:f16[64,25,256,256] = dot_general[
              dimension_numbers=(((3,), (3,)), ((0, 2), (0, 2)))
              precision=None
              preferred_element_type=None
            ] cmv clz
            cmx:f16[64,25,256,256] = add cmw cms
            cmy:f16[64,25,256] = reduce_max[axes=(3,)] cmx
            cmz:f16[64,25,256,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 1)
            ] cmy
            cna:f16[64,25,256,1] = stop_gradient cmz
            cnb:f16[64,25,256,256] = sub cmx cna
            cnc:f16[64,25,256,256] = exp cnb
            cnd:f32[64,25,256,256] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] cnc
            cne:f32[64,25,256] = reduce_sum[axes=(3,)] cnd
            cnf:f32[64,25,256,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 1)
            ] cne
            cng:f16[64,25,256,1] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] cnf
            cnh:f16[64,25,256,256] = div cnc cng
            cni:f16[64,25,256,1] = integer_pow[y=-2] cng
            cnj:f16[64,25,64,256] = dot_general[
              dimension_numbers=(((1,), (3,)), ((0, 2), (0, 1)))
              precision=None
              preferred_element_type=None
            ] cma cnh
            cnk:f16[64,256,25,64] = transpose[permutation=(0, 3, 1, 2)] cnj
            cnl:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] cnk
            cnm:f16[1600,1600] = transpose[permutation=(1, 0)] cgn
            cnn:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] cnl cnm
            cno:f16[1,1,1600] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 1600)
            ] cgo
            cnp:f16[64,256,1600] = add cnn cno
            cnq:f16[64,256,1600] = add cnp cjy
            cnr:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] cnq
            cns:f32[64,256] = reduce_sum[axes=(2,)] cnr
            cnt:f32[64,256] = div cns 1600.0
            cnu:f32[64,256,1600] = integer_pow[y=2] cnr
            cnv:f32[64,256,1600] = integer_pow[y=1] cnr
            cnw:f32[64,256,1600] = mul 2.0 cnv
            cnx:f32[64,256] = reduce_sum[axes=(2,)] cnu
            cny:f32[64,256] = div cnx 1600.0
            cnz:f32[64,256] = integer_pow[y=2] cnt
            coa:f32[64,256] = integer_pow[y=1] cnt
            cob:f32[64,256] = mul 2.0 coa
            coc:f32[64,256] = sub cny cnz
            cod:f32[64,256] = max 0.0 coc
            coe:bool[64,256] = eq coc cod
            cof:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            cog:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 0.0
            coh:f32[64,256] = select_n coe cog cof
            coi:bool[64,256] = eq 0.0 cod
            coj:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 2.0
            cok:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            col:f32[64,256] = select_n coi cok coj
            com:f32[64,256] = div coh col
            con:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] cnt
            coo:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] cod
            cop:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] cnq
            coq:f32[64,256,1600] = sub cop con
            cor:f32[64,256,1] = add coo 9.999999747378752e-06
            cos:f32[64,256,1] = rsqrt cor
            cot:f32[64,256,1] = div cos cor
            cou:f32[64,256,1] = mul -0.5 cot
            cov:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] cgp
            cow:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] cov
            cox:f32[64,256,1600] = mul cos cow
            coy:f32[64,256,1600] = mul coq cox
            coz:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] cgq
            cpa:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] coz
            cpb:f32[64,256,1600] = add coy cpa
            cpc:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] cpb
            cpd:f16[1600,6400] = transpose[permutation=(1, 0)] cgr
            cpe:f16[64,256,6400] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] cpc cpd
            cpf:f16[1,1,6400] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 6400)
            ] cgs
            cpg:f16[64,256,6400] = add cpe cpf
            cph:f16[64,256,6400] = integer_pow[y=3] cpg
            cpi:f16[64,256,6400] = integer_pow[y=2] cpg
            cpj:f16[64,256,6400] = mul 3.0 cpi
            cpk:f16[64,256,6400] = mul 0.044708251953125 cph
            cpl:f16[64,256,6400] = add cpg cpk
            cpm:f16[64,256,6400] = mul 0.7978515625 cpl
            cpn:f16[64,256,6400] = tanh cpm
            cpo:f16[64,256,6400] = sub 1.0 cpn
            cpp:f16[64,256,6400] = add 1.0 cpn
            cpq:f16[64,256,6400] = mul 0.5 cpp
            cpr:f16[64,256,6400] = mul cpg cpq
            cps:f16[6400,1600] = transpose[permutation=(1, 0)] cgt
            cpt:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] cpr cps
            cpu:f16[1,1,1600] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 1600)
            ] cgu
            cpv:f16[64,256,1600] = add cpt cpu
            cpw:f16[64,256,1600] = add cnq cpv
            cpx:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] cpw
            cpy:f32[64,256] = reduce_sum[axes=(2,)] cpx
            cpz:f32[64,256] = div cpy 1600.0
            cqa:f32[64,256,1600] = integer_pow[y=2] cpx
            cqb:f32[64,256,1600] = integer_pow[y=1] cpx
            cqc:f32[64,256,1600] = mul 2.0 cqb
            cqd:f32[64,256] = reduce_sum[axes=(2,)] cqa
            cqe:f32[64,256] = div cqd 1600.0
            cqf:f32[64,256] = integer_pow[y=2] cpz
            cqg:f32[64,256] = integer_pow[y=1] cpz
            cqh:f32[64,256] = mul 2.0 cqg
            cqi:f32[64,256] = sub cqe cqf
            cqj:f32[64,256] = max 0.0 cqi
            cqk:bool[64,256] = eq cqi cqj
            cql:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            cqm:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 0.0
            cqn:f32[64,256] = select_n cqk cqm cql
            cqo:bool[64,256] = eq 0.0 cqj
            cqp:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 2.0
            cqq:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            cqr:f32[64,256] = select_n cqo cqq cqp
            cqs:f32[64,256] = div cqn cqr
            cqt:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] cpz
            cqu:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] cqj
            cqv:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] cpw
            cqw:f32[64,256,1600] = sub cqv cqt
            cqx:f32[64,256,1] = add cqu 9.999999747378752e-06
            cqy:f32[64,256,1] = rsqrt cqx
            cqz:f32[64,256,1] = div cqy cqx
            cra:f32[64,256,1] = mul -0.5 cqz
            crb:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] cgv
            crc:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] crb
            crd:f32[64,256,1600] = mul cqy crc
            cre:f32[64,256,1600] = mul cqw crd
            crf:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] cgw
            crg:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] crf
            crh:f32[64,256,1600] = add cre crg
            cri:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] crh
            crj:i32[1024] = iota[dimension=0 dtype=int32 shape=(1024,)] 
            crk:i32[1,1024] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 1024)
            ] crj
            crl:i32[1,1024,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(1, 1024, 1)
            ] crk
            crm:i32[1,1,1024] = broadcast_in_dim[
              broadcast_dimensions=(0, 2)
              shape=(1, 1, 1024)
            ] crk
            crn:bool[1,1024,1024] = ge crl crm
            cro:bool[1,1,1024,1024] = broadcast_in_dim[
              broadcast_dimensions=(0, 2, 3)
              shape=(1, 1, 1024, 1024)
            ] crn
            crp:f16[1600,4800] = transpose[permutation=(1, 0)] cgx
            crq:f16[64,256,4800] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] cri crp
            crr:f16[1,1,4800] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 4800)
            ] cgy
            crs:f16[64,256,4800] = add crq crr
            crt:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 1600)
              start_indices=(0, 0, 0)
              strides=None
            ] crs
            cru:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 3200)
              start_indices=(0, 0, 1600)
              strides=None
            ] crs
            crv:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 4800)
              start_indices=(0, 0, 3200)
              strides=None
            ] crs
            crw:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] crt
            crx:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] cru
            cry:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] crv
            crz:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
            csa:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
            csb:i32[2] = concatenate[dimension=0] crz csa
            csc:bool[1,1,256,256] = gather[
              dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2, 3), collapsed_slice_dims=(), start_index_map=(2, 3))
              fill_value=None
              indices_are_sorted=True
              mode=GatherScatterMode.PROMISE_IN_BOUNDS
              slice_sizes=(1, 1, 256, 256)
              unique_indices=True
            ] cro csb
            csd:bool[1,256,256] = squeeze[dimensions=(0,)] csc
            cse:bool[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(64, 1, 256, 256)
            ] csd
            csf:i32[64,1,1,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 3)
              shape=(64, 1, 1, 256)
            ] cgm
            csg:i32[64,1,256] = squeeze[dimensions=(2,)] csf
            csh:i32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 3)
              shape=(64, 1, 256, 256)
            ] csg
            csi:bool[64,1,256,256] = ne csh 0
            csj:bool[64,1,256,256] = and csi cse
            csk:f32[64,1,256,256] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] csj
            csl:bool[64,1,256,256] = gt csk 0.0
            csm:f32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 1, 256, 256)
            ] 0.0
            csn:f16[64,1,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] csm
            cso:f32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 1, 256, 256)
            ] -10000.0
            csp:f16[64,1,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] cso
            csq:f16[64,1,256,256] = select_n csl csp csn
            csr:f32[] = sqrt 64.0
            css:f16[] = convert_element_type[new_dtype=float16 weak_type=False] csr
            cst:f16[64,256,25,64] = div crw css
            csu:f16[64,25,256,256] = dot_general[
              dimension_numbers=(((3,), (3,)), ((0, 2), (0, 2)))
              precision=None
              preferred_element_type=None
            ] cst crx
            csv:f16[64,25,256,256] = add csu csq
            csw:f16[64,25,256] = reduce_max[axes=(3,)] csv
            csx:f16[64,25,256,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 1)
            ] csw
            csy:f16[64,25,256,1] = stop_gradient csx
            csz:f16[64,25,256,256] = sub csv csy
            cta:f16[64,25,256,256] = exp csz
            ctb:f32[64,25,256,256] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] cta
            ctc:f32[64,25,256] = reduce_sum[axes=(3,)] ctb
            ctd:f32[64,25,256,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 1)
            ] ctc
            cte:f16[64,25,256,1] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] ctd
            ctf:f16[64,25,256,256] = div cta cte
            ctg:f16[64,25,256,1] = integer_pow[y=-2] cte
            cth:f16[64,25,64,256] = dot_general[
              dimension_numbers=(((1,), (3,)), ((0, 2), (0, 1)))
              precision=None
              preferred_element_type=None
            ] cry ctf
            cti:f16[64,256,25,64] = transpose[permutation=(0, 3, 1, 2)] cth
            ctj:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] cti
            ctk:f16[1600,1600] = transpose[permutation=(1, 0)] cgz
            ctl:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] ctj ctk
            ctm:f16[1,1,1600] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 1600)
            ] cha
            ctn:f16[64,256,1600] = add ctl ctm
            cto:f16[64,256,1600] = add ctn cpw
            ctp:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] cto
            ctq:f32[64,256] = reduce_sum[axes=(2,)] ctp
            ctr:f32[64,256] = div ctq 1600.0
            cts:f32[64,256,1600] = integer_pow[y=2] ctp
            ctt:f32[64,256,1600] = integer_pow[y=1] ctp
            ctu:f32[64,256,1600] = mul 2.0 ctt
            ctv:f32[64,256] = reduce_sum[axes=(2,)] cts
            ctw:f32[64,256] = div ctv 1600.0
            ctx:f32[64,256] = integer_pow[y=2] ctr
            cty:f32[64,256] = integer_pow[y=1] ctr
            ctz:f32[64,256] = mul 2.0 cty
            cua:f32[64,256] = sub ctw ctx
            cub:f32[64,256] = max 0.0 cua
            cuc:bool[64,256] = eq cua cub
            cud:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            cue:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 0.0
            cuf:f32[64,256] = select_n cuc cue cud
            cug:bool[64,256] = eq 0.0 cub
            cuh:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 2.0
            cui:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            cuj:f32[64,256] = select_n cug cui cuh
            cuk:f32[64,256] = div cuf cuj
            cul:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] ctr
            cum:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] cub
            cun:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] cto
            cuo:f32[64,256,1600] = sub cun cul
            cup:f32[64,256,1] = add cum 9.999999747378752e-06
            cuq:f32[64,256,1] = rsqrt cup
            cur:f32[64,256,1] = div cuq cup
            cus:f32[64,256,1] = mul -0.5 cur
            cut:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] chb
            cuu:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] cut
            cuv:f32[64,256,1600] = mul cuq cuu
            cuw:f32[64,256,1600] = mul cuo cuv
            cux:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] chc
            cuy:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] cux
            cuz:f32[64,256,1600] = add cuw cuy
            cva:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] cuz
            cvb:f16[1600,6400] = transpose[permutation=(1, 0)] chd
            cvc:f16[64,256,6400] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] cva cvb
            cvd:f16[1,1,6400] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 6400)
            ] che
            cve:f16[64,256,6400] = add cvc cvd
            cvf:f16[64,256,6400] = integer_pow[y=3] cve
            cvg:f16[64,256,6400] = integer_pow[y=2] cve
            cvh:f16[64,256,6400] = mul 3.0 cvg
            cvi:f16[64,256,6400] = mul 0.044708251953125 cvf
            cvj:f16[64,256,6400] = add cve cvi
            cvk:f16[64,256,6400] = mul 0.7978515625 cvj
            cvl:f16[64,256,6400] = tanh cvk
            cvm:f16[64,256,6400] = sub 1.0 cvl
            cvn:f16[64,256,6400] = add 1.0 cvl
            cvo:f16[64,256,6400] = mul 0.5 cvn
            cvp:f16[64,256,6400] = mul cve cvo
            cvq:f16[6400,1600] = transpose[permutation=(1, 0)] chf
            cvr:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] cvp cvq
            cvs:f16[1,1,1600] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 1600)
            ] chg
            cvt:f16[64,256,1600] = add cvr cvs
            cvu:f16[64,256,1600] = add cto cvt
            cvv:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] cvu
            cvw:f32[64,256] = reduce_sum[axes=(2,)] cvv
            cvx:f32[64,256] = div cvw 1600.0
            cvy:f32[64,256,1600] = integer_pow[y=2] cvv
            cvz:f32[64,256,1600] = integer_pow[y=1] cvv
            cwa:f32[64,256,1600] = mul 2.0 cvz
            cwb:f32[64,256] = reduce_sum[axes=(2,)] cvy
            cwc:f32[64,256] = div cwb 1600.0
            cwd:f32[64,256] = integer_pow[y=2] cvx
            cwe:f32[64,256] = integer_pow[y=1] cvx
            cwf:f32[64,256] = mul 2.0 cwe
            cwg:f32[64,256] = sub cwc cwd
            cwh:f32[64,256] = max 0.0 cwg
            cwi:bool[64,256] = eq cwg cwh
            cwj:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            cwk:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 0.0
            cwl:f32[64,256] = select_n cwi cwk cwj
            cwm:bool[64,256] = eq 0.0 cwh
            cwn:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 2.0
            cwo:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            cwp:f32[64,256] = select_n cwm cwo cwn
            cwq:f32[64,256] = div cwl cwp
            cwr:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] cvx
            cws:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] cwh
            cwt:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] cvu
            cwu:f32[64,256,1600] = sub cwt cwr
            cwv:f32[64,256,1] = add cws 9.999999747378752e-06
            cww:f32[64,256,1] = rsqrt cwv
            cwx:f32[64,256,1] = div cww cwv
            cwy:f32[64,256,1] = mul -0.5 cwx
            cwz:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] chh
            cxa:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] cwz
            cxb:f32[64,256,1600] = mul cww cxa
            cxc:f32[64,256,1600] = mul cwu cxb
            cxd:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] chi
            cxe:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] cxd
            cxf:f32[64,256,1600] = add cxc cxe
            cxg:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] cxf
            cxh:i32[1024] = iota[dimension=0 dtype=int32 shape=(1024,)] 
            cxi:i32[1,1024] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 1024)
            ] cxh
            cxj:i32[1,1024,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(1, 1024, 1)
            ] cxi
            cxk:i32[1,1,1024] = broadcast_in_dim[
              broadcast_dimensions=(0, 2)
              shape=(1, 1, 1024)
            ] cxi
            cxl:bool[1,1024,1024] = ge cxj cxk
            cxm:bool[1,1,1024,1024] = broadcast_in_dim[
              broadcast_dimensions=(0, 2, 3)
              shape=(1, 1, 1024, 1024)
            ] cxl
            cxn:f16[1600,4800] = transpose[permutation=(1, 0)] chj
            cxo:f16[64,256,4800] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] cxg cxn
            cxp:f16[1,1,4800] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 4800)
            ] chk
            cxq:f16[64,256,4800] = add cxo cxp
            cxr:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 1600)
              start_indices=(0, 0, 0)
              strides=None
            ] cxq
            cxs:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 3200)
              start_indices=(0, 0, 1600)
              strides=None
            ] cxq
            cxt:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 4800)
              start_indices=(0, 0, 3200)
              strides=None
            ] cxq
            cxu:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] cxr
            cxv:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] cxs
            cxw:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] cxt
            cxx:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
            cxy:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
            cxz:i32[2] = concatenate[dimension=0] cxx cxy
            cya:bool[1,1,256,256] = gather[
              dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2, 3), collapsed_slice_dims=(), start_index_map=(2, 3))
              fill_value=None
              indices_are_sorted=True
              mode=GatherScatterMode.PROMISE_IN_BOUNDS
              slice_sizes=(1, 1, 256, 256)
              unique_indices=True
            ] cxm cxz
            cyb:bool[1,256,256] = squeeze[dimensions=(0,)] cya
            cyc:bool[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(64, 1, 256, 256)
            ] cyb
            cyd:i32[64,1,1,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 3)
              shape=(64, 1, 1, 256)
            ] cgm
            cye:i32[64,1,256] = squeeze[dimensions=(2,)] cyd
            cyf:i32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 3)
              shape=(64, 1, 256, 256)
            ] cye
            cyg:bool[64,1,256,256] = ne cyf 0
            cyh:bool[64,1,256,256] = and cyg cyc
            cyi:f32[64,1,256,256] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] cyh
            cyj:bool[64,1,256,256] = gt cyi 0.0
            cyk:f32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 1, 256, 256)
            ] 0.0
            cyl:f16[64,1,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] cyk
            cym:f32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 1, 256, 256)
            ] -10000.0
            cyn:f16[64,1,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] cym
            cyo:f16[64,1,256,256] = select_n cyj cyn cyl
            cyp:f32[] = sqrt 64.0
            cyq:f16[] = convert_element_type[new_dtype=float16 weak_type=False] cyp
            cyr:f16[64,256,25,64] = div cxu cyq
            cys:f16[64,25,256,256] = dot_general[
              dimension_numbers=(((3,), (3,)), ((0, 2), (0, 2)))
              precision=None
              preferred_element_type=None
            ] cyr cxv
            cyt:f16[64,25,256,256] = add cys cyo
            cyu:f16[64,25,256] = reduce_max[axes=(3,)] cyt
            cyv:f16[64,25,256,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 1)
            ] cyu
            cyw:f16[64,25,256,1] = stop_gradient cyv
            cyx:f16[64,25,256,256] = sub cyt cyw
            cyy:f16[64,25,256,256] = exp cyx
            cyz:f32[64,25,256,256] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] cyy
            cza:f32[64,25,256] = reduce_sum[axes=(3,)] cyz
            czb:f32[64,25,256,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 1)
            ] cza
            czc:f16[64,25,256,1] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] czb
            czd:f16[64,25,256,256] = div cyy czc
            cze:f16[64,25,256,1] = integer_pow[y=-2] czc
            czf:f16[64,25,64,256] = dot_general[
              dimension_numbers=(((1,), (3,)), ((0, 2), (0, 1)))
              precision=None
              preferred_element_type=None
            ] cxw czd
            czg:f16[64,256,25,64] = transpose[permutation=(0, 3, 1, 2)] czf
            czh:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] czg
            czi:f16[1600,1600] = transpose[permutation=(1, 0)] chl
            czj:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] czh czi
            czk:f16[1,1,1600] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 1600)
            ] chm
            czl:f16[64,256,1600] = add czj czk
            czm:f16[64,256,1600] = add czl cvu
            czn:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] czm
            czo:f32[64,256] = reduce_sum[axes=(2,)] czn
            czp:f32[64,256] = div czo 1600.0
            czq:f32[64,256,1600] = integer_pow[y=2] czn
            czr:f32[64,256,1600] = integer_pow[y=1] czn
            czs:f32[64,256,1600] = mul 2.0 czr
            czt:f32[64,256] = reduce_sum[axes=(2,)] czq
            czu:f32[64,256] = div czt 1600.0
            czv:f32[64,256] = integer_pow[y=2] czp
            czw:f32[64,256] = integer_pow[y=1] czp
            czx:f32[64,256] = mul 2.0 czw
            czy:f32[64,256] = sub czu czv
            czz:f32[64,256] = max 0.0 czy
            daa:bool[64,256] = eq czy czz
            dab:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            dac:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 0.0
            dad:f32[64,256] = select_n daa dac dab
            dae:bool[64,256] = eq 0.0 czz
            daf:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 2.0
            dag:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            dah:f32[64,256] = select_n dae dag daf
            dai:f32[64,256] = div dad dah
            daj:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] czp
            dak:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] czz
            dal:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] czm
            dam:f32[64,256,1600] = sub dal daj
            dan:f32[64,256,1] = add dak 9.999999747378752e-06
            dao:f32[64,256,1] = rsqrt dan
            dap:f32[64,256,1] = div dao dan
            daq:f32[64,256,1] = mul -0.5 dap
            dar:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] chn
            das:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] dar
            dat:f32[64,256,1600] = mul dao das
            dau:f32[64,256,1600] = mul dam dat
            dav:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] cho
            daw:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] dav
            dax:f32[64,256,1600] = add dau daw
            day:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] dax
            daz:f16[1600,6400] = transpose[permutation=(1, 0)] chp
            dba:f16[64,256,6400] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] day daz
            dbb:f16[1,1,6400] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 6400)
            ] chq
            dbc:f16[64,256,6400] = add dba dbb
            dbd:f16[64,256,6400] = integer_pow[y=3] dbc
            dbe:f16[64,256,6400] = integer_pow[y=2] dbc
            dbf:f16[64,256,6400] = mul 3.0 dbe
            dbg:f16[64,256,6400] = mul 0.044708251953125 dbd
            dbh:f16[64,256,6400] = add dbc dbg
            dbi:f16[64,256,6400] = mul 0.7978515625 dbh
            dbj:f16[64,256,6400] = tanh dbi
            dbk:f16[64,256,6400] = sub 1.0 dbj
            dbl:f16[64,256,6400] = add 1.0 dbj
            dbm:f16[64,256,6400] = mul 0.5 dbl
            dbn:f16[64,256,6400] = mul dbc dbm
            dbo:f16[6400,1600] = transpose[permutation=(1, 0)] chr
            dbp:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] dbn dbo
            dbq:f16[1,1,1600] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 1600)
            ] chs
            dbr:f16[64,256,1600] = add dbp dbq
            dbs:f16[64,256,1600] = add czm dbr
          in (dbs, dbn, dbo, dbc, dbk, dbj, dbf, dbm, day, daz, dam, dao, das, daq,
            dai, czx, czs, dat, czh, czi, cxw, cze, cyy, czc, cyr, cxv, cyq, czd,
            cxg, cxn, cwu, cww, cxa, cwy, cwq, cwf, cwa, cxb, cvp, cvq, cve, cvm,
            cvl, cvh, cvo, cva, cvb, cuo, cuq, cuu, cus, cuk, ctz, ctu, cuv, ctj,
            ctk, cry, ctg, cta, cte, cst, crx, css, ctf, cri, crp, cqw, cqy, crc,
            cra, cqs, cqh, cqc, crd, cpr, cps, cpg, cpo, cpn, cpj, cpq, cpc, cpd,
            coq, cos, cow, cou, com, cob, cnw, cox, cnl, cnm, cma, cni, cnc, cng,
            cmv, clz, cmu, cnh, clk, clr, cky, cla, cle, clc, cku, ckj, cke, clf,
            cjt, cju, cji, cjq, cjp, cjl, cjs, cje, cjf, cis, ciu, ciy, ciw, cio,
            cid, chy, ciz) }
        name=21
      ] vt sh si sj sk sl sm sn so sp sq qu sr ss st su sv sw sx sy sz ta tb tc td
        te tf tg th ti tj tk tl tm tn to tp tq tr ts tt tu tv tw
      dbt:f16[64,256,1600] dbu:f16[64,256,6400] dbv:f16[6400,1600] dbw:f16[64,256,6400]
        dbx:f16[64,256,6400] dby:f16[64,256,6400] dbz:f16[64,256,6400] dca:f16[64,256,6400]
        dcb:f16[64,256,1600] dcc:f16[1600,6400] dcd:f32[64,256,1600] dce:f32[64,256,1]
        dcf:f32[1,1,1600] dcg:f32[64,256,1] dch:f32[64,256] dci:f32[64,256] dcj:f32[64,256,1600]
        dck:f32[64,256,1600] dcl:f16[64,256,1600] dcm:f16[1600,1600] dcn:f16[64,256,25,64]
        dco:f16[64,25,256,1] dcp:f16[64,25,256,256] dcq:f16[64,25,256,1] dcr:f16[64,256,25,64]
        dcs:f16[64,256,25,64] dct:f16[] dcu:f16[64,25,256,256] dcv:f16[64,256,1600]
        dcw:f16[1600,4800] dcx:f32[64,256,1600] dcy:f32[64,256,1] dcz:f32[1,1,1600]
        dda:f32[64,256,1] ddb:f32[64,256] ddc:f32[64,256] ddd:f32[64,256,1600] dde:f32[64,256,1600]
        ddf:f16[64,256,6400] ddg:f16[6400,1600] ddh:f16[64,256,6400] ddi:f16[64,256,6400]
        ddj:f16[64,256,6400] ddk:f16[64,256,6400] ddl:f16[64,256,6400] ddm:f16[64,256,1600]
        ddn:f16[1600,6400] ddo:f32[64,256,1600] ddp:f32[64,256,1] ddq:f32[1,1,1600]
        ddr:f32[64,256,1] dds:f32[64,256] ddt:f32[64,256] ddu:f32[64,256,1600] ddv:f32[64,256,1600]
        ddw:f16[64,256,1600] ddx:f16[1600,1600] ddy:f16[64,256,25,64] ddz:f16[64,25,256,1]
        dea:f16[64,25,256,256] deb:f16[64,25,256,1] dec:f16[64,256,25,64] ded:f16[64,256,25,64]
        dee:f16[] def:f16[64,25,256,256] deg:f16[64,256,1600] deh:f16[1600,4800]
        dei:f32[64,256,1600] dej:f32[64,256,1] dek:f32[1,1,1600] del:f32[64,256,1]
        dem:f32[64,256] den:f32[64,256] deo:f32[64,256,1600] dep:f32[64,256,1600]
        deq:f16[64,256,6400] der:f16[6400,1600] des:f16[64,256,6400] det:f16[64,256,6400]
        deu:f16[64,256,6400] dev:f16[64,256,6400] dew:f16[64,256,6400] dex:f16[64,256,1600]
        dey:f16[1600,6400] dez:f32[64,256,1600] dfa:f32[64,256,1] dfb:f32[1,1,1600]
        dfc:f32[64,256,1] dfd:f32[64,256] dfe:f32[64,256] dff:f32[64,256,1600] dfg:f32[64,256,1600]
        dfh:f16[64,256,1600] dfi:f16[1600,1600] dfj:f16[64,256,25,64] dfk:f16[64,25,256,1]
        dfl:f16[64,25,256,256] dfm:f16[64,25,256,1] dfn:f16[64,256,25,64] dfo:f16[64,256,25,64]
        dfp:f16[] dfq:f16[64,25,256,256] dfr:f16[64,256,1600] dfs:f16[1600,4800]
        dft:f32[64,256,1600] dfu:f32[64,256,1] dfv:f32[1,1,1600] dfw:f32[64,256,1]
        dfx:f32[64,256] dfy:f32[64,256] dfz:f32[64,256,1600] dga:f32[64,256,1600]
        dgb:f16[64,256,6400] dgc:f16[6400,1600] dgd:f16[64,256,6400] dge:f16[64,256,6400]
        dgf:f16[64,256,6400] dgg:f16[64,256,6400] dgh:f16[64,256,6400] dgi:f16[64,256,1600]
        dgj:f16[1600,6400] dgk:f32[64,256,1600] dgl:f32[64,256,1] dgm:f32[1,1,1600]
        dgn:f32[64,256,1] dgo:f32[64,256] dgp:f32[64,256] dgq:f32[64,256,1600] dgr:f32[64,256,1600]
        dgs:f16[64,256,1600] dgt:f16[1600,1600] dgu:f16[64,256,25,64] dgv:f16[64,25,256,1]
        dgw:f16[64,25,256,256] dgx:f16[64,25,256,1] dgy:f16[64,256,25,64] dgz:f16[64,256,25,64]
        dha:f16[] dhb:f16[64,25,256,256] dhc:f16[64,256,1600] dhd:f16[1600,4800]
        dhe:f32[64,256,1600] dhf:f32[64,256,1] dhg:f32[1,1,1600] dhh:f32[64,256,1]
        dhi:f32[64,256] dhj:f32[64,256] dhk:f32[64,256,1600] dhl:f32[64,256,1600] = named_call[
        call_jaxpr={ lambda ; dhm:f16[64,256,1600] dhn:f16[1600] dho:f16[1600] dhp:f16[4800,1600]
            dhq:f16[4800] dhr:i32[64,256] dhs:f16[1600,1600] dht:f16[1600] dhu:f16[1600]
            dhv:f16[1600] dhw:f16[6400,1600] dhx:f16[6400] dhy:f16[1600,6400] dhz:f16[1600]
            dia:f16[1600] dib:f16[1600] dic:f16[4800,1600] did:f16[4800] die:f16[1600,1600]
            dif:f16[1600] dig:f16[1600] dih:f16[1600] dii:f16[6400,1600] dij:f16[6400]
            dik:f16[1600,6400] dil:f16[1600] dim:f16[1600] din:f16[1600] dio:f16[4800,1600]
            dip:f16[4800] diq:f16[1600,1600] dir:f16[1600] dis:f16[1600] dit:f16[1600]
            diu:f16[6400,1600] div:f16[6400] diw:f16[1600,6400] dix:f16[1600] diy:f16[1600]
            diz:f16[1600] dja:f16[4800,1600] djb:f16[4800] djc:f16[1600,1600] djd:f16[1600]
            dje:f16[1600] djf:f16[1600] djg:f16[6400,1600] djh:f16[6400] dji:f16[1600,6400]
            djj:f16[1600]. let
            djk:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] dhm
            djl:f32[64,256] = reduce_sum[axes=(2,)] djk
            djm:f32[64,256] = div djl 1600.0
            djn:f32[64,256,1600] = integer_pow[y=2] djk
            djo:f32[64,256,1600] = integer_pow[y=1] djk
            djp:f32[64,256,1600] = mul 2.0 djo
            djq:f32[64,256] = reduce_sum[axes=(2,)] djn
            djr:f32[64,256] = div djq 1600.0
            djs:f32[64,256] = integer_pow[y=2] djm
            djt:f32[64,256] = integer_pow[y=1] djm
            dju:f32[64,256] = mul 2.0 djt
            djv:f32[64,256] = sub djr djs
            djw:f32[64,256] = max 0.0 djv
            djx:bool[64,256] = eq djv djw
            djy:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            djz:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 0.0
            dka:f32[64,256] = select_n djx djz djy
            dkb:bool[64,256] = eq 0.0 djw
            dkc:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 2.0
            dkd:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            dke:f32[64,256] = select_n dkb dkd dkc
            dkf:f32[64,256] = div dka dke
            dkg:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] djm
            dkh:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] djw
            dki:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] dhm
            dkj:f32[64,256,1600] = sub dki dkg
            dkk:f32[64,256,1] = add dkh 9.999999747378752e-06
            dkl:f32[64,256,1] = rsqrt dkk
            dkm:f32[64,256,1] = div dkl dkk
            dkn:f32[64,256,1] = mul -0.5 dkm
            dko:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] dhn
            dkp:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] dko
            dkq:f32[64,256,1600] = mul dkl dkp
            dkr:f32[64,256,1600] = mul dkj dkq
            dks:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] dho
            dkt:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] dks
            dku:f32[64,256,1600] = add dkr dkt
            dkv:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] dku
            dkw:i32[1024] = iota[dimension=0 dtype=int32 shape=(1024,)] 
            dkx:i32[1,1024] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 1024)
            ] dkw
            dky:i32[1,1024,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(1, 1024, 1)
            ] dkx
            dkz:i32[1,1,1024] = broadcast_in_dim[
              broadcast_dimensions=(0, 2)
              shape=(1, 1, 1024)
            ] dkx
            dla:bool[1,1024,1024] = ge dky dkz
            dlb:bool[1,1,1024,1024] = broadcast_in_dim[
              broadcast_dimensions=(0, 2, 3)
              shape=(1, 1, 1024, 1024)
            ] dla
            dlc:f16[1600,4800] = transpose[permutation=(1, 0)] dhp
            dld:f16[64,256,4800] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] dkv dlc
            dle:f16[1,1,4800] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 4800)
            ] dhq
            dlf:f16[64,256,4800] = add dld dle
            dlg:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 1600)
              start_indices=(0, 0, 0)
              strides=None
            ] dlf
            dlh:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 3200)
              start_indices=(0, 0, 1600)
              strides=None
            ] dlf
            dli:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 4800)
              start_indices=(0, 0, 3200)
              strides=None
            ] dlf
            dlj:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] dlg
            dlk:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] dlh
            dll:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] dli
            dlm:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
            dln:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
            dlo:i32[2] = concatenate[dimension=0] dlm dln
            dlp:bool[1,1,256,256] = gather[
              dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2, 3), collapsed_slice_dims=(), start_index_map=(2, 3))
              fill_value=None
              indices_are_sorted=True
              mode=GatherScatterMode.PROMISE_IN_BOUNDS
              slice_sizes=(1, 1, 256, 256)
              unique_indices=True
            ] dlb dlo
            dlq:bool[1,256,256] = squeeze[dimensions=(0,)] dlp
            dlr:bool[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(64, 1, 256, 256)
            ] dlq
            dls:i32[64,1,1,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 3)
              shape=(64, 1, 1, 256)
            ] dhr
            dlt:i32[64,1,256] = squeeze[dimensions=(2,)] dls
            dlu:i32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 3)
              shape=(64, 1, 256, 256)
            ] dlt
            dlv:bool[64,1,256,256] = ne dlu 0
            dlw:bool[64,1,256,256] = and dlv dlr
            dlx:f32[64,1,256,256] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] dlw
            dly:bool[64,1,256,256] = gt dlx 0.0
            dlz:f32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 1, 256, 256)
            ] 0.0
            dma:f16[64,1,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] dlz
            dmb:f32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 1, 256, 256)
            ] -10000.0
            dmc:f16[64,1,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] dmb
            dmd:f16[64,1,256,256] = select_n dly dmc dma
            dme:f32[] = sqrt 64.0
            dmf:f16[] = convert_element_type[new_dtype=float16 weak_type=False] dme
            dmg:f16[64,256,25,64] = div dlj dmf
            dmh:f16[64,25,256,256] = dot_general[
              dimension_numbers=(((3,), (3,)), ((0, 2), (0, 2)))
              precision=None
              preferred_element_type=None
            ] dmg dlk
            dmi:f16[64,25,256,256] = add dmh dmd
            dmj:f16[64,25,256] = reduce_max[axes=(3,)] dmi
            dmk:f16[64,25,256,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 1)
            ] dmj
            dml:f16[64,25,256,1] = stop_gradient dmk
            dmm:f16[64,25,256,256] = sub dmi dml
            dmn:f16[64,25,256,256] = exp dmm
            dmo:f32[64,25,256,256] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] dmn
            dmp:f32[64,25,256] = reduce_sum[axes=(3,)] dmo
            dmq:f32[64,25,256,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 1)
            ] dmp
            dmr:f16[64,25,256,1] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] dmq
            dms:f16[64,25,256,256] = div dmn dmr
            dmt:f16[64,25,256,1] = integer_pow[y=-2] dmr
            dmu:f16[64,25,64,256] = dot_general[
              dimension_numbers=(((1,), (3,)), ((0, 2), (0, 1)))
              precision=None
              preferred_element_type=None
            ] dll dms
            dmv:f16[64,256,25,64] = transpose[permutation=(0, 3, 1, 2)] dmu
            dmw:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] dmv
            dmx:f16[1600,1600] = transpose[permutation=(1, 0)] dhs
            dmy:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] dmw dmx
            dmz:f16[1,1,1600] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 1600)
            ] dht
            dna:f16[64,256,1600] = add dmy dmz
            dnb:f16[64,256,1600] = add dna dhm
            dnc:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] dnb
            dnd:f32[64,256] = reduce_sum[axes=(2,)] dnc
            dne:f32[64,256] = div dnd 1600.0
            dnf:f32[64,256,1600] = integer_pow[y=2] dnc
            dng:f32[64,256,1600] = integer_pow[y=1] dnc
            dnh:f32[64,256,1600] = mul 2.0 dng
            dni:f32[64,256] = reduce_sum[axes=(2,)] dnf
            dnj:f32[64,256] = div dni 1600.0
            dnk:f32[64,256] = integer_pow[y=2] dne
            dnl:f32[64,256] = integer_pow[y=1] dne
            dnm:f32[64,256] = mul 2.0 dnl
            dnn:f32[64,256] = sub dnj dnk
            dno:f32[64,256] = max 0.0 dnn
            dnp:bool[64,256] = eq dnn dno
            dnq:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            dnr:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 0.0
            dns:f32[64,256] = select_n dnp dnr dnq
            dnt:bool[64,256] = eq 0.0 dno
            dnu:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 2.0
            dnv:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            dnw:f32[64,256] = select_n dnt dnv dnu
            dnx:f32[64,256] = div dns dnw
            dny:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] dne
            dnz:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] dno
            doa:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] dnb
            dob:f32[64,256,1600] = sub doa dny
            doc:f32[64,256,1] = add dnz 9.999999747378752e-06
            dod:f32[64,256,1] = rsqrt doc
            doe:f32[64,256,1] = div dod doc
            dof:f32[64,256,1] = mul -0.5 doe
            dog:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] dhu
            doh:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] dog
            doi:f32[64,256,1600] = mul dod doh
            doj:f32[64,256,1600] = mul dob doi
            dok:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] dhv
            dol:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] dok
            dom:f32[64,256,1600] = add doj dol
            don:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] dom
            doo:f16[1600,6400] = transpose[permutation=(1, 0)] dhw
            dop:f16[64,256,6400] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] don doo
            doq:f16[1,1,6400] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 6400)
            ] dhx
            dor:f16[64,256,6400] = add dop doq
            dos:f16[64,256,6400] = integer_pow[y=3] dor
            dot:f16[64,256,6400] = integer_pow[y=2] dor
            dou:f16[64,256,6400] = mul 3.0 dot
            dov:f16[64,256,6400] = mul 0.044708251953125 dos
            dow:f16[64,256,6400] = add dor dov
            dox:f16[64,256,6400] = mul 0.7978515625 dow
            doy:f16[64,256,6400] = tanh dox
            doz:f16[64,256,6400] = sub 1.0 doy
            dpa:f16[64,256,6400] = add 1.0 doy
            dpb:f16[64,256,6400] = mul 0.5 dpa
            dpc:f16[64,256,6400] = mul dor dpb
            dpd:f16[6400,1600] = transpose[permutation=(1, 0)] dhy
            dpe:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] dpc dpd
            dpf:f16[1,1,1600] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 1600)
            ] dhz
            dpg:f16[64,256,1600] = add dpe dpf
            dph:f16[64,256,1600] = add dnb dpg
            dpi:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] dph
            dpj:f32[64,256] = reduce_sum[axes=(2,)] dpi
            dpk:f32[64,256] = div dpj 1600.0
            dpl:f32[64,256,1600] = integer_pow[y=2] dpi
            dpm:f32[64,256,1600] = integer_pow[y=1] dpi
            dpn:f32[64,256,1600] = mul 2.0 dpm
            dpo:f32[64,256] = reduce_sum[axes=(2,)] dpl
            dpp:f32[64,256] = div dpo 1600.0
            dpq:f32[64,256] = integer_pow[y=2] dpk
            dpr:f32[64,256] = integer_pow[y=1] dpk
            dps:f32[64,256] = mul 2.0 dpr
            dpt:f32[64,256] = sub dpp dpq
            dpu:f32[64,256] = max 0.0 dpt
            dpv:bool[64,256] = eq dpt dpu
            dpw:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            dpx:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 0.0
            dpy:f32[64,256] = select_n dpv dpx dpw
            dpz:bool[64,256] = eq 0.0 dpu
            dqa:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 2.0
            dqb:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            dqc:f32[64,256] = select_n dpz dqb dqa
            dqd:f32[64,256] = div dpy dqc
            dqe:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] dpk
            dqf:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] dpu
            dqg:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] dph
            dqh:f32[64,256,1600] = sub dqg dqe
            dqi:f32[64,256,1] = add dqf 9.999999747378752e-06
            dqj:f32[64,256,1] = rsqrt dqi
            dqk:f32[64,256,1] = div dqj dqi
            dql:f32[64,256,1] = mul -0.5 dqk
            dqm:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] dia
            dqn:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] dqm
            dqo:f32[64,256,1600] = mul dqj dqn
            dqp:f32[64,256,1600] = mul dqh dqo
            dqq:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] dib
            dqr:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] dqq
            dqs:f32[64,256,1600] = add dqp dqr
            dqt:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] dqs
            dqu:i32[1024] = iota[dimension=0 dtype=int32 shape=(1024,)] 
            dqv:i32[1,1024] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 1024)
            ] dqu
            dqw:i32[1,1024,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(1, 1024, 1)
            ] dqv
            dqx:i32[1,1,1024] = broadcast_in_dim[
              broadcast_dimensions=(0, 2)
              shape=(1, 1, 1024)
            ] dqv
            dqy:bool[1,1024,1024] = ge dqw dqx
            dqz:bool[1,1,1024,1024] = broadcast_in_dim[
              broadcast_dimensions=(0, 2, 3)
              shape=(1, 1, 1024, 1024)
            ] dqy
            dra:f16[1600,4800] = transpose[permutation=(1, 0)] dic
            drb:f16[64,256,4800] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] dqt dra
            drc:f16[1,1,4800] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 4800)
            ] did
            drd:f16[64,256,4800] = add drb drc
            dre:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 1600)
              start_indices=(0, 0, 0)
              strides=None
            ] drd
            drf:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 3200)
              start_indices=(0, 0, 1600)
              strides=None
            ] drd
            drg:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 4800)
              start_indices=(0, 0, 3200)
              strides=None
            ] drd
            drh:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] dre
            dri:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] drf
            drj:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] drg
            drk:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
            drl:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
            drm:i32[2] = concatenate[dimension=0] drk drl
            drn:bool[1,1,256,256] = gather[
              dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2, 3), collapsed_slice_dims=(), start_index_map=(2, 3))
              fill_value=None
              indices_are_sorted=True
              mode=GatherScatterMode.PROMISE_IN_BOUNDS
              slice_sizes=(1, 1, 256, 256)
              unique_indices=True
            ] dqz drm
            dro:bool[1,256,256] = squeeze[dimensions=(0,)] drn
            drp:bool[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(64, 1, 256, 256)
            ] dro
            drq:i32[64,1,1,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 3)
              shape=(64, 1, 1, 256)
            ] dhr
            drr:i32[64,1,256] = squeeze[dimensions=(2,)] drq
            drs:i32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 3)
              shape=(64, 1, 256, 256)
            ] drr
            drt:bool[64,1,256,256] = ne drs 0
            dru:bool[64,1,256,256] = and drt drp
            drv:f32[64,1,256,256] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] dru
            drw:bool[64,1,256,256] = gt drv 0.0
            drx:f32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 1, 256, 256)
            ] 0.0
            dry:f16[64,1,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] drx
            drz:f32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 1, 256, 256)
            ] -10000.0
            dsa:f16[64,1,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] drz
            dsb:f16[64,1,256,256] = select_n drw dsa dry
            dsc:f32[] = sqrt 64.0
            dsd:f16[] = convert_element_type[new_dtype=float16 weak_type=False] dsc
            dse:f16[64,256,25,64] = div drh dsd
            dsf:f16[64,25,256,256] = dot_general[
              dimension_numbers=(((3,), (3,)), ((0, 2), (0, 2)))
              precision=None
              preferred_element_type=None
            ] dse dri
            dsg:f16[64,25,256,256] = add dsf dsb
            dsh:f16[64,25,256] = reduce_max[axes=(3,)] dsg
            dsi:f16[64,25,256,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 1)
            ] dsh
            dsj:f16[64,25,256,1] = stop_gradient dsi
            dsk:f16[64,25,256,256] = sub dsg dsj
            dsl:f16[64,25,256,256] = exp dsk
            dsm:f32[64,25,256,256] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] dsl
            dsn:f32[64,25,256] = reduce_sum[axes=(3,)] dsm
            dso:f32[64,25,256,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 1)
            ] dsn
            dsp:f16[64,25,256,1] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] dso
            dsq:f16[64,25,256,256] = div dsl dsp
            dsr:f16[64,25,256,1] = integer_pow[y=-2] dsp
            dss:f16[64,25,64,256] = dot_general[
              dimension_numbers=(((1,), (3,)), ((0, 2), (0, 1)))
              precision=None
              preferred_element_type=None
            ] drj dsq
            dst:f16[64,256,25,64] = transpose[permutation=(0, 3, 1, 2)] dss
            dsu:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] dst
            dsv:f16[1600,1600] = transpose[permutation=(1, 0)] die
            dsw:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] dsu dsv
            dsx:f16[1,1,1600] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 1600)
            ] dif
            dsy:f16[64,256,1600] = add dsw dsx
            dsz:f16[64,256,1600] = add dsy dph
            dta:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] dsz
            dtb:f32[64,256] = reduce_sum[axes=(2,)] dta
            dtc:f32[64,256] = div dtb 1600.0
            dtd:f32[64,256,1600] = integer_pow[y=2] dta
            dte:f32[64,256,1600] = integer_pow[y=1] dta
            dtf:f32[64,256,1600] = mul 2.0 dte
            dtg:f32[64,256] = reduce_sum[axes=(2,)] dtd
            dth:f32[64,256] = div dtg 1600.0
            dti:f32[64,256] = integer_pow[y=2] dtc
            dtj:f32[64,256] = integer_pow[y=1] dtc
            dtk:f32[64,256] = mul 2.0 dtj
            dtl:f32[64,256] = sub dth dti
            dtm:f32[64,256] = max 0.0 dtl
            dtn:bool[64,256] = eq dtl dtm
            dto:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            dtp:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 0.0
            dtq:f32[64,256] = select_n dtn dtp dto
            dtr:bool[64,256] = eq 0.0 dtm
            dts:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 2.0
            dtt:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            dtu:f32[64,256] = select_n dtr dtt dts
            dtv:f32[64,256] = div dtq dtu
            dtw:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] dtc
            dtx:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] dtm
            dty:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] dsz
            dtz:f32[64,256,1600] = sub dty dtw
            dua:f32[64,256,1] = add dtx 9.999999747378752e-06
            dub:f32[64,256,1] = rsqrt dua
            duc:f32[64,256,1] = div dub dua
            dud:f32[64,256,1] = mul -0.5 duc
            due:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] dig
            duf:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] due
            dug:f32[64,256,1600] = mul dub duf
            duh:f32[64,256,1600] = mul dtz dug
            dui:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] dih
            duj:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] dui
            duk:f32[64,256,1600] = add duh duj
            dul:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] duk
            dum:f16[1600,6400] = transpose[permutation=(1, 0)] dii
            dun:f16[64,256,6400] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] dul dum
            duo:f16[1,1,6400] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 6400)
            ] dij
            dup:f16[64,256,6400] = add dun duo
            duq:f16[64,256,6400] = integer_pow[y=3] dup
            dur:f16[64,256,6400] = integer_pow[y=2] dup
            dus:f16[64,256,6400] = mul 3.0 dur
            dut:f16[64,256,6400] = mul 0.044708251953125 duq
            duu:f16[64,256,6400] = add dup dut
            duv:f16[64,256,6400] = mul 0.7978515625 duu
            duw:f16[64,256,6400] = tanh duv
            dux:f16[64,256,6400] = sub 1.0 duw
            duy:f16[64,256,6400] = add 1.0 duw
            duz:f16[64,256,6400] = mul 0.5 duy
            dva:f16[64,256,6400] = mul dup duz
            dvb:f16[6400,1600] = transpose[permutation=(1, 0)] dik
            dvc:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] dva dvb
            dvd:f16[1,1,1600] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 1600)
            ] dil
            dve:f16[64,256,1600] = add dvc dvd
            dvf:f16[64,256,1600] = add dsz dve
            dvg:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] dvf
            dvh:f32[64,256] = reduce_sum[axes=(2,)] dvg
            dvi:f32[64,256] = div dvh 1600.0
            dvj:f32[64,256,1600] = integer_pow[y=2] dvg
            dvk:f32[64,256,1600] = integer_pow[y=1] dvg
            dvl:f32[64,256,1600] = mul 2.0 dvk
            dvm:f32[64,256] = reduce_sum[axes=(2,)] dvj
            dvn:f32[64,256] = div dvm 1600.0
            dvo:f32[64,256] = integer_pow[y=2] dvi
            dvp:f32[64,256] = integer_pow[y=1] dvi
            dvq:f32[64,256] = mul 2.0 dvp
            dvr:f32[64,256] = sub dvn dvo
            dvs:f32[64,256] = max 0.0 dvr
            dvt:bool[64,256] = eq dvr dvs
            dvu:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            dvv:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 0.0
            dvw:f32[64,256] = select_n dvt dvv dvu
            dvx:bool[64,256] = eq 0.0 dvs
            dvy:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 2.0
            dvz:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            dwa:f32[64,256] = select_n dvx dvz dvy
            dwb:f32[64,256] = div dvw dwa
            dwc:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] dvi
            dwd:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] dvs
            dwe:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] dvf
            dwf:f32[64,256,1600] = sub dwe dwc
            dwg:f32[64,256,1] = add dwd 9.999999747378752e-06
            dwh:f32[64,256,1] = rsqrt dwg
            dwi:f32[64,256,1] = div dwh dwg
            dwj:f32[64,256,1] = mul -0.5 dwi
            dwk:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] dim
            dwl:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] dwk
            dwm:f32[64,256,1600] = mul dwh dwl
            dwn:f32[64,256,1600] = mul dwf dwm
            dwo:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] din
            dwp:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] dwo
            dwq:f32[64,256,1600] = add dwn dwp
            dwr:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] dwq
            dws:i32[1024] = iota[dimension=0 dtype=int32 shape=(1024,)] 
            dwt:i32[1,1024] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 1024)
            ] dws
            dwu:i32[1,1024,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(1, 1024, 1)
            ] dwt
            dwv:i32[1,1,1024] = broadcast_in_dim[
              broadcast_dimensions=(0, 2)
              shape=(1, 1, 1024)
            ] dwt
            dww:bool[1,1024,1024] = ge dwu dwv
            dwx:bool[1,1,1024,1024] = broadcast_in_dim[
              broadcast_dimensions=(0, 2, 3)
              shape=(1, 1, 1024, 1024)
            ] dww
            dwy:f16[1600,4800] = transpose[permutation=(1, 0)] dio
            dwz:f16[64,256,4800] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] dwr dwy
            dxa:f16[1,1,4800] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 4800)
            ] dip
            dxb:f16[64,256,4800] = add dwz dxa
            dxc:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 1600)
              start_indices=(0, 0, 0)
              strides=None
            ] dxb
            dxd:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 3200)
              start_indices=(0, 0, 1600)
              strides=None
            ] dxb
            dxe:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 4800)
              start_indices=(0, 0, 3200)
              strides=None
            ] dxb
            dxf:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] dxc
            dxg:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] dxd
            dxh:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] dxe
            dxi:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
            dxj:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
            dxk:i32[2] = concatenate[dimension=0] dxi dxj
            dxl:bool[1,1,256,256] = gather[
              dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2, 3), collapsed_slice_dims=(), start_index_map=(2, 3))
              fill_value=None
              indices_are_sorted=True
              mode=GatherScatterMode.PROMISE_IN_BOUNDS
              slice_sizes=(1, 1, 256, 256)
              unique_indices=True
            ] dwx dxk
            dxm:bool[1,256,256] = squeeze[dimensions=(0,)] dxl
            dxn:bool[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(64, 1, 256, 256)
            ] dxm
            dxo:i32[64,1,1,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 3)
              shape=(64, 1, 1, 256)
            ] dhr
            dxp:i32[64,1,256] = squeeze[dimensions=(2,)] dxo
            dxq:i32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 3)
              shape=(64, 1, 256, 256)
            ] dxp
            dxr:bool[64,1,256,256] = ne dxq 0
            dxs:bool[64,1,256,256] = and dxr dxn
            dxt:f32[64,1,256,256] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] dxs
            dxu:bool[64,1,256,256] = gt dxt 0.0
            dxv:f32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 1, 256, 256)
            ] 0.0
            dxw:f16[64,1,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] dxv
            dxx:f32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 1, 256, 256)
            ] -10000.0
            dxy:f16[64,1,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] dxx
            dxz:f16[64,1,256,256] = select_n dxu dxy dxw
            dya:f32[] = sqrt 64.0
            dyb:f16[] = convert_element_type[new_dtype=float16 weak_type=False] dya
            dyc:f16[64,256,25,64] = div dxf dyb
            dyd:f16[64,25,256,256] = dot_general[
              dimension_numbers=(((3,), (3,)), ((0, 2), (0, 2)))
              precision=None
              preferred_element_type=None
            ] dyc dxg
            dye:f16[64,25,256,256] = add dyd dxz
            dyf:f16[64,25,256] = reduce_max[axes=(3,)] dye
            dyg:f16[64,25,256,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 1)
            ] dyf
            dyh:f16[64,25,256,1] = stop_gradient dyg
            dyi:f16[64,25,256,256] = sub dye dyh
            dyj:f16[64,25,256,256] = exp dyi
            dyk:f32[64,25,256,256] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] dyj
            dyl:f32[64,25,256] = reduce_sum[axes=(3,)] dyk
            dym:f32[64,25,256,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 1)
            ] dyl
            dyn:f16[64,25,256,1] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] dym
            dyo:f16[64,25,256,256] = div dyj dyn
            dyp:f16[64,25,256,1] = integer_pow[y=-2] dyn
            dyq:f16[64,25,64,256] = dot_general[
              dimension_numbers=(((1,), (3,)), ((0, 2), (0, 1)))
              precision=None
              preferred_element_type=None
            ] dxh dyo
            dyr:f16[64,256,25,64] = transpose[permutation=(0, 3, 1, 2)] dyq
            dys:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] dyr
            dyt:f16[1600,1600] = transpose[permutation=(1, 0)] diq
            dyu:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] dys dyt
            dyv:f16[1,1,1600] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 1600)
            ] dir
            dyw:f16[64,256,1600] = add dyu dyv
            dyx:f16[64,256,1600] = add dyw dvf
            dyy:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] dyx
            dyz:f32[64,256] = reduce_sum[axes=(2,)] dyy
            dza:f32[64,256] = div dyz 1600.0
            dzb:f32[64,256,1600] = integer_pow[y=2] dyy
            dzc:f32[64,256,1600] = integer_pow[y=1] dyy
            dzd:f32[64,256,1600] = mul 2.0 dzc
            dze:f32[64,256] = reduce_sum[axes=(2,)] dzb
            dzf:f32[64,256] = div dze 1600.0
            dzg:f32[64,256] = integer_pow[y=2] dza
            dzh:f32[64,256] = integer_pow[y=1] dza
            dzi:f32[64,256] = mul 2.0 dzh
            dzj:f32[64,256] = sub dzf dzg
            dzk:f32[64,256] = max 0.0 dzj
            dzl:bool[64,256] = eq dzj dzk
            dzm:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            dzn:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 0.0
            dzo:f32[64,256] = select_n dzl dzn dzm
            dzp:bool[64,256] = eq 0.0 dzk
            dzq:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 2.0
            dzr:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            dzs:f32[64,256] = select_n dzp dzr dzq
            dzt:f32[64,256] = div dzo dzs
            dzu:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] dza
            dzv:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] dzk
            dzw:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] dyx
            dzx:f32[64,256,1600] = sub dzw dzu
            dzy:f32[64,256,1] = add dzv 9.999999747378752e-06
            dzz:f32[64,256,1] = rsqrt dzy
            eaa:f32[64,256,1] = div dzz dzy
            eab:f32[64,256,1] = mul -0.5 eaa
            eac:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] dis
            ead:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] eac
            eae:f32[64,256,1600] = mul dzz ead
            eaf:f32[64,256,1600] = mul dzx eae
            eag:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] dit
            eah:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] eag
            eai:f32[64,256,1600] = add eaf eah
            eaj:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] eai
            eak:f16[1600,6400] = transpose[permutation=(1, 0)] diu
            eal:f16[64,256,6400] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] eaj eak
            eam:f16[1,1,6400] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 6400)
            ] div
            ean:f16[64,256,6400] = add eal eam
            eao:f16[64,256,6400] = integer_pow[y=3] ean
            eap:f16[64,256,6400] = integer_pow[y=2] ean
            eaq:f16[64,256,6400] = mul 3.0 eap
            ear:f16[64,256,6400] = mul 0.044708251953125 eao
            eas:f16[64,256,6400] = add ean ear
            eat:f16[64,256,6400] = mul 0.7978515625 eas
            eau:f16[64,256,6400] = tanh eat
            eav:f16[64,256,6400] = sub 1.0 eau
            eaw:f16[64,256,6400] = add 1.0 eau
            eax:f16[64,256,6400] = mul 0.5 eaw
            eay:f16[64,256,6400] = mul ean eax
            eaz:f16[6400,1600] = transpose[permutation=(1, 0)] diw
            eba:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] eay eaz
            ebb:f16[1,1,1600] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 1600)
            ] dix
            ebc:f16[64,256,1600] = add eba ebb
            ebd:f16[64,256,1600] = add dyx ebc
            ebe:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] ebd
            ebf:f32[64,256] = reduce_sum[axes=(2,)] ebe
            ebg:f32[64,256] = div ebf 1600.0
            ebh:f32[64,256,1600] = integer_pow[y=2] ebe
            ebi:f32[64,256,1600] = integer_pow[y=1] ebe
            ebj:f32[64,256,1600] = mul 2.0 ebi
            ebk:f32[64,256] = reduce_sum[axes=(2,)] ebh
            ebl:f32[64,256] = div ebk 1600.0
            ebm:f32[64,256] = integer_pow[y=2] ebg
            ebn:f32[64,256] = integer_pow[y=1] ebg
            ebo:f32[64,256] = mul 2.0 ebn
            ebp:f32[64,256] = sub ebl ebm
            ebq:f32[64,256] = max 0.0 ebp
            ebr:bool[64,256] = eq ebp ebq
            ebs:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            ebt:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 0.0
            ebu:f32[64,256] = select_n ebr ebt ebs
            ebv:bool[64,256] = eq 0.0 ebq
            ebw:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 2.0
            ebx:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            eby:f32[64,256] = select_n ebv ebx ebw
            ebz:f32[64,256] = div ebu eby
            eca:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] ebg
            ecb:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] ebq
            ecc:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] ebd
            ecd:f32[64,256,1600] = sub ecc eca
            ece:f32[64,256,1] = add ecb 9.999999747378752e-06
            ecf:f32[64,256,1] = rsqrt ece
            ecg:f32[64,256,1] = div ecf ece
            ech:f32[64,256,1] = mul -0.5 ecg
            eci:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] diy
            ecj:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] eci
            eck:f32[64,256,1600] = mul ecf ecj
            ecl:f32[64,256,1600] = mul ecd eck
            ecm:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] diz
            ecn:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] ecm
            eco:f32[64,256,1600] = add ecl ecn
            ecp:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] eco
            ecq:i32[1024] = iota[dimension=0 dtype=int32 shape=(1024,)] 
            ecr:i32[1,1024] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 1024)
            ] ecq
            ecs:i32[1,1024,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(1, 1024, 1)
            ] ecr
            ect:i32[1,1,1024] = broadcast_in_dim[
              broadcast_dimensions=(0, 2)
              shape=(1, 1, 1024)
            ] ecr
            ecu:bool[1,1024,1024] = ge ecs ect
            ecv:bool[1,1,1024,1024] = broadcast_in_dim[
              broadcast_dimensions=(0, 2, 3)
              shape=(1, 1, 1024, 1024)
            ] ecu
            ecw:f16[1600,4800] = transpose[permutation=(1, 0)] dja
            ecx:f16[64,256,4800] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] ecp ecw
            ecy:f16[1,1,4800] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 4800)
            ] djb
            ecz:f16[64,256,4800] = add ecx ecy
            eda:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 1600)
              start_indices=(0, 0, 0)
              strides=None
            ] ecz
            edb:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 3200)
              start_indices=(0, 0, 1600)
              strides=None
            ] ecz
            edc:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 4800)
              start_indices=(0, 0, 3200)
              strides=None
            ] ecz
            edd:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] eda
            ede:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] edb
            edf:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] edc
            edg:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
            edh:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
            edi:i32[2] = concatenate[dimension=0] edg edh
            edj:bool[1,1,256,256] = gather[
              dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2, 3), collapsed_slice_dims=(), start_index_map=(2, 3))
              fill_value=None
              indices_are_sorted=True
              mode=GatherScatterMode.PROMISE_IN_BOUNDS
              slice_sizes=(1, 1, 256, 256)
              unique_indices=True
            ] ecv edi
            edk:bool[1,256,256] = squeeze[dimensions=(0,)] edj
            edl:bool[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(64, 1, 256, 256)
            ] edk
            edm:i32[64,1,1,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 3)
              shape=(64, 1, 1, 256)
            ] dhr
            edn:i32[64,1,256] = squeeze[dimensions=(2,)] edm
            edo:i32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 3)
              shape=(64, 1, 256, 256)
            ] edn
            edp:bool[64,1,256,256] = ne edo 0
            edq:bool[64,1,256,256] = and edp edl
            edr:f32[64,1,256,256] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] edq
            eds:bool[64,1,256,256] = gt edr 0.0
            edt:f32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 1, 256, 256)
            ] 0.0
            edu:f16[64,1,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] edt
            edv:f32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 1, 256, 256)
            ] -10000.0
            edw:f16[64,1,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] edv
            edx:f16[64,1,256,256] = select_n eds edw edu
            edy:f32[] = sqrt 64.0
            edz:f16[] = convert_element_type[new_dtype=float16 weak_type=False] edy
            eea:f16[64,256,25,64] = div edd edz
            eeb:f16[64,25,256,256] = dot_general[
              dimension_numbers=(((3,), (3,)), ((0, 2), (0, 2)))
              precision=None
              preferred_element_type=None
            ] eea ede
            eec:f16[64,25,256,256] = add eeb edx
            eed:f16[64,25,256] = reduce_max[axes=(3,)] eec
            eee:f16[64,25,256,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 1)
            ] eed
            eef:f16[64,25,256,1] = stop_gradient eee
            eeg:f16[64,25,256,256] = sub eec eef
            eeh:f16[64,25,256,256] = exp eeg
            eei:f32[64,25,256,256] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] eeh
            eej:f32[64,25,256] = reduce_sum[axes=(3,)] eei
            eek:f32[64,25,256,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 1)
            ] eej
            eel:f16[64,25,256,1] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] eek
            eem:f16[64,25,256,256] = div eeh eel
            een:f16[64,25,256,1] = integer_pow[y=-2] eel
            eeo:f16[64,25,64,256] = dot_general[
              dimension_numbers=(((1,), (3,)), ((0, 2), (0, 1)))
              precision=None
              preferred_element_type=None
            ] edf eem
            eep:f16[64,256,25,64] = transpose[permutation=(0, 3, 1, 2)] eeo
            eeq:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] eep
            eer:f16[1600,1600] = transpose[permutation=(1, 0)] djc
            ees:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] eeq eer
            eet:f16[1,1,1600] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 1600)
            ] djd
            eeu:f16[64,256,1600] = add ees eet
            eev:f16[64,256,1600] = add eeu ebd
            eew:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] eev
            eex:f32[64,256] = reduce_sum[axes=(2,)] eew
            eey:f32[64,256] = div eex 1600.0
            eez:f32[64,256,1600] = integer_pow[y=2] eew
            efa:f32[64,256,1600] = integer_pow[y=1] eew
            efb:f32[64,256,1600] = mul 2.0 efa
            efc:f32[64,256] = reduce_sum[axes=(2,)] eez
            efd:f32[64,256] = div efc 1600.0
            efe:f32[64,256] = integer_pow[y=2] eey
            eff:f32[64,256] = integer_pow[y=1] eey
            efg:f32[64,256] = mul 2.0 eff
            efh:f32[64,256] = sub efd efe
            efi:f32[64,256] = max 0.0 efh
            efj:bool[64,256] = eq efh efi
            efk:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            efl:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 0.0
            efm:f32[64,256] = select_n efj efl efk
            efn:bool[64,256] = eq 0.0 efi
            efo:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 2.0
            efp:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            efq:f32[64,256] = select_n efn efp efo
            efr:f32[64,256] = div efm efq
            efs:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] eey
            eft:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] efi
            efu:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] eev
            efv:f32[64,256,1600] = sub efu efs
            efw:f32[64,256,1] = add eft 9.999999747378752e-06
            efx:f32[64,256,1] = rsqrt efw
            efy:f32[64,256,1] = div efx efw
            efz:f32[64,256,1] = mul -0.5 efy
            ega:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] dje
            egb:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] ega
            egc:f32[64,256,1600] = mul efx egb
            egd:f32[64,256,1600] = mul efv egc
            ege:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] djf
            egf:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] ege
            egg:f32[64,256,1600] = add egd egf
            egh:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] egg
            egi:f16[1600,6400] = transpose[permutation=(1, 0)] djg
            egj:f16[64,256,6400] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] egh egi
            egk:f16[1,1,6400] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 6400)
            ] djh
            egl:f16[64,256,6400] = add egj egk
            egm:f16[64,256,6400] = integer_pow[y=3] egl
            egn:f16[64,256,6400] = integer_pow[y=2] egl
            ego:f16[64,256,6400] = mul 3.0 egn
            egp:f16[64,256,6400] = mul 0.044708251953125 egm
            egq:f16[64,256,6400] = add egl egp
            egr:f16[64,256,6400] = mul 0.7978515625 egq
            egs:f16[64,256,6400] = tanh egr
            egt:f16[64,256,6400] = sub 1.0 egs
            egu:f16[64,256,6400] = add 1.0 egs
            egv:f16[64,256,6400] = mul 0.5 egu
            egw:f16[64,256,6400] = mul egl egv
            egx:f16[6400,1600] = transpose[permutation=(1, 0)] dji
            egy:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] egw egx
            egz:f16[1,1,1600] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 1600)
            ] djj
            eha:f16[64,256,1600] = add egy egz
            ehb:f16[64,256,1600] = add eev eha
          in (ehb, egw, egx, egl, egt, egs, ego, egv, egh, egi, efv, efx, egb, efz,
            efr, efg, efb, egc, eeq, eer, edf, een, eeh, eel, eea, ede, edz, eem,
            ecp, ecw, ecd, ecf, ecj, ech, ebz, ebo, ebj, eck, eay, eaz, ean, eav,
            eau, eaq, eax, eaj, eak, dzx, dzz, ead, eab, dzt, dzi, dzd, eae, dys,
            dyt, dxh, dyp, dyj, dyn, dyc, dxg, dyb, dyo, dwr, dwy, dwf, dwh, dwl,
            dwj, dwb, dvq, dvl, dwm, dva, dvb, dup, dux, duw, dus, duz, dul, dum,
            dtz, dub, duf, dud, dtv, dtk, dtf, dug, dsu, dsv, drj, dsr, dsl, dsp,
            dse, dri, dsd, dsq, dqt, dra, dqh, dqj, dqn, dql, dqd, dps, dpn, dqo,
            dpc, dpd, dor, doz, doy, dou, dpb, don, doo, dob, dod, doh, dof, dnx,
            dnm, dnh, doi, dmw, dmx, dll, dmt, dmn, dmr, dmg, dlk, dmf, dms, dkv,
            dlc, dkj, dkl, dkp, dkn, dkf, dju, djp, dkq) }
        name=22
      ] cbc tx ty tz ua qu ub uc ud ue uf ug uh ui uj uk ul um un uo up uq ur us
        ut uu uv uw ux uy uz va vb vc vd ve vf vg vh vi vj vk vl vm vn vo vp vq vr
        vs
    in (vu, vv, vw, vx, vy, vz, wa, wb, wc, wd, we, wf, wg, wh, wi, wj, wk, wl, wm,
      wn, wo, wp, wq, wr, ws, wt, wu, wv, ww, wx, wy, wz, xa, xb, xc, xd, xe, xf,
      xg, xh, xi, xj, xk, xl, xm, xn, xo, xp, xq, xr, xs, xt, xu, xv, xw, xx, xy,
      xz, ya, yb, yc, yd, ye, yf, yg, yh, yi, yj, yk, yl, ym, yn, yo, yp, yq, yr,
      ys, yt, yu, yv, yw, yx, yy, yz, za, zb, zc, zd, ze, zf, zg, zh, zi, zj, zk,
      zl, zm, zn, zo, zp, zq, zr, zs, zt, zu, zv, zw, zx, zy, zz, baa, bab, bac,
      bad, bae, baf, bag, bah, bai, baj, bak, bal, bam, ban, bao, bap, baq, bar,
      bas, bat, bau, bav, baw, bax, bay, baz, bba, bbb, bbc, bbd, bbe, bbf, bbg,
      bbh, bbi, bbj, bbk, bbl, cbd, cbe, cbf, cbg, cbh, cbi, cbj, cbk, cbl, cbm,
      cbn, cbo, cbp, cbq, cbr, cbs, cbt, cbu, cbv, cbw, cbx, cby, cbz, cca, ccb,
      ccc, ccd, cce, ccf, ccg, cch, cci, ccj, cck, ccl, ccm, ccn, cco, ccp, ccq,
      ccr, ccs, cct, ccu, ccv, ccw, ccx, ccy, ccz, cda, cdb, cdc, cdd, cde, cdf,
      cdg, cdh, cdi, cdj, cdk, cdl, cdm, cdn, cdo, cdp, cdq, cdr, cds, cdt, cdu,
      cdv, cdw, cdx, cdy, cdz, cea, ceb, cec, ced, cee, cef, ceg, ceh, cei, cej,
      cek, cel, cem, cen, ceo, cep, ceq, cer, ces, cet, ceu, cev, cew, cex, cey,
      cez, cfa, cfb, cfc, cfd, cfe, cff, cfg, cfh, cfi, cfj, cfk, cfl, cfm, cfn,
      cfo, cfp, cfq, cfr, cfs, cft, cfu, cfv, cfw, cfx, cfy, cfz, cga, dbt, dbu,
      dbv, dbw, dbx, dby, dbz, dca, dcb, dcc, dcd, dce, dcf, dcg, dch, dci, dcj,
      dck, dcl, dcm, dcn, dco, dcp, dcq, dcr, dcs, dct, dcu, dcv, dcw, dcx, dcy,
      dcz, dda, ddb, ddc, ddd, dde, ddf, ddg, ddh, ddi, ddj, ddk, ddl, ddm, ddn,
      ddo, ddp, ddq, ddr, dds, ddt, ddu, ddv, ddw, ddx, ddy, ddz, dea, deb, dec,
      ded, dee, def, deg, deh, dei, dej, dek, del, dem, den, deo, dep, deq, der,
      des, det, deu, dev, dew, dex, dey, dez, dfa, dfb, dfc, dfd, dfe, dff, dfg,
      dfh, dfi, dfj, dfk, dfl, dfm, dfn, dfo, dfp, dfq, dfr, dfs, dft, dfu, dfv,
      dfw, dfx, dfy, dfz, dga, dgb, dgc, dgd, dge, dgf, dgg, dgh, dgi, dgj, dgk,
      dgl, dgm, dgn, dgo, dgp, dgq, dgr, dgs, dgt, dgu, dgv, dgw, dgx, dgy, dgz,
      dha, dhb, dhc, dhd, dhe, dhf, dhg, dhh, dhi, dhj, dhk, dhl) }
  name=2
] ehc ehd ehe ehf ehg ehh ehi ehj ehk ehl ehm ehn eho ehp ehq ehr ehs eht ehu ehv
  ehw ehx ehy ehz eia eib eic eid eie eif eig eih eii eij eik eil eim ein eio eip
  eiq eir eis eit eiu eiv eiw eix eiy eiz eja ejb ejc ejd eje ejf ejg ejh eji ejj
  ejk ejl ejm ejn ejo ejp ejq ejr ejs ejt eju ejv ejw ejx ejy ejz eka ekb ekc ekd
  eke ekf ekg ekh eki ekj ekk ekl ekm ekn eko ekp ekq ekr eks ekt eku ekv ekw ekx
  eky ekz ela elb elc eld ele elf elg elh eli elj elk ell elm eln elo elp elq elr
  els elt elu elv elw elx ely elz ema emb emc emd eme emf emg emh emi emj emk eml
eqn: a:f16[64,256,1600] b:f16[1600,1600] c:f16[64,256,25,64] d:f16[64,25,256,1] e:f16[64,25,256,256]
  f:f16[64,25,256,1] g:f16[64,256,25,64] h:f16[64,256,25,64] i:f16[] j:f16[64,25,256,256]
  k:f16[64,256,1600] l:f16[1600,4800] m:f32[64,256,1600] n:f32[64,256,1] o:f32[1,1,1600]
  p:f32[64,256,1] q:f32[64,256] r:f32[64,256] s:f32[64,256,1600] t:f32[64,256,1600]
  u:f16[64,256,6400] v:f16[6400,1600] w:f16[64,256,6400] x:f16[64,256,6400] y:f16[64,256,6400]
  z:f16[64,256,6400] ba:f16[64,256,6400] bb:f16[64,256,1600] bc:f16[1600,6400] bd:f32[64,256,1600]
  be:f32[64,256,1] bf:f32[1,1,1600] bg:f32[64,256,1] bh:f32[64,256] bi:f32[64,256]
  bj:f32[64,256,1600] bk:f32[64,256,1600] bl:f16[64,256,1600] bm:f16[1600,1600] bn:f16[64,256,25,64]
  bo:f16[64,25,256,1] bp:f16[64,25,256,256] bq:f16[64,25,256,1] br:f16[64,256,25,64]
  bs:f16[64,256,25,64] bt:f16[] bu:f16[64,25,256,256] bv:f16[64,256,1600] bw:f16[1600,4800]
  bx:f32[64,256,1600] by:f32[64,256,1] bz:f32[1,1,1600] ca:f32[64,256,1] cb:f32[64,256]
  cc:f32[64,256] cd:f32[64,256,1600] ce:f32[64,256,1600] cf:f16[64,256,6400] cg:f16[6400,1600]
  ch:f16[64,256,6400] ci:f16[64,256,6400] cj:f16[64,256,6400] ck:f16[64,256,6400]
  cl:f16[64,256,6400] cm:f16[64,256,1600] cn:f16[1600,6400] co:f32[64,256,1600] cp:f32[64,256,1]
  cq:f32[1,1,1600] cr:f32[64,256,1] cs:f32[64,256] ct:f32[64,256] cu:f32[64,256,1600]
  cv:f32[64,256,1600] cw:f16[64,256,1600] cx:f16[1600,1600] cy:f16[64,256,25,64]
  cz:f16[64,25,256,1] da:f16[64,25,256,256] db:f16[64,25,256,1] dc:f16[64,256,25,64]
  dd:f16[64,256,25,64] de:f16[] df:f16[64,25,256,256] dg:f16[64,256,1600] dh:f16[1600,4800]
  di:f32[64,256,1600] dj:f32[64,256,1] dk:f32[1,1,1600] dl:f32[64,256,1] dm:f32[64,256]
  dn:f32[64,256] do:f32[64,256,1600] dp:f32[64,256,1600] dq:f16[64,256,6400] dr:f16[6400,1600]
  ds:f16[64,256,6400] dt:f16[64,256,6400] du:f16[64,256,6400] dv:f16[64,256,6400]
  dw:f16[64,256,6400] dx:f16[64,256,1600] dy:f16[1600,6400] dz:f32[64,256,1600] ea:f32[64,256,1]
  eb:f32[1,1,1600] ec:f32[64,256,1] ed:f32[64,256] ee:f32[64,256] ef:f32[64,256,1600]
  eg:f32[64,256,1600] eh:f16[64,256,1600] ei:f16[1600,1600] ej:f16[64,256,25,64]
  ek:f16[64,25,256,1] el:f16[64,25,256,256] em:f16[64,25,256,1] en:f16[64,256,25,64]
  eo:f16[64,256,25,64] ep:f16[] eq:f16[64,25,256,256] er:f16[64,256,1600] es:f16[1600,4800]
  et:f32[64,256,1600] eu:f32[64,256,1] ev:f32[1,1,1600] ew:f32[64,256,1] ex:f32[64,256]
  ey:f32[64,256] ez:f32[64,256,1600] fa:f32[64,256,1600] fb:f16[64,256,6400] fc:f16[6400,1600]
  fd:f16[64,256,6400] fe:f16[64,256,6400] ff:f16[64,256,6400] fg:f16[64,256,6400]
  fh:f16[64,256,6400] fi:f16[64,256,1600] fj:f16[1600,6400] fk:f32[64,256,1600] fl:f32[64,256,1]
  fm:f32[1,1,1600] fn:f32[64,256,1] fo:f32[64,256] fp:f32[64,256] fq:f32[64,256,1600]
  fr:f32[64,256,1600] fs:f16[64,256,6400] ft:f16[6400,1600] fu:f16[64,256,6400] fv:f16[64,256,6400]
  fw:f16[64,256,6400] fx:f16[64,256,6400] fy:f16[64,256,6400] fz:f16[64,256,1600]
  ga:f16[1600,6400] gb:f32[64,256,1600] gc:f32[64,256,1] gd:f32[1,1,1600] ge:f32[64,256,1]
  gf:f32[64,256] gg:f32[64,256] gh:f32[64,256,1600] gi:f32[64,256,1600] gj:f16[64,256,1600]
  gk:f16[1600,1600] gl:f16[64,256,25,64] gm:f16[64,25,256,1] gn:f16[64,25,256,256]
  go:f16[64,25,256,1] gp:f16[64,256,25,64] gq:f16[64,256,25,64] gr:f16[] gs:f16[64,25,256,256]
  gt:f16[64,256,1600] gu:f16[1600,4800] gv:f32[64,256,1600] gw:f32[64,256,1] gx:f32[1,1,1600]
  gy:f32[64,256,1] gz:f32[64,256] ha:f32[64,256] hb:f32[64,256,1600] hc:f32[64,256,1600]
  hd:f16[64,256,6400] he:f16[6400,1600] hf:f16[64,256,6400] hg:f16[64,256,6400] hh:f16[64,256,6400]
  hi:f16[64,256,6400] hj:f16[64,256,6400] hk:f16[64,256,1600] hl:f16[1600,6400] hm:f32[64,256,1600]
  hn:f32[64,256,1] ho:f32[1,1,1600] hp:f32[64,256,1] hq:f32[64,256] hr:f32[64,256]
  hs:f32[64,256,1600] ht:f32[64,256,1600] hu:f16[64,256,1600] hv:f16[1600,1600] hw:f16[64,256,25,64]
  hx:f16[64,25,256,1] hy:f16[64,25,256,256] hz:f16[64,25,256,1] ia:f16[64,256,25,64]
  ib:f16[64,256,25,64] ic:f16[] id:f16[64,25,256,256] ie:f16[64,256,1600] if:f16[1600,4800]
  ig:f32[64,256,1600] ih:f32[64,256,1] ii:f32[1,1,1600] ij:f32[64,256,1] ik:f32[64,256]
  il:f32[64,256] im:f32[64,256,1600] in:f32[64,256,1600] io:f16[64,256,6400] ip:f16[6400,1600]
  iq:f16[64,256,6400] ir:f16[64,256,6400] is:f16[64,256,6400] it:f16[64,256,6400]
  iu:f16[64,256,6400] iv:f16[64,256,1600] iw:f16[1600,6400] ix:f32[64,256,1600] iy:f32[64,256,1]
  iz:f32[1,1,1600] ja:f32[64,256,1] jb:f32[64,256] jc:f32[64,256] jd:f32[64,256,1600]
  je:f32[64,256,1600] jf:f16[64,256,1600] jg:f16[1600,1600] jh:f16[64,256,25,64]
  ji:f16[64,25,256,1] jj:f16[64,25,256,256] jk:f16[64,25,256,1] jl:f16[64,256,25,64]
  jm:f16[64,256,25,64] jn:f16[] jo:f16[64,25,256,256] jp:f16[64,256,1600] jq:f16[1600,4800]
  jr:f32[64,256,1600] js:f32[64,256,1] jt:f32[1,1,1600] ju:f32[64,256,1] jv:f32[64,256]
  jw:f32[64,256] jx:f32[64,256,1600] jy:f32[64,256,1600] jz:f16[64,256,6400] ka:f16[6400,1600]
  kb:f16[64,256,6400] kc:f16[64,256,6400] kd:f16[64,256,6400] ke:f16[64,256,6400]
  kf:f16[64,256,6400] kg:f16[64,256,1600] kh:f16[1600,6400] ki:f32[64,256,1600] kj:f32[64,256,1]
  kk:f32[1,1,1600] kl:f32[64,256,1] km:f32[64,256] kn:f32[64,256] ko:f32[64,256,1600]
  kp:f32[64,256,1600] kq:f16[64,256,1600] kr:f16[64,256,6400] ks:f16[6400,1600] kt:f16[64,256,6400]
  ku:f16[64,256,6400] kv:f16[64,256,6400] kw:f16[64,256,6400] kx:f16[64,256,6400]
  ky:f16[64,256,1600] kz:f16[1600,6400] la:f32[64,256,1600] lb:f32[64,256,1] lc:f32[1,1,1600]
  ld:f32[64,256,1] le:f32[64,256] lf:f32[64,256] lg:f32[64,256,1600] lh:f32[64,256,1600]
  li:f16[64,256,1600] lj:f16[1600,1600] lk:f16[64,256,25,64] ll:f16[64,25,256,1]
  lm:f16[64,25,256,256] ln:f16[64,25,256,1] lo:f16[64,256,25,64] lp:f16[64,256,25,64]
  lq:f16[] lr:f16[64,25,256,256] ls:f16[64,256,1600] lt:f16[1600,4800] lu:f32[64,256,1600]
  lv:f32[64,256,1] lw:f32[1,1,1600] lx:f32[64,256,1] ly:f32[64,256] lz:f32[64,256]
  ma:f32[64,256,1600] mb:f32[64,256,1600] mc:f16[64,256,6400] md:f16[6400,1600] me:f16[64,256,6400]
  mf:f16[64,256,6400] mg:f16[64,256,6400] mh:f16[64,256,6400] mi:f16[64,256,6400]
  mj:f16[64,256,1600] mk:f16[1600,6400] ml:f32[64,256,1600] mm:f32[64,256,1] mn:f32[1,1,1600]
  mo:f32[64,256,1] mp:f32[64,256] mq:f32[64,256] mr:f32[64,256,1600] ms:f32[64,256,1600]
  mt:f16[64,256,1600] mu:f16[1600,1600] mv:f16[64,256,25,64] mw:f16[64,25,256,1]
  mx:f16[64,25,256,256] my:f16[64,25,256,1] mz:f16[64,256,25,64] na:f16[64,256,25,64]
  nb:f16[] nc:f16[64,25,256,256] nd:f16[64,256,1600] ne:f16[1600,4800] nf:f32[64,256,1600]
  ng:f32[64,256,1] nh:f32[1,1,1600] ni:f32[64,256,1] nj:f32[64,256] nk:f32[64,256]
  nl:f32[64,256,1600] nm:f32[64,256,1600] nn:f16[64,256,6400] no:f16[6400,1600] np:f16[64,256,6400]
  nq:f16[64,256,6400] nr:f16[64,256,6400] ns:f16[64,256,6400] nt:f16[64,256,6400]
  nu:f16[64,256,1600] nv:f16[1600,6400] nw:f32[64,256,1600] nx:f32[64,256,1] ny:f32[1,1,1600]
  nz:f32[64,256,1] oa:f32[64,256] ob:f32[64,256] oc:f32[64,256,1600] od:f32[64,256,1600]
  oe:f16[64,256,1600] of:f16[1600,1600] og:f16[64,256,25,64] oh:f16[64,25,256,1]
  oi:f16[64,25,256,256] oj:f16[64,25,256,1] ok:f16[64,256,25,64] ol:f16[64,256,25,64]
  om:f16[] on:f16[64,25,256,256] oo:f16[64,256,1600] op:f16[1600,4800] oq:f32[64,256,1600]
  or:f32[64,256,1] os:f32[1,1,1600] ot:f32[64,256,1] ou:f32[64,256] ov:f32[64,256]
  ow:f32[64,256,1600] ox:f32[64,256,1600] oy:f16[64,256,6400] oz:f16[6400,1600] pa:f16[64,256,6400]
  pb:f16[64,256,6400] pc:f16[64,256,6400] pd:f16[64,256,6400] pe:f16[64,256,6400]
  pf:f16[64,256,1600] pg:f16[1600,6400] ph:f32[64,256,1600] pi:f32[64,256,1] pj:f32[1,1,1600]
  pk:f32[64,256,1] pl:f32[64,256] pm:f32[64,256] pn:f32[64,256,1600] po:f32[64,256,1600]
  pp:f16[64,256,1600] pq:f16[1600,1600] pr:f16[64,256,25,64] ps:f16[64,25,256,1]
  pt:f16[64,25,256,256] pu:f16[64,25,256,1] pv:f16[64,256,25,64] pw:f16[64,256,25,64]
  px:f16[] py:f16[64,25,256,256] pz:f16[64,256,1600] qa:f16[1600,4800] qb:f32[64,256,1600]
  qc:f32[64,256,1] qd:f32[1,1,1600] qe:f32[64,256,1] qf:f32[64,256] qg:f32[64,256]
  qh:f32[64,256,1600] qi:f32[64,256,1600] = pipeline_marker[
  mark_type=end
  name=2
] qj qk ql qm qn qo qp qq qr qs qt qu qv qw qx qy qz ra rb rc rd re rf rg rh ri rj
  rk rl rm rn ro rp rq rr rs rt ru rv rw rx ry rz sa sb sc sd se sf sg sh si sj sk
  sl sm sn so sp sq sr ss st su sv sw sx sy sz ta tb tc td te tf tg th ti tj tk tl
  tm tn to tp tq tr ts tt tu tv tw tx ty tz ua ub uc ud ue uf ug uh ui uj uk ul um
  un uo up uq ur us ut uu uv uw ux uy uz va vb vc vd ve vf vg vh vi vj vk vl vm vn
  vo vp vq vr vs vt vu vv vw vx vy vz wa wb wc wd we wf wg wh wi wj wk wl wm wn wo
  wp wq wr ws wt wu wv ww wx wy wz xa xb xc xd xe xf xg xh xi xj xk xl xm xn xo xp
  xq xr xs xt xu xv xw xx xy xz ya yb yc yd ye yf yg yh yi yj yk yl ym yn yo yp yq
  yr ys yt yu yv yw yx yy yz za zb zc zd ze zf zg zh zi zj zk zl zm zn zo zp zq zr
  zs zt zu zv zw zx zy zz baa bab bac bad bae baf bag bah bai baj bak bal bam ban
  bao bap baq bar bas bat bau bav baw bax bay baz bba bbb bbc bbd bbe bbf bbg bbh
  bbi bbj bbk bbl bbm bbn bbo bbp bbq bbr bbs bbt bbu bbv bbw bbx bby bbz bca bcb
  bcc bcd bce bcf bcg bch bci bcj bck bcl bcm bcn bco bcp bcq bcr bcs bct bcu bcv
  bcw bcx bcy bcz bda bdb bdc bdd bde bdf bdg bdh bdi bdj bdk bdl bdm bdn bdo bdp
  bdq bdr bds bdt bdu bdv bdw bdx bdy bdz bea beb bec bed bee bef beg beh bei bej
  bek bel bem ben beo bep beq ber bes bet beu bev bew bex bey bez bfa bfb bfc bfd
  bfe bff bfg bfh bfi bfj bfk bfl bfm bfn bfo bfp bfq bfr bfs bft bfu bfv bfw bfx
  bfy bfz bga bgb bgc bgd bge bgf bgg bgh bgi bgj bgk bgl bgm bgn bgo bgp bgq bgr
input_var_mem_size
[krc, ka, jz, kc, kb, ke, kd, kk, kj, kg, kf, dwu, ki, kh, km, kl, ko, kn, kq, kp, li, lh, le, ld, lg, lf, lk, lj, lm, ll, lo, ln, lu, lt, lq, lp, ls, lr, lw, lv, ly, lx, ma, lz, mg, mf, mc, mb, me, md, mi, mh, mk, mj, mm, ml, ms, mr, mo, mn, mq, mp, mu, mt, mw, mv, my, mx, ne, nd, na, mz, nc, nb, ng, nf, ni, nh, nk, nj, nq, np, nm, nl, no, nn, ns, nr, nu, nt, nw, nv, oc, ob, ny, nx, oa, nz, oe, od, og, of, oi, oh, oo, on, ok, oj, om, ol, oq, op, os, or, ou, ot, pa, oz, ow, ov, oy, ox, pc, pb, pe, pd, pg, pf, pm, pl, pi, ph, pk, pj, po, pn, pq, pp, ps, pr]
[(64, 256, 1600), (1600,), (1600,), (6400, 1600), (6400,), (1600, 6400), (1600,), (1600,), (1600,), (4800, 1600), (4800,), (64, 256), (1600, 1600), (1600,), (1600,), (1600,), (6400, 1600), (6400,), (1600, 6400), (1600,), (1600,), (1600,), (4800, 1600), (4800,), (1600, 1600), (1600,), (1600,), (1600,), (6400, 1600), (6400,), (1600, 6400), (1600,), (1600,), (1600,), (4800, 1600), (4800,), (1600, 1600), (1600,), (1600,), (1600,), (6400, 1600), (6400,), (1600, 6400), (1600,), (1600,), (1600,), (4800, 1600), (4800,), (1600, 1600), (1600,), (1600,), (1600,), (6400, 1600), (6400,), (1600, 6400), (1600,), (1600,), (1600,), (4800, 1600), (4800,), (1600, 1600), (1600,), (1600,), (1600,), (6400, 1600), (6400,), (1600, 6400), (1600,), (1600,), (1600,), (4800, 1600), (4800,), (1600, 1600), (1600,), (1600,), (1600,), (6400, 1600), (6400,), (1600, 6400), (1600,), (1600,), (1600,), (4800, 1600), (4800,), (1600, 1600), (1600,), (1600,), (1600,), (6400, 1600), (6400,), (1600, 6400), (1600,), (1600,), (1600,), (4800, 1600), (4800,), (1600, 1600), (1600,), (1600,), (1600,), (6400, 1600), (6400,), (1600, 6400), (1600,), (1600,), (1600,), (4800, 1600), (4800,), (1600, 1600), (1600,), (1600,), (1600,), (6400, 1600), (6400,), (1600, 6400), (1600,), (1600,), (1600,), (4800, 1600), (4800,), (1600, 1600), (1600,), (1600,), (1600,), (6400, 1600), (6400,), (1600, 6400), (1600,), (1600,), (1600,), (4800, 1600), (4800,), (1600, 1600), (1600,), (1600,), (1600,), (6400, 1600), (6400,), (1600, 6400), (1600,)]
param_size: 0.3584388494491577 [GiB] 
jaxpr.eqns, len: 3
eqn: a:f32[] b:f16[64,256,1600] c:f16[1600] d:f16[1600] e:f16[4800,1600] f:f16[4800] g:i32[64,256]
  h:f16[1600,1600] i:f16[1600] j:f16[1600] k:f16[1600] l:f16[6400,1600] m:f16[6400]
  n:f16[1600,6400] o:f16[1600] p:f16[1600] q:f16[1600] r:f16[4800,1600] s:f16[4800]
  t:f16[1600,1600] u:f16[1600] v:f16[1600] w:f16[1600] x:f16[6400,1600] y:f16[6400]
  z:f16[1600,6400] ba:f16[1600] bb:f16[1600] bc:f16[1600] bd:f16[4800,1600] be:f16[4800]
  bf:f16[1600,1600] bg:f16[1600] bh:f16[1600] bi:f16[1600] bj:f16[6400,1600] bk:f16[6400]
  bl:f16[1600,6400] bm:f16[1600] bn:f16[1600] bo:f16[1600] bp:f16[4800,1600] bq:f16[4800]
  br:f16[1600,1600] bs:f16[1600] bt:f16[1600] bu:f16[1600] bv:f16[6400,1600] bw:f16[6400]
  bx:f16[1600,6400] by:f16[1600] bz:f16[1600] ca:f16[1600] cb:f16[4800,1600] cc:f16[4800]
  cd:f16[1600,1600] ce:f16[1600] cf:f16[1600] cg:f16[1600] ch:f16[6400,1600] ci:f16[6400]
  cj:f16[1600,6400] ck:f16[1600] cl:f16[1600] cm:f16[1600] cn:f16[4800,1600] co:f16[4800]
  cp:f16[1600,1600] cq:f16[1600] cr:f16[1600] cs:f16[1600] ct:f16[6400,1600] cu:f16[6400]
  cv:f16[1600,6400] cw:f16[1600] cx:f16[1600] cy:f16[1600] cz:f16[4800,1600] da:f16[4800]
  db:f16[1600,1600] dc:f16[1600] dd:f16[1600] de:f16[1600] df:f16[6400,1600] dg:f16[6400]
  dh:f16[1600,6400] di:f16[1600] dj:f16[1600] dk:f16[1600] dl:f16[4800,1600] dm:f16[4800]
  dn:f16[1600,1600] do:f16[1600] dp:f16[1600] dq:f16[1600] dr:f16[6400,1600] ds:f16[6400]
  dt:f16[1600,6400] du:f16[1600] dv:f16[1600] dw:f16[1600] dx:f16[50257,1600] dy:f16[64,256]
  dz:f32[] = pipeline_marker[mark_type=start name=3] ea eb ec ed ee ef eg eh ei ej
  ek el em en eo ep eq er es et eu ev ew ex ey ez fa fb fc fd fe ff fg fh fi fj fk
  fl fm fn fo fp fq fr fs ft fu fv fw fx fy fz ga gb gc gd ge gf gg gh gi gj gk gl
  gm gn go gp gq gr gs gt gu gv gw gx gy gz ha hb hc hd he hf hg hh hi hj hk hl hm
  hn ho hp hq hr hs ht hu hv hw hx hy hz
eqn: a:f32[] b:f16[64,256,1600] c:f16[1600,1600] d:f16[64,256,25,64] e:f16[64,25,256,1]
  f:f16[64,25,256,256] g:f16[64,25,256,1] h:f16[64,256,25,64] i:f16[64,256,25,64]
  j:f16[] k:f16[64,25,256,256] l:f16[64,256,1600] m:f16[1600,4800] n:f32[64,256,1600]
  o:f32[64,256,1] p:f32[1,1,1600] q:f32[64,256,1] r:f32[64,256] s:f32[64,256] t:f32[64,256,1600]
  u:f32[64,256,1600] v:f16[64,256,6400] w:f16[6400,1600] x:f16[64,256,6400] y:f16[64,256,6400]
  z:f16[64,256,6400] ba:f16[64,256,6400] bb:f16[64,256,6400] bc:f16[64,256,1600]
  bd:f16[1600,6400] be:f32[64,256,1600] bf:f32[64,256,1] bg:f32[1,1,1600] bh:f32[64,256,1]
  bi:f32[64,256] bj:f32[64,256] bk:f32[64,256,1600] bl:f32[64,256,1600] bm:f16[64,256,1600]
  bn:f16[1600,1600] bo:f16[64,256,25,64] bp:f16[64,25,256,1] bq:f16[64,25,256,256]
  br:f16[64,25,256,1] bs:f16[64,256,25,64] bt:f16[64,256,25,64] bu:f16[] bv:f16[64,25,256,256]
  bw:f16[64,256,1600] bx:f16[1600,4800] by:f32[64,256,1600] bz:f32[64,256,1] ca:f32[1,1,1600]
  cb:f32[64,256,1] cc:f32[64,256] cd:f32[64,256] ce:f32[64,256,1600] cf:f32[64,256,1600]
  cg:f16[64,256,6400] ch:f16[6400,1600] ci:f16[64,256,6400] cj:f16[64,256,6400] ck:f16[64,256,6400]
  cl:f16[64,256,6400] cm:f16[64,256,6400] cn:f16[64,256,1600] co:f16[1600,6400] cp:f32[64,256,1600]
  cq:f32[64,256,1] cr:f32[1,1,1600] cs:f32[64,256,1] ct:f32[64,256] cu:f32[64,256]
  cv:f32[64,256,1600] cw:f32[64,256,1600] cx:f16[64,256,1600] cy:f16[1600,1600] cz:f16[64,256,25,64]
  da:f16[64,25,256,1] db:f16[64,25,256,256] dc:f16[64,25,256,1] dd:f16[64,256,25,64]
  de:f16[64,256,25,64] df:f16[] dg:f16[64,25,256,256] dh:f16[64,256,1600] di:f16[1600,4800]
  dj:f32[64,256,1600] dk:f32[64,256,1] dl:f32[1,1,1600] dm:f32[64,256,1] dn:f32[64,256]
  do:f32[64,256] dp:f32[64,256,1600] dq:f32[64,256,1600] dr:f16[64,256,6400] ds:f16[6400,1600]
  dt:f16[64,256,6400] du:f16[64,256,6400] dv:f16[64,256,6400] dw:f16[64,256,6400]
  dx:f16[64,256,6400] dy:f16[64,256,1600] dz:f16[1600,6400] ea:f32[64,256,1600] eb:f32[64,256,1]
  ec:f32[1,1,1600] ed:f32[64,256,1] ee:f32[64,256] ef:f32[64,256] eg:f32[64,256,1600]
  eh:f32[64,256,1600] ei:f16[64,256,1600] ej:f16[1600,1600] ek:f16[64,256,25,64]
  el:f16[64,25,256,1] em:f16[64,25,256,256] en:f16[64,25,256,1] eo:f16[64,256,25,64]
  ep:f16[64,256,25,64] eq:f16[] er:f16[64,25,256,256] es:f16[64,256,1600] et:f16[1600,4800]
  eu:f32[64,256,1600] ev:f32[64,256,1] ew:f32[1,1,1600] ex:f32[64,256,1] ey:f32[64,256]
  ez:f32[64,256] fa:f32[64,256,1600] fb:f32[64,256,1600] fc:f16[64,256,1600] fd:f16[1600,1600]
  fe:f16[64,256,25,64] ff:f16[64,25,256,1] fg:f16[64,25,256,256] fh:f16[64,25,256,1]
  fi:f16[64,256,25,64] fj:f16[64,256,25,64] fk:f16[] fl:f16[64,25,256,256] fm:f16[64,256,1600]
  fn:f16[1600,4800] fo:f32[64,256,1600] fp:f32[64,256,1] fq:f32[1,1,1600] fr:f32[64,256,1]
  fs:f32[64,256] ft:f32[64,256] fu:f32[64,256,1600] fv:f32[64,256,1600] fw:f16[64,256,6400]
  fx:f16[6400,1600] fy:f16[64,256,6400] fz:f16[64,256,6400] ga:f16[64,256,6400] gb:f16[64,256,6400]
  gc:f16[64,256,6400] gd:f16[64,256,1600] ge:f16[1600,6400] gf:f32[64,256,1600] gg:f32[64,256,1]
  gh:f32[1,1,1600] gi:f32[64,256,1] gj:f32[64,256] gk:f32[64,256] gl:f32[64,256,1600]
  gm:f32[64,256,1600] gn:f16[64,256,1600] go:f16[1600,1600] gp:f16[64,256,25,64]
  gq:f16[64,25,256,1] gr:f16[64,25,256,256] gs:f16[64,25,256,1] gt:f16[64,256,25,64]
  gu:f16[64,256,25,64] gv:f16[] gw:f16[64,25,256,256] gx:f16[64,256,1600] gy:f16[1600,4800]
  gz:f32[64,256,1600] ha:f32[64,256,1] hb:f32[1,1,1600] hc:f32[64,256,1] hd:f32[64,256]
  he:f32[64,256] hf:f32[64,256,1600] hg:f32[64,256,1600] hh:f16[64,256,6400] hi:f16[6400,1600]
  hj:f16[64,256,6400] hk:f16[64,256,6400] hl:f16[64,256,6400] hm:f16[64,256,6400]
  hn:f16[64,256,6400] ho:f16[64,256,1600] hp:f16[1600,6400] hq:f32[64,256,1600] hr:f32[64,256,1]
  hs:f32[1,1,1600] ht:f32[64,256,1] hu:f32[64,256] hv:f32[64,256] hw:f32[64,256,1600]
  hx:f32[64,256,1600] hy:f16[64,256,1600] hz:f16[1600,1600] ia:f16[64,256,25,64]
  ib:f16[64,25,256,1] ic:f16[64,25,256,256] id:f16[64,25,256,1] ie:f16[64,256,25,64]
  if:f16[64,256,25,64] ig:f16[] ih:f16[64,25,256,256] ii:f16[64,256,1600] ij:f16[1600,4800]
  ik:f32[64,256,1600] il:f32[64,256,1] im:f32[1,1,1600] in:f32[64,256,1] io:f32[64,256]
  ip:f32[64,256] iq:f32[64,256,1600] ir:f32[64,256,1600] is:f16[64,256,6400] it:f16[6400,1600]
  iu:f16[64,256,6400] iv:f16[64,256,6400] iw:f16[64,256,6400] ix:f16[64,256,6400]
  iy:f16[64,256,6400] iz:f16[64,256,1600] ja:f16[1600,6400] jb:f32[64,256,1600] jc:f32[64,256,1]
  jd:f32[1,1,1600] je:f32[64,256,1] jf:f32[64,256] jg:f32[64,256] jh:f32[64,256,1600]
  ji:f32[64,256,1600] jj:f16[64,256,1600] jk:f16[1600,1600] jl:f16[64,256,25,64]
  jm:f16[64,25,256,1] jn:f16[64,25,256,256] jo:f16[64,25,256,1] jp:f16[64,256,25,64]
  jq:f16[64,256,25,64] jr:f16[] js:f16[64,25,256,256] jt:f16[64,256,1600] ju:f16[1600,4800]
  jv:f32[64,256,1600] jw:f32[64,256,1] jx:f32[1,1,1600] jy:f32[64,256,1] jz:f32[64,256]
  ka:f32[64,256] kb:f32[64,256,1600] kc:f32[64,256,1600] kd:f16[64,256,6400] ke:f16[6400,1600]
  kf:f16[64,256,6400] kg:f16[64,256,6400] kh:f16[64,256,6400] ki:f16[64,256,6400]
  kj:f16[64,256,6400] kk:f16[64,256,1600] kl:f16[1600,6400] km:f32[64,256,1600] kn:f32[64,256,1]
  ko:f32[1,1,1600] kp:f32[64,256,1] kq:f32[64,256] kr:f32[64,256] ks:f32[64,256,1600]
  kt:f32[64,256,1600] ku:f32[] kv:f32[64,255,50257] kw:f16[64,255,1] kx:f16[64,255,50257]
  ky:i32[1] kz:f16[64,256,1600] la:f16[1600,50257] lb:f32[64,256,1600] lc:f32[64,256,1]
  ld:f32[1,1,1600] le:f32[64,256,1] lf:f32[64,256] lg:f32[64,256] lh:f32[64,256,1600]
  li:f32[64,256,1600] lj:f16[64,256,6400] lk:f16[6400,1600] ll:f16[64,256,6400] lm:f16[64,256,6400]
  ln:f16[64,256,6400] lo:f16[64,256,6400] lp:f16[64,256,6400] lq:f16[64,256,1600]
  lr:f16[1600,6400] ls:f32[64,256,1600] lt:f32[64,256,1] lu:f32[1,1,1600] lv:f32[64,256,1]
  lw:f32[64,256] lx:f32[64,256] ly:f32[64,256,1600] lz:f32[64,256,1600] = named_call[
  call_jaxpr={ lambda ; ma:f32[] mb:f16[64,256,1600] mc:f16[1600] md:f16[1600] me:f16[4800,1600]
      mf:f16[4800] mg:i32[64,256] mh:f16[1600,1600] mi:f16[1600] mj:f16[1600] mk:f16[1600]
      ml:f16[6400,1600] mm:f16[6400] mn:f16[1600,6400] mo:f16[1600] mp:f16[1600]
      mq:f16[1600] mr:f16[4800,1600] ms:f16[4800] mt:f16[1600,1600] mu:f16[1600]
      mv:f16[1600] mw:f16[1600] mx:f16[6400,1600] my:f16[6400] mz:f16[1600,6400]
      na:f16[1600] nb:f16[1600] nc:f16[1600] nd:f16[4800,1600] ne:f16[4800] nf:f16[1600,1600]
      ng:f16[1600] nh:f16[1600] ni:f16[1600] nj:f16[6400,1600] nk:f16[6400] nl:f16[1600,6400]
      nm:f16[1600] nn:f16[1600] no:f16[1600] np:f16[4800,1600] nq:f16[4800] nr:f16[1600,1600]
      ns:f16[1600] nt:f16[1600] nu:f16[1600] nv:f16[6400,1600] nw:f16[6400] nx:f16[1600,6400]
      ny:f16[1600] nz:f16[1600] oa:f16[1600] ob:f16[4800,1600] oc:f16[4800] od:f16[1600,1600]
      oe:f16[1600] of:f16[1600] og:f16[1600] oh:f16[6400,1600] oi:f16[6400] oj:f16[1600,6400]
      ok:f16[1600] ol:f16[1600] om:f16[1600] on:f16[4800,1600] oo:f16[4800] op:f16[1600,1600]
      oq:f16[1600] or:f16[1600] os:f16[1600] ot:f16[6400,1600] ou:f16[6400] ov:f16[1600,6400]
      ow:f16[1600] ox:f16[1600] oy:f16[1600] oz:f16[4800,1600] pa:f16[4800] pb:f16[1600,1600]
      pc:f16[1600] pd:f16[1600] pe:f16[1600] pf:f16[6400,1600] pg:f16[6400] ph:f16[1600,6400]
      pi:f16[1600] pj:f16[1600] pk:f16[1600] pl:f16[4800,1600] pm:f16[4800] pn:f16[1600,1600]
      po:f16[1600] pp:f16[1600] pq:f16[1600] pr:f16[6400,1600] ps:f16[6400] pt:f16[1600,6400]
      pu:f16[1600] pv:f16[1600] pw:f16[1600] px:f16[50257,1600] py:f16[64,256] pz:f32[]. let
      qa:f16[64,256,1600] qb:f16[64,256,1600] qc:f16[1600,1600] qd:f16[64,256,25,64]
        qe:f16[64,25,256,1] qf:f16[64,25,256,256] qg:f16[64,25,256,1] qh:f16[64,256,25,64]
        qi:f16[64,256,25,64] qj:f16[] qk:f16[64,25,256,256] ql:f16[64,256,1600] qm:f16[1600,4800]
        qn:f32[64,256,1600] qo:f32[64,256,1] qp:f32[1,1,1600] qq:f32[64,256,1] qr:f32[64,256]
        qs:f32[64,256] qt:f32[64,256,1600] qu:f32[64,256,1600] qv:f16[64,256,6400]
        qw:f16[6400,1600] qx:f16[64,256,6400] qy:f16[64,256,6400] qz:f16[64,256,6400]
        ra:f16[64,256,6400] rb:f16[64,256,6400] rc:f16[64,256,1600] rd:f16[1600,6400]
        re:f32[64,256,1600] rf:f32[64,256,1] rg:f32[1,1,1600] rh:f32[64,256,1] ri:f32[64,256]
        rj:f32[64,256] rk:f32[64,256,1600] rl:f32[64,256,1600] rm:f16[64,256,1600]
        rn:f16[1600,1600] ro:f16[64,256,25,64] rp:f16[64,25,256,1] rq:f16[64,25,256,256]
        rr:f16[64,25,256,1] rs:f16[64,256,25,64] rt:f16[64,256,25,64] ru:f16[] rv:f16[64,25,256,256]
        rw:f16[64,256,1600] rx:f16[1600,4800] ry:f32[64,256,1600] rz:f32[64,256,1]
        sa:f32[1,1,1600] sb:f32[64,256,1] sc:f32[64,256] sd:f32[64,256] se:f32[64,256,1600]
        sf:f32[64,256,1600] sg:f16[64,256,6400] sh:f16[6400,1600] si:f16[64,256,6400]
        sj:f16[64,256,6400] sk:f16[64,256,6400] sl:f16[64,256,6400] sm:f16[64,256,6400]
        sn:f16[64,256,1600] so:f16[1600,6400] sp:f32[64,256,1600] sq:f32[64,256,1]
        sr:f32[1,1,1600] ss:f32[64,256,1] st:f32[64,256] su:f32[64,256] sv:f32[64,256,1600]
        sw:f32[64,256,1600] sx:f16[64,256,1600] sy:f16[1600,1600] sz:f16[64,256,25,64]
        ta:f16[64,25,256,1] tb:f16[64,25,256,256] tc:f16[64,25,256,1] td:f16[64,256,25,64]
        te:f16[64,256,25,64] tf:f16[] tg:f16[64,25,256,256] th:f16[64,256,1600] ti:f16[1600,4800]
        tj:f32[64,256,1600] tk:f32[64,256,1] tl:f32[1,1,1600] tm:f32[64,256,1] tn:f32[64,256]
        to:f32[64,256] tp:f32[64,256,1600] tq:f32[64,256,1600] tr:f16[64,256,6400]
        ts:f16[6400,1600] tt:f16[64,256,6400] tu:f16[64,256,6400] tv:f16[64,256,6400]
        tw:f16[64,256,6400] tx:f16[64,256,6400] ty:f16[64,256,1600] tz:f16[1600,6400]
        ua:f32[64,256,1600] ub:f32[64,256,1] uc:f32[1,1,1600] ud:f32[64,256,1] ue:f32[64,256]
        uf:f32[64,256] ug:f32[64,256,1600] uh:f32[64,256,1600] ui:f16[64,256,1600]
        uj:f16[1600,1600] uk:f16[64,256,25,64] ul:f16[64,25,256,1] um:f16[64,25,256,256]
        un:f16[64,25,256,1] uo:f16[64,256,25,64] up:f16[64,256,25,64] uq:f16[] ur:f16[64,25,256,256]
        us:f16[64,256,1600] ut:f16[1600,4800] uu:f32[64,256,1600] uv:f32[64,256,1]
        uw:f32[1,1,1600] ux:f32[64,256,1] uy:f32[64,256] uz:f32[64,256] va:f32[64,256,1600]
        vb:f32[64,256,1600] = named_call[
        call_jaxpr={ lambda ; vc:f16[64,256,1600] vd:f16[1600] ve:f16[1600] vf:f16[4800,1600]
            vg:f16[4800] vh:i32[64,256] vi:f16[1600,1600] vj:f16[1600] vk:f16[1600]
            vl:f16[1600] vm:f16[6400,1600] vn:f16[6400] vo:f16[1600,6400] vp:f16[1600]
            vq:f16[1600] vr:f16[1600] vs:f16[4800,1600] vt:f16[4800] vu:f16[1600,1600]
            vv:f16[1600] vw:f16[1600] vx:f16[1600] vy:f16[6400,1600] vz:f16[6400]
            wa:f16[1600,6400] wb:f16[1600] wc:f16[1600] wd:f16[1600] we:f16[4800,1600]
            wf:f16[4800] wg:f16[1600,1600] wh:f16[1600] wi:f16[1600] wj:f16[1600]
            wk:f16[6400,1600] wl:f16[6400] wm:f16[1600,6400] wn:f16[1600] wo:f16[1600]
            wp:f16[1600] wq:f16[4800,1600] wr:f16[4800] ws:f16[1600,1600] wt:f16[1600]. let
            wu:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] vc
            wv:f32[64,256] = reduce_sum[axes=(2,)] wu
            ww:f32[64,256] = div wv 1600.0
            wx:f32[64,256,1600] = integer_pow[y=2] wu
            wy:f32[64,256,1600] = integer_pow[y=1] wu
            wz:f32[64,256,1600] = mul 2.0 wy
            xa:f32[64,256] = reduce_sum[axes=(2,)] wx
            xb:f32[64,256] = div xa 1600.0
            xc:f32[64,256] = integer_pow[y=2] ww
            xd:f32[64,256] = integer_pow[y=1] ww
            xe:f32[64,256] = mul 2.0 xd
            xf:f32[64,256] = sub xb xc
            xg:f32[64,256] = max 0.0 xf
            xh:bool[64,256] = eq xf xg
            xi:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            xj:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 0.0
            xk:f32[64,256] = select_n xh xj xi
            xl:bool[64,256] = eq 0.0 xg
            xm:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 2.0
            xn:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            xo:f32[64,256] = select_n xl xn xm
            xp:f32[64,256] = div xk xo
            xq:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] ww
            xr:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] xg
            xs:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] vc
            xt:f32[64,256,1600] = sub xs xq
            xu:f32[64,256,1] = add xr 9.999999747378752e-06
            xv:f32[64,256,1] = rsqrt xu
            xw:f32[64,256,1] = div xv xu
            xx:f32[64,256,1] = mul -0.5 xw
            xy:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] vd
            xz:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] xy
            ya:f32[64,256,1600] = mul xv xz
            yb:f32[64,256,1600] = mul xt ya
            yc:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] ve
            yd:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] yc
            ye:f32[64,256,1600] = add yb yd
            yf:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] ye
            yg:i32[1024] = iota[dimension=0 dtype=int32 shape=(1024,)] 
            yh:i32[1,1024] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 1024)
            ] yg
            yi:i32[1,1024,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(1, 1024, 1)
            ] yh
            yj:i32[1,1,1024] = broadcast_in_dim[
              broadcast_dimensions=(0, 2)
              shape=(1, 1, 1024)
            ] yh
            yk:bool[1,1024,1024] = ge yi yj
            yl:bool[1,1,1024,1024] = broadcast_in_dim[
              broadcast_dimensions=(0, 2, 3)
              shape=(1, 1, 1024, 1024)
            ] yk
            ym:f16[1600,4800] = transpose[permutation=(1, 0)] vf
            yn:f16[64,256,4800] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] yf ym
            yo:f16[1,1,4800] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 4800)
            ] vg
            yp:f16[64,256,4800] = add yn yo
            yq:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 1600)
              start_indices=(0, 0, 0)
              strides=None
            ] yp
            yr:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 3200)
              start_indices=(0, 0, 1600)
              strides=None
            ] yp
            ys:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 4800)
              start_indices=(0, 0, 3200)
              strides=None
            ] yp
            yt:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] yq
            yu:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] yr
            yv:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] ys
            yw:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
            yx:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
            yy:i32[2] = concatenate[dimension=0] yw yx
            yz:bool[1,1,256,256] = gather[
              dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2, 3), collapsed_slice_dims=(), start_index_map=(2, 3))
              fill_value=None
              indices_are_sorted=True
              mode=GatherScatterMode.PROMISE_IN_BOUNDS
              slice_sizes=(1, 1, 256, 256)
              unique_indices=True
            ] yl yy
            za:bool[1,256,256] = squeeze[dimensions=(0,)] yz
            zb:bool[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(64, 1, 256, 256)
            ] za
            zc:i32[64,1,1,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 3)
              shape=(64, 1, 1, 256)
            ] vh
            zd:i32[64,1,256] = squeeze[dimensions=(2,)] zc
            ze:i32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 3)
              shape=(64, 1, 256, 256)
            ] zd
            zf:bool[64,1,256,256] = ne ze 0
            zg:bool[64,1,256,256] = and zf zb
            zh:f32[64,1,256,256] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] zg
            zi:bool[64,1,256,256] = gt zh 0.0
            zj:f32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 1, 256, 256)
            ] 0.0
            zk:f16[64,1,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] zj
            zl:f32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 1, 256, 256)
            ] -10000.0
            zm:f16[64,1,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] zl
            zn:f16[64,1,256,256] = select_n zi zm zk
            zo:f32[] = sqrt 64.0
            zp:f16[] = convert_element_type[new_dtype=float16 weak_type=False] zo
            zq:f16[64,256,25,64] = div yt zp
            zr:f16[64,25,256,256] = dot_general[
              dimension_numbers=(((3,), (3,)), ((0, 2), (0, 2)))
              precision=None
              preferred_element_type=None
            ] zq yu
            zs:f16[64,25,256,256] = add zr zn
            zt:f16[64,25,256] = reduce_max[axes=(3,)] zs
            zu:f16[64,25,256,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 1)
            ] zt
            zv:f16[64,25,256,1] = stop_gradient zu
            zw:f16[64,25,256,256] = sub zs zv
            zx:f16[64,25,256,256] = exp zw
            zy:f32[64,25,256,256] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] zx
            zz:f32[64,25,256] = reduce_sum[axes=(3,)] zy
            baa:f32[64,25,256,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 1)
            ] zz
            bab:f16[64,25,256,1] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] baa
            bac:f16[64,25,256,256] = div zx bab
            bad:f16[64,25,256,1] = integer_pow[y=-2] bab
            bae:f16[64,25,64,256] = dot_general[
              dimension_numbers=(((1,), (3,)), ((0, 2), (0, 1)))
              precision=None
              preferred_element_type=None
            ] yv bac
            baf:f16[64,256,25,64] = transpose[permutation=(0, 3, 1, 2)] bae
            bag:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] baf
            bah:f16[1600,1600] = transpose[permutation=(1, 0)] vi
            bai:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] bag bah
            baj:f16[1,1,1600] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 1600)
            ] vj
            bak:f16[64,256,1600] = add bai baj
            bal:f16[64,256,1600] = add bak vc
            bam:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bal
            ban:f32[64,256] = reduce_sum[axes=(2,)] bam
            bao:f32[64,256] = div ban 1600.0
            bap:f32[64,256,1600] = integer_pow[y=2] bam
            baq:f32[64,256,1600] = integer_pow[y=1] bam
            bar:f32[64,256,1600] = mul 2.0 baq
            bas:f32[64,256] = reduce_sum[axes=(2,)] bap
            bat:f32[64,256] = div bas 1600.0
            bau:f32[64,256] = integer_pow[y=2] bao
            bav:f32[64,256] = integer_pow[y=1] bao
            baw:f32[64,256] = mul 2.0 bav
            bax:f32[64,256] = sub bat bau
            bay:f32[64,256] = max 0.0 bax
            baz:bool[64,256] = eq bax bay
            bba:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            bbb:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 0.0
            bbc:f32[64,256] = select_n baz bbb bba
            bbd:bool[64,256] = eq 0.0 bay
            bbe:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 2.0
            bbf:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            bbg:f32[64,256] = select_n bbd bbf bbe
            bbh:f32[64,256] = div bbc bbg
            bbi:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] bao
            bbj:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] bay
            bbk:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bal
            bbl:f32[64,256,1600] = sub bbk bbi
            bbm:f32[64,256,1] = add bbj 9.999999747378752e-06
            bbn:f32[64,256,1] = rsqrt bbm
            bbo:f32[64,256,1] = div bbn bbm
            bbp:f32[64,256,1] = mul -0.5 bbo
            bbq:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] vk
            bbr:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bbq
            bbs:f32[64,256,1600] = mul bbn bbr
            bbt:f32[64,256,1600] = mul bbl bbs
            bbu:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] vl
            bbv:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bbu
            bbw:f32[64,256,1600] = add bbt bbv
            bbx:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bbw
            bby:f16[1600,6400] = transpose[permutation=(1, 0)] vm
            bbz:f16[64,256,6400] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] bbx bby
            bca:f16[1,1,6400] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 6400)
            ] vn
            bcb:f16[64,256,6400] = add bbz bca
            bcc:f16[64,256,6400] = integer_pow[y=3] bcb
            bcd:f16[64,256,6400] = integer_pow[y=2] bcb
            bce:f16[64,256,6400] = mul 3.0 bcd
            bcf:f16[64,256,6400] = mul 0.044708251953125 bcc
            bcg:f16[64,256,6400] = add bcb bcf
            bch:f16[64,256,6400] = mul 0.7978515625 bcg
            bci:f16[64,256,6400] = tanh bch
            bcj:f16[64,256,6400] = sub 1.0 bci
            bck:f16[64,256,6400] = add 1.0 bci
            bcl:f16[64,256,6400] = mul 0.5 bck
            bcm:f16[64,256,6400] = mul bcb bcl
            bcn:f16[6400,1600] = transpose[permutation=(1, 0)] vo
            bco:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] bcm bcn
            bcp:f16[1,1,1600] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 1600)
            ] vp
            bcq:f16[64,256,1600] = add bco bcp
            bcr:f16[64,256,1600] = add bal bcq
            bcs:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bcr
            bct:f32[64,256] = reduce_sum[axes=(2,)] bcs
            bcu:f32[64,256] = div bct 1600.0
            bcv:f32[64,256,1600] = integer_pow[y=2] bcs
            bcw:f32[64,256,1600] = integer_pow[y=1] bcs
            bcx:f32[64,256,1600] = mul 2.0 bcw
            bcy:f32[64,256] = reduce_sum[axes=(2,)] bcv
            bcz:f32[64,256] = div bcy 1600.0
            bda:f32[64,256] = integer_pow[y=2] bcu
            bdb:f32[64,256] = integer_pow[y=1] bcu
            bdc:f32[64,256] = mul 2.0 bdb
            bdd:f32[64,256] = sub bcz bda
            bde:f32[64,256] = max 0.0 bdd
            bdf:bool[64,256] = eq bdd bde
            bdg:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            bdh:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 0.0
            bdi:f32[64,256] = select_n bdf bdh bdg
            bdj:bool[64,256] = eq 0.0 bde
            bdk:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 2.0
            bdl:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            bdm:f32[64,256] = select_n bdj bdl bdk
            bdn:f32[64,256] = div bdi bdm
            bdo:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] bcu
            bdp:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] bde
            bdq:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bcr
            bdr:f32[64,256,1600] = sub bdq bdo
            bds:f32[64,256,1] = add bdp 9.999999747378752e-06
            bdt:f32[64,256,1] = rsqrt bds
            bdu:f32[64,256,1] = div bdt bds
            bdv:f32[64,256,1] = mul -0.5 bdu
            bdw:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] vq
            bdx:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bdw
            bdy:f32[64,256,1600] = mul bdt bdx
            bdz:f32[64,256,1600] = mul bdr bdy
            bea:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] vr
            beb:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bea
            bec:f32[64,256,1600] = add bdz beb
            bed:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bec
            bee:i32[1024] = iota[dimension=0 dtype=int32 shape=(1024,)] 
            bef:i32[1,1024] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 1024)
            ] bee
            beg:i32[1,1024,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(1, 1024, 1)
            ] bef
            beh:i32[1,1,1024] = broadcast_in_dim[
              broadcast_dimensions=(0, 2)
              shape=(1, 1, 1024)
            ] bef
            bei:bool[1,1024,1024] = ge beg beh
            bej:bool[1,1,1024,1024] = broadcast_in_dim[
              broadcast_dimensions=(0, 2, 3)
              shape=(1, 1, 1024, 1024)
            ] bei
            bek:f16[1600,4800] = transpose[permutation=(1, 0)] vs
            bel:f16[64,256,4800] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] bed bek
            bem:f16[1,1,4800] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 4800)
            ] vt
            ben:f16[64,256,4800] = add bel bem
            beo:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 1600)
              start_indices=(0, 0, 0)
              strides=None
            ] ben
            bep:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 3200)
              start_indices=(0, 0, 1600)
              strides=None
            ] ben
            beq:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 4800)
              start_indices=(0, 0, 3200)
              strides=None
            ] ben
            ber:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] beo
            bes:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] bep
            bet:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] beq
            beu:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
            bev:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
            bew:i32[2] = concatenate[dimension=0] beu bev
            bex:bool[1,1,256,256] = gather[
              dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2, 3), collapsed_slice_dims=(), start_index_map=(2, 3))
              fill_value=None
              indices_are_sorted=True
              mode=GatherScatterMode.PROMISE_IN_BOUNDS
              slice_sizes=(1, 1, 256, 256)
              unique_indices=True
            ] bej bew
            bey:bool[1,256,256] = squeeze[dimensions=(0,)] bex
            bez:bool[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(64, 1, 256, 256)
            ] bey
            bfa:i32[64,1,1,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 3)
              shape=(64, 1, 1, 256)
            ] vh
            bfb:i32[64,1,256] = squeeze[dimensions=(2,)] bfa
            bfc:i32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 3)
              shape=(64, 1, 256, 256)
            ] bfb
            bfd:bool[64,1,256,256] = ne bfc 0
            bfe:bool[64,1,256,256] = and bfd bez
            bff:f32[64,1,256,256] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bfe
            bfg:bool[64,1,256,256] = gt bff 0.0
            bfh:f32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 1, 256, 256)
            ] 0.0
            bfi:f16[64,1,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bfh
            bfj:f32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 1, 256, 256)
            ] -10000.0
            bfk:f16[64,1,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bfj
            bfl:f16[64,1,256,256] = select_n bfg bfk bfi
            bfm:f32[] = sqrt 64.0
            bfn:f16[] = convert_element_type[new_dtype=float16 weak_type=False] bfm
            bfo:f16[64,256,25,64] = div ber bfn
            bfp:f16[64,25,256,256] = dot_general[
              dimension_numbers=(((3,), (3,)), ((0, 2), (0, 2)))
              precision=None
              preferred_element_type=None
            ] bfo bes
            bfq:f16[64,25,256,256] = add bfp bfl
            bfr:f16[64,25,256] = reduce_max[axes=(3,)] bfq
            bfs:f16[64,25,256,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 1)
            ] bfr
            bft:f16[64,25,256,1] = stop_gradient bfs
            bfu:f16[64,25,256,256] = sub bfq bft
            bfv:f16[64,25,256,256] = exp bfu
            bfw:f32[64,25,256,256] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bfv
            bfx:f32[64,25,256] = reduce_sum[axes=(3,)] bfw
            bfy:f32[64,25,256,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 1)
            ] bfx
            bfz:f16[64,25,256,1] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bfy
            bga:f16[64,25,256,256] = div bfv bfz
            bgb:f16[64,25,256,1] = integer_pow[y=-2] bfz
            bgc:f16[64,25,64,256] = dot_general[
              dimension_numbers=(((1,), (3,)), ((0, 2), (0, 1)))
              precision=None
              preferred_element_type=None
            ] bet bga
            bgd:f16[64,256,25,64] = transpose[permutation=(0, 3, 1, 2)] bgc
            bge:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] bgd
            bgf:f16[1600,1600] = transpose[permutation=(1, 0)] vu
            bgg:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] bge bgf
            bgh:f16[1,1,1600] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 1600)
            ] vv
            bgi:f16[64,256,1600] = add bgg bgh
            bgj:f16[64,256,1600] = add bgi bcr
            bgk:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bgj
            bgl:f32[64,256] = reduce_sum[axes=(2,)] bgk
            bgm:f32[64,256] = div bgl 1600.0
            bgn:f32[64,256,1600] = integer_pow[y=2] bgk
            bgo:f32[64,256,1600] = integer_pow[y=1] bgk
            bgp:f32[64,256,1600] = mul 2.0 bgo
            bgq:f32[64,256] = reduce_sum[axes=(2,)] bgn
            bgr:f32[64,256] = div bgq 1600.0
            bgs:f32[64,256] = integer_pow[y=2] bgm
            bgt:f32[64,256] = integer_pow[y=1] bgm
            bgu:f32[64,256] = mul 2.0 bgt
            bgv:f32[64,256] = sub bgr bgs
            bgw:f32[64,256] = max 0.0 bgv
            bgx:bool[64,256] = eq bgv bgw
            bgy:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            bgz:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 0.0
            bha:f32[64,256] = select_n bgx bgz bgy
            bhb:bool[64,256] = eq 0.0 bgw
            bhc:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 2.0
            bhd:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            bhe:f32[64,256] = select_n bhb bhd bhc
            bhf:f32[64,256] = div bha bhe
            bhg:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] bgm
            bhh:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] bgw
            bhi:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bgj
            bhj:f32[64,256,1600] = sub bhi bhg
            bhk:f32[64,256,1] = add bhh 9.999999747378752e-06
            bhl:f32[64,256,1] = rsqrt bhk
            bhm:f32[64,256,1] = div bhl bhk
            bhn:f32[64,256,1] = mul -0.5 bhm
            bho:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] vw
            bhp:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bho
            bhq:f32[64,256,1600] = mul bhl bhp
            bhr:f32[64,256,1600] = mul bhj bhq
            bhs:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] vx
            bht:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bhs
            bhu:f32[64,256,1600] = add bhr bht
            bhv:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bhu
            bhw:f16[1600,6400] = transpose[permutation=(1, 0)] vy
            bhx:f16[64,256,6400] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] bhv bhw
            bhy:f16[1,1,6400] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 6400)
            ] vz
            bhz:f16[64,256,6400] = add bhx bhy
            bia:f16[64,256,6400] = integer_pow[y=3] bhz
            bib:f16[64,256,6400] = integer_pow[y=2] bhz
            bic:f16[64,256,6400] = mul 3.0 bib
            bid:f16[64,256,6400] = mul 0.044708251953125 bia
            bie:f16[64,256,6400] = add bhz bid
            bif:f16[64,256,6400] = mul 0.7978515625 bie
            big:f16[64,256,6400] = tanh bif
            bih:f16[64,256,6400] = sub 1.0 big
            bii:f16[64,256,6400] = add 1.0 big
            bij:f16[64,256,6400] = mul 0.5 bii
            bik:f16[64,256,6400] = mul bhz bij
            bil:f16[6400,1600] = transpose[permutation=(1, 0)] wa
            bim:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] bik bil
            bin:f16[1,1,1600] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 1600)
            ] wb
            bio:f16[64,256,1600] = add bim bin
            bip:f16[64,256,1600] = add bgj bio
            biq:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bip
            bir:f32[64,256] = reduce_sum[axes=(2,)] biq
            bis:f32[64,256] = div bir 1600.0
            bit:f32[64,256,1600] = integer_pow[y=2] biq
            biu:f32[64,256,1600] = integer_pow[y=1] biq
            biv:f32[64,256,1600] = mul 2.0 biu
            biw:f32[64,256] = reduce_sum[axes=(2,)] bit
            bix:f32[64,256] = div biw 1600.0
            biy:f32[64,256] = integer_pow[y=2] bis
            biz:f32[64,256] = integer_pow[y=1] bis
            bja:f32[64,256] = mul 2.0 biz
            bjb:f32[64,256] = sub bix biy
            bjc:f32[64,256] = max 0.0 bjb
            bjd:bool[64,256] = eq bjb bjc
            bje:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            bjf:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 0.0
            bjg:f32[64,256] = select_n bjd bjf bje
            bjh:bool[64,256] = eq 0.0 bjc
            bji:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 2.0
            bjj:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            bjk:f32[64,256] = select_n bjh bjj bji
            bjl:f32[64,256] = div bjg bjk
            bjm:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] bis
            bjn:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] bjc
            bjo:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bip
            bjp:f32[64,256,1600] = sub bjo bjm
            bjq:f32[64,256,1] = add bjn 9.999999747378752e-06
            bjr:f32[64,256,1] = rsqrt bjq
            bjs:f32[64,256,1] = div bjr bjq
            bjt:f32[64,256,1] = mul -0.5 bjs
            bju:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] wc
            bjv:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bju
            bjw:f32[64,256,1600] = mul bjr bjv
            bjx:f32[64,256,1600] = mul bjp bjw
            bjy:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] wd
            bjz:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bjy
            bka:f32[64,256,1600] = add bjx bjz
            bkb:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bka
            bkc:i32[1024] = iota[dimension=0 dtype=int32 shape=(1024,)] 
            bkd:i32[1,1024] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 1024)
            ] bkc
            bke:i32[1,1024,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(1, 1024, 1)
            ] bkd
            bkf:i32[1,1,1024] = broadcast_in_dim[
              broadcast_dimensions=(0, 2)
              shape=(1, 1, 1024)
            ] bkd
            bkg:bool[1,1024,1024] = ge bke bkf
            bkh:bool[1,1,1024,1024] = broadcast_in_dim[
              broadcast_dimensions=(0, 2, 3)
              shape=(1, 1, 1024, 1024)
            ] bkg
            bki:f16[1600,4800] = transpose[permutation=(1, 0)] we
            bkj:f16[64,256,4800] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] bkb bki
            bkk:f16[1,1,4800] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 4800)
            ] wf
            bkl:f16[64,256,4800] = add bkj bkk
            bkm:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 1600)
              start_indices=(0, 0, 0)
              strides=None
            ] bkl
            bkn:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 3200)
              start_indices=(0, 0, 1600)
              strides=None
            ] bkl
            bko:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 4800)
              start_indices=(0, 0, 3200)
              strides=None
            ] bkl
            bkp:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] bkm
            bkq:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] bkn
            bkr:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] bko
            bks:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
            bkt:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
            bku:i32[2] = concatenate[dimension=0] bks bkt
            bkv:bool[1,1,256,256] = gather[
              dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2, 3), collapsed_slice_dims=(), start_index_map=(2, 3))
              fill_value=None
              indices_are_sorted=True
              mode=GatherScatterMode.PROMISE_IN_BOUNDS
              slice_sizes=(1, 1, 256, 256)
              unique_indices=True
            ] bkh bku
            bkw:bool[1,256,256] = squeeze[dimensions=(0,)] bkv
            bkx:bool[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(64, 1, 256, 256)
            ] bkw
            bky:i32[64,1,1,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 3)
              shape=(64, 1, 1, 256)
            ] vh
            bkz:i32[64,1,256] = squeeze[dimensions=(2,)] bky
            bla:i32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 3)
              shape=(64, 1, 256, 256)
            ] bkz
            blb:bool[64,1,256,256] = ne bla 0
            blc:bool[64,1,256,256] = and blb bkx
            bld:f32[64,1,256,256] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] blc
            ble:bool[64,1,256,256] = gt bld 0.0
            blf:f32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 1, 256, 256)
            ] 0.0
            blg:f16[64,1,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] blf
            blh:f32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 1, 256, 256)
            ] -10000.0
            bli:f16[64,1,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] blh
            blj:f16[64,1,256,256] = select_n ble bli blg
            blk:f32[] = sqrt 64.0
            bll:f16[] = convert_element_type[new_dtype=float16 weak_type=False] blk
            blm:f16[64,256,25,64] = div bkp bll
            bln:f16[64,25,256,256] = dot_general[
              dimension_numbers=(((3,), (3,)), ((0, 2), (0, 2)))
              precision=None
              preferred_element_type=None
            ] blm bkq
            blo:f16[64,25,256,256] = add bln blj
            blp:f16[64,25,256] = reduce_max[axes=(3,)] blo
            blq:f16[64,25,256,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 1)
            ] blp
            blr:f16[64,25,256,1] = stop_gradient blq
            bls:f16[64,25,256,256] = sub blo blr
            blt:f16[64,25,256,256] = exp bls
            blu:f32[64,25,256,256] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] blt
            blv:f32[64,25,256] = reduce_sum[axes=(3,)] blu
            blw:f32[64,25,256,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 1)
            ] blv
            blx:f16[64,25,256,1] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] blw
            bly:f16[64,25,256,256] = div blt blx
            blz:f16[64,25,256,1] = integer_pow[y=-2] blx
            bma:f16[64,25,64,256] = dot_general[
              dimension_numbers=(((1,), (3,)), ((0, 2), (0, 1)))
              precision=None
              preferred_element_type=None
            ] bkr bly
            bmb:f16[64,256,25,64] = transpose[permutation=(0, 3, 1, 2)] bma
            bmc:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] bmb
            bmd:f16[1600,1600] = transpose[permutation=(1, 0)] wg
            bme:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] bmc bmd
            bmf:f16[1,1,1600] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 1600)
            ] wh
            bmg:f16[64,256,1600] = add bme bmf
            bmh:f16[64,256,1600] = add bmg bip
            bmi:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bmh
            bmj:f32[64,256] = reduce_sum[axes=(2,)] bmi
            bmk:f32[64,256] = div bmj 1600.0
            bml:f32[64,256,1600] = integer_pow[y=2] bmi
            bmm:f32[64,256,1600] = integer_pow[y=1] bmi
            bmn:f32[64,256,1600] = mul 2.0 bmm
            bmo:f32[64,256] = reduce_sum[axes=(2,)] bml
            bmp:f32[64,256] = div bmo 1600.0
            bmq:f32[64,256] = integer_pow[y=2] bmk
            bmr:f32[64,256] = integer_pow[y=1] bmk
            bms:f32[64,256] = mul 2.0 bmr
            bmt:f32[64,256] = sub bmp bmq
            bmu:f32[64,256] = max 0.0 bmt
            bmv:bool[64,256] = eq bmt bmu
            bmw:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            bmx:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 0.0
            bmy:f32[64,256] = select_n bmv bmx bmw
            bmz:bool[64,256] = eq 0.0 bmu
            bna:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 2.0
            bnb:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            bnc:f32[64,256] = select_n bmz bnb bna
            bnd:f32[64,256] = div bmy bnc
            bne:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] bmk
            bnf:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] bmu
            bng:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bmh
            bnh:f32[64,256,1600] = sub bng bne
            bni:f32[64,256,1] = add bnf 9.999999747378752e-06
            bnj:f32[64,256,1] = rsqrt bni
            bnk:f32[64,256,1] = div bnj bni
            bnl:f32[64,256,1] = mul -0.5 bnk
            bnm:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] wi
            bnn:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bnm
            bno:f32[64,256,1600] = mul bnj bnn
            bnp:f32[64,256,1600] = mul bnh bno
            bnq:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] wj
            bnr:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bnq
            bns:f32[64,256,1600] = add bnp bnr
            bnt:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bns
            bnu:f16[1600,6400] = transpose[permutation=(1, 0)] wk
            bnv:f16[64,256,6400] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] bnt bnu
            bnw:f16[1,1,6400] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 6400)
            ] wl
            bnx:f16[64,256,6400] = add bnv bnw
            bny:f16[64,256,6400] = integer_pow[y=3] bnx
            bnz:f16[64,256,6400] = integer_pow[y=2] bnx
            boa:f16[64,256,6400] = mul 3.0 bnz
            bob:f16[64,256,6400] = mul 0.044708251953125 bny
            boc:f16[64,256,6400] = add bnx bob
            bod:f16[64,256,6400] = mul 0.7978515625 boc
            boe:f16[64,256,6400] = tanh bod
            bof:f16[64,256,6400] = sub 1.0 boe
            bog:f16[64,256,6400] = add 1.0 boe
            boh:f16[64,256,6400] = mul 0.5 bog
            boi:f16[64,256,6400] = mul bnx boh
            boj:f16[6400,1600] = transpose[permutation=(1, 0)] wm
            bok:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] boi boj
            bol:f16[1,1,1600] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 1600)
            ] wn
            bom:f16[64,256,1600] = add bok bol
            bon:f16[64,256,1600] = add bmh bom
            boo:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bon
            bop:f32[64,256] = reduce_sum[axes=(2,)] boo
            boq:f32[64,256] = div bop 1600.0
            bor:f32[64,256,1600] = integer_pow[y=2] boo
            bos:f32[64,256,1600] = integer_pow[y=1] boo
            bot:f32[64,256,1600] = mul 2.0 bos
            bou:f32[64,256] = reduce_sum[axes=(2,)] bor
            bov:f32[64,256] = div bou 1600.0
            bow:f32[64,256] = integer_pow[y=2] boq
            box:f32[64,256] = integer_pow[y=1] boq
            boy:f32[64,256] = mul 2.0 box
            boz:f32[64,256] = sub bov bow
            bpa:f32[64,256] = max 0.0 boz
            bpb:bool[64,256] = eq boz bpa
            bpc:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            bpd:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 0.0
            bpe:f32[64,256] = select_n bpb bpd bpc
            bpf:bool[64,256] = eq 0.0 bpa
            bpg:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 2.0
            bph:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            bpi:f32[64,256] = select_n bpf bph bpg
            bpj:f32[64,256] = div bpe bpi
            bpk:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] boq
            bpl:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] bpa
            bpm:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bon
            bpn:f32[64,256,1600] = sub bpm bpk
            bpo:f32[64,256,1] = add bpl 9.999999747378752e-06
            bpp:f32[64,256,1] = rsqrt bpo
            bpq:f32[64,256,1] = div bpp bpo
            bpr:f32[64,256,1] = mul -0.5 bpq
            bps:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] wo
            bpt:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bps
            bpu:f32[64,256,1600] = mul bpp bpt
            bpv:f32[64,256,1600] = mul bpn bpu
            bpw:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] wp
            bpx:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bpw
            bpy:f32[64,256,1600] = add bpv bpx
            bpz:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bpy
            bqa:i32[1024] = iota[dimension=0 dtype=int32 shape=(1024,)] 
            bqb:i32[1,1024] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 1024)
            ] bqa
            bqc:i32[1,1024,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(1, 1024, 1)
            ] bqb
            bqd:i32[1,1,1024] = broadcast_in_dim[
              broadcast_dimensions=(0, 2)
              shape=(1, 1, 1024)
            ] bqb
            bqe:bool[1,1024,1024] = ge bqc bqd
            bqf:bool[1,1,1024,1024] = broadcast_in_dim[
              broadcast_dimensions=(0, 2, 3)
              shape=(1, 1, 1024, 1024)
            ] bqe
            bqg:f16[1600,4800] = transpose[permutation=(1, 0)] wq
            bqh:f16[64,256,4800] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] bpz bqg
            bqi:f16[1,1,4800] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 4800)
            ] wr
            bqj:f16[64,256,4800] = add bqh bqi
            bqk:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 1600)
              start_indices=(0, 0, 0)
              strides=None
            ] bqj
            bql:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 3200)
              start_indices=(0, 0, 1600)
              strides=None
            ] bqj
            bqm:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 4800)
              start_indices=(0, 0, 3200)
              strides=None
            ] bqj
            bqn:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] bqk
            bqo:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] bql
            bqp:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] bqm
            bqq:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
            bqr:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
            bqs:i32[2] = concatenate[dimension=0] bqq bqr
            bqt:bool[1,1,256,256] = gather[
              dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2, 3), collapsed_slice_dims=(), start_index_map=(2, 3))
              fill_value=None
              indices_are_sorted=True
              mode=GatherScatterMode.PROMISE_IN_BOUNDS
              slice_sizes=(1, 1, 256, 256)
              unique_indices=True
            ] bqf bqs
            bqu:bool[1,256,256] = squeeze[dimensions=(0,)] bqt
            bqv:bool[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(64, 1, 256, 256)
            ] bqu
            bqw:i32[64,1,1,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 3)
              shape=(64, 1, 1, 256)
            ] vh
            bqx:i32[64,1,256] = squeeze[dimensions=(2,)] bqw
            bqy:i32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 3)
              shape=(64, 1, 256, 256)
            ] bqx
            bqz:bool[64,1,256,256] = ne bqy 0
            bra:bool[64,1,256,256] = and bqz bqv
            brb:f32[64,1,256,256] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bra
            brc:bool[64,1,256,256] = gt brb 0.0
            brd:f32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 1, 256, 256)
            ] 0.0
            bre:f16[64,1,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] brd
            brf:f32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 1, 256, 256)
            ] -10000.0
            brg:f16[64,1,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] brf
            brh:f16[64,1,256,256] = select_n brc brg bre
            bri:f32[] = sqrt 64.0
            brj:f16[] = convert_element_type[new_dtype=float16 weak_type=False] bri
            brk:f16[64,256,25,64] = div bqn brj
            brl:f16[64,25,256,256] = dot_general[
              dimension_numbers=(((3,), (3,)), ((0, 2), (0, 2)))
              precision=None
              preferred_element_type=None
            ] brk bqo
            brm:f16[64,25,256,256] = add brl brh
            brn:f16[64,25,256] = reduce_max[axes=(3,)] brm
            bro:f16[64,25,256,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 1)
            ] brn
            brp:f16[64,25,256,1] = stop_gradient bro
            brq:f16[64,25,256,256] = sub brm brp
            brr:f16[64,25,256,256] = exp brq
            brs:f32[64,25,256,256] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] brr
            brt:f32[64,25,256] = reduce_sum[axes=(3,)] brs
            bru:f32[64,25,256,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 1)
            ] brt
            brv:f16[64,25,256,1] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bru
            brw:f16[64,25,256,256] = div brr brv
            brx:f16[64,25,256,1] = integer_pow[y=-2] brv
            bry:f16[64,25,64,256] = dot_general[
              dimension_numbers=(((1,), (3,)), ((0, 2), (0, 1)))
              precision=None
              preferred_element_type=None
            ] bqp brw
            brz:f16[64,256,25,64] = transpose[permutation=(0, 3, 1, 2)] bry
            bsa:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] brz
            bsb:f16[1600,1600] = transpose[permutation=(1, 0)] ws
            bsc:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] bsa bsb
            bsd:f16[1,1,1600] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 1600)
            ] wt
            bse:f16[64,256,1600] = add bsc bsd
            bsf:f16[64,256,1600] = add bse bon
          in (bsf, bsa, bsb, bqp, brx, brr, brv, brk, bqo, brj, brw, bpz, bqg, bpn,
            bpp, bpt, bpr, bpj, boy, bot, bpu, boi, boj, bnx, bof, boe, boa, boh,
            bnt, bnu, bnh, bnj, bnn, bnl, bnd, bms, bmn, bno, bmc, bmd, bkr, blz,
            blt, blx, blm, bkq, bll, bly, bkb, bki, bjp, bjr, bjv, bjt, bjl, bja,
            biv, bjw, bik, bil, bhz, bih, big, bic, bij, bhv, bhw, bhj, bhl, bhp,
            bhn, bhf, bgu, bgp, bhq, bge, bgf, bet, bgb, bfv, bfz, bfo, bes, bfn,
            bga, bed, bek, bdr, bdt, bdx, bdv, bdn, bdc, bcx, bdy, bcm, bcn, bcb,
            bcj, bci, bce, bcl, bbx, bby, bbl, bbn, bbr, bbp, bbh, baw, bar, bbs,
            bag, bah, yv, bad, zx, bab, zq, yu, zp, bac, yf, ym, xt, xv, xz, xx,
            xp, xe, wz, ya) }
        name=30
      ] mb mc md me mf mg mh mi mj mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz
        na nb nc nd ne nf ng nh ni nj nk nl nm nn no np nq nr ns
      bsg:f16[64,256,1600] bsh:f16[64,256,1600] bsi:f16[1600,1600] bsj:f16[64,256,25,64]
        bsk:f16[64,25,256,1] bsl:f16[64,25,256,256] bsm:f16[64,25,256,1] bsn:f16[64,256,25,64]
        bso:f16[64,256,25,64] bsp:f16[] bsq:f16[64,25,256,256] bsr:f16[64,256,1600]
        bss:f16[1600,4800] bst:f32[64,256,1600] bsu:f32[64,256,1] bsv:f32[1,1,1600]
        bsw:f32[64,256,1] bsx:f32[64,256] bsy:f32[64,256] bsz:f32[64,256,1600] bta:f32[64,256,1600]
        btb:f16[64,256,6400] btc:f16[6400,1600] btd:f16[64,256,6400] bte:f16[64,256,6400]
        btf:f16[64,256,6400] btg:f16[64,256,6400] bth:f16[64,256,6400] bti:f16[64,256,1600]
        btj:f16[1600,6400] btk:f32[64,256,1600] btl:f32[64,256,1] btm:f32[1,1,1600]
        btn:f32[64,256,1] bto:f32[64,256] btp:f32[64,256] btq:f32[64,256,1600] btr:f32[64,256,1600]
        bts:f16[64,256,1600] btt:f16[1600,1600] btu:f16[64,256,25,64] btv:f16[64,25,256,1]
        btw:f16[64,25,256,256] btx:f16[64,25,256,1] bty:f16[64,256,25,64] btz:f16[64,256,25,64]
        bua:f16[] bub:f16[64,25,256,256] buc:f16[64,256,1600] bud:f16[1600,4800]
        bue:f32[64,256,1600] buf:f32[64,256,1] bug:f32[1,1,1600] buh:f32[64,256,1]
        bui:f32[64,256] buj:f32[64,256] buk:f32[64,256,1600] bul:f32[64,256,1600]
        bum:f16[64,256,6400] bun:f16[6400,1600] buo:f16[64,256,6400] bup:f16[64,256,6400]
        buq:f16[64,256,6400] bur:f16[64,256,6400] bus:f16[64,256,6400] but:f16[64,256,1600]
        buu:f16[1600,6400] buv:f32[64,256,1600] buw:f32[64,256,1] bux:f32[1,1,1600]
        buy:f32[64,256,1] buz:f32[64,256] bva:f32[64,256] bvb:f32[64,256,1600] bvc:f32[64,256,1600]
        bvd:f16[64,256,1600] bve:f16[1600,1600] bvf:f16[64,256,25,64] bvg:f16[64,25,256,1]
        bvh:f16[64,25,256,256] bvi:f16[64,25,256,1] bvj:f16[64,256,25,64] bvk:f16[64,256,25,64]
        bvl:f16[] bvm:f16[64,25,256,256] bvn:f16[64,256,1600] bvo:f16[1600,4800]
        bvp:f32[64,256,1600] bvq:f32[64,256,1] bvr:f32[1,1,1600] bvs:f32[64,256,1]
        bvt:f32[64,256] bvu:f32[64,256] bvv:f32[64,256,1600] bvw:f32[64,256,1600]
        bvx:f16[64,256,6400] bvy:f16[6400,1600] bvz:f16[64,256,6400] bwa:f16[64,256,6400]
        bwb:f16[64,256,6400] bwc:f16[64,256,6400] bwd:f16[64,256,6400] bwe:f16[64,256,1600]
        bwf:f16[1600,6400] bwg:f32[64,256,1600] bwh:f32[64,256,1] bwi:f32[1,1,1600]
        bwj:f32[64,256,1] bwk:f32[64,256] bwl:f32[64,256] bwm:f32[64,256,1600] bwn:f32[64,256,1600]
        bwo:f16[64,256,1600] bwp:f16[1600,1600] bwq:f16[64,256,25,64] bwr:f16[64,25,256,1]
        bws:f16[64,25,256,256] bwt:f16[64,25,256,1] bwu:f16[64,256,25,64] bwv:f16[64,256,25,64]
        bww:f16[] bwx:f16[64,25,256,256] bwy:f16[64,256,1600] bwz:f16[1600,4800]
        bxa:f32[64,256,1600] bxb:f32[64,256,1] bxc:f32[1,1,1600] bxd:f32[64,256,1]
        bxe:f32[64,256] bxf:f32[64,256] bxg:f32[64,256,1600] bxh:f32[64,256,1600]
        bxi:f16[64,256,6400] bxj:f16[6400,1600] bxk:f16[64,256,6400] bxl:f16[64,256,6400]
        bxm:f16[64,256,6400] bxn:f16[64,256,6400] bxo:f16[64,256,6400] bxp:f16[64,256,1600]
        bxq:f16[1600,6400] bxr:f32[64,256,1600] bxs:f32[64,256,1] bxt:f32[1,1,1600]
        bxu:f32[64,256,1] bxv:f32[64,256] bxw:f32[64,256] bxx:f32[64,256,1600] bxy:f32[64,256,1600] = named_call[
        call_jaxpr={ lambda ; bxz:f16[64,256,1600] bya:f16[1600] byb:f16[1600] byc:f16[6400,1600]
            byd:f16[6400] bye:f16[1600,6400] byf:f16[1600] byg:f16[1600] byh:f16[1600]
            byi:f16[4800,1600] byj:f16[4800] byk:i32[64,256] byl:f16[1600,1600] bym:f16[1600]
            byn:f16[1600] byo:f16[1600] byp:f16[6400,1600] byq:f16[6400] byr:f16[1600,6400]
            bys:f16[1600] byt:f16[1600] byu:f16[1600] byv:f16[4800,1600] byw:f16[4800]
            byx:f16[1600,1600] byy:f16[1600] byz:f16[1600] bza:f16[1600] bzb:f16[6400,1600]
            bzc:f16[6400] bzd:f16[1600,6400] bze:f16[1600] bzf:f16[1600] bzg:f16[1600]
            bzh:f16[4800,1600] bzi:f16[4800] bzj:f16[1600,1600] bzk:f16[1600] bzl:f16[1600]
            bzm:f16[1600] bzn:f16[6400,1600] bzo:f16[6400] bzp:f16[1600,6400] bzq:f16[1600]
            bzr:f16[1600] bzs:f16[1600] bzt:f16[4800,1600] bzu:f16[4800] bzv:f16[1600,1600]
            bzw:f16[1600]. let
            bzx:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bxz
            bzy:f32[64,256] = reduce_sum[axes=(2,)] bzx
            bzz:f32[64,256] = div bzy 1600.0
            caa:f32[64,256,1600] = integer_pow[y=2] bzx
            cab:f32[64,256,1600] = integer_pow[y=1] bzx
            cac:f32[64,256,1600] = mul 2.0 cab
            cad:f32[64,256] = reduce_sum[axes=(2,)] caa
            cae:f32[64,256] = div cad 1600.0
            caf:f32[64,256] = integer_pow[y=2] bzz
            cag:f32[64,256] = integer_pow[y=1] bzz
            cah:f32[64,256] = mul 2.0 cag
            cai:f32[64,256] = sub cae caf
            caj:f32[64,256] = max 0.0 cai
            cak:bool[64,256] = eq cai caj
            cal:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            cam:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 0.0
            can:f32[64,256] = select_n cak cam cal
            cao:bool[64,256] = eq 0.0 caj
            cap:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 2.0
            caq:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            car:f32[64,256] = select_n cao caq cap
            cas:f32[64,256] = div can car
            cat:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] bzz
            cau:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] caj
            cav:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bxz
            caw:f32[64,256,1600] = sub cav cat
            cax:f32[64,256,1] = add cau 9.999999747378752e-06
            cay:f32[64,256,1] = rsqrt cax
            caz:f32[64,256,1] = div cay cax
            cba:f32[64,256,1] = mul -0.5 caz
            cbb:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] bya
            cbc:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] cbb
            cbd:f32[64,256,1600] = mul cay cbc
            cbe:f32[64,256,1600] = mul caw cbd
            cbf:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] byb
            cbg:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] cbf
            cbh:f32[64,256,1600] = add cbe cbg
            cbi:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] cbh
            cbj:f16[1600,6400] = transpose[permutation=(1, 0)] byc
            cbk:f16[64,256,6400] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] cbi cbj
            cbl:f16[1,1,6400] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 6400)
            ] byd
            cbm:f16[64,256,6400] = add cbk cbl
            cbn:f16[64,256,6400] = integer_pow[y=3] cbm
            cbo:f16[64,256,6400] = integer_pow[y=2] cbm
            cbp:f16[64,256,6400] = mul 3.0 cbo
            cbq:f16[64,256,6400] = mul 0.044708251953125 cbn
            cbr:f16[64,256,6400] = add cbm cbq
            cbs:f16[64,256,6400] = mul 0.7978515625 cbr
            cbt:f16[64,256,6400] = tanh cbs
            cbu:f16[64,256,6400] = sub 1.0 cbt
            cbv:f16[64,256,6400] = add 1.0 cbt
            cbw:f16[64,256,6400] = mul 0.5 cbv
            cbx:f16[64,256,6400] = mul cbm cbw
            cby:f16[6400,1600] = transpose[permutation=(1, 0)] bye
            cbz:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] cbx cby
            cca:f16[1,1,1600] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 1600)
            ] byf
            ccb:f16[64,256,1600] = add cbz cca
            ccc:f16[64,256,1600] = add bxz ccb
            ccd:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] ccc
            cce:f32[64,256] = reduce_sum[axes=(2,)] ccd
            ccf:f32[64,256] = div cce 1600.0
            ccg:f32[64,256,1600] = integer_pow[y=2] ccd
            cch:f32[64,256,1600] = integer_pow[y=1] ccd
            cci:f32[64,256,1600] = mul 2.0 cch
            ccj:f32[64,256] = reduce_sum[axes=(2,)] ccg
            cck:f32[64,256] = div ccj 1600.0
            ccl:f32[64,256] = integer_pow[y=2] ccf
            ccm:f32[64,256] = integer_pow[y=1] ccf
            ccn:f32[64,256] = mul 2.0 ccm
            cco:f32[64,256] = sub cck ccl
            ccp:f32[64,256] = max 0.0 cco
            ccq:bool[64,256] = eq cco ccp
            ccr:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            ccs:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 0.0
            cct:f32[64,256] = select_n ccq ccs ccr
            ccu:bool[64,256] = eq 0.0 ccp
            ccv:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 2.0
            ccw:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            ccx:f32[64,256] = select_n ccu ccw ccv
            ccy:f32[64,256] = div cct ccx
            ccz:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] ccf
            cda:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] ccp
            cdb:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] ccc
            cdc:f32[64,256,1600] = sub cdb ccz
            cdd:f32[64,256,1] = add cda 9.999999747378752e-06
            cde:f32[64,256,1] = rsqrt cdd
            cdf:f32[64,256,1] = div cde cdd
            cdg:f32[64,256,1] = mul -0.5 cdf
            cdh:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] byg
            cdi:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] cdh
            cdj:f32[64,256,1600] = mul cde cdi
            cdk:f32[64,256,1600] = mul cdc cdj
            cdl:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] byh
            cdm:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] cdl
            cdn:f32[64,256,1600] = add cdk cdm
            cdo:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] cdn
            cdp:i32[1024] = iota[dimension=0 dtype=int32 shape=(1024,)] 
            cdq:i32[1,1024] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 1024)
            ] cdp
            cdr:i32[1,1024,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(1, 1024, 1)
            ] cdq
            cds:i32[1,1,1024] = broadcast_in_dim[
              broadcast_dimensions=(0, 2)
              shape=(1, 1, 1024)
            ] cdq
            cdt:bool[1,1024,1024] = ge cdr cds
            cdu:bool[1,1,1024,1024] = broadcast_in_dim[
              broadcast_dimensions=(0, 2, 3)
              shape=(1, 1, 1024, 1024)
            ] cdt
            cdv:f16[1600,4800] = transpose[permutation=(1, 0)] byi
            cdw:f16[64,256,4800] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] cdo cdv
            cdx:f16[1,1,4800] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 4800)
            ] byj
            cdy:f16[64,256,4800] = add cdw cdx
            cdz:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 1600)
              start_indices=(0, 0, 0)
              strides=None
            ] cdy
            cea:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 3200)
              start_indices=(0, 0, 1600)
              strides=None
            ] cdy
            ceb:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 4800)
              start_indices=(0, 0, 3200)
              strides=None
            ] cdy
            cec:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] cdz
            ced:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] cea
            cee:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] ceb
            cef:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
            ceg:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
            ceh:i32[2] = concatenate[dimension=0] cef ceg
            cei:bool[1,1,256,256] = gather[
              dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2, 3), collapsed_slice_dims=(), start_index_map=(2, 3))
              fill_value=None
              indices_are_sorted=True
              mode=GatherScatterMode.PROMISE_IN_BOUNDS
              slice_sizes=(1, 1, 256, 256)
              unique_indices=True
            ] cdu ceh
            cej:bool[1,256,256] = squeeze[dimensions=(0,)] cei
            cek:bool[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(64, 1, 256, 256)
            ] cej
            cel:i32[64,1,1,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 3)
              shape=(64, 1, 1, 256)
            ] byk
            cem:i32[64,1,256] = squeeze[dimensions=(2,)] cel
            cen:i32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 3)
              shape=(64, 1, 256, 256)
            ] cem
            ceo:bool[64,1,256,256] = ne cen 0
            cep:bool[64,1,256,256] = and ceo cek
            ceq:f32[64,1,256,256] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] cep
            cer:bool[64,1,256,256] = gt ceq 0.0
            ces:f32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 1, 256, 256)
            ] 0.0
            cet:f16[64,1,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] ces
            ceu:f32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 1, 256, 256)
            ] -10000.0
            cev:f16[64,1,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] ceu
            cew:f16[64,1,256,256] = select_n cer cev cet
            cex:f32[] = sqrt 64.0
            cey:f16[] = convert_element_type[new_dtype=float16 weak_type=False] cex
            cez:f16[64,256,25,64] = div cec cey
            cfa:f16[64,25,256,256] = dot_general[
              dimension_numbers=(((3,), (3,)), ((0, 2), (0, 2)))
              precision=None
              preferred_element_type=None
            ] cez ced
            cfb:f16[64,25,256,256] = add cfa cew
            cfc:f16[64,25,256] = reduce_max[axes=(3,)] cfb
            cfd:f16[64,25,256,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 1)
            ] cfc
            cfe:f16[64,25,256,1] = stop_gradient cfd
            cff:f16[64,25,256,256] = sub cfb cfe
            cfg:f16[64,25,256,256] = exp cff
            cfh:f32[64,25,256,256] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] cfg
            cfi:f32[64,25,256] = reduce_sum[axes=(3,)] cfh
            cfj:f32[64,25,256,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 1)
            ] cfi
            cfk:f16[64,25,256,1] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] cfj
            cfl:f16[64,25,256,256] = div cfg cfk
            cfm:f16[64,25,256,1] = integer_pow[y=-2] cfk
            cfn:f16[64,25,64,256] = dot_general[
              dimension_numbers=(((1,), (3,)), ((0, 2), (0, 1)))
              precision=None
              preferred_element_type=None
            ] cee cfl
            cfo:f16[64,256,25,64] = transpose[permutation=(0, 3, 1, 2)] cfn
            cfp:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] cfo
            cfq:f16[1600,1600] = transpose[permutation=(1, 0)] byl
            cfr:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] cfp cfq
            cfs:f16[1,1,1600] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 1600)
            ] bym
            cft:f16[64,256,1600] = add cfr cfs
            cfu:f16[64,256,1600] = add cft ccc
            cfv:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] cfu
            cfw:f32[64,256] = reduce_sum[axes=(2,)] cfv
            cfx:f32[64,256] = div cfw 1600.0
            cfy:f32[64,256,1600] = integer_pow[y=2] cfv
            cfz:f32[64,256,1600] = integer_pow[y=1] cfv
            cga:f32[64,256,1600] = mul 2.0 cfz
            cgb:f32[64,256] = reduce_sum[axes=(2,)] cfy
            cgc:f32[64,256] = div cgb 1600.0
            cgd:f32[64,256] = integer_pow[y=2] cfx
            cge:f32[64,256] = integer_pow[y=1] cfx
            cgf:f32[64,256] = mul 2.0 cge
            cgg:f32[64,256] = sub cgc cgd
            cgh:f32[64,256] = max 0.0 cgg
            cgi:bool[64,256] = eq cgg cgh
            cgj:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            cgk:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 0.0
            cgl:f32[64,256] = select_n cgi cgk cgj
            cgm:bool[64,256] = eq 0.0 cgh
            cgn:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 2.0
            cgo:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            cgp:f32[64,256] = select_n cgm cgo cgn
            cgq:f32[64,256] = div cgl cgp
            cgr:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] cfx
            cgs:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] cgh
            cgt:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] cfu
            cgu:f32[64,256,1600] = sub cgt cgr
            cgv:f32[64,256,1] = add cgs 9.999999747378752e-06
            cgw:f32[64,256,1] = rsqrt cgv
            cgx:f32[64,256,1] = div cgw cgv
            cgy:f32[64,256,1] = mul -0.5 cgx
            cgz:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] byn
            cha:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] cgz
            chb:f32[64,256,1600] = mul cgw cha
            chc:f32[64,256,1600] = mul cgu chb
            chd:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] byo
            che:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] chd
            chf:f32[64,256,1600] = add chc che
            chg:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] chf
            chh:f16[1600,6400] = transpose[permutation=(1, 0)] byp
            chi:f16[64,256,6400] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] chg chh
            chj:f16[1,1,6400] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 6400)
            ] byq
            chk:f16[64,256,6400] = add chi chj
            chl:f16[64,256,6400] = integer_pow[y=3] chk
            chm:f16[64,256,6400] = integer_pow[y=2] chk
            chn:f16[64,256,6400] = mul 3.0 chm
            cho:f16[64,256,6400] = mul 0.044708251953125 chl
            chp:f16[64,256,6400] = add chk cho
            chq:f16[64,256,6400] = mul 0.7978515625 chp
            chr:f16[64,256,6400] = tanh chq
            chs:f16[64,256,6400] = sub 1.0 chr
            cht:f16[64,256,6400] = add 1.0 chr
            chu:f16[64,256,6400] = mul 0.5 cht
            chv:f16[64,256,6400] = mul chk chu
            chw:f16[6400,1600] = transpose[permutation=(1, 0)] byr
            chx:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] chv chw
            chy:f16[1,1,1600] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 1600)
            ] bys
            chz:f16[64,256,1600] = add chx chy
            cia:f16[64,256,1600] = add cfu chz
            cib:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] cia
            cic:f32[64,256] = reduce_sum[axes=(2,)] cib
            cid:f32[64,256] = div cic 1600.0
            cie:f32[64,256,1600] = integer_pow[y=2] cib
            cif:f32[64,256,1600] = integer_pow[y=1] cib
            cig:f32[64,256,1600] = mul 2.0 cif
            cih:f32[64,256] = reduce_sum[axes=(2,)] cie
            cii:f32[64,256] = div cih 1600.0
            cij:f32[64,256] = integer_pow[y=2] cid
            cik:f32[64,256] = integer_pow[y=1] cid
            cil:f32[64,256] = mul 2.0 cik
            cim:f32[64,256] = sub cii cij
            cin:f32[64,256] = max 0.0 cim
            cio:bool[64,256] = eq cim cin
            cip:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            ciq:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 0.0
            cir:f32[64,256] = select_n cio ciq cip
            cis:bool[64,256] = eq 0.0 cin
            cit:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 2.0
            ciu:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            civ:f32[64,256] = select_n cis ciu cit
            ciw:f32[64,256] = div cir civ
            cix:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] cid
            ciy:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] cin
            ciz:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] cia
            cja:f32[64,256,1600] = sub ciz cix
            cjb:f32[64,256,1] = add ciy 9.999999747378752e-06
            cjc:f32[64,256,1] = rsqrt cjb
            cjd:f32[64,256,1] = div cjc cjb
            cje:f32[64,256,1] = mul -0.5 cjd
            cjf:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] byt
            cjg:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] cjf
            cjh:f32[64,256,1600] = mul cjc cjg
            cji:f32[64,256,1600] = mul cja cjh
            cjj:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] byu
            cjk:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] cjj
            cjl:f32[64,256,1600] = add cji cjk
            cjm:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] cjl
            cjn:i32[1024] = iota[dimension=0 dtype=int32 shape=(1024,)] 
            cjo:i32[1,1024] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 1024)
            ] cjn
            cjp:i32[1,1024,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(1, 1024, 1)
            ] cjo
            cjq:i32[1,1,1024] = broadcast_in_dim[
              broadcast_dimensions=(0, 2)
              shape=(1, 1, 1024)
            ] cjo
            cjr:bool[1,1024,1024] = ge cjp cjq
            cjs:bool[1,1,1024,1024] = broadcast_in_dim[
              broadcast_dimensions=(0, 2, 3)
              shape=(1, 1, 1024, 1024)
            ] cjr
            cjt:f16[1600,4800] = transpose[permutation=(1, 0)] byv
            cju:f16[64,256,4800] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] cjm cjt
            cjv:f16[1,1,4800] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 4800)
            ] byw
            cjw:f16[64,256,4800] = add cju cjv
            cjx:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 1600)
              start_indices=(0, 0, 0)
              strides=None
            ] cjw
            cjy:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 3200)
              start_indices=(0, 0, 1600)
              strides=None
            ] cjw
            cjz:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 4800)
              start_indices=(0, 0, 3200)
              strides=None
            ] cjw
            cka:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] cjx
            ckb:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] cjy
            ckc:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] cjz
            ckd:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
            cke:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
            ckf:i32[2] = concatenate[dimension=0] ckd cke
            ckg:bool[1,1,256,256] = gather[
              dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2, 3), collapsed_slice_dims=(), start_index_map=(2, 3))
              fill_value=None
              indices_are_sorted=True
              mode=GatherScatterMode.PROMISE_IN_BOUNDS
              slice_sizes=(1, 1, 256, 256)
              unique_indices=True
            ] cjs ckf
            ckh:bool[1,256,256] = squeeze[dimensions=(0,)] ckg
            cki:bool[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(64, 1, 256, 256)
            ] ckh
            ckj:i32[64,1,1,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 3)
              shape=(64, 1, 1, 256)
            ] byk
            ckk:i32[64,1,256] = squeeze[dimensions=(2,)] ckj
            ckl:i32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 3)
              shape=(64, 1, 256, 256)
            ] ckk
            ckm:bool[64,1,256,256] = ne ckl 0
            ckn:bool[64,1,256,256] = and ckm cki
            cko:f32[64,1,256,256] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] ckn
            ckp:bool[64,1,256,256] = gt cko 0.0
            ckq:f32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 1, 256, 256)
            ] 0.0
            ckr:f16[64,1,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] ckq
            cks:f32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 1, 256, 256)
            ] -10000.0
            ckt:f16[64,1,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] cks
            cku:f16[64,1,256,256] = select_n ckp ckt ckr
            ckv:f32[] = sqrt 64.0
            ckw:f16[] = convert_element_type[new_dtype=float16 weak_type=False] ckv
            ckx:f16[64,256,25,64] = div cka ckw
            cky:f16[64,25,256,256] = dot_general[
              dimension_numbers=(((3,), (3,)), ((0, 2), (0, 2)))
              precision=None
              preferred_element_type=None
            ] ckx ckb
            ckz:f16[64,25,256,256] = add cky cku
            cla:f16[64,25,256] = reduce_max[axes=(3,)] ckz
            clb:f16[64,25,256,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 1)
            ] cla
            clc:f16[64,25,256,1] = stop_gradient clb
            cld:f16[64,25,256,256] = sub ckz clc
            cle:f16[64,25,256,256] = exp cld
            clf:f32[64,25,256,256] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] cle
            clg:f32[64,25,256] = reduce_sum[axes=(3,)] clf
            clh:f32[64,25,256,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 1)
            ] clg
            cli:f16[64,25,256,1] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] clh
            clj:f16[64,25,256,256] = div cle cli
            clk:f16[64,25,256,1] = integer_pow[y=-2] cli
            cll:f16[64,25,64,256] = dot_general[
              dimension_numbers=(((1,), (3,)), ((0, 2), (0, 1)))
              precision=None
              preferred_element_type=None
            ] ckc clj
            clm:f16[64,256,25,64] = transpose[permutation=(0, 3, 1, 2)] cll
            cln:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] clm
            clo:f16[1600,1600] = transpose[permutation=(1, 0)] byx
            clp:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] cln clo
            clq:f16[1,1,1600] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 1600)
            ] byy
            clr:f16[64,256,1600] = add clp clq
            cls:f16[64,256,1600] = add clr cia
            clt:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] cls
            clu:f32[64,256] = reduce_sum[axes=(2,)] clt
            clv:f32[64,256] = div clu 1600.0
            clw:f32[64,256,1600] = integer_pow[y=2] clt
            clx:f32[64,256,1600] = integer_pow[y=1] clt
            cly:f32[64,256,1600] = mul 2.0 clx
            clz:f32[64,256] = reduce_sum[axes=(2,)] clw
            cma:f32[64,256] = div clz 1600.0
            cmb:f32[64,256] = integer_pow[y=2] clv
            cmc:f32[64,256] = integer_pow[y=1] clv
            cmd:f32[64,256] = mul 2.0 cmc
            cme:f32[64,256] = sub cma cmb
            cmf:f32[64,256] = max 0.0 cme
            cmg:bool[64,256] = eq cme cmf
            cmh:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            cmi:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 0.0
            cmj:f32[64,256] = select_n cmg cmi cmh
            cmk:bool[64,256] = eq 0.0 cmf
            cml:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 2.0
            cmm:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            cmn:f32[64,256] = select_n cmk cmm cml
            cmo:f32[64,256] = div cmj cmn
            cmp:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] clv
            cmq:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] cmf
            cmr:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] cls
            cms:f32[64,256,1600] = sub cmr cmp
            cmt:f32[64,256,1] = add cmq 9.999999747378752e-06
            cmu:f32[64,256,1] = rsqrt cmt
            cmv:f32[64,256,1] = div cmu cmt
            cmw:f32[64,256,1] = mul -0.5 cmv
            cmx:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] byz
            cmy:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] cmx
            cmz:f32[64,256,1600] = mul cmu cmy
            cna:f32[64,256,1600] = mul cms cmz
            cnb:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] bza
            cnc:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] cnb
            cnd:f32[64,256,1600] = add cna cnc
            cne:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] cnd
            cnf:f16[1600,6400] = transpose[permutation=(1, 0)] bzb
            cng:f16[64,256,6400] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] cne cnf
            cnh:f16[1,1,6400] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 6400)
            ] bzc
            cni:f16[64,256,6400] = add cng cnh
            cnj:f16[64,256,6400] = integer_pow[y=3] cni
            cnk:f16[64,256,6400] = integer_pow[y=2] cni
            cnl:f16[64,256,6400] = mul 3.0 cnk
            cnm:f16[64,256,6400] = mul 0.044708251953125 cnj
            cnn:f16[64,256,6400] = add cni cnm
            cno:f16[64,256,6400] = mul 0.7978515625 cnn
            cnp:f16[64,256,6400] = tanh cno
            cnq:f16[64,256,6400] = sub 1.0 cnp
            cnr:f16[64,256,6400] = add 1.0 cnp
            cns:f16[64,256,6400] = mul 0.5 cnr
            cnt:f16[64,256,6400] = mul cni cns
            cnu:f16[6400,1600] = transpose[permutation=(1, 0)] bzd
            cnv:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] cnt cnu
            cnw:f16[1,1,1600] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 1600)
            ] bze
            cnx:f16[64,256,1600] = add cnv cnw
            cny:f16[64,256,1600] = add cls cnx
            cnz:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] cny
            coa:f32[64,256] = reduce_sum[axes=(2,)] cnz
            cob:f32[64,256] = div coa 1600.0
            coc:f32[64,256,1600] = integer_pow[y=2] cnz
            cod:f32[64,256,1600] = integer_pow[y=1] cnz
            coe:f32[64,256,1600] = mul 2.0 cod
            cof:f32[64,256] = reduce_sum[axes=(2,)] coc
            cog:f32[64,256] = div cof 1600.0
            coh:f32[64,256] = integer_pow[y=2] cob
            coi:f32[64,256] = integer_pow[y=1] cob
            coj:f32[64,256] = mul 2.0 coi
            cok:f32[64,256] = sub cog coh
            col:f32[64,256] = max 0.0 cok
            com:bool[64,256] = eq cok col
            con:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            coo:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 0.0
            cop:f32[64,256] = select_n com coo con
            coq:bool[64,256] = eq 0.0 col
            cor:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 2.0
            cos:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            cot:f32[64,256] = select_n coq cos cor
            cou:f32[64,256] = div cop cot
            cov:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] cob
            cow:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] col
            cox:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] cny
            coy:f32[64,256,1600] = sub cox cov
            coz:f32[64,256,1] = add cow 9.999999747378752e-06
            cpa:f32[64,256,1] = rsqrt coz
            cpb:f32[64,256,1] = div cpa coz
            cpc:f32[64,256,1] = mul -0.5 cpb
            cpd:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] bzf
            cpe:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] cpd
            cpf:f32[64,256,1600] = mul cpa cpe
            cpg:f32[64,256,1600] = mul coy cpf
            cph:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] bzg
            cpi:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] cph
            cpj:f32[64,256,1600] = add cpg cpi
            cpk:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] cpj
            cpl:i32[1024] = iota[dimension=0 dtype=int32 shape=(1024,)] 
            cpm:i32[1,1024] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 1024)
            ] cpl
            cpn:i32[1,1024,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(1, 1024, 1)
            ] cpm
            cpo:i32[1,1,1024] = broadcast_in_dim[
              broadcast_dimensions=(0, 2)
              shape=(1, 1, 1024)
            ] cpm
            cpp:bool[1,1024,1024] = ge cpn cpo
            cpq:bool[1,1,1024,1024] = broadcast_in_dim[
              broadcast_dimensions=(0, 2, 3)
              shape=(1, 1, 1024, 1024)
            ] cpp
            cpr:f16[1600,4800] = transpose[permutation=(1, 0)] bzh
            cps:f16[64,256,4800] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] cpk cpr
            cpt:f16[1,1,4800] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 4800)
            ] bzi
            cpu:f16[64,256,4800] = add cps cpt
            cpv:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 1600)
              start_indices=(0, 0, 0)
              strides=None
            ] cpu
            cpw:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 3200)
              start_indices=(0, 0, 1600)
              strides=None
            ] cpu
            cpx:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 4800)
              start_indices=(0, 0, 3200)
              strides=None
            ] cpu
            cpy:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] cpv
            cpz:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] cpw
            cqa:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] cpx
            cqb:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
            cqc:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
            cqd:i32[2] = concatenate[dimension=0] cqb cqc
            cqe:bool[1,1,256,256] = gather[
              dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2, 3), collapsed_slice_dims=(), start_index_map=(2, 3))
              fill_value=None
              indices_are_sorted=True
              mode=GatherScatterMode.PROMISE_IN_BOUNDS
              slice_sizes=(1, 1, 256, 256)
              unique_indices=True
            ] cpq cqd
            cqf:bool[1,256,256] = squeeze[dimensions=(0,)] cqe
            cqg:bool[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(64, 1, 256, 256)
            ] cqf
            cqh:i32[64,1,1,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 3)
              shape=(64, 1, 1, 256)
            ] byk
            cqi:i32[64,1,256] = squeeze[dimensions=(2,)] cqh
            cqj:i32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 3)
              shape=(64, 1, 256, 256)
            ] cqi
            cqk:bool[64,1,256,256] = ne cqj 0
            cql:bool[64,1,256,256] = and cqk cqg
            cqm:f32[64,1,256,256] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] cql
            cqn:bool[64,1,256,256] = gt cqm 0.0
            cqo:f32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 1, 256, 256)
            ] 0.0
            cqp:f16[64,1,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] cqo
            cqq:f32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 1, 256, 256)
            ] -10000.0
            cqr:f16[64,1,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] cqq
            cqs:f16[64,1,256,256] = select_n cqn cqr cqp
            cqt:f32[] = sqrt 64.0
            cqu:f16[] = convert_element_type[new_dtype=float16 weak_type=False] cqt
            cqv:f16[64,256,25,64] = div cpy cqu
            cqw:f16[64,25,256,256] = dot_general[
              dimension_numbers=(((3,), (3,)), ((0, 2), (0, 2)))
              precision=None
              preferred_element_type=None
            ] cqv cpz
            cqx:f16[64,25,256,256] = add cqw cqs
            cqy:f16[64,25,256] = reduce_max[axes=(3,)] cqx
            cqz:f16[64,25,256,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 1)
            ] cqy
            cra:f16[64,25,256,1] = stop_gradient cqz
            crb:f16[64,25,256,256] = sub cqx cra
            crc:f16[64,25,256,256] = exp crb
            crd:f32[64,25,256,256] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] crc
            cre:f32[64,25,256] = reduce_sum[axes=(3,)] crd
            crf:f32[64,25,256,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 1)
            ] cre
            crg:f16[64,25,256,1] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] crf
            crh:f16[64,25,256,256] = div crc crg
            cri:f16[64,25,256,1] = integer_pow[y=-2] crg
            crj:f16[64,25,64,256] = dot_general[
              dimension_numbers=(((1,), (3,)), ((0, 2), (0, 1)))
              precision=None
              preferred_element_type=None
            ] cqa crh
            crk:f16[64,256,25,64] = transpose[permutation=(0, 3, 1, 2)] crj
            crl:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] crk
            crm:f16[1600,1600] = transpose[permutation=(1, 0)] bzj
            crn:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] crl crm
            cro:f16[1,1,1600] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 1600)
            ] bzk
            crp:f16[64,256,1600] = add crn cro
            crq:f16[64,256,1600] = add crp cny
            crr:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] crq
            crs:f32[64,256] = reduce_sum[axes=(2,)] crr
            crt:f32[64,256] = div crs 1600.0
            cru:f32[64,256,1600] = integer_pow[y=2] crr
            crv:f32[64,256,1600] = integer_pow[y=1] crr
            crw:f32[64,256,1600] = mul 2.0 crv
            crx:f32[64,256] = reduce_sum[axes=(2,)] cru
            cry:f32[64,256] = div crx 1600.0
            crz:f32[64,256] = integer_pow[y=2] crt
            csa:f32[64,256] = integer_pow[y=1] crt
            csb:f32[64,256] = mul 2.0 csa
            csc:f32[64,256] = sub cry crz
            csd:f32[64,256] = max 0.0 csc
            cse:bool[64,256] = eq csc csd
            csf:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            csg:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 0.0
            csh:f32[64,256] = select_n cse csg csf
            csi:bool[64,256] = eq 0.0 csd
            csj:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 2.0
            csk:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            csl:f32[64,256] = select_n csi csk csj
            csm:f32[64,256] = div csh csl
            csn:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] crt
            cso:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] csd
            csp:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] crq
            csq:f32[64,256,1600] = sub csp csn
            csr:f32[64,256,1] = add cso 9.999999747378752e-06
            css:f32[64,256,1] = rsqrt csr
            cst:f32[64,256,1] = div css csr
            csu:f32[64,256,1] = mul -0.5 cst
            csv:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] bzl
            csw:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] csv
            csx:f32[64,256,1600] = mul css csw
            csy:f32[64,256,1600] = mul csq csx
            csz:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] bzm
            cta:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] csz
            ctb:f32[64,256,1600] = add csy cta
            ctc:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] ctb
            ctd:f16[1600,6400] = transpose[permutation=(1, 0)] bzn
            cte:f16[64,256,6400] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] ctc ctd
            ctf:f16[1,1,6400] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 6400)
            ] bzo
            ctg:f16[64,256,6400] = add cte ctf
            cth:f16[64,256,6400] = integer_pow[y=3] ctg
            cti:f16[64,256,6400] = integer_pow[y=2] ctg
            ctj:f16[64,256,6400] = mul 3.0 cti
            ctk:f16[64,256,6400] = mul 0.044708251953125 cth
            ctl:f16[64,256,6400] = add ctg ctk
            ctm:f16[64,256,6400] = mul 0.7978515625 ctl
            ctn:f16[64,256,6400] = tanh ctm
            cto:f16[64,256,6400] = sub 1.0 ctn
            ctp:f16[64,256,6400] = add 1.0 ctn
            ctq:f16[64,256,6400] = mul 0.5 ctp
            ctr:f16[64,256,6400] = mul ctg ctq
            cts:f16[6400,1600] = transpose[permutation=(1, 0)] bzp
            ctt:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] ctr cts
            ctu:f16[1,1,1600] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 1600)
            ] bzq
            ctv:f16[64,256,1600] = add ctt ctu
            ctw:f16[64,256,1600] = add crq ctv
            ctx:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] ctw
            cty:f32[64,256] = reduce_sum[axes=(2,)] ctx
            ctz:f32[64,256] = div cty 1600.0
            cua:f32[64,256,1600] = integer_pow[y=2] ctx
            cub:f32[64,256,1600] = integer_pow[y=1] ctx
            cuc:f32[64,256,1600] = mul 2.0 cub
            cud:f32[64,256] = reduce_sum[axes=(2,)] cua
            cue:f32[64,256] = div cud 1600.0
            cuf:f32[64,256] = integer_pow[y=2] ctz
            cug:f32[64,256] = integer_pow[y=1] ctz
            cuh:f32[64,256] = mul 2.0 cug
            cui:f32[64,256] = sub cue cuf
            cuj:f32[64,256] = max 0.0 cui
            cuk:bool[64,256] = eq cui cuj
            cul:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            cum:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 0.0
            cun:f32[64,256] = select_n cuk cum cul
            cuo:bool[64,256] = eq 0.0 cuj
            cup:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 2.0
            cuq:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            cur:f32[64,256] = select_n cuo cuq cup
            cus:f32[64,256] = div cun cur
            cut:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] ctz
            cuu:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] cuj
            cuv:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] ctw
            cuw:f32[64,256,1600] = sub cuv cut
            cux:f32[64,256,1] = add cuu 9.999999747378752e-06
            cuy:f32[64,256,1] = rsqrt cux
            cuz:f32[64,256,1] = div cuy cux
            cva:f32[64,256,1] = mul -0.5 cuz
            cvb:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] bzr
            cvc:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] cvb
            cvd:f32[64,256,1600] = mul cuy cvc
            cve:f32[64,256,1600] = mul cuw cvd
            cvf:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] bzs
            cvg:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] cvf
            cvh:f32[64,256,1600] = add cve cvg
            cvi:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] cvh
            cvj:i32[1024] = iota[dimension=0 dtype=int32 shape=(1024,)] 
            cvk:i32[1,1024] = broadcast_in_dim[
              broadcast_dimensions=(1,)
              shape=(1, 1024)
            ] cvj
            cvl:i32[1,1024,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(1, 1024, 1)
            ] cvk
            cvm:i32[1,1,1024] = broadcast_in_dim[
              broadcast_dimensions=(0, 2)
              shape=(1, 1, 1024)
            ] cvk
            cvn:bool[1,1024,1024] = ge cvl cvm
            cvo:bool[1,1,1024,1024] = broadcast_in_dim[
              broadcast_dimensions=(0, 2, 3)
              shape=(1, 1, 1024, 1024)
            ] cvn
            cvp:f16[1600,4800] = transpose[permutation=(1, 0)] bzt
            cvq:f16[64,256,4800] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] cvi cvp
            cvr:f16[1,1,4800] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 4800)
            ] bzu
            cvs:f16[64,256,4800] = add cvq cvr
            cvt:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 1600)
              start_indices=(0, 0, 0)
              strides=None
            ] cvs
            cvu:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 3200)
              start_indices=(0, 0, 1600)
              strides=None
            ] cvs
            cvv:f16[64,256,1600] = slice[
              limit_indices=(64, 256, 4800)
              start_indices=(0, 0, 3200)
              strides=None
            ] cvs
            cvw:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] cvt
            cvx:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] cvu
            cvy:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] cvv
            cvz:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
            cwa:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
            cwb:i32[2] = concatenate[dimension=0] cvz cwa
            cwc:bool[1,1,256,256] = gather[
              dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2, 3), collapsed_slice_dims=(), start_index_map=(2, 3))
              fill_value=None
              indices_are_sorted=True
              mode=GatherScatterMode.PROMISE_IN_BOUNDS
              slice_sizes=(1, 1, 256, 256)
              unique_indices=True
            ] cvo cwb
            cwd:bool[1,256,256] = squeeze[dimensions=(0,)] cwc
            cwe:bool[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=(1, 2, 3)
              shape=(64, 1, 256, 256)
            ] cwd
            cwf:i32[64,1,1,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 3)
              shape=(64, 1, 1, 256)
            ] byk
            cwg:i32[64,1,256] = squeeze[dimensions=(2,)] cwf
            cwh:i32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 3)
              shape=(64, 1, 256, 256)
            ] cwg
            cwi:bool[64,1,256,256] = ne cwh 0
            cwj:bool[64,1,256,256] = and cwi cwe
            cwk:f32[64,1,256,256] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] cwj
            cwl:bool[64,1,256,256] = gt cwk 0.0
            cwm:f32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 1, 256, 256)
            ] 0.0
            cwn:f16[64,1,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] cwm
            cwo:f32[64,1,256,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 1, 256, 256)
            ] -10000.0
            cwp:f16[64,1,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] cwo
            cwq:f16[64,1,256,256] = select_n cwl cwp cwn
            cwr:f32[] = sqrt 64.0
            cws:f16[] = convert_element_type[new_dtype=float16 weak_type=False] cwr
            cwt:f16[64,256,25,64] = div cvw cws
            cwu:f16[64,25,256,256] = dot_general[
              dimension_numbers=(((3,), (3,)), ((0, 2), (0, 2)))
              precision=None
              preferred_element_type=None
            ] cwt cvx
            cwv:f16[64,25,256,256] = add cwu cwq
            cww:f16[64,25,256] = reduce_max[axes=(3,)] cwv
            cwx:f16[64,25,256,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 1)
            ] cww
            cwy:f16[64,25,256,1] = stop_gradient cwx
            cwz:f16[64,25,256,256] = sub cwv cwy
            cxa:f16[64,25,256,256] = exp cwz
            cxb:f32[64,25,256,256] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] cxa
            cxc:f32[64,25,256] = reduce_sum[axes=(3,)] cxb
            cxd:f32[64,25,256,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 1)
            ] cxc
            cxe:f16[64,25,256,1] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] cxd
            cxf:f16[64,25,256,256] = div cxa cxe
            cxg:f16[64,25,256,1] = integer_pow[y=-2] cxe
            cxh:f16[64,25,64,256] = dot_general[
              dimension_numbers=(((1,), (3,)), ((0, 2), (0, 1)))
              precision=None
              preferred_element_type=None
            ] cvy cxf
            cxi:f16[64,256,25,64] = transpose[permutation=(0, 3, 1, 2)] cxh
            cxj:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] cxi
            cxk:f16[1600,1600] = transpose[permutation=(1, 0)] bzv
            cxl:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] cxj cxk
            cxm:f16[1,1,1600] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 1600)
            ] bzw
            cxn:f16[64,256,1600] = add cxl cxm
            cxo:f16[64,256,1600] = add cxn ctw
          in (cxo, cxj, cxk, cvy, cxg, cxa, cxe, cwt, cvx, cws, cxf, cvi, cvp, cuw,
            cuy, cvc, cva, cus, cuh, cuc, cvd, ctr, cts, ctg, cto, ctn, ctj, ctq,
            ctc, ctd, csq, css, csw, csu, csm, csb, crw, csx, crl, crm, cqa, cri,
            crc, crg, cqv, cpz, cqu, crh, cpk, cpr, coy, cpa, cpe, cpc, cou, coj,
            coe, cpf, cnt, cnu, cni, cnq, cnp, cnl, cns, cne, cnf, cms, cmu, cmy,
            cmw, cmo, cmd, cly, cmz, cln, clo, ckc, clk, cle, cli, ckx, ckb, ckw,
            clj, cjm, cjt, cja, cjc, cjg, cje, ciw, cil, cig, cjh, chv, chw, chk,
            chs, chr, chn, chu, chg, chh, cgu, cgw, cha, cgy, cgq, cgf, cga, chb,
            cfp, cfq, cee, cfm, cfg, cfk, cez, ced, cey, cfl, cdo, cdv, cdc, cde,
            cdi, cdg, ccy, ccn, cci, cdj, cbx, cby, cbm, cbu, cbt, cbp, cbw, cbi,
            cbj, caw, cay, cbc, cba, cas, cah, cac, cbd) }
        name=31
      ] qa nt nu nv nw nx ny nz oa ob oc mg od oe of og oh oi oj ok ol om on oo op
        oq or os ot ou ov ow ox oy oz pa pb pc pd pe pf pg ph pi pj pk pl pm pn po
      cxp:f32[] cxq:f32[] cxr:f32[64,255,50257] cxs:f16[64,255,1] cxt:f16[64,255,50257]
        cxu:i32[1] cxv:f16[64,256,1600] cxw:f16[1600,50257] cxx:f32[64,256,1600]
        cxy:f32[64,256,1] cxz:f32[1,1,1600] cya:f32[64,256,1] cyb:f32[64,256] cyc:f32[64,256]
        cyd:f32[64,256,1600] cye:f32[64,256,1600] cyf:f16[64,256,6400] cyg:f16[6400,1600]
        cyh:f16[64,256,6400] cyi:f16[64,256,6400] cyj:f16[64,256,6400] cyk:f16[64,256,6400]
        cyl:f16[64,256,6400] cym:f16[64,256,1600] cyn:f16[1600,6400] cyo:f32[64,256,1600]
        cyp:f32[64,256,1] cyq:f32[1,1,1600] cyr:f32[64,256,1] cys:f32[64,256] cyt:f32[64,256]
        cyu:f32[64,256,1600] cyv:f32[64,256,1600] = named_call[
        call_jaxpr={ lambda ; cyw:f16[64,256,1600] cyx:f16[1600] cyy:f16[1600] cyz:f16[6400,1600]
            cza:f16[6400] czb:f16[1600,6400] czc:f16[1600] czd:f16[1600] cze:f16[1600]
            czf:f16[50257,1600] czg:f32[] czh:f16[64,256] czi:f32[]. let
            czj:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] cyw
            czk:f32[64,256] = reduce_sum[axes=(2,)] czj
            czl:f32[64,256] = div czk 1600.0
            czm:f32[64,256,1600] = integer_pow[y=2] czj
            czn:f32[64,256,1600] = integer_pow[y=1] czj
            czo:f32[64,256,1600] = mul 2.0 czn
            czp:f32[64,256] = reduce_sum[axes=(2,)] czm
            czq:f32[64,256] = div czp 1600.0
            czr:f32[64,256] = integer_pow[y=2] czl
            czs:f32[64,256] = integer_pow[y=1] czl
            czt:f32[64,256] = mul 2.0 czs
            czu:f32[64,256] = sub czq czr
            czv:f32[64,256] = max 0.0 czu
            czw:bool[64,256] = eq czu czv
            czx:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            czy:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 0.0
            czz:f32[64,256] = select_n czw czy czx
            daa:bool[64,256] = eq 0.0 czv
            dab:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 2.0
            dac:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            dad:f32[64,256] = select_n daa dac dab
            dae:f32[64,256] = div czz dad
            daf:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] czl
            dag:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] czv
            dah:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] cyw
            dai:f32[64,256,1600] = sub dah daf
            daj:f32[64,256,1] = add dag 9.999999747378752e-06
            dak:f32[64,256,1] = rsqrt daj
            dal:f32[64,256,1] = div dak daj
            dam:f32[64,256,1] = mul -0.5 dal
            dan:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] cyx
            dao:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] dan
            dap:f32[64,256,1600] = mul dak dao
            daq:f32[64,256,1600] = mul dai dap
            dar:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] cyy
            das:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] dar
            dat:f32[64,256,1600] = add daq das
            dau:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] dat
            dav:f16[1600,6400] = transpose[permutation=(1, 0)] cyz
            daw:f16[64,256,6400] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] dau dav
            dax:f16[1,1,6400] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 6400)
            ] cza
            day:f16[64,256,6400] = add daw dax
            daz:f16[64,256,6400] = integer_pow[y=3] day
            dba:f16[64,256,6400] = integer_pow[y=2] day
            dbb:f16[64,256,6400] = mul 3.0 dba
            dbc:f16[64,256,6400] = mul 0.044708251953125 daz
            dbd:f16[64,256,6400] = add day dbc
            dbe:f16[64,256,6400] = mul 0.7978515625 dbd
            dbf:f16[64,256,6400] = tanh dbe
            dbg:f16[64,256,6400] = sub 1.0 dbf
            dbh:f16[64,256,6400] = add 1.0 dbf
            dbi:f16[64,256,6400] = mul 0.5 dbh
            dbj:f16[64,256,6400] = mul day dbi
            dbk:f16[6400,1600] = transpose[permutation=(1, 0)] czb
            dbl:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] dbj dbk
            dbm:f16[1,1,1600] = broadcast_in_dim[
              broadcast_dimensions=(2,)
              shape=(1, 1, 1600)
            ] czc
            dbn:f16[64,256,1600] = add dbl dbm
            dbo:f16[64,256,1600] = add cyw dbn
            dbp:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] dbo
            dbq:f32[64,256] = reduce_sum[axes=(2,)] dbp
            dbr:f32[64,256] = div dbq 1600.0
            dbs:f32[64,256,1600] = integer_pow[y=2] dbp
            dbt:f32[64,256,1600] = integer_pow[y=1] dbp
            dbu:f32[64,256,1600] = mul 2.0 dbt
            dbv:f32[64,256] = reduce_sum[axes=(2,)] dbs
            dbw:f32[64,256] = div dbv 1600.0
            dbx:f32[64,256] = integer_pow[y=2] dbr
            dby:f32[64,256] = integer_pow[y=1] dbr
            dbz:f32[64,256] = mul 2.0 dby
            dca:f32[64,256] = sub dbw dbx
            dcb:f32[64,256] = max 0.0 dca
            dcc:bool[64,256] = eq dca dcb
            dcd:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            dce:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 0.0
            dcf:f32[64,256] = select_n dcc dce dcd
            dcg:bool[64,256] = eq 0.0 dcb
            dch:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 2.0
            dci:f32[64,256] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256)
            ] 1.0
            dcj:f32[64,256] = select_n dcg dci dch
            dck:f32[64,256] = div dcf dcj
            dcl:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] dbr
            dcm:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] dcb
            dcn:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] dbo
            dco:f32[64,256,1600] = sub dcn dcl
            dcp:f32[64,256,1] = add dcm 9.999999747378752e-06
            dcq:f32[64,256,1] = rsqrt dcp
            dcr:f32[64,256,1] = div dcq dcp
            dcs:f32[64,256,1] = mul -0.5 dcr
            dct:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] czd
            dcu:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] dct
            dcv:f32[64,256,1600] = mul dcq dcu
            dcw:f32[64,256,1600] = mul dco dcv
            dcx:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] cze
            dcy:f32[1,1,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] dcx
            dcz:f32[64,256,1600] = add dcw dcy
            dda:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] dcz
            ddb:f16[1600,50257] = transpose[permutation=(1, 0)] czf
            ddc:f16[64,256,50257] = dot_general[
              dimension_numbers=(((2,), (0,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] dda ddb
            ddd:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 0
            dde:f16[64,255,50257] = gather[
              dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1, 2), collapsed_slice_dims=(), start_index_map=(1,))
              fill_value=None
              indices_are_sorted=True
              mode=GatherScatterMode.PROMISE_IN_BOUNDS
              slice_sizes=(64, 255, 50257)
              unique_indices=True
            ] ddc ddd
            ddf:i32[1] = broadcast_in_dim[broadcast_dimensions=() shape=(1,)] 1
            ddg:f16[64,255] = gather[
              dimension_numbers=GatherDimensionNumbers(offset_dims=(0, 1), collapsed_slice_dims=(), start_index_map=(1,))
              fill_value=None
              indices_are_sorted=True
              mode=GatherScatterMode.PROMISE_IN_BOUNDS
              slice_sizes=(64, 255)
              unique_indices=True
            ] czh ddf
            ddh:f16[64,255,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 255, 1)
            ] ddg
            ddi:i32[50257] = iota[dimension=0 dtype=int32 shape=(50257,)] 
            ddj:i32[1,1,50257] = reshape[
              dimensions=None
              new_sizes=(1, 1, 50257)
            ] ddi
            ddk:f16[1,1,50257] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] ddj
            ddl:bool[64,255,50257] = eq ddh ddk
            ddm:f32[64,255,50257] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 255, 50257)
            ] 1.0
            ddn:f32[64,255,50257] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 255, 50257)
            ] 0.0
            ddo:f32[64,255,50257] = select_n ddl ddn ddm
            ddp:f32[64,255,50257] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] ddo
            ddq:f16[64,255] = reduce_max[axes=(2,)] dde
            ddr:f16[64,255,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 255, 1)
            ] ddq
            dds:f16[64,255,1] = stop_gradient ddr
            ddt:f16[64,255,50257] = sub dde dds
            ddu:f16[64,255,50257] = exp ddt
            ddv:f32[64,255,50257] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] ddu
            ddw:f32[64,255] = reduce_sum[axes=(2,)] ddv
            ddx:f32[64,255,1] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 255, 1)
            ] ddw
            ddy:f16[64,255,1] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] ddx
            ddz:f16[64,255,1] = log ddy
            dea:f16[64,255,50257] = sub ddt ddz
            deb:f32[64,255,50257] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] dea
            dec:f32[64,255,50257] = mul ddp deb
            ded:f32[64,255] = reduce_sum[axes=(2,)] dec
            dee:f32[64,255] = neg ded
            def:f32[] = reduce_sum[axes=(0, 1)] dee
            deg:f32[] = div def 16320.0
            deh:f32[] = convert_element_type[new_dtype=float32 weak_type=False] czi
            dei:f32[] = mul deh deg
            dej:f32[] = add czg dei
          in (dej, deh, ddp, ddy, ddu, ddd, dda, ddb, dco, dcq, dcu, dcs, dck, dbz,
            dbu, dcv, dbj, dbk, day, dbg, dbf, dbb, dbi, dau, dav, dai, dak, dao,
            dam, dae, czt, czo, dap) }
        name=32
      ] bsg pp pq pr ps pt pu pv pw px ma py pz
    in (cxp, qb, qc, qd, qe, qf, qg, qh, qi, qj, qk, ql, qm, qn, qo, qp, qq, qr,
      qs, qt, qu, qv, qw, qx, qy, qz, ra, rb, rc, rd, re, rf, rg, rh, ri, rj, rk,
      rl, rm, rn, ro, rp, rq, rr, rs, rt, ru, rv, rw, rx, ry, rz, sa, sb, sc, sd,
      se, sf, sg, sh, si, sj, sk, sl, sm, sn, so, sp, sq, sr, ss, st, su, sv, sw,
      sx, sy, sz, ta, tb, tc, td, te, tf, tg, th, ti, tj, tk, tl, tm, tn, to, tp,
      tq, tr, ts, tt, tu, tv, tw, tx, ty, tz, ua, ub, uc, ud, ue, uf, ug, uh, ui,
      uj, uk, ul, um, un, uo, up, uq, ur, us, ut, uu, uv, uw, ux, uy, uz, va, vb,
      bsh, bsi, bsj, bsk, bsl, bsm, bsn, bso, bsp, bsq, bsr, bss, bst, bsu, bsv,
      bsw, bsx, bsy, bsz, bta, btb, btc, btd, bte, btf, btg, bth, bti, btj, btk,
      btl, btm, btn, bto, btp, btq, btr, bts, btt, btu, btv, btw, btx, bty, btz,
      bua, bub, buc, bud, bue, buf, bug, buh, bui, buj, buk, bul, bum, bun, buo,
      bup, buq, bur, bus, but, buu, buv, buw, bux, buy, buz, bva, bvb, bvc, bvd,
      bve, bvf, bvg, bvh, bvi, bvj, bvk, bvl, bvm, bvn, bvo, bvp, bvq, bvr, bvs,
      bvt, bvu, bvv, bvw, bvx, bvy, bvz, bwa, bwb, bwc, bwd, bwe, bwf, bwg, bwh,
      bwi, bwj, bwk, bwl, bwm, bwn, bwo, bwp, bwq, bwr, bws, bwt, bwu, bwv, bww,
      bwx, bwy, bwz, bxa, bxb, bxc, bxd, bxe, bxf, bxg, bxh, bxi, bxj, bxk, bxl,
      bxm, bxn, bxo, bxp, bxq, bxr, bxs, bxt, bxu, bxv, bxw, bxx, bxy, cxq, cxr,
      cxs, cxt, cxu, cxv, cxw, cxx, cxy, cxz, cya, cyb, cyc, cyd, cye, cyf, cyg,
      cyh, cyi, cyj, cyk, cyl, cym, cyn, cyo, cyp, cyq, cyr, cys, cyt, cyu, cyv) }
  name=3
] dek del dem den deo dep deq der des det deu dev dew dex dey dez dfa dfb dfc dfd
  dfe dff dfg dfh dfi dfj dfk dfl dfm dfn dfo dfp dfq dfr dfs dft dfu dfv dfw dfx
  dfy dfz dga dgb dgc dgd dge dgf dgg dgh dgi dgj dgk dgl dgm dgn dgo dgp dgq dgr
  dgs dgt dgu dgv dgw dgx dgy dgz dha dhb dhc dhd dhe dhf dhg dhh dhi dhj dhk dhl
  dhm dhn dho dhp dhq dhr dhs dht dhu dhv dhw dhx dhy dhz dia dib dic did die dif
  dig dih dii dij
eqn: a:f32[] b:f16[64,256,1600] c:f16[1600,1600] d:f16[64,256,25,64] e:f16[64,25,256,1]
  f:f16[64,25,256,256] g:f16[64,25,256,1] h:f16[64,256,25,64] i:f16[64,256,25,64]
  j:f16[] k:f16[64,25,256,256] l:f16[64,256,1600] m:f16[1600,4800] n:f32[64,256,1600]
  o:f32[64,256,1] p:f32[1,1,1600] q:f32[64,256,1] r:f32[64,256] s:f32[64,256] t:f32[64,256,1600]
  u:f32[64,256,1600] v:f16[64,256,6400] w:f16[6400,1600] x:f16[64,256,6400] y:f16[64,256,6400]
  z:f16[64,256,6400] ba:f16[64,256,6400] bb:f16[64,256,6400] bc:f16[64,256,1600]
  bd:f16[1600,6400] be:f32[64,256,1600] bf:f32[64,256,1] bg:f32[1,1,1600] bh:f32[64,256,1]
  bi:f32[64,256] bj:f32[64,256] bk:f32[64,256,1600] bl:f32[64,256,1600] bm:f16[64,256,1600]
  bn:f16[1600,1600] bo:f16[64,256,25,64] bp:f16[64,25,256,1] bq:f16[64,25,256,256]
  br:f16[64,25,256,1] bs:f16[64,256,25,64] bt:f16[64,256,25,64] bu:f16[] bv:f16[64,25,256,256]
  bw:f16[64,256,1600] bx:f16[1600,4800] by:f32[64,256,1600] bz:f32[64,256,1] ca:f32[1,1,1600]
  cb:f32[64,256,1] cc:f32[64,256] cd:f32[64,256] ce:f32[64,256,1600] cf:f32[64,256,1600]
  cg:f16[64,256,6400] ch:f16[6400,1600] ci:f16[64,256,6400] cj:f16[64,256,6400] ck:f16[64,256,6400]
  cl:f16[64,256,6400] cm:f16[64,256,6400] cn:f16[64,256,1600] co:f16[1600,6400] cp:f32[64,256,1600]
  cq:f32[64,256,1] cr:f32[1,1,1600] cs:f32[64,256,1] ct:f32[64,256] cu:f32[64,256]
  cv:f32[64,256,1600] cw:f32[64,256,1600] cx:f16[64,256,1600] cy:f16[1600,1600] cz:f16[64,256,25,64]
  da:f16[64,25,256,1] db:f16[64,25,256,256] dc:f16[64,25,256,1] dd:f16[64,256,25,64]
  de:f16[64,256,25,64] df:f16[] dg:f16[64,25,256,256] dh:f16[64,256,1600] di:f16[1600,4800]
  dj:f32[64,256,1600] dk:f32[64,256,1] dl:f32[1,1,1600] dm:f32[64,256,1] dn:f32[64,256]
  do:f32[64,256] dp:f32[64,256,1600] dq:f32[64,256,1600] dr:f16[64,256,6400] ds:f16[6400,1600]
  dt:f16[64,256,6400] du:f16[64,256,6400] dv:f16[64,256,6400] dw:f16[64,256,6400]
  dx:f16[64,256,6400] dy:f16[64,256,1600] dz:f16[1600,6400] ea:f32[64,256,1600] eb:f32[64,256,1]
  ec:f32[1,1,1600] ed:f32[64,256,1] ee:f32[64,256] ef:f32[64,256] eg:f32[64,256,1600]
  eh:f32[64,256,1600] ei:f16[64,256,1600] ej:f16[1600,1600] ek:f16[64,256,25,64]
  el:f16[64,25,256,1] em:f16[64,25,256,256] en:f16[64,25,256,1] eo:f16[64,256,25,64]
  ep:f16[64,256,25,64] eq:f16[] er:f16[64,25,256,256] es:f16[64,256,1600] et:f16[1600,4800]
  eu:f32[64,256,1600] ev:f32[64,256,1] ew:f32[1,1,1600] ex:f32[64,256,1] ey:f32[64,256]
  ez:f32[64,256] fa:f32[64,256,1600] fb:f32[64,256,1600] fc:f16[64,256,1600] fd:f16[1600,1600]
  fe:f16[64,256,25,64] ff:f16[64,25,256,1] fg:f16[64,25,256,256] fh:f16[64,25,256,1]
  fi:f16[64,256,25,64] fj:f16[64,256,25,64] fk:f16[] fl:f16[64,25,256,256] fm:f16[64,256,1600]
  fn:f16[1600,4800] fo:f32[64,256,1600] fp:f32[64,256,1] fq:f32[1,1,1600] fr:f32[64,256,1]
  fs:f32[64,256] ft:f32[64,256] fu:f32[64,256,1600] fv:f32[64,256,1600] fw:f16[64,256,6400]
  fx:f16[6400,1600] fy:f16[64,256,6400] fz:f16[64,256,6400] ga:f16[64,256,6400] gb:f16[64,256,6400]
  gc:f16[64,256,6400] gd:f16[64,256,1600] ge:f16[1600,6400] gf:f32[64,256,1600] gg:f32[64,256,1]
  gh:f32[1,1,1600] gi:f32[64,256,1] gj:f32[64,256] gk:f32[64,256] gl:f32[64,256,1600]
  gm:f32[64,256,1600] gn:f16[64,256,1600] go:f16[1600,1600] gp:f16[64,256,25,64]
  gq:f16[64,25,256,1] gr:f16[64,25,256,256] gs:f16[64,25,256,1] gt:f16[64,256,25,64]
  gu:f16[64,256,25,64] gv:f16[] gw:f16[64,25,256,256] gx:f16[64,256,1600] gy:f16[1600,4800]
  gz:f32[64,256,1600] ha:f32[64,256,1] hb:f32[1,1,1600] hc:f32[64,256,1] hd:f32[64,256]
  he:f32[64,256] hf:f32[64,256,1600] hg:f32[64,256,1600] hh:f16[64,256,6400] hi:f16[6400,1600]
  hj:f16[64,256,6400] hk:f16[64,256,6400] hl:f16[64,256,6400] hm:f16[64,256,6400]
  hn:f16[64,256,6400] ho:f16[64,256,1600] hp:f16[1600,6400] hq:f32[64,256,1600] hr:f32[64,256,1]
  hs:f32[1,1,1600] ht:f32[64,256,1] hu:f32[64,256] hv:f32[64,256] hw:f32[64,256,1600]
  hx:f32[64,256,1600] hy:f16[64,256,1600] hz:f16[1600,1600] ia:f16[64,256,25,64]
  ib:f16[64,25,256,1] ic:f16[64,25,256,256] id:f16[64,25,256,1] ie:f16[64,256,25,64]
  if:f16[64,256,25,64] ig:f16[] ih:f16[64,25,256,256] ii:f16[64,256,1600] ij:f16[1600,4800]
  ik:f32[64,256,1600] il:f32[64,256,1] im:f32[1,1,1600] in:f32[64,256,1] io:f32[64,256]
  ip:f32[64,256] iq:f32[64,256,1600] ir:f32[64,256,1600] is:f16[64,256,6400] it:f16[6400,1600]
  iu:f16[64,256,6400] iv:f16[64,256,6400] iw:f16[64,256,6400] ix:f16[64,256,6400]
  iy:f16[64,256,6400] iz:f16[64,256,1600] ja:f16[1600,6400] jb:f32[64,256,1600] jc:f32[64,256,1]
  jd:f32[1,1,1600] je:f32[64,256,1] jf:f32[64,256] jg:f32[64,256] jh:f32[64,256,1600]
  ji:f32[64,256,1600] jj:f16[64,256,1600] jk:f16[1600,1600] jl:f16[64,256,25,64]
  jm:f16[64,25,256,1] jn:f16[64,25,256,256] jo:f16[64,25,256,1] jp:f16[64,256,25,64]
  jq:f16[64,256,25,64] jr:f16[] js:f16[64,25,256,256] jt:f16[64,256,1600] ju:f16[1600,4800]
  jv:f32[64,256,1600] jw:f32[64,256,1] jx:f32[1,1,1600] jy:f32[64,256,1] jz:f32[64,256]
  ka:f32[64,256] kb:f32[64,256,1600] kc:f32[64,256,1600] kd:f16[64,256,6400] ke:f16[6400,1600]
  kf:f16[64,256,6400] kg:f16[64,256,6400] kh:f16[64,256,6400] ki:f16[64,256,6400]
  kj:f16[64,256,6400] kk:f16[64,256,1600] kl:f16[1600,6400] km:f32[64,256,1600] kn:f32[64,256,1]
  ko:f32[1,1,1600] kp:f32[64,256,1] kq:f32[64,256] kr:f32[64,256] ks:f32[64,256,1600]
  kt:f32[64,256,1600] ku:f32[] kv:f32[64,255,50257] kw:f16[64,255,1] kx:f16[64,255,50257]
  ky:i32[1] kz:f16[64,256,1600] la:f16[1600,50257] lb:f32[64,256,1600] lc:f32[64,256,1]
  ld:f32[1,1,1600] le:f32[64,256,1] lf:f32[64,256] lg:f32[64,256] lh:f32[64,256,1600]
  li:f32[64,256,1600] lj:f16[64,256,6400] lk:f16[6400,1600] ll:f16[64,256,6400] lm:f16[64,256,6400]
  ln:f16[64,256,6400] lo:f16[64,256,6400] lp:f16[64,256,6400] lq:f16[64,256,1600]
  lr:f16[1600,6400] ls:f32[64,256,1600] lt:f32[64,256,1] lu:f32[1,1,1600] lv:f32[64,256,1]
  lw:f32[64,256] lx:f32[64,256] ly:f32[64,256,1600] lz:f32[64,256,1600] = pipeline_marker[
  mark_type=end
  name=3
] ma mb mc md me mf mg mh mi mj mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na
  nb nc nd ne nf ng nh ni nj nk nl nm nn no np nq nr ns nt nu nv nw nx ny nz oa ob
  oc od oe of og oh oi oj ok ol om on oo op oq or os ot ou ov ow ox oy oz pa pb pc
  pd pe pf pg ph pi pj pk pl pm pn po pp pq pr ps pt pu pv pw px py pz qa qb qc qd
  qe qf qg qh qi qj qk ql qm qn qo qp qq qr qs qt qu qv qw qx qy qz ra rb rc rd re
  rf rg rh ri rj rk rl rm rn ro rp rq rr rs rt ru rv rw rx ry rz sa sb sc sd se sf
  sg sh si sj sk sl sm sn so sp sq sr ss st su sv sw sx sy sz ta tb tc td te tf tg
  th ti tj tk tl tm tn to tp tq tr ts tt tu tv tw tx ty tz ua ub uc ud ue uf ug uh
  ui uj uk ul um un uo up uq ur us ut uu uv uw ux uy uz va vb vc vd ve vf vg vh vi
  vj vk vl vm vn vo vp vq vr vs vt vu vv vw vx vy vz wa wb wc wd we wf wg wh wi wj
  wk wl wm wn wo wp wq wr ws wt wu wv ww wx wy wz xa xb xc xd xe xf xg xh xi xj xk
  xl xm xn xo xp xq xr xs xt xu xv xw xx xy xz
input_var_mem_size
[clga, nnk, qk, qj, qg, qf, dwu, qi, qh, qm, ql, qo, qn, qq, qp, qw, qv, qs, qr, qu, qt, qy, qx, ra, qz, rc, rb, ri, rh, re, rd, rg, rf, rk, rj, rm, rl, ro, rn, ru, rt, rq, rp, rs, rr, rw, rv, ry, rx, sa, rz, sg, sf, sc, sb, se, sd, si, sh, sk, sj, sm, sl, ss, sr, so, sn, sq, sp, su, st, sw, sv, sy, sx, te, td, ta, sz, tc, tb, tg, tf, ti, th, tk, tj, tq, tp, tm, tl, to, tn, ts, tr, tu, tt, tw, tv, wg, wf, wi, dln, dlk]
[(), (64, 256, 1600), (1600,), (1600,), (4800, 1600), (4800,), (64, 256), (1600, 1600), (1600,), (1600,), (1600,), (6400, 1600), (6400,), (1600, 6400), (1600,), (1600,), (1600,), (4800, 1600), (4800,), (1600, 1600), (1600,), (1600,), (1600,), (6400, 1600), (6400,), (1600, 6400), (1600,), (1600,), (1600,), (4800, 1600), (4800,), (1600, 1600), (1600,), (1600,), (1600,), (6400, 1600), (6400,), (1600, 6400), (1600,), (1600,), (1600,), (4800, 1600), (4800,), (1600, 1600), (1600,), (1600,), (1600,), (6400, 1600), (6400,), (1600, 6400), (1600,), (1600,), (1600,), (4800, 1600), (4800,), (1600, 1600), (1600,), (1600,), (1600,), (6400, 1600), (6400,), (1600, 6400), (1600,), (1600,), (1600,), (4800, 1600), (4800,), (1600, 1600), (1600,), (1600,), (1600,), (6400, 1600), (6400,), (1600, 6400), (1600,), (1600,), (1600,), (4800, 1600), (4800,), (1600, 1600), (1600,), (1600,), (1600,), (6400, 1600), (6400,), (1600, 6400), (1600,), (1600,), (1600,), (4800, 1600), (4800,), (1600, 1600), (1600,), (1600,), (1600,), (6400, 1600), (6400,), (1600, 6400), (1600,), (1600,), (1600,), (50257, 1600), (64, 256), ()]
param_size: 0.3283731359988451 [GiB] 
jaxpr.eqns, len: 3
eqn: a:f16[50257,1600] b:f16[1600] c:f16[1600] d:f16[1600] e:f16[1600,6400] f:f16[6400]
  g:f16[6400,1600] h:f16[1600] i:f16[1600] j:f16[1600] k:f16[1600,1600] l:f16[4800]
  m:f16[4800,1600] n:f16[1600] o:f16[1600] p:f16[1600] q:f16[1600,6400] r:f16[6400]
  s:f16[6400,1600] t:f16[1600] u:f16[1600] v:f16[1600] w:f16[1600,1600] x:f16[4800]
  y:f16[4800,1600] z:f16[1600] ba:f16[1600] bb:f16[1600] bc:f16[1600,6400] bd:f16[6400]
  be:f16[6400,1600] bf:f16[1600] bg:f16[1600] bh:f16[1600] bi:f16[1600,1600] bj:f16[4800]
  bk:f16[4800,1600] bl:f16[1600] bm:f16[1600] bn:f16[1600] bo:f16[1600,6400] bp:f16[6400]
  bq:f16[6400,1600] br:f16[1600] bs:f16[1600] bt:f16[1600] bu:f16[1600,1600] bv:f16[4800]
  bw:f16[4800,1600] bx:f16[1600] by:f16[1600] bz:f16[1600] ca:f16[1600,6400] cb:f16[6400]
  cc:f16[6400,1600] cd:f16[1600] ce:f16[1600] cf:f16[1600] cg:f16[1600,1600] ch:f16[4800]
  ci:f16[4800,1600] cj:f16[1600] ck:f16[1600] cl:f16[1600] cm:f16[1600,6400] cn:f16[6400]
  co:f16[6400,1600] cp:f16[1600] cq:f16[1600] cr:f16[1600] cs:f16[1600,1600] ct:f16[4800]
  cu:f16[4800,1600] cv:f16[1600] cw:f16[1600] cx:f16[1600] cy:f16[1600,6400] cz:f16[6400]
  da:f16[6400,1600] db:f16[1600] dc:f16[1600] dd:f16[1600] de:f16[1600,1600] df:f16[4800]
  dg:f16[4800,1600] dh:f16[1600] di:f16[1600] dj:f16[1600] dk:f16[1600,6400] dl:f16[6400]
  dm:f16[6400,1600] dn:f16[1600] do:f16[1600] dp:f16[1600] dq:f16[1600,1600] dr:f16[4800]
  ds:f16[4800,1600] dt:f16[1600] du:f16[1600] dv:f32[] dw:f32[64,255,50257] dx:f16[64,255,1]
  dy:f16[64,255,50257] dz:i32[1] ea:f16[64,256,1600] eb:f16[1600,50257] ec:f32[64,256,1600]
  ed:f32[64,256,1] ee:f32[1,1,1600] ef:f32[64,256,1] eg:f32[64,256] eh:f32[64,256]
  ei:f32[64,256,1600] ej:f32[64,256,1600] ek:f16[64,256,6400] el:f16[6400,1600] em:f16[64,256,6400]
  en:f16[64,256,6400] eo:f16[64,256,6400] ep:f16[64,256,6400] eq:f16[64,256,6400]
  er:f16[64,256,1600] es:f16[1600,6400] et:f32[64,256,1600] eu:f32[64,256,1] ev:f32[1,1,1600]
  ew:f32[64,256,1] ex:f32[64,256] ey:f32[64,256] ez:f32[64,256,1600] fa:f32[64,256,1600]
  fb:f16[64,256,1600] fc:f16[1600,1600] fd:f16[64,256,25,64] fe:f16[64,25,256,1]
  ff:f16[64,25,256,256] fg:f16[64,25,256,1] fh:f16[64,256,25,64] fi:f16[64,256,25,64]
  fj:f16[] fk:f16[64,25,256,256] fl:f16[64,256,1600] fm:f16[1600,4800] fn:f32[64,256,1600]
  fo:f32[64,256,1] fp:f32[1,1,1600] fq:f32[64,256,1] fr:f32[64,256] fs:f32[64,256]
  ft:f32[64,256,1600] fu:f32[64,256,1600] fv:f16[64,256,6400] fw:f16[6400,1600] fx:f16[64,256,6400]
  fy:f16[64,256,6400] fz:f16[64,256,6400] ga:f16[64,256,6400] gb:f16[64,256,6400]
  gc:f16[64,256,1600] gd:f16[1600,6400] ge:f32[64,256,1600] gf:f32[64,256,1] gg:f32[1,1,1600]
  gh:f32[64,256,1] gi:f32[64,256] gj:f32[64,256] gk:f32[64,256,1600] gl:f32[64,256,1600]
  gm:f16[64,256,1600] gn:f16[1600,1600] go:f16[64,256,25,64] gp:f16[64,25,256,1]
  gq:f16[64,25,256,256] gr:f16[64,25,256,1] gs:f16[64,256,25,64] gt:f16[64,256,25,64]
  gu:f16[] gv:f16[64,25,256,256] gw:f16[64,256,1600] gx:f16[1600,4800] gy:f32[64,256,1600]
  gz:f32[64,256,1] ha:f32[1,1,1600] hb:f32[64,256,1] hc:f32[64,256] hd:f32[64,256]
  he:f32[64,256,1600] hf:f32[64,256,1600] hg:f16[64,256,6400] hh:f16[6400,1600] hi:f16[64,256,6400]
  hj:f16[64,256,6400] hk:f16[64,256,6400] hl:f16[64,256,6400] hm:f16[64,256,6400]
  hn:f16[64,256,1600] ho:f16[1600,6400] hp:f32[64,256,1600] hq:f32[64,256,1] hr:f32[1,1,1600]
  hs:f32[64,256,1] ht:f32[64,256] hu:f32[64,256] hv:f32[64,256,1600] hw:f32[64,256,1600]
  hx:f16[64,256,1600] hy:f16[1600,1600] hz:f16[64,256,25,64] ia:f16[64,25,256,1]
  ib:f16[64,25,256,256] ic:f16[64,25,256,1] id:f16[64,256,25,64] ie:f16[64,256,25,64]
  if:f16[] ig:f16[64,25,256,256] ih:f16[64,256,1600] ii:f16[1600,4800] ij:f32[64,256,1600]
  ik:f32[64,256,1] il:f32[1,1,1600] im:f32[64,256,1] in:f32[64,256] io:f32[64,256]
  ip:f32[64,256,1600] iq:f32[64,256,1600] ir:f16[64,256,6400] is:f16[6400,1600] it:f16[64,256,6400]
  iu:f16[64,256,6400] iv:f16[64,256,6400] iw:f16[64,256,6400] ix:f16[64,256,6400]
  iy:f16[64,256,1600] iz:f16[1600,6400] ja:f32[64,256,1600] jb:f32[64,256,1] jc:f32[1,1,1600]
  jd:f32[64,256,1] je:f32[64,256] jf:f32[64,256] jg:f32[64,256,1600] jh:f32[64,256,1600]
  ji:f16[64,256,1600] jj:f16[1600,1600] jk:f16[64,256,25,64] jl:f16[64,25,256,1]
  jm:f16[64,25,256,256] jn:f16[64,25,256,1] jo:f16[64,256,25,64] jp:f16[64,256,25,64]
  jq:f16[] jr:f16[64,25,256,256] js:f16[64,256,1600] jt:f16[1600,4800] ju:f32[64,256,1600]
  jv:f32[64,256,1] jw:f32[1,1,1600] jx:f32[64,256,1] jy:f32[64,256] jz:f32[64,256]
  ka:f32[64,256,1600] kb:f32[64,256,1600] kc:f16[64,256,6400] kd:f16[6400,1600] ke:f16[64,256,6400]
  kf:f16[64,256,6400] kg:f16[64,256,6400] kh:f16[64,256,6400] ki:f16[64,256,6400]
  kj:f16[64,256,1600] kk:f16[1600,6400] kl:f32[64,256,1600] km:f32[64,256,1] kn:f32[1,1,1600]
  ko:f32[64,256,1] kp:f32[64,256] kq:f32[64,256] kr:f32[64,256,1600] ks:f32[64,256,1600]
  kt:f16[64,256,1600] ku:f16[1600,1600] kv:f16[64,256,25,64] kw:f16[64,25,256,1]
  kx:f16[64,25,256,256] ky:f16[64,25,256,1] kz:f16[64,256,25,64] la:f16[64,256,25,64]
  lb:f16[] lc:f16[64,25,256,256] ld:f16[64,256,1600] le:f16[1600,4800] lf:f32[64,256,1600]
  lg:f32[64,256,1] lh:f32[1,1,1600] li:f32[64,256,1] lj:f32[64,256] lk:f32[64,256]
  ll:f32[64,256,1600] lm:f32[64,256,1600] ln:f16[64,256,6400] lo:f16[6400,1600] lp:f16[64,256,6400]
  lq:f16[64,256,6400] lr:f16[64,256,6400] ls:f16[64,256,6400] lt:f16[64,256,6400]
  lu:f16[64,256,1600] lv:f16[1600,6400] lw:f32[64,256,1600] lx:f32[64,256,1] ly:f32[1,1,1600]
  lz:f32[64,256,1] ma:f32[64,256] mb:f32[64,256] mc:f32[64,256,1600] md:f32[64,256,1600]
  me:f16[64,256,1600] mf:f16[1600,1600] mg:f16[64,256,25,64] mh:f16[64,25,256,1]
  mi:f16[64,25,256,256] mj:f16[64,25,256,1] mk:f16[64,256,25,64] ml:f16[64,256,25,64]
  mm:f16[] mn:f16[64,25,256,256] mo:f16[64,256,1600] mp:f16[1600,4800] mq:f32[64,256,1600]
  mr:f32[64,256,1] ms:f32[1,1,1600] mt:f32[64,256,1] mu:f32[64,256] mv:f32[64,256]
  mw:f32[64,256,1600] mx:f32[64,256,1600] my:f16[64,256,6400] mz:f16[6400,1600] na:f16[64,256,6400]
  nb:f16[64,256,6400] nc:f16[64,256,6400] nd:f16[64,256,6400] ne:f16[64,256,6400]
  nf:f16[64,256,1600] ng:f16[1600,6400] nh:f32[64,256,1600] ni:f32[64,256,1] nj:f32[1,1,1600]
  nk:f32[64,256,1] nl:f32[64,256] nm:f32[64,256] nn:f32[64,256,1600] no:f32[64,256,1600]
  np:f16[64,256,1600] nq:f16[1600,1600] nr:f16[64,256,25,64] ns:f16[64,25,256,1]
  nt:f16[64,25,256,256] nu:f16[64,25,256,1] nv:f16[64,256,25,64] nw:f16[64,256,25,64]
  nx:f16[] ny:f16[64,25,256,256] nz:f16[64,256,1600] oa:f16[1600,4800] ob:f32[64,256,1600]
  oc:f32[64,256,1] od:f32[1,1,1600] oe:f32[64,256,1] of:f32[64,256] og:f32[64,256]
  oh:f32[64,256,1600] oi:f32[64,256,1600] oj:f16[64,256,6400] ok:f16[6400,1600] ol:f16[64,256,6400]
  om:f16[64,256,6400] on:f16[64,256,6400] oo:f16[64,256,6400] op:f16[64,256,6400]
  oq:f16[64,256,1600] or:f16[1600,6400] os:f32[64,256,1600] ot:f32[64,256,1] ou:f32[1,1,1600]
  ov:f32[64,256,1] ow:f32[64,256] ox:f32[64,256] oy:f32[64,256,1600] oz:f32[64,256,1600]
  pa:f16[64,256,1600] pb:f16[1600,1600] pc:f16[64,256,25,64] pd:f16[64,25,256,1]
  pe:f16[64,25,256,256] pf:f16[64,25,256,1] pg:f16[64,256,25,64] ph:f16[64,256,25,64]
  pi:f16[] pj:f16[64,25,256,256] pk:f16[64,256,1600] pl:f16[1600,4800] pm:f32[64,256,1600]
  pn:f32[64,256,1] po:f32[1,1,1600] pp:f32[64,256,1] pq:f32[64,256] pr:f32[64,256]
  ps:f32[64,256,1600] pt:f32[64,256,1600] = pipeline_marker[
  mark_type=start
  name=4
] pu pv pw px py pz qa qb qc qd qe qf qg qh qi qj qk ql qm qn qo qp qq qr qs qt qu
  qv qw qx qy qz ra rb rc rd re rf rg rh ri rj rk rl rm rn ro rp rq rr rs rt ru rv
  rw rx ry rz sa sb sc sd se sf sg sh si sj sk sl sm sn so sp sq sr ss st su sv sw
  sx sy sz ta tb tc td te tf tg th ti tj tk tl tm tn to tp tq tr ts tt tu tv tw tx
  ty tz ua ub uc ud ue uf ug uh ui uj uk ul um un uo up uq ur us ut uu uv uw ux uy
  uz va vb vc vd ve vf vg vh vi vj vk vl vm vn vo vp vq vr vs vt vu vv vw vx vy vz
  wa wb wc wd we wf wg wh wi wj wk wl wm wn wo wp wq wr ws wt wu wv ww wx wy wz xa
  xb xc xd xe xf xg xh xi xj xk xl xm xn xo xp xq xr xs xt xu xv xw xx xy xz ya yb
  yc yd ye yf yg yh yi yj yk yl ym yn yo yp yq yr ys yt yu yv yw yx yy yz za zb zc
  zd ze zf zg zh zi zj zk zl zm zn zo zp zq zr zs zt zu zv zw zx zy zz baa bab bac
  bad bae baf bag bah bai baj bak bal bam ban bao bap baq bar bas bat bau bav baw
  bax bay baz bba bbb bbc bbd bbe bbf bbg bbh bbi bbj bbk bbl bbm bbn bbo bbp bbq
  bbr bbs bbt bbu bbv bbw bbx bby bbz bca bcb bcc bcd bce bcf bcg bch bci bcj bck
  bcl bcm bcn bco bcp bcq bcr bcs bct bcu bcv bcw bcx bcy bcz bda bdb bdc bdd bde
  bdf bdg bdh bdi bdj bdk bdl bdm bdn bdo bdp bdq bdr bds bdt bdu bdv bdw bdx bdy
  bdz bea beb bec bed bee bef beg beh bei bej bek bel bem ben beo bep beq ber bes
  bet beu bev bew bex bey bez bfa bfb bfc bfd bfe bff bfg bfh bfi bfj bfk bfl bfm
  bfn
eqn: a:f16[50257,1600] b:f16[1600] c:f16[1600] d:f16[1600] e:f16[1600,6400] f:f16[6400]
  g:f16[6400,1600] h:f16[1600] i:f16[1600] j:f16[1600] k:f16[1600,1600] l:f16[4800]
  m:f16[4800,1600] n:f16[1600] o:f16[1600] p:f16[1600] q:f16[1600,6400] r:f16[6400]
  s:f16[6400,1600] t:f16[1600] u:f16[1600] v:f16[1600] w:f16[1600,1600] x:f16[4800]
  y:f16[4800,1600] z:f16[1600] ba:f16[1600] bb:f16[1600] bc:f16[1600,6400] bd:f16[6400]
  be:f16[6400,1600] bf:f16[1600] bg:f16[1600] bh:f16[1600] bi:f16[1600,1600] bj:f16[4800]
  bk:f16[4800,1600] bl:f16[1600] bm:f16[1600] bn:f16[1600] bo:f16[1600,6400] bp:f16[6400]
  bq:f16[6400,1600] br:f16[1600] bs:f16[1600] bt:f16[1600] bu:f16[1600,1600] bv:f16[4800]
  bw:f16[4800,1600] bx:f16[1600] by:f16[1600] bz:f16[1600] ca:f16[1600,6400] cb:f16[6400]
  cc:f16[6400,1600] cd:f16[1600] ce:f16[1600] cf:f16[1600] cg:f16[1600,1600] ch:f16[4800]
  ci:f16[4800,1600] cj:f16[1600] ck:f16[1600] cl:f16[1600] cm:f16[1600,6400] cn:f16[6400]
  co:f16[6400,1600] cp:f16[1600] cq:f16[1600] cr:f16[1600] cs:f16[1600,1600] ct:f16[4800]
  cu:f16[4800,1600] cv:f16[1600] cw:f16[1600] cx:f16[1600] cy:f16[1600,6400] cz:f16[6400]
  da:f16[6400,1600] db:f16[1600] dc:f16[1600] dd:f16[1600] de:f16[1600,1600] df:f16[4800]
  dg:f16[4800,1600] dh:f16[1600] di:f16[1600] dj:f16[1600] dk:f16[1600,6400] dl:f16[6400]
  dm:f16[6400,1600] dn:f16[1600] do:f16[1600] dp:f16[1600] dq:f16[1600,1600] dr:f16[4800]
  ds:f16[4800,1600] dt:f16[1600] du:f16[1600] dv:f16[64,256,1600] = named_call[
  call_jaxpr={ lambda ; dw:f16[50257,1600] dx:f16[1600] dy:f16[1600] dz:f16[1600]
      ea:f16[1600,6400] eb:f16[6400] ec:f16[6400,1600] ed:f16[1600] ee:f16[1600]
      ef:f16[1600] eg:f16[1600,1600] eh:f16[4800] ei:f16[4800,1600] ej:f16[1600]
      ek:f16[1600] el:f16[1600] em:f16[1600,6400] en:f16[6400] eo:f16[6400,1600]
      ep:f16[1600] eq:f16[1600] er:f16[1600] es:f16[1600,1600] et:f16[4800] eu:f16[4800,1600]
      ev:f16[1600] ew:f16[1600] ex:f16[1600] ey:f16[1600,6400] ez:f16[6400] fa:f16[6400,1600]
      fb:f16[1600] fc:f16[1600] fd:f16[1600] fe:f16[1600,1600] ff:f16[4800] fg:f16[4800,1600]
      fh:f16[1600] fi:f16[1600] fj:f16[1600] fk:f16[1600,6400] fl:f16[6400] fm:f16[6400,1600]
      fn:f16[1600] fo:f16[1600] fp:f16[1600] fq:f16[1600,1600] fr:f16[4800] fs:f16[4800,1600]
      ft:f16[1600] fu:f16[1600] fv:f16[1600] fw:f16[1600,6400] fx:f16[6400] fy:f16[6400,1600]
      fz:f16[1600] ga:f16[1600] gb:f16[1600] gc:f16[1600,1600] gd:f16[4800] ge:f16[4800,1600]
      gf:f16[1600] gg:f16[1600] gh:f16[1600] gi:f16[1600,6400] gj:f16[6400] gk:f16[6400,1600]
      gl:f16[1600] gm:f16[1600] gn:f16[1600] go:f16[1600,1600] gp:f16[4800] gq:f16[4800,1600]
      gr:f16[1600] gs:f16[1600] gt:f16[1600] gu:f16[1600,6400] gv:f16[6400] gw:f16[6400,1600]
      gx:f16[1600] gy:f16[1600] gz:f16[1600] ha:f16[1600,1600] hb:f16[4800] hc:f16[4800,1600]
      hd:f16[1600] he:f16[1600] hf:f16[1600] hg:f16[1600,6400] hh:f16[6400] hi:f16[6400,1600]
      hj:f16[1600] hk:f16[1600] hl:f16[1600] hm:f16[1600,1600] hn:f16[4800] ho:f16[4800,1600]
      hp:f16[1600] hq:f16[1600] hr:f32[] hs:f32[64,255,50257] ht:f16[64,255,1] hu:f16[64,255,50257]
      hv:i32[1] hw:f16[64,256,1600] hx:f16[1600,50257] hy:f32[64,256,1600] hz:f32[64,256,1]
      ia:f32[1,1,1600] ib:f32[64,256,1] ic:f32[64,256] id:f32[64,256] ie:f32[64,256,1600]
      if:f32[64,256,1600] ig:f16[64,256,6400] ih:f16[6400,1600] ii:f16[64,256,6400]
      ij:f16[64,256,6400] ik:f16[64,256,6400] il:f16[64,256,6400] im:f16[64,256,6400]
      in:f16[64,256,1600] io:f16[1600,6400] ip:f32[64,256,1600] iq:f32[64,256,1]
      ir:f32[1,1,1600] is:f32[64,256,1] it:f32[64,256] iu:f32[64,256] iv:f32[64,256,1600]
      iw:f32[64,256,1600] ix:f16[64,256,1600] iy:f16[1600,1600] iz:f16[64,256,25,64]
      ja:f16[64,25,256,1] jb:f16[64,25,256,256] jc:f16[64,25,256,1] jd:f16[64,256,25,64]
      je:f16[64,256,25,64] jf:f16[] jg:f16[64,25,256,256] jh:f16[64,256,1600] ji:f16[1600,4800]
      jj:f32[64,256,1600] jk:f32[64,256,1] jl:f32[1,1,1600] jm:f32[64,256,1] jn:f32[64,256]
      jo:f32[64,256] jp:f32[64,256,1600] jq:f32[64,256,1600] jr:f16[64,256,6400]
      js:f16[6400,1600] jt:f16[64,256,6400] ju:f16[64,256,6400] jv:f16[64,256,6400]
      jw:f16[64,256,6400] jx:f16[64,256,6400] jy:f16[64,256,1600] jz:f16[1600,6400]
      ka:f32[64,256,1600] kb:f32[64,256,1] kc:f32[1,1,1600] kd:f32[64,256,1] ke:f32[64,256]
      kf:f32[64,256] kg:f32[64,256,1600] kh:f32[64,256,1600] ki:f16[64,256,1600]
      kj:f16[1600,1600] kk:f16[64,256,25,64] kl:f16[64,25,256,1] km:f16[64,25,256,256]
      kn:f16[64,25,256,1] ko:f16[64,256,25,64] kp:f16[64,256,25,64] kq:f16[] kr:f16[64,25,256,256]
      ks:f16[64,256,1600] kt:f16[1600,4800] ku:f32[64,256,1600] kv:f32[64,256,1]
      kw:f32[1,1,1600] kx:f32[64,256,1] ky:f32[64,256] kz:f32[64,256] la:f32[64,256,1600]
      lb:f32[64,256,1600] lc:f16[64,256,6400] ld:f16[6400,1600] le:f16[64,256,6400]
      lf:f16[64,256,6400] lg:f16[64,256,6400] lh:f16[64,256,6400] li:f16[64,256,6400]
      lj:f16[64,256,1600] lk:f16[1600,6400] ll:f32[64,256,1600] lm:f32[64,256,1]
      ln:f32[1,1,1600] lo:f32[64,256,1] lp:f32[64,256] lq:f32[64,256] lr:f32[64,256,1600]
      ls:f32[64,256,1600] lt:f16[64,256,1600] lu:f16[1600,1600] lv:f16[64,256,25,64]
      lw:f16[64,25,256,1] lx:f16[64,25,256,256] ly:f16[64,25,256,1] lz:f16[64,256,25,64]
      ma:f16[64,256,25,64] mb:f16[] mc:f16[64,25,256,256] md:f16[64,256,1600] me:f16[1600,4800]
      mf:f32[64,256,1600] mg:f32[64,256,1] mh:f32[1,1,1600] mi:f32[64,256,1] mj:f32[64,256]
      mk:f32[64,256] ml:f32[64,256,1600] mm:f32[64,256,1600] mn:f16[64,256,6400]
      mo:f16[6400,1600] mp:f16[64,256,6400] mq:f16[64,256,6400] mr:f16[64,256,6400]
      ms:f16[64,256,6400] mt:f16[64,256,6400] mu:f16[64,256,1600] mv:f16[1600,6400]
      mw:f32[64,256,1600] mx:f32[64,256,1] my:f32[1,1,1600] mz:f32[64,256,1] na:f32[64,256]
      nb:f32[64,256] nc:f32[64,256,1600] nd:f32[64,256,1600] ne:f16[64,256,1600]
      nf:f16[1600,1600] ng:f16[64,256,25,64] nh:f16[64,25,256,1] ni:f16[64,25,256,256]
      nj:f16[64,25,256,1] nk:f16[64,256,25,64] nl:f16[64,256,25,64] nm:f16[] nn:f16[64,25,256,256]
      no:f16[64,256,1600] np:f16[1600,4800] nq:f32[64,256,1600] nr:f32[64,256,1]
      ns:f32[1,1,1600] nt:f32[64,256,1] nu:f32[64,256] nv:f32[64,256] nw:f32[64,256,1600]
      nx:f32[64,256,1600] ny:f16[64,256,6400] nz:f16[6400,1600] oa:f16[64,256,6400]
      ob:f16[64,256,6400] oc:f16[64,256,6400] od:f16[64,256,6400] oe:f16[64,256,6400]
      of:f16[64,256,1600] og:f16[1600,6400] oh:f32[64,256,1600] oi:f32[64,256,1]
      oj:f32[1,1,1600] ok:f32[64,256,1] ol:f32[64,256] om:f32[64,256] on:f32[64,256,1600]
      oo:f32[64,256,1600] op:f16[64,256,1600] oq:f16[1600,1600] or:f16[64,256,25,64]
      os:f16[64,25,256,1] ot:f16[64,25,256,256] ou:f16[64,25,256,1] ov:f16[64,256,25,64]
      ow:f16[64,256,25,64] ox:f16[] oy:f16[64,25,256,256] oz:f16[64,256,1600] pa:f16[1600,4800]
      pb:f32[64,256,1600] pc:f32[64,256,1] pd:f32[1,1,1600] pe:f32[64,256,1] pf:f32[64,256]
      pg:f32[64,256] ph:f32[64,256,1600] pi:f32[64,256,1600] pj:f16[64,256,6400]
      pk:f16[6400,1600] pl:f16[64,256,6400] pm:f16[64,256,6400] pn:f16[64,256,6400]
      po:f16[64,256,6400] pp:f16[64,256,6400] pq:f16[64,256,1600] pr:f16[1600,6400]
      ps:f32[64,256,1600] pt:f32[64,256,1] pu:f32[1,1,1600] pv:f32[64,256,1] pw:f32[64,256]
      px:f32[64,256] py:f32[64,256,1600] pz:f32[64,256,1600] qa:f16[64,256,1600]
      qb:f16[1600,1600] qc:f16[64,256,25,64] qd:f16[64,25,256,1] qe:f16[64,25,256,256]
      qf:f16[64,25,256,1] qg:f16[64,256,25,64] qh:f16[64,256,25,64] qi:f16[] qj:f16[64,25,256,256]
      qk:f16[64,256,1600] ql:f16[1600,4800] qm:f32[64,256,1600] qn:f32[64,256,1]
      qo:f32[1,1,1600] qp:f32[64,256,1] qq:f32[64,256] qr:f32[64,256] qs:f32[64,256,1600]
      qt:f32[64,256,1600] qu:f16[64,256,6400] qv:f16[6400,1600] qw:f16[64,256,6400]
      qx:f16[64,256,6400] qy:f16[64,256,6400] qz:f16[64,256,6400] ra:f16[64,256,6400]
      rb:f16[64,256,1600] rc:f16[1600,6400] rd:f32[64,256,1600] re:f32[64,256,1]
      rf:f32[1,1,1600] rg:f32[64,256,1] rh:f32[64,256] ri:f32[64,256] rj:f32[64,256,1600]
      rk:f32[64,256,1600] rl:f16[64,256,1600] rm:f16[1600,1600] rn:f16[64,256,25,64]
      ro:f16[64,25,256,1] rp:f16[64,25,256,256] rq:f16[64,25,256,1] rr:f16[64,256,25,64]
      rs:f16[64,256,25,64] rt:f16[] ru:f16[64,25,256,256] rv:f16[64,256,1600] rw:f16[1600,4800]
      rx:f32[64,256,1600] ry:f32[64,256,1] rz:f32[1,1,1600] sa:f32[64,256,1] sb:f32[64,256]
      sc:f32[64,256] sd:f32[64,256,1600] se:f32[64,256,1600] sf:f16[64,256,6400]
      sg:f16[6400,1600] sh:f16[64,256,6400] si:f16[64,256,6400] sj:f16[64,256,6400]
      sk:f16[64,256,6400] sl:f16[64,256,6400] sm:f16[64,256,1600] sn:f16[1600,6400]
      so:f32[64,256,1600] sp:f32[64,256,1] sq:f32[1,1,1600] sr:f32[64,256,1] ss:f32[64,256]
      st:f32[64,256] su:f32[64,256,1600] sv:f32[64,256,1600] sw:f16[64,256,1600]
      sx:f16[1600,1600] sy:f16[64,256,25,64] sz:f16[64,25,256,1] ta:f16[64,25,256,256]
      tb:f16[64,25,256,1] tc:f16[64,256,25,64] td:f16[64,256,25,64] te:f16[] tf:f16[64,25,256,256]
      tg:f16[64,256,1600] th:f16[1600,4800] ti:f32[64,256,1600] tj:f32[64,256,1]
      tk:f32[1,1,1600] tl:f32[64,256,1] tm:f32[64,256] tn:f32[64,256] to:f32[64,256,1600]
      tp:f32[64,256,1600]. let
      tq:f16[64,256,1600] tr:f16[50257,1600] ts:f16[1600] tt:f16[1600] tu:f16[1600]
        tv:f16[1600,6400] tw:f16[6400] tx:f16[6400,1600] ty:f16[1600] tz:f16[1600] = named_call[
        call_jaxpr={ lambda ; ua:f16[50257,1600] ub:f16[1600] uc:f16[1600] ud:f16[1600]
            ue:f16[1600,6400] uf:f16[6400] ug:f16[6400,1600] uh:f16[1600] ui:f16[1600]
            uj:f32[] uk:f32[64,255,50257] ul:f16[64,255,1] um:f16[64,255,50257] un:i32[1]
            uo:f16[64,256,1600] up:f16[1600,50257] uq:f32[64,256,1600] ur:f32[64,256,1]
            us:f32[1,1,1600] ut:f32[64,256,1] uu:f32[64,256] uv:f32[64,256] uw:f32[64,256,1600]
            ux:f32[64,256,1600] uy:f16[64,256,6400] uz:f16[6400,1600] va:f16[64,256,6400]
            vb:f16[64,256,6400] vc:f16[64,256,6400] vd:f16[64,256,6400] ve:f16[64,256,6400]
            vf:f16[64,256,1600] vg:f16[1600,6400] vh:f32[64,256,1600] vi:f32[64,256,1]
            vj:f32[1,1,1600] vk:f32[64,256,1] vl:f32[64,256] vm:f32[64,256] vn:f32[64,256,1600]
            vo:f32[64,256,1600]. let
            vp:f32[] = mul uj 1.0
            vq:f32[] = div vp 16320.0
            vr:f32[64,255] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 255)
            ] vq
            vs:f32[64,255] = neg vr
            vt:f32[64,255,50257] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 255, 50257)
            ] vs
            vu:f32[64,255,50257] = mul uk vt
            vv:f16[64,255,50257] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] vu
            vw:f16[64,255,50257] = neg vv
            vx:f16[64,255] = reduce_sum[axes=(2,)] vw
            vy:f16[64,255,1] = reshape[dimensions=None new_sizes=(64, 255, 1)] vx
            vz:f16[64,255,1] = div vy ul
            wa:f32[64,255,1] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] vz
            wb:f32[64,255] = reduce_sum[axes=(2,)] wa
            wc:f32[64,255,50257] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 255, 50257)
            ] wb
            wd:f16[64,255,50257] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] wc
            we:f16[64,255,50257] = mul wd um
            wf:f16[64,255,50257] = add_any vv we
            wg:f16[64,256,50257] = broadcast_in_dim[
              broadcast_dimensions=()
              shape=(64, 256, 50257)
            ] 0.0
            wh:f16[64,256,50257] = scatter-add[
              dimension_numbers=ScatterDimensionNumbers(update_window_dims=(0, 1, 2), inserted_window_dims=(), scatter_dims_to_operand_dims=(1,))
              indices_are_sorted=True
              mode=GatherScatterMode.PROMISE_IN_BOUNDS
              unique_indices=True
              update_consts=()
              update_jaxpr={ lambda ; wi:f16[] wj:f16[]. let
                  wk:f16[] = add wi wj
                in (wk,) }
            ] wg un wf
            wl:f16[50257,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] wh uo
            wm:f16[1600,50257] = transpose[permutation=(1, 0)] wl
            wn:f16[50257,1600] = transpose[permutation=(1, 0)] wm
            wo:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] wh up
            wp:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] wo
            wq:f32[1600] = reduce_sum[axes=(0, 1)] wp
            wr:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] wq
            ws:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] wr
            wt:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] ws
            wu:f32[64,256,1600] = mul uq wp
            wv:f32[64,256,1600] = mul ur wu
            ww:f32[1600] = reduce_sum[axes=(0, 1)] wv
            wx:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] ww
            wy:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] wx
            wz:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] wy
            xa:f32[64,256,1600] = mul wu us
            xb:f32[64,256] = reduce_sum[axes=(2,)] xa
            xc:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] xb
            xd:f32[64,256,1] = mul xc ut
            xe:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] xd
            xf:f32[64,256] = mul xe uu
            xg:f32[64,256] = neg xf
            xh:f32[64,256] = mul xg uv
            xi:f32[64,256] = div xf 1600.0
            xj:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] xi
            xk:f32[64,256,1600] = mul xj uw
            xl:f32[64,256,1600] = mul wp ux
            xm:f32[64,256,1600] = neg xl
            xn:f32[64,256] = reduce_sum[axes=(2,)] xm
            xo:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] xn
            xp:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] xo
            xq:f32[64,256] = add_any xh xp
            xr:f32[64,256] = div xq 1600.0
            xs:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] xr
            xt:f32[64,256,1600] = add_any xk xs
            xu:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] xt
            xv:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] xl
            xw:f16[64,256,1600] = add_any xu xv
            xx:f16[1600] = reduce_sum[axes=(0, 1)] xw
            xy:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] xx
            xz:f16[1600] = reduce_sum[axes=(0, 1)] xy
            ya:f16[1600,6400] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] xw uy
            yb:f16[6400,1600] = transpose[permutation=(1, 0)] ya
            yc:f16[1600,6400] = transpose[permutation=(1, 0)] yb
            yd:f16[64,256,6400] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] xw uz
            ye:f16[64,256,6400] = mul va yd
            yf:f16[64,256,6400] = mul 0.5 ye
            yg:f16[64,256,6400] = mul yf vb
            yh:f16[64,256,6400] = mul yg vc
            yi:f16[64,256,6400] = add_any yg yh
            yj:f16[64,256,6400] = mul 0.7978515625 yi
            yk:f16[64,256,6400] = mul 0.044708251953125 yj
            yl:f16[64,256,6400] = mul yk vd
            ym:f16[64,256,6400] = add_any yj yl
            yn:f16[64,256,6400] = mul yd ve
            yo:f16[64,256,6400] = add_any ym yn
            yp:f16[6400] = reduce_sum[axes=(0, 1)] yo
            yq:f16[1,1,6400] = reshape[dimensions=None new_sizes=(1, 1, 6400)] yp
            yr:f16[6400] = reduce_sum[axes=(0, 1)] yq
            ys:f16[6400,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] yo vf
            yt:f16[1600,6400] = transpose[permutation=(1, 0)] ys
            yu:f16[6400,1600] = transpose[permutation=(1, 0)] yt
            yv:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] yo vg
            yw:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] yv
            yx:f32[1600] = reduce_sum[axes=(0, 1)] yw
            yy:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] yx
            yz:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] yy
            za:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] yz
            zb:f32[64,256,1600] = mul vh yw
            zc:f32[64,256,1600] = mul vi zb
            zd:f32[1600] = reduce_sum[axes=(0, 1)] zc
            ze:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] zd
            zf:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] ze
            zg:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] zf
            zh:f32[64,256,1600] = mul zb vj
            zi:f32[64,256] = reduce_sum[axes=(2,)] zh
            zj:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] zi
            zk:f32[64,256,1] = mul zj vk
            zl:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] zk
            zm:f32[64,256] = mul zl vl
            zn:f32[64,256] = neg zm
            zo:f32[64,256] = mul zn vm
            zp:f32[64,256] = div zm 1600.0
            zq:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] zp
            zr:f32[64,256,1600] = mul zq vn
            zs:f32[64,256,1600] = mul yw vo
            zt:f32[64,256,1600] = neg zs
            zu:f32[64,256] = reduce_sum[axes=(2,)] zt
            zv:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] zu
            zw:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] zv
            zx:f32[64,256] = add_any zo zw
            zy:f32[64,256] = div zx 1600.0
            zz:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] zy
            baa:f32[64,256,1600] = add_any zr zz
            bab:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] baa
            bac:f16[64,256,1600] = add_any xw bab
            bad:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] zs
            bae:f16[64,256,1600] = add_any bac bad
            baf:f16[50257,1600] = add ua wn
            bag:f16[1600] = add ub wt
            bah:f16[1600] = add uc wz
            bai:f16[1600] = add ud xz
            baj:f16[1600,6400] = add ue yc
            bak:f16[6400] = add uf yr
            bal:f16[6400,1600] = add ug yu
            bam:f16[1600] = add uh za
            ban:f16[1600] = add ui zg
          in (bae, baf, bag, bah, bai, baj, bak, bal, bam, ban) }
        name=40
      ] dw dx dy dz ea eb ec ed ee hr hs ht hu hv hw hx hy hz ia ib ic id ie if ig
        ih ii ij ik il im in io ip iq ir is it iu iv iw
      bao:f16[64,256,1600] bap:f16[1600] baq:f16[1600,1600] bar:f16[4800] bas:f16[4800,1600]
        bat:f16[1600] bau:f16[1600] bav:f16[1600] baw:f16[1600,6400] bax:f16[6400]
        bay:f16[6400,1600] baz:f16[1600] bba:f16[1600] bbb:f16[1600] bbc:f16[1600,1600]
        bbd:f16[4800] bbe:f16[4800,1600] bbf:f16[1600] bbg:f16[1600] bbh:f16[1600]
        bbi:f16[1600,6400] bbj:f16[6400] bbk:f16[6400,1600] bbl:f16[1600] bbm:f16[1600]
        bbn:f16[1600] bbo:f16[1600,1600] bbp:f16[4800] bbq:f16[4800,1600] bbr:f16[1600]
        bbs:f16[1600] bbt:f16[1600] bbu:f16[1600,6400] bbv:f16[6400] bbw:f16[6400,1600]
        bbx:f16[1600] bby:f16[1600] bbz:f16[1600] bca:f16[1600,1600] bcb:f16[4800]
        bcc:f16[4800,1600] bcd:f16[1600] bce:f16[1600] bcf:f16[1600] bcg:f16[1600,6400]
        bch:f16[6400] bci:f16[6400,1600] bcj:f16[1600] bck:f16[1600] = named_call[
        call_jaxpr={ lambda ; bcl:f16[64,256,1600] bcm:f16[1600] bcn:f16[1600,1600]
            bco:f16[4800] bcp:f16[4800,1600] bcq:f16[1600] bcr:f16[1600] bcs:f16[1600]
            bct:f16[1600,6400] bcu:f16[6400] bcv:f16[6400,1600] bcw:f16[1600] bcx:f16[1600]
            bcy:f16[1600] bcz:f16[1600,1600] bda:f16[4800] bdb:f16[4800,1600] bdc:f16[1600]
            bdd:f16[1600] bde:f16[1600] bdf:f16[1600,6400] bdg:f16[6400] bdh:f16[6400,1600]
            bdi:f16[1600] bdj:f16[1600] bdk:f16[1600] bdl:f16[1600,1600] bdm:f16[4800]
            bdn:f16[4800,1600] bdo:f16[1600] bdp:f16[1600] bdq:f16[1600] bdr:f16[1600,6400]
            bds:f16[6400] bdt:f16[6400,1600] bdu:f16[1600] bdv:f16[1600] bdw:f16[1600]
            bdx:f16[1600,1600] bdy:f16[4800] bdz:f16[4800,1600] bea:f16[1600] beb:f16[1600]
            bec:f16[1600] bed:f16[1600,6400] bee:f16[6400] bef:f16[6400,1600] beg:f16[1600]
            beh:f16[1600] bei:f16[64,256,1600] bej:f16[1600,1600] bek:f16[64,256,25,64]
            bel:f16[64,25,256,1] bem:f16[64,25,256,256] ben:f16[64,25,256,1] beo:f16[64,256,25,64]
            bep:f16[64,256,25,64] beq:f16[] ber:f16[64,25,256,256] bes:f16[64,256,1600]
            bet:f16[1600,4800] beu:f32[64,256,1600] bev:f32[64,256,1] bew:f32[1,1,1600]
            bex:f32[64,256,1] bey:f32[64,256] bez:f32[64,256] bfa:f32[64,256,1600]
            bfb:f32[64,256,1600] bfc:f16[64,256,6400] bfd:f16[6400,1600] bfe:f16[64,256,6400]
            bff:f16[64,256,6400] bfg:f16[64,256,6400] bfh:f16[64,256,6400] bfi:f16[64,256,6400]
            bfj:f16[64,256,1600] bfk:f16[1600,6400] bfl:f32[64,256,1600] bfm:f32[64,256,1]
            bfn:f32[1,1,1600] bfo:f32[64,256,1] bfp:f32[64,256] bfq:f32[64,256] bfr:f32[64,256,1600]
            bfs:f32[64,256,1600] bft:f16[64,256,1600] bfu:f16[1600,1600] bfv:f16[64,256,25,64]
            bfw:f16[64,25,256,1] bfx:f16[64,25,256,256] bfy:f16[64,25,256,1] bfz:f16[64,256,25,64]
            bga:f16[64,256,25,64] bgb:f16[] bgc:f16[64,25,256,256] bgd:f16[64,256,1600]
            bge:f16[1600,4800] bgf:f32[64,256,1600] bgg:f32[64,256,1] bgh:f32[1,1,1600]
            bgi:f32[64,256,1] bgj:f32[64,256] bgk:f32[64,256] bgl:f32[64,256,1600]
            bgm:f32[64,256,1600] bgn:f16[64,256,6400] bgo:f16[6400,1600] bgp:f16[64,256,6400]
            bgq:f16[64,256,6400] bgr:f16[64,256,6400] bgs:f16[64,256,6400] bgt:f16[64,256,6400]
            bgu:f16[64,256,1600] bgv:f16[1600,6400] bgw:f32[64,256,1600] bgx:f32[64,256,1]
            bgy:f32[1,1,1600] bgz:f32[64,256,1] bha:f32[64,256] bhb:f32[64,256] bhc:f32[64,256,1600]
            bhd:f32[64,256,1600] bhe:f16[64,256,1600] bhf:f16[1600,1600] bhg:f16[64,256,25,64]
            bhh:f16[64,25,256,1] bhi:f16[64,25,256,256] bhj:f16[64,25,256,1] bhk:f16[64,256,25,64]
            bhl:f16[64,256,25,64] bhm:f16[] bhn:f16[64,25,256,256] bho:f16[64,256,1600]
            bhp:f16[1600,4800] bhq:f32[64,256,1600] bhr:f32[64,256,1] bhs:f32[1,1,1600]
            bht:f32[64,256,1] bhu:f32[64,256] bhv:f32[64,256] bhw:f32[64,256,1600]
            bhx:f32[64,256,1600] bhy:f16[64,256,6400] bhz:f16[6400,1600] bia:f16[64,256,6400]
            bib:f16[64,256,6400] bic:f16[64,256,6400] bid:f16[64,256,6400] bie:f16[64,256,6400]
            bif:f16[64,256,1600] big:f16[1600,6400] bih:f32[64,256,1600] bii:f32[64,256,1]
            bij:f32[1,1,1600] bik:f32[64,256,1] bil:f32[64,256] bim:f32[64,256] bin:f32[64,256,1600]
            bio:f32[64,256,1600] bip:f16[64,256,1600] biq:f16[1600,1600] bir:f16[64,256,25,64]
            bis:f16[64,25,256,1] bit:f16[64,25,256,256] biu:f16[64,25,256,1] biv:f16[64,256,25,64]
            biw:f16[64,256,25,64] bix:f16[] biy:f16[64,25,256,256] biz:f16[64,256,1600]
            bja:f16[1600,4800] bjb:f32[64,256,1600] bjc:f32[64,256,1] bjd:f32[1,1,1600]
            bje:f32[64,256,1] bjf:f32[64,256] bjg:f32[64,256] bjh:f32[64,256,1600]
            bji:f32[64,256,1600] bjj:f16[64,256,6400] bjk:f16[6400,1600] bjl:f16[64,256,6400]
            bjm:f16[64,256,6400] bjn:f16[64,256,6400] bjo:f16[64,256,6400] bjp:f16[64,256,6400]
            bjq:f16[64,256,1600] bjr:f16[1600,6400] bjs:f32[64,256,1600] bjt:f32[64,256,1]
            bju:f32[1,1,1600] bjv:f32[64,256,1] bjw:f32[64,256] bjx:f32[64,256] bjy:f32[64,256,1600]
            bjz:f32[64,256,1600]. let
            bka:f16[1600] = reduce_sum[axes=(0, 1)] bcl
            bkb:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] bka
            bkc:f16[1600] = reduce_sum[axes=(0, 1)] bkb
            bkd:f16[1600,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] bcl bei
            bke:f16[1600,1600] = transpose[permutation=(1, 0)] bkd
            bkf:f16[1600,1600] = transpose[permutation=(1, 0)] bke
            bkg:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] bcl bej
            bkh:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] bkg
            bki:f16[64,25,64,256] = transpose[permutation=(0, 2, 3, 1)] bkh
            bkj:f16[64,25,256,256] = dot_general[
              dimension_numbers=(((2,), (3,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] bki bek
            bkk:f16[64,25,256,256] = mul bkj bel
            bkl:f16[64,25,256,256] = mul bkk bem
            bkm:f16[64,25,256] = reduce_sum[axes=(3,)] bkl
            bkn:f16[64,25,256,1] = reshape[
              dimensions=None
              new_sizes=(64, 25, 256, 1)
            ] bkm
            bko:f16[64,25,256,1] = neg bkn
            bkp:f32[64,25,256,1] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bko
            bkq:f32[64,25,256] = reduce_sum[axes=(3,)] bkp
            bkr:f32[64,25,256,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 256)
            ] bkq
            bks:f16[64,25,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bkr
            bkt:f16[64,25,256,256] = div bkj ben
            bku:f16[64,25,256,256] = add_any bks bkt
            bkv:f16[64,25,256,256] = mul bku bem
            bkw:f16[64,25,256,64] = dot_general[
              dimension_numbers=(((2,), (1,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] bkv beo
            bkx:f16[64,256,25,64] = transpose[permutation=(0, 2, 1, 3)] bkw
            bky:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] bkx
            bkz:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (1600, 1600, 0))
            ] bky 0.0
            bla:f16[64,25,256,64] = dot_general[
              dimension_numbers=(((3,), (1,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] bkv bep
            blb:f16[64,256,25,64] = transpose[permutation=(0, 2, 1, 3)] bla
            blc:f16[64,256,25,64] = div blb beq
            bld:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] blc
            ble:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (0, 3200, 0))
            ] bld 0.0
            blf:f16[64,256,4800] = add_any bkz ble
            blg:f16[64,25,64,256] = dot_general[
              dimension_numbers=(((3,), (2,)), ((0, 1), (0, 1)))
              precision=None
              preferred_element_type=None
            ] bki ber
            blh:f16[64,256,25,64] = transpose[permutation=(0, 3, 1, 2)] blg
            bli:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] blh
            blj:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (3200, 0, 0))
            ] bli 0.0
            blk:f16[64,256,4800] = add_any blf blj
            bll:f16[4800] = reduce_sum[axes=(0, 1)] blk
            blm:f16[1,1,4800] = reshape[dimensions=None new_sizes=(1, 1, 4800)] bll
            bln:f16[4800] = reduce_sum[axes=(0, 1)] blm
            blo:f16[4800,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] blk bes
            blp:f16[1600,4800] = transpose[permutation=(1, 0)] blo
            blq:f16[4800,1600] = transpose[permutation=(1, 0)] blp
            blr:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] blk bet
            bls:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] blr
            blt:f32[1600] = reduce_sum[axes=(0, 1)] bls
            blu:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] blt
            blv:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] blu
            blw:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] blv
            blx:f32[64,256,1600] = mul beu bls
            bly:f32[64,256,1600] = mul bev blx
            blz:f32[1600] = reduce_sum[axes=(0, 1)] bly
            bma:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] blz
            bmb:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bma
            bmc:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] bmb
            bmd:f32[64,256,1600] = mul blx bew
            bme:f32[64,256] = reduce_sum[axes=(2,)] bmd
            bmf:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] bme
            bmg:f32[64,256,1] = mul bmf bex
            bmh:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] bmg
            bmi:f32[64,256] = mul bmh bey
            bmj:f32[64,256] = neg bmi
            bmk:f32[64,256] = mul bmj bez
            bml:f32[64,256] = div bmi 1600.0
            bmm:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] bml
            bmn:f32[64,256,1600] = mul bmm bfa
            bmo:f32[64,256,1600] = mul bls bfb
            bmp:f32[64,256,1600] = neg bmo
            bmq:f32[64,256] = reduce_sum[axes=(2,)] bmp
            bmr:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] bmq
            bms:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] bmr
            bmt:f32[64,256] = add_any bmk bms
            bmu:f32[64,256] = div bmt 1600.0
            bmv:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] bmu
            bmw:f32[64,256,1600] = add_any bmn bmv
            bmx:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bmw
            bmy:f16[64,256,1600] = add_any bcl bmx
            bmz:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bmo
            bna:f16[64,256,1600] = add_any bmy bmz
            bnb:f16[1600] = reduce_sum[axes=(0, 1)] bna
            bnc:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] bnb
            bnd:f16[1600] = reduce_sum[axes=(0, 1)] bnc
            bne:f16[1600,6400] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] bna bfc
            bnf:f16[6400,1600] = transpose[permutation=(1, 0)] bne
            bng:f16[1600,6400] = transpose[permutation=(1, 0)] bnf
            bnh:f16[64,256,6400] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] bna bfd
            bni:f16[64,256,6400] = mul bfe bnh
            bnj:f16[64,256,6400] = mul 0.5 bni
            bnk:f16[64,256,6400] = mul bnj bff
            bnl:f16[64,256,6400] = mul bnk bfg
            bnm:f16[64,256,6400] = add_any bnk bnl
            bnn:f16[64,256,6400] = mul 0.7978515625 bnm
            bno:f16[64,256,6400] = mul 0.044708251953125 bnn
            bnp:f16[64,256,6400] = mul bno bfh
            bnq:f16[64,256,6400] = add_any bnn bnp
            bnr:f16[64,256,6400] = mul bnh bfi
            bns:f16[64,256,6400] = add_any bnq bnr
            bnt:f16[6400] = reduce_sum[axes=(0, 1)] bns
            bnu:f16[1,1,6400] = reshape[dimensions=None new_sizes=(1, 1, 6400)] bnt
            bnv:f16[6400] = reduce_sum[axes=(0, 1)] bnu
            bnw:f16[6400,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] bns bfj
            bnx:f16[1600,6400] = transpose[permutation=(1, 0)] bnw
            bny:f16[6400,1600] = transpose[permutation=(1, 0)] bnx
            bnz:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] bns bfk
            boa:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bnz
            bob:f32[1600] = reduce_sum[axes=(0, 1)] boa
            boc:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] bob
            bod:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] boc
            boe:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] bod
            bof:f32[64,256,1600] = mul bfl boa
            bog:f32[64,256,1600] = mul bfm bof
            boh:f32[1600] = reduce_sum[axes=(0, 1)] bog
            boi:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] boh
            boj:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] boi
            bok:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] boj
            bol:f32[64,256,1600] = mul bof bfn
            bom:f32[64,256] = reduce_sum[axes=(2,)] bol
            bon:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] bom
            boo:f32[64,256,1] = mul bon bfo
            bop:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] boo
            boq:f32[64,256] = mul bop bfp
            bor:f32[64,256] = neg boq
            bos:f32[64,256] = mul bor bfq
            bot:f32[64,256] = div boq 1600.0
            bou:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] bot
            bov:f32[64,256,1600] = mul bou bfr
            bow:f32[64,256,1600] = mul boa bfs
            box:f32[64,256,1600] = neg bow
            boy:f32[64,256] = reduce_sum[axes=(2,)] box
            boz:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] boy
            bpa:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] boz
            bpb:f32[64,256] = add_any bos bpa
            bpc:f32[64,256] = div bpb 1600.0
            bpd:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] bpc
            bpe:f32[64,256,1600] = add_any bov bpd
            bpf:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bpe
            bpg:f16[64,256,1600] = add_any bna bpf
            bph:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bow
            bpi:f16[64,256,1600] = add_any bpg bph
            bpj:f16[1600] = reduce_sum[axes=(0, 1)] bpi
            bpk:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] bpj
            bpl:f16[1600] = reduce_sum[axes=(0, 1)] bpk
            bpm:f16[1600,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] bpi bft
            bpn:f16[1600,1600] = transpose[permutation=(1, 0)] bpm
            bpo:f16[1600,1600] = transpose[permutation=(1, 0)] bpn
            bpp:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] bpi bfu
            bpq:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] bpp
            bpr:f16[64,25,64,256] = transpose[permutation=(0, 2, 3, 1)] bpq
            bps:f16[64,25,256,256] = dot_general[
              dimension_numbers=(((2,), (3,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] bpr bfv
            bpt:f16[64,25,256,256] = mul bps bfw
            bpu:f16[64,25,256,256] = mul bpt bfx
            bpv:f16[64,25,256] = reduce_sum[axes=(3,)] bpu
            bpw:f16[64,25,256,1] = reshape[
              dimensions=None
              new_sizes=(64, 25, 256, 1)
            ] bpv
            bpx:f16[64,25,256,1] = neg bpw
            bpy:f32[64,25,256,1] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bpx
            bpz:f32[64,25,256] = reduce_sum[axes=(3,)] bpy
            bqa:f32[64,25,256,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 256)
            ] bpz
            bqb:f16[64,25,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bqa
            bqc:f16[64,25,256,256] = div bps bfy
            bqd:f16[64,25,256,256] = add_any bqb bqc
            bqe:f16[64,25,256,256] = mul bqd bfx
            bqf:f16[64,25,256,64] = dot_general[
              dimension_numbers=(((2,), (1,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] bqe bfz
            bqg:f16[64,256,25,64] = transpose[permutation=(0, 2, 1, 3)] bqf
            bqh:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] bqg
            bqi:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (1600, 1600, 0))
            ] bqh 0.0
            bqj:f16[64,25,256,64] = dot_general[
              dimension_numbers=(((3,), (1,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] bqe bga
            bqk:f16[64,256,25,64] = transpose[permutation=(0, 2, 1, 3)] bqj
            bql:f16[64,256,25,64] = div bqk bgb
            bqm:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] bql
            bqn:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (0, 3200, 0))
            ] bqm 0.0
            bqo:f16[64,256,4800] = add_any bqi bqn
            bqp:f16[64,25,64,256] = dot_general[
              dimension_numbers=(((3,), (2,)), ((0, 1), (0, 1)))
              precision=None
              preferred_element_type=None
            ] bpr bgc
            bqq:f16[64,256,25,64] = transpose[permutation=(0, 3, 1, 2)] bqp
            bqr:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] bqq
            bqs:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (3200, 0, 0))
            ] bqr 0.0
            bqt:f16[64,256,4800] = add_any bqo bqs
            bqu:f16[4800] = reduce_sum[axes=(0, 1)] bqt
            bqv:f16[1,1,4800] = reshape[dimensions=None new_sizes=(1, 1, 4800)] bqu
            bqw:f16[4800] = reduce_sum[axes=(0, 1)] bqv
            bqx:f16[4800,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] bqt bgd
            bqy:f16[1600,4800] = transpose[permutation=(1, 0)] bqx
            bqz:f16[4800,1600] = transpose[permutation=(1, 0)] bqy
            bra:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] bqt bge
            brb:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bra
            brc:f32[1600] = reduce_sum[axes=(0, 1)] brb
            brd:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] brc
            bre:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] brd
            brf:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] bre
            brg:f32[64,256,1600] = mul bgf brb
            brh:f32[64,256,1600] = mul bgg brg
            bri:f32[1600] = reduce_sum[axes=(0, 1)] brh
            brj:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] bri
            brk:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] brj
            brl:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] brk
            brm:f32[64,256,1600] = mul brg bgh
            brn:f32[64,256] = reduce_sum[axes=(2,)] brm
            bro:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] brn
            brp:f32[64,256,1] = mul bro bgi
            brq:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] brp
            brr:f32[64,256] = mul brq bgj
            brs:f32[64,256] = neg brr
            brt:f32[64,256] = mul brs bgk
            bru:f32[64,256] = div brr 1600.0
            brv:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] bru
            brw:f32[64,256,1600] = mul brv bgl
            brx:f32[64,256,1600] = mul brb bgm
            bry:f32[64,256,1600] = neg brx
            brz:f32[64,256] = reduce_sum[axes=(2,)] bry
            bsa:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] brz
            bsb:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] bsa
            bsc:f32[64,256] = add_any brt bsb
            bsd:f32[64,256] = div bsc 1600.0
            bse:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] bsd
            bsf:f32[64,256,1600] = add_any brw bse
            bsg:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bsf
            bsh:f16[64,256,1600] = add_any bpi bsg
            bsi:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] brx
            bsj:f16[64,256,1600] = add_any bsh bsi
            bsk:f16[1600] = reduce_sum[axes=(0, 1)] bsj
            bsl:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] bsk
            bsm:f16[1600] = reduce_sum[axes=(0, 1)] bsl
            bsn:f16[1600,6400] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] bsj bgn
            bso:f16[6400,1600] = transpose[permutation=(1, 0)] bsn
            bsp:f16[1600,6400] = transpose[permutation=(1, 0)] bso
            bsq:f16[64,256,6400] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] bsj bgo
            bsr:f16[64,256,6400] = mul bgp bsq
            bss:f16[64,256,6400] = mul 0.5 bsr
            bst:f16[64,256,6400] = mul bss bgq
            bsu:f16[64,256,6400] = mul bst bgr
            bsv:f16[64,256,6400] = add_any bst bsu
            bsw:f16[64,256,6400] = mul 0.7978515625 bsv
            bsx:f16[64,256,6400] = mul 0.044708251953125 bsw
            bsy:f16[64,256,6400] = mul bsx bgs
            bsz:f16[64,256,6400] = add_any bsw bsy
            bta:f16[64,256,6400] = mul bsq bgt
            btb:f16[64,256,6400] = add_any bsz bta
            btc:f16[6400] = reduce_sum[axes=(0, 1)] btb
            btd:f16[1,1,6400] = reshape[dimensions=None new_sizes=(1, 1, 6400)] btc
            bte:f16[6400] = reduce_sum[axes=(0, 1)] btd
            btf:f16[6400,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] btb bgu
            btg:f16[1600,6400] = transpose[permutation=(1, 0)] btf
            bth:f16[6400,1600] = transpose[permutation=(1, 0)] btg
            bti:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] btb bgv
            btj:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bti
            btk:f32[1600] = reduce_sum[axes=(0, 1)] btj
            btl:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] btk
            btm:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] btl
            btn:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] btm
            bto:f32[64,256,1600] = mul bgw btj
            btp:f32[64,256,1600] = mul bgx bto
            btq:f32[1600] = reduce_sum[axes=(0, 1)] btp
            btr:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] btq
            bts:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] btr
            btt:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] bts
            btu:f32[64,256,1600] = mul bto bgy
            btv:f32[64,256] = reduce_sum[axes=(2,)] btu
            btw:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] btv
            btx:f32[64,256,1] = mul btw bgz
            bty:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] btx
            btz:f32[64,256] = mul bty bha
            bua:f32[64,256] = neg btz
            bub:f32[64,256] = mul bua bhb
            buc:f32[64,256] = div btz 1600.0
            bud:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] buc
            bue:f32[64,256,1600] = mul bud bhc
            buf:f32[64,256,1600] = mul btj bhd
            bug:f32[64,256,1600] = neg buf
            buh:f32[64,256] = reduce_sum[axes=(2,)] bug
            bui:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] buh
            buj:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] bui
            buk:f32[64,256] = add_any bub buj
            bul:f32[64,256] = div buk 1600.0
            bum:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] bul
            bun:f32[64,256,1600] = add_any bue bum
            buo:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bun
            bup:f16[64,256,1600] = add_any bsj buo
            buq:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] buf
            bur:f16[64,256,1600] = add_any bup buq
            bus:f16[1600] = reduce_sum[axes=(0, 1)] bur
            but:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] bus
            buu:f16[1600] = reduce_sum[axes=(0, 1)] but
            buv:f16[1600,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] bur bhe
            buw:f16[1600,1600] = transpose[permutation=(1, 0)] buv
            bux:f16[1600,1600] = transpose[permutation=(1, 0)] buw
            buy:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] bur bhf
            buz:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] buy
            bva:f16[64,25,64,256] = transpose[permutation=(0, 2, 3, 1)] buz
            bvb:f16[64,25,256,256] = dot_general[
              dimension_numbers=(((2,), (3,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] bva bhg
            bvc:f16[64,25,256,256] = mul bvb bhh
            bvd:f16[64,25,256,256] = mul bvc bhi
            bve:f16[64,25,256] = reduce_sum[axes=(3,)] bvd
            bvf:f16[64,25,256,1] = reshape[
              dimensions=None
              new_sizes=(64, 25, 256, 1)
            ] bve
            bvg:f16[64,25,256,1] = neg bvf
            bvh:f32[64,25,256,1] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bvg
            bvi:f32[64,25,256] = reduce_sum[axes=(3,)] bvh
            bvj:f32[64,25,256,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 256)
            ] bvi
            bvk:f16[64,25,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bvj
            bvl:f16[64,25,256,256] = div bvb bhj
            bvm:f16[64,25,256,256] = add_any bvk bvl
            bvn:f16[64,25,256,256] = mul bvm bhi
            bvo:f16[64,25,256,64] = dot_general[
              dimension_numbers=(((2,), (1,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] bvn bhk
            bvp:f16[64,256,25,64] = transpose[permutation=(0, 2, 1, 3)] bvo
            bvq:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] bvp
            bvr:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (1600, 1600, 0))
            ] bvq 0.0
            bvs:f16[64,25,256,64] = dot_general[
              dimension_numbers=(((3,), (1,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] bvn bhl
            bvt:f16[64,256,25,64] = transpose[permutation=(0, 2, 1, 3)] bvs
            bvu:f16[64,256,25,64] = div bvt bhm
            bvv:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] bvu
            bvw:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (0, 3200, 0))
            ] bvv 0.0
            bvx:f16[64,256,4800] = add_any bvr bvw
            bvy:f16[64,25,64,256] = dot_general[
              dimension_numbers=(((3,), (2,)), ((0, 1), (0, 1)))
              precision=None
              preferred_element_type=None
            ] bva bhn
            bvz:f16[64,256,25,64] = transpose[permutation=(0, 3, 1, 2)] bvy
            bwa:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] bvz
            bwb:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (3200, 0, 0))
            ] bwa 0.0
            bwc:f16[64,256,4800] = add_any bvx bwb
            bwd:f16[4800] = reduce_sum[axes=(0, 1)] bwc
            bwe:f16[1,1,4800] = reshape[dimensions=None new_sizes=(1, 1, 4800)] bwd
            bwf:f16[4800] = reduce_sum[axes=(0, 1)] bwe
            bwg:f16[4800,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] bwc bho
            bwh:f16[1600,4800] = transpose[permutation=(1, 0)] bwg
            bwi:f16[4800,1600] = transpose[permutation=(1, 0)] bwh
            bwj:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] bwc bhp
            bwk:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bwj
            bwl:f32[1600] = reduce_sum[axes=(0, 1)] bwk
            bwm:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] bwl
            bwn:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bwm
            bwo:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] bwn
            bwp:f32[64,256,1600] = mul bhq bwk
            bwq:f32[64,256,1600] = mul bhr bwp
            bwr:f32[1600] = reduce_sum[axes=(0, 1)] bwq
            bws:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] bwr
            bwt:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bws
            bwu:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] bwt
            bwv:f32[64,256,1600] = mul bwp bhs
            bww:f32[64,256] = reduce_sum[axes=(2,)] bwv
            bwx:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] bww
            bwy:f32[64,256,1] = mul bwx bht
            bwz:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] bwy
            bxa:f32[64,256] = mul bwz bhu
            bxb:f32[64,256] = neg bxa
            bxc:f32[64,256] = mul bxb bhv
            bxd:f32[64,256] = div bxa 1600.0
            bxe:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] bxd
            bxf:f32[64,256,1600] = mul bxe bhw
            bxg:f32[64,256,1600] = mul bwk bhx
            bxh:f32[64,256,1600] = neg bxg
            bxi:f32[64,256] = reduce_sum[axes=(2,)] bxh
            bxj:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] bxi
            bxk:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] bxj
            bxl:f32[64,256] = add_any bxc bxk
            bxm:f32[64,256] = div bxl 1600.0
            bxn:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] bxm
            bxo:f32[64,256,1600] = add_any bxf bxn
            bxp:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bxo
            bxq:f16[64,256,1600] = add_any bur bxp
            bxr:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bxg
            bxs:f16[64,256,1600] = add_any bxq bxr
            bxt:f16[1600] = reduce_sum[axes=(0, 1)] bxs
            bxu:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] bxt
            bxv:f16[1600] = reduce_sum[axes=(0, 1)] bxu
            bxw:f16[1600,6400] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] bxs bhy
            bxx:f16[6400,1600] = transpose[permutation=(1, 0)] bxw
            bxy:f16[1600,6400] = transpose[permutation=(1, 0)] bxx
            bxz:f16[64,256,6400] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] bxs bhz
            bya:f16[64,256,6400] = mul bia bxz
            byb:f16[64,256,6400] = mul 0.5 bya
            byc:f16[64,256,6400] = mul byb bib
            byd:f16[64,256,6400] = mul byc bic
            bye:f16[64,256,6400] = add_any byc byd
            byf:f16[64,256,6400] = mul 0.7978515625 bye
            byg:f16[64,256,6400] = mul 0.044708251953125 byf
            byh:f16[64,256,6400] = mul byg bid
            byi:f16[64,256,6400] = add_any byf byh
            byj:f16[64,256,6400] = mul bxz bie
            byk:f16[64,256,6400] = add_any byi byj
            byl:f16[6400] = reduce_sum[axes=(0, 1)] byk
            bym:f16[1,1,6400] = reshape[dimensions=None new_sizes=(1, 1, 6400)] byl
            byn:f16[6400] = reduce_sum[axes=(0, 1)] bym
            byo:f16[6400,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] byk bif
            byp:f16[1600,6400] = transpose[permutation=(1, 0)] byo
            byq:f16[6400,1600] = transpose[permutation=(1, 0)] byp
            byr:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] byk big
            bys:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] byr
            byt:f32[1600] = reduce_sum[axes=(0, 1)] bys
            byu:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] byt
            byv:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] byu
            byw:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] byv
            byx:f32[64,256,1600] = mul bih bys
            byy:f32[64,256,1600] = mul bii byx
            byz:f32[1600] = reduce_sum[axes=(0, 1)] byy
            bza:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] byz
            bzb:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bza
            bzc:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] bzb
            bzd:f32[64,256,1600] = mul byx bij
            bze:f32[64,256] = reduce_sum[axes=(2,)] bzd
            bzf:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] bze
            bzg:f32[64,256,1] = mul bzf bik
            bzh:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] bzg
            bzi:f32[64,256] = mul bzh bil
            bzj:f32[64,256] = neg bzi
            bzk:f32[64,256] = mul bzj bim
            bzl:f32[64,256] = div bzi 1600.0
            bzm:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] bzl
            bzn:f32[64,256,1600] = mul bzm bin
            bzo:f32[64,256,1600] = mul bys bio
            bzp:f32[64,256,1600] = neg bzo
            bzq:f32[64,256] = reduce_sum[axes=(2,)] bzp
            bzr:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] bzq
            bzs:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] bzr
            bzt:f32[64,256] = add_any bzk bzs
            bzu:f32[64,256] = div bzt 1600.0
            bzv:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] bzu
            bzw:f32[64,256,1600] = add_any bzn bzv
            bzx:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bzw
            bzy:f16[64,256,1600] = add_any bxs bzx
            bzz:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bzo
            caa:f16[64,256,1600] = add_any bzy bzz
            cab:f16[1600] = reduce_sum[axes=(0, 1)] caa
            cac:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] cab
            cad:f16[1600] = reduce_sum[axes=(0, 1)] cac
            cae:f16[1600,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] caa bip
            caf:f16[1600,1600] = transpose[permutation=(1, 0)] cae
            cag:f16[1600,1600] = transpose[permutation=(1, 0)] caf
            cah:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] caa biq
            cai:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] cah
            caj:f16[64,25,64,256] = transpose[permutation=(0, 2, 3, 1)] cai
            cak:f16[64,25,256,256] = dot_general[
              dimension_numbers=(((2,), (3,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] caj bir
            cal:f16[64,25,256,256] = mul cak bis
            cam:f16[64,25,256,256] = mul cal bit
            can:f16[64,25,256] = reduce_sum[axes=(3,)] cam
            cao:f16[64,25,256,1] = reshape[
              dimensions=None
              new_sizes=(64, 25, 256, 1)
            ] can
            cap:f16[64,25,256,1] = neg cao
            caq:f32[64,25,256,1] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] cap
            car:f32[64,25,256] = reduce_sum[axes=(3,)] caq
            cas:f32[64,25,256,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 256)
            ] car
            cat:f16[64,25,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] cas
            cau:f16[64,25,256,256] = div cak biu
            cav:f16[64,25,256,256] = add_any cat cau
            caw:f16[64,25,256,256] = mul cav bit
            cax:f16[64,25,256,64] = dot_general[
              dimension_numbers=(((2,), (1,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] caw biv
            cay:f16[64,256,25,64] = transpose[permutation=(0, 2, 1, 3)] cax
            caz:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] cay
            cba:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (1600, 1600, 0))
            ] caz 0.0
            cbb:f16[64,25,256,64] = dot_general[
              dimension_numbers=(((3,), (1,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] caw biw
            cbc:f16[64,256,25,64] = transpose[permutation=(0, 2, 1, 3)] cbb
            cbd:f16[64,256,25,64] = div cbc bix
            cbe:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] cbd
            cbf:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (0, 3200, 0))
            ] cbe 0.0
            cbg:f16[64,256,4800] = add_any cba cbf
            cbh:f16[64,25,64,256] = dot_general[
              dimension_numbers=(((3,), (2,)), ((0, 1), (0, 1)))
              precision=None
              preferred_element_type=None
            ] caj biy
            cbi:f16[64,256,25,64] = transpose[permutation=(0, 3, 1, 2)] cbh
            cbj:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] cbi
            cbk:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (3200, 0, 0))
            ] cbj 0.0
            cbl:f16[64,256,4800] = add_any cbg cbk
            cbm:f16[4800] = reduce_sum[axes=(0, 1)] cbl
            cbn:f16[1,1,4800] = reshape[dimensions=None new_sizes=(1, 1, 4800)] cbm
            cbo:f16[4800] = reduce_sum[axes=(0, 1)] cbn
            cbp:f16[4800,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] cbl biz
            cbq:f16[1600,4800] = transpose[permutation=(1, 0)] cbp
            cbr:f16[4800,1600] = transpose[permutation=(1, 0)] cbq
            cbs:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] cbl bja
            cbt:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] cbs
            cbu:f32[1600] = reduce_sum[axes=(0, 1)] cbt
            cbv:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] cbu
            cbw:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] cbv
            cbx:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] cbw
            cby:f32[64,256,1600] = mul bjb cbt
            cbz:f32[64,256,1600] = mul bjc cby
            cca:f32[1600] = reduce_sum[axes=(0, 1)] cbz
            ccb:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] cca
            ccc:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] ccb
            ccd:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] ccc
            cce:f32[64,256,1600] = mul cby bjd
            ccf:f32[64,256] = reduce_sum[axes=(2,)] cce
            ccg:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] ccf
            cch:f32[64,256,1] = mul ccg bje
            cci:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] cch
            ccj:f32[64,256] = mul cci bjf
            cck:f32[64,256] = neg ccj
            ccl:f32[64,256] = mul cck bjg
            ccm:f32[64,256] = div ccj 1600.0
            ccn:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] ccm
            cco:f32[64,256,1600] = mul ccn bjh
            ccp:f32[64,256,1600] = mul cbt bji
            ccq:f32[64,256,1600] = neg ccp
            ccr:f32[64,256] = reduce_sum[axes=(2,)] ccq
            ccs:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] ccr
            cct:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] ccs
            ccu:f32[64,256] = add_any ccl cct
            ccv:f32[64,256] = div ccu 1600.0
            ccw:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] ccv
            ccx:f32[64,256,1600] = add_any cco ccw
            ccy:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] ccx
            ccz:f16[64,256,1600] = add_any caa ccy
            cda:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] ccp
            cdb:f16[64,256,1600] = add_any ccz cda
            cdc:f16[1600] = reduce_sum[axes=(0, 1)] cdb
            cdd:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] cdc
            cde:f16[1600] = reduce_sum[axes=(0, 1)] cdd
            cdf:f16[1600,6400] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] cdb bjj
            cdg:f16[6400,1600] = transpose[permutation=(1, 0)] cdf
            cdh:f16[1600,6400] = transpose[permutation=(1, 0)] cdg
            cdi:f16[64,256,6400] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] cdb bjk
            cdj:f16[64,256,6400] = mul bjl cdi
            cdk:f16[64,256,6400] = mul 0.5 cdj
            cdl:f16[64,256,6400] = mul cdk bjm
            cdm:f16[64,256,6400] = mul cdl bjn
            cdn:f16[64,256,6400] = add_any cdl cdm
            cdo:f16[64,256,6400] = mul 0.7978515625 cdn
            cdp:f16[64,256,6400] = mul 0.044708251953125 cdo
            cdq:f16[64,256,6400] = mul cdp bjo
            cdr:f16[64,256,6400] = add_any cdo cdq
            cds:f16[64,256,6400] = mul cdi bjp
            cdt:f16[64,256,6400] = add_any cdr cds
            cdu:f16[6400] = reduce_sum[axes=(0, 1)] cdt
            cdv:f16[1,1,6400] = reshape[dimensions=None new_sizes=(1, 1, 6400)] cdu
            cdw:f16[6400] = reduce_sum[axes=(0, 1)] cdv
            cdx:f16[6400,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] cdt bjq
            cdy:f16[1600,6400] = transpose[permutation=(1, 0)] cdx
            cdz:f16[6400,1600] = transpose[permutation=(1, 0)] cdy
            cea:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] cdt bjr
            ceb:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] cea
            cec:f32[1600] = reduce_sum[axes=(0, 1)] ceb
            ced:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] cec
            cee:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] ced
            cef:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] cee
            ceg:f32[64,256,1600] = mul bjs ceb
            ceh:f32[64,256,1600] = mul bjt ceg
            cei:f32[1600] = reduce_sum[axes=(0, 1)] ceh
            cej:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] cei
            cek:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] cej
            cel:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] cek
            cem:f32[64,256,1600] = mul ceg bju
            cen:f32[64,256] = reduce_sum[axes=(2,)] cem
            ceo:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] cen
            cep:f32[64,256,1] = mul ceo bjv
            ceq:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] cep
            cer:f32[64,256] = mul ceq bjw
            ces:f32[64,256] = neg cer
            cet:f32[64,256] = mul ces bjx
            ceu:f32[64,256] = div cer 1600.0
            cev:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] ceu
            cew:f32[64,256,1600] = mul cev bjy
            cex:f32[64,256,1600] = mul ceb bjz
            cey:f32[64,256,1600] = neg cex
            cez:f32[64,256] = reduce_sum[axes=(2,)] cey
            cfa:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] cez
            cfb:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] cfa
            cfc:f32[64,256] = add_any cet cfb
            cfd:f32[64,256] = div cfc 1600.0
            cfe:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] cfd
            cff:f32[64,256,1600] = add_any cew cfe
            cfg:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] cff
            cfh:f16[64,256,1600] = add_any cdb cfg
            cfi:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] cex
            cfj:f16[64,256,1600] = add_any cfh cfi
            cfk:f16[1600] = add bcm bkc
            cfl:f16[1600,1600] = add bcn bkf
            cfm:f16[4800] = add bco bln
            cfn:f16[4800,1600] = add bcp blq
            cfo:f16[1600] = add bcq blw
            cfp:f16[1600] = add bcr bmc
            cfq:f16[1600] = add bcs bnd
            cfr:f16[1600,6400] = add bct bng
            cfs:f16[6400] = add bcu bnv
            cft:f16[6400,1600] = add bcv bny
            cfu:f16[1600] = add bcw boe
            cfv:f16[1600] = add bcx bok
            cfw:f16[1600] = add bcy bpl
            cfx:f16[1600,1600] = add bcz bpo
            cfy:f16[4800] = add bda bqw
            cfz:f16[4800,1600] = add bdb bqz
            cga:f16[1600] = add bdc brf
            cgb:f16[1600] = add bdd brl
            cgc:f16[1600] = add bde bsm
            cgd:f16[1600,6400] = add bdf bsp
            cge:f16[6400] = add bdg bte
            cgf:f16[6400,1600] = add bdh bth
            cgg:f16[1600] = add bdi btn
            cgh:f16[1600] = add bdj btt
            cgi:f16[1600] = add bdk buu
            cgj:f16[1600,1600] = add bdl bux
            cgk:f16[4800] = add bdm bwf
            cgl:f16[4800,1600] = add bdn bwi
            cgm:f16[1600] = add bdo bwo
            cgn:f16[1600] = add bdp bwu
            cgo:f16[1600] = add bdq bxv
            cgp:f16[1600,6400] = add bdr bxy
            cgq:f16[6400] = add bds byn
            cgr:f16[6400,1600] = add bdt byq
            cgs:f16[1600] = add bdu byw
            cgt:f16[1600] = add bdv bzc
            cgu:f16[1600] = add bdw cad
            cgv:f16[1600,1600] = add bdx cag
            cgw:f16[4800] = add bdy cbo
            cgx:f16[4800,1600] = add bdz cbr
            cgy:f16[1600] = add bea cbx
            cgz:f16[1600] = add beb ccd
            cha:f16[1600] = add bec cde
            chb:f16[1600,6400] = add bed cdh
            chc:f16[6400] = add bee cdw
            chd:f16[6400,1600] = add bef cdz
            che:f16[1600] = add beg cef
            chf:f16[1600] = add beh cel
          in (cfj, cfk, cfl, cfm, cfn, cfo, cfp, cfq, cfr, cfs, cft, cfu, cfv, cfw,
            cfx, cfy, cfz, cga, cgb, cgc, cgd, cge, cgf, cgg, cgh, cgi, cgj, cgk,
            cgl, cgm, cgn, cgo, cgp, cgq, cgr, cgs, cgt, cgu, cgv, cgw, cgx, cgy,
            cgz, cha, chb, chc, chd, che, chf) }
        name=41
      ] tq ef eg eh ei ej ek el em en eo ep eq er es et eu ev ew ex ey ez fa fb fc
        fd fe ff fg fh fi fj fk fl fm fn fo fp fq fr fs ft fu fv fw fx fy fz ga ix
        iy iz ja jb jc jd je jf jg jh ji jj jk jl jm jn jo jp jq jr js jt ju jv jw
        jx jy jz ka kb kc kd ke kf kg kh ki kj kk kl km kn ko kp kq kr ks kt ku kv
        kw kx ky kz la lb lc ld le lf lg lh li lj lk ll lm ln lo lp lq lr ls lt lu
        lv lw lx ly lz ma mb mc md me mf mg mh mi mj mk ml mm mn mo mp mq mr ms mt
        mu mv mw mx my mz na nb nc nd ne nf ng nh ni nj nk nl nm nn no np nq nr ns
        nt nu nv nw nx ny nz oa ob oc od oe of og oh oi oj ok ol om on oo
      chg:f16[64,256,1600] chh:f16[1600] chi:f16[1600,1600] chj:f16[4800] chk:f16[4800,1600]
        chl:f16[1600] chm:f16[1600] chn:f16[1600] cho:f16[1600,6400] chp:f16[6400]
        chq:f16[6400,1600] chr:f16[1600] chs:f16[1600] cht:f16[1600] chu:f16[1600,1600]
        chv:f16[4800] chw:f16[4800,1600] chx:f16[1600] chy:f16[1600] chz:f16[1600]
        cia:f16[1600,6400] cib:f16[6400] cic:f16[6400,1600] cid:f16[1600] cie:f16[1600]
        cif:f16[1600] cig:f16[1600,1600] cih:f16[4800] cii:f16[4800,1600] cij:f16[1600]
        cik:f16[1600] cil:f16[1600] cim:f16[1600,6400] cin:f16[6400] cio:f16[6400,1600]
        cip:f16[1600] ciq:f16[1600] cir:f16[1600] cis:f16[1600,1600] cit:f16[4800]
        ciu:f16[4800,1600] civ:f16[1600] ciw:f16[1600] = named_call[
        call_jaxpr={ lambda ; cix:f16[64,256,1600] ciy:f16[1600] ciz:f16[1600,1600]
            cja:f16[4800] cjb:f16[4800,1600] cjc:f16[1600] cjd:f16[1600] cje:f16[1600]
            cjf:f16[1600,6400] cjg:f16[6400] cjh:f16[6400,1600] cji:f16[1600] cjj:f16[1600]
            cjk:f16[1600] cjl:f16[1600,1600] cjm:f16[4800] cjn:f16[4800,1600] cjo:f16[1600]
            cjp:f16[1600] cjq:f16[1600] cjr:f16[1600,6400] cjs:f16[6400] cjt:f16[6400,1600]
            cju:f16[1600] cjv:f16[1600] cjw:f16[1600] cjx:f16[1600,1600] cjy:f16[4800]
            cjz:f16[4800,1600] cka:f16[1600] ckb:f16[1600] ckc:f16[1600] ckd:f16[1600,6400]
            cke:f16[6400] ckf:f16[6400,1600] ckg:f16[1600] ckh:f16[1600] cki:f16[1600]
            ckj:f16[1600,1600] ckk:f16[4800] ckl:f16[4800,1600] ckm:f16[1600] ckn:f16[1600]
            cko:f16[64,256,1600] ckp:f16[1600,1600] ckq:f16[64,256,25,64] ckr:f16[64,25,256,1]
            cks:f16[64,25,256,256] ckt:f16[64,25,256,1] cku:f16[64,256,25,64] ckv:f16[64,256,25,64]
            ckw:f16[] ckx:f16[64,25,256,256] cky:f16[64,256,1600] ckz:f16[1600,4800]
            cla:f32[64,256,1600] clb:f32[64,256,1] clc:f32[1,1,1600] cld:f32[64,256,1]
            cle:f32[64,256] clf:f32[64,256] clg:f32[64,256,1600] clh:f32[64,256,1600]
            cli:f16[64,256,6400] clj:f16[6400,1600] clk:f16[64,256,6400] cll:f16[64,256,6400]
            clm:f16[64,256,6400] cln:f16[64,256,6400] clo:f16[64,256,6400] clp:f16[64,256,1600]
            clq:f16[1600,6400] clr:f32[64,256,1600] cls:f32[64,256,1] clt:f32[1,1,1600]
            clu:f32[64,256,1] clv:f32[64,256] clw:f32[64,256] clx:f32[64,256,1600]
            cly:f32[64,256,1600] clz:f16[64,256,1600] cma:f16[1600,1600] cmb:f16[64,256,25,64]
            cmc:f16[64,25,256,1] cmd:f16[64,25,256,256] cme:f16[64,25,256,1] cmf:f16[64,256,25,64]
            cmg:f16[64,256,25,64] cmh:f16[] cmi:f16[64,25,256,256] cmj:f16[64,256,1600]
            cmk:f16[1600,4800] cml:f32[64,256,1600] cmm:f32[64,256,1] cmn:f32[1,1,1600]
            cmo:f32[64,256,1] cmp:f32[64,256] cmq:f32[64,256] cmr:f32[64,256,1600]
            cms:f32[64,256,1600] cmt:f16[64,256,6400] cmu:f16[6400,1600] cmv:f16[64,256,6400]
            cmw:f16[64,256,6400] cmx:f16[64,256,6400] cmy:f16[64,256,6400] cmz:f16[64,256,6400]
            cna:f16[64,256,1600] cnb:f16[1600,6400] cnc:f32[64,256,1600] cnd:f32[64,256,1]
            cne:f32[1,1,1600] cnf:f32[64,256,1] cng:f32[64,256] cnh:f32[64,256] cni:f32[64,256,1600]
            cnj:f32[64,256,1600] cnk:f16[64,256,1600] cnl:f16[1600,1600] cnm:f16[64,256,25,64]
            cnn:f16[64,25,256,1] cno:f16[64,25,256,256] cnp:f16[64,25,256,1] cnq:f16[64,256,25,64]
            cnr:f16[64,256,25,64] cns:f16[] cnt:f16[64,25,256,256] cnu:f16[64,256,1600]
            cnv:f16[1600,4800] cnw:f32[64,256,1600] cnx:f32[64,256,1] cny:f32[1,1,1600]
            cnz:f32[64,256,1] coa:f32[64,256] cob:f32[64,256] coc:f32[64,256,1600]
            cod:f32[64,256,1600] coe:f16[64,256,6400] cof:f16[6400,1600] cog:f16[64,256,6400]
            coh:f16[64,256,6400] coi:f16[64,256,6400] coj:f16[64,256,6400] cok:f16[64,256,6400]
            col:f16[64,256,1600] com:f16[1600,6400] con:f32[64,256,1600] coo:f32[64,256,1]
            cop:f32[1,1,1600] coq:f32[64,256,1] cor:f32[64,256] cos:f32[64,256] cot:f32[64,256,1600]
            cou:f32[64,256,1600] cov:f16[64,256,1600] cow:f16[1600,1600] cox:f16[64,256,25,64]
            coy:f16[64,25,256,1] coz:f16[64,25,256,256] cpa:f16[64,25,256,1] cpb:f16[64,256,25,64]
            cpc:f16[64,256,25,64] cpd:f16[] cpe:f16[64,25,256,256] cpf:f16[64,256,1600]
            cpg:f16[1600,4800] cph:f32[64,256,1600] cpi:f32[64,256,1] cpj:f32[1,1,1600]
            cpk:f32[64,256,1] cpl:f32[64,256] cpm:f32[64,256] cpn:f32[64,256,1600]
            cpo:f32[64,256,1600]. let
            cpp:f16[1600] = reduce_sum[axes=(0, 1)] cix
            cpq:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] cpp
            cpr:f16[1600] = reduce_sum[axes=(0, 1)] cpq
            cps:f16[1600,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] cix cko
            cpt:f16[1600,1600] = transpose[permutation=(1, 0)] cps
            cpu:f16[1600,1600] = transpose[permutation=(1, 0)] cpt
            cpv:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] cix ckp
            cpw:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] cpv
            cpx:f16[64,25,64,256] = transpose[permutation=(0, 2, 3, 1)] cpw
            cpy:f16[64,25,256,256] = dot_general[
              dimension_numbers=(((2,), (3,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] cpx ckq
            cpz:f16[64,25,256,256] = mul cpy ckr
            cqa:f16[64,25,256,256] = mul cpz cks
            cqb:f16[64,25,256] = reduce_sum[axes=(3,)] cqa
            cqc:f16[64,25,256,1] = reshape[
              dimensions=None
              new_sizes=(64, 25, 256, 1)
            ] cqb
            cqd:f16[64,25,256,1] = neg cqc
            cqe:f32[64,25,256,1] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] cqd
            cqf:f32[64,25,256] = reduce_sum[axes=(3,)] cqe
            cqg:f32[64,25,256,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 256)
            ] cqf
            cqh:f16[64,25,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] cqg
            cqi:f16[64,25,256,256] = div cpy ckt
            cqj:f16[64,25,256,256] = add_any cqh cqi
            cqk:f16[64,25,256,256] = mul cqj cks
            cql:f16[64,25,256,64] = dot_general[
              dimension_numbers=(((2,), (1,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] cqk cku
            cqm:f16[64,256,25,64] = transpose[permutation=(0, 2, 1, 3)] cql
            cqn:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] cqm
            cqo:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (1600, 1600, 0))
            ] cqn 0.0
            cqp:f16[64,25,256,64] = dot_general[
              dimension_numbers=(((3,), (1,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] cqk ckv
            cqq:f16[64,256,25,64] = transpose[permutation=(0, 2, 1, 3)] cqp
            cqr:f16[64,256,25,64] = div cqq ckw
            cqs:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] cqr
            cqt:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (0, 3200, 0))
            ] cqs 0.0
            cqu:f16[64,256,4800] = add_any cqo cqt
            cqv:f16[64,25,64,256] = dot_general[
              dimension_numbers=(((3,), (2,)), ((0, 1), (0, 1)))
              precision=None
              preferred_element_type=None
            ] cpx ckx
            cqw:f16[64,256,25,64] = transpose[permutation=(0, 3, 1, 2)] cqv
            cqx:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] cqw
            cqy:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (3200, 0, 0))
            ] cqx 0.0
            cqz:f16[64,256,4800] = add_any cqu cqy
            cra:f16[4800] = reduce_sum[axes=(0, 1)] cqz
            crb:f16[1,1,4800] = reshape[dimensions=None new_sizes=(1, 1, 4800)] cra
            crc:f16[4800] = reduce_sum[axes=(0, 1)] crb
            crd:f16[4800,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] cqz cky
            cre:f16[1600,4800] = transpose[permutation=(1, 0)] crd
            crf:f16[4800,1600] = transpose[permutation=(1, 0)] cre
            crg:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] cqz ckz
            crh:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] crg
            cri:f32[1600] = reduce_sum[axes=(0, 1)] crh
            crj:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] cri
            crk:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] crj
            crl:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] crk
            crm:f32[64,256,1600] = mul cla crh
            crn:f32[64,256,1600] = mul clb crm
            cro:f32[1600] = reduce_sum[axes=(0, 1)] crn
            crp:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] cro
            crq:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] crp
            crr:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] crq
            crs:f32[64,256,1600] = mul crm clc
            crt:f32[64,256] = reduce_sum[axes=(2,)] crs
            cru:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] crt
            crv:f32[64,256,1] = mul cru cld
            crw:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] crv
            crx:f32[64,256] = mul crw cle
            cry:f32[64,256] = neg crx
            crz:f32[64,256] = mul cry clf
            csa:f32[64,256] = div crx 1600.0
            csb:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] csa
            csc:f32[64,256,1600] = mul csb clg
            csd:f32[64,256,1600] = mul crh clh
            cse:f32[64,256,1600] = neg csd
            csf:f32[64,256] = reduce_sum[axes=(2,)] cse
            csg:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] csf
            csh:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] csg
            csi:f32[64,256] = add_any crz csh
            csj:f32[64,256] = div csi 1600.0
            csk:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] csj
            csl:f32[64,256,1600] = add_any csc csk
            csm:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] csl
            csn:f16[64,256,1600] = add_any cix csm
            cso:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] csd
            csp:f16[64,256,1600] = add_any csn cso
            csq:f16[1600] = reduce_sum[axes=(0, 1)] csp
            csr:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] csq
            css:f16[1600] = reduce_sum[axes=(0, 1)] csr
            cst:f16[1600,6400] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] csp cli
            csu:f16[6400,1600] = transpose[permutation=(1, 0)] cst
            csv:f16[1600,6400] = transpose[permutation=(1, 0)] csu
            csw:f16[64,256,6400] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] csp clj
            csx:f16[64,256,6400] = mul clk csw
            csy:f16[64,256,6400] = mul 0.5 csx
            csz:f16[64,256,6400] = mul csy cll
            cta:f16[64,256,6400] = mul csz clm
            ctb:f16[64,256,6400] = add_any csz cta
            ctc:f16[64,256,6400] = mul 0.7978515625 ctb
            ctd:f16[64,256,6400] = mul 0.044708251953125 ctc
            cte:f16[64,256,6400] = mul ctd cln
            ctf:f16[64,256,6400] = add_any ctc cte
            ctg:f16[64,256,6400] = mul csw clo
            cth:f16[64,256,6400] = add_any ctf ctg
            cti:f16[6400] = reduce_sum[axes=(0, 1)] cth
            ctj:f16[1,1,6400] = reshape[dimensions=None new_sizes=(1, 1, 6400)] cti
            ctk:f16[6400] = reduce_sum[axes=(0, 1)] ctj
            ctl:f16[6400,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] cth clp
            ctm:f16[1600,6400] = transpose[permutation=(1, 0)] ctl
            ctn:f16[6400,1600] = transpose[permutation=(1, 0)] ctm
            cto:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] cth clq
            ctp:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] cto
            ctq:f32[1600] = reduce_sum[axes=(0, 1)] ctp
            ctr:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] ctq
            cts:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] ctr
            ctt:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] cts
            ctu:f32[64,256,1600] = mul clr ctp
            ctv:f32[64,256,1600] = mul cls ctu
            ctw:f32[1600] = reduce_sum[axes=(0, 1)] ctv
            ctx:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] ctw
            cty:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] ctx
            ctz:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] cty
            cua:f32[64,256,1600] = mul ctu clt
            cub:f32[64,256] = reduce_sum[axes=(2,)] cua
            cuc:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] cub
            cud:f32[64,256,1] = mul cuc clu
            cue:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] cud
            cuf:f32[64,256] = mul cue clv
            cug:f32[64,256] = neg cuf
            cuh:f32[64,256] = mul cug clw
            cui:f32[64,256] = div cuf 1600.0
            cuj:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] cui
            cuk:f32[64,256,1600] = mul cuj clx
            cul:f32[64,256,1600] = mul ctp cly
            cum:f32[64,256,1600] = neg cul
            cun:f32[64,256] = reduce_sum[axes=(2,)] cum
            cuo:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] cun
            cup:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] cuo
            cuq:f32[64,256] = add_any cuh cup
            cur:f32[64,256] = div cuq 1600.0
            cus:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] cur
            cut:f32[64,256,1600] = add_any cuk cus
            cuu:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] cut
            cuv:f16[64,256,1600] = add_any csp cuu
            cuw:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] cul
            cux:f16[64,256,1600] = add_any cuv cuw
            cuy:f16[1600] = reduce_sum[axes=(0, 1)] cux
            cuz:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] cuy
            cva:f16[1600] = reduce_sum[axes=(0, 1)] cuz
            cvb:f16[1600,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] cux clz
            cvc:f16[1600,1600] = transpose[permutation=(1, 0)] cvb
            cvd:f16[1600,1600] = transpose[permutation=(1, 0)] cvc
            cve:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] cux cma
            cvf:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] cve
            cvg:f16[64,25,64,256] = transpose[permutation=(0, 2, 3, 1)] cvf
            cvh:f16[64,25,256,256] = dot_general[
              dimension_numbers=(((2,), (3,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] cvg cmb
            cvi:f16[64,25,256,256] = mul cvh cmc
            cvj:f16[64,25,256,256] = mul cvi cmd
            cvk:f16[64,25,256] = reduce_sum[axes=(3,)] cvj
            cvl:f16[64,25,256,1] = reshape[
              dimensions=None
              new_sizes=(64, 25, 256, 1)
            ] cvk
            cvm:f16[64,25,256,1] = neg cvl
            cvn:f32[64,25,256,1] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] cvm
            cvo:f32[64,25,256] = reduce_sum[axes=(3,)] cvn
            cvp:f32[64,25,256,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 256)
            ] cvo
            cvq:f16[64,25,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] cvp
            cvr:f16[64,25,256,256] = div cvh cme
            cvs:f16[64,25,256,256] = add_any cvq cvr
            cvt:f16[64,25,256,256] = mul cvs cmd
            cvu:f16[64,25,256,64] = dot_general[
              dimension_numbers=(((2,), (1,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] cvt cmf
            cvv:f16[64,256,25,64] = transpose[permutation=(0, 2, 1, 3)] cvu
            cvw:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] cvv
            cvx:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (1600, 1600, 0))
            ] cvw 0.0
            cvy:f16[64,25,256,64] = dot_general[
              dimension_numbers=(((3,), (1,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] cvt cmg
            cvz:f16[64,256,25,64] = transpose[permutation=(0, 2, 1, 3)] cvy
            cwa:f16[64,256,25,64] = div cvz cmh
            cwb:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] cwa
            cwc:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (0, 3200, 0))
            ] cwb 0.0
            cwd:f16[64,256,4800] = add_any cvx cwc
            cwe:f16[64,25,64,256] = dot_general[
              dimension_numbers=(((3,), (2,)), ((0, 1), (0, 1)))
              precision=None
              preferred_element_type=None
            ] cvg cmi
            cwf:f16[64,256,25,64] = transpose[permutation=(0, 3, 1, 2)] cwe
            cwg:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] cwf
            cwh:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (3200, 0, 0))
            ] cwg 0.0
            cwi:f16[64,256,4800] = add_any cwd cwh
            cwj:f16[4800] = reduce_sum[axes=(0, 1)] cwi
            cwk:f16[1,1,4800] = reshape[dimensions=None new_sizes=(1, 1, 4800)] cwj
            cwl:f16[4800] = reduce_sum[axes=(0, 1)] cwk
            cwm:f16[4800,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] cwi cmj
            cwn:f16[1600,4800] = transpose[permutation=(1, 0)] cwm
            cwo:f16[4800,1600] = transpose[permutation=(1, 0)] cwn
            cwp:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] cwi cmk
            cwq:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] cwp
            cwr:f32[1600] = reduce_sum[axes=(0, 1)] cwq
            cws:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] cwr
            cwt:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] cws
            cwu:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] cwt
            cwv:f32[64,256,1600] = mul cml cwq
            cww:f32[64,256,1600] = mul cmm cwv
            cwx:f32[1600] = reduce_sum[axes=(0, 1)] cww
            cwy:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] cwx
            cwz:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] cwy
            cxa:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] cwz
            cxb:f32[64,256,1600] = mul cwv cmn
            cxc:f32[64,256] = reduce_sum[axes=(2,)] cxb
            cxd:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] cxc
            cxe:f32[64,256,1] = mul cxd cmo
            cxf:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] cxe
            cxg:f32[64,256] = mul cxf cmp
            cxh:f32[64,256] = neg cxg
            cxi:f32[64,256] = mul cxh cmq
            cxj:f32[64,256] = div cxg 1600.0
            cxk:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] cxj
            cxl:f32[64,256,1600] = mul cxk cmr
            cxm:f32[64,256,1600] = mul cwq cms
            cxn:f32[64,256,1600] = neg cxm
            cxo:f32[64,256] = reduce_sum[axes=(2,)] cxn
            cxp:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] cxo
            cxq:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] cxp
            cxr:f32[64,256] = add_any cxi cxq
            cxs:f32[64,256] = div cxr 1600.0
            cxt:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] cxs
            cxu:f32[64,256,1600] = add_any cxl cxt
            cxv:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] cxu
            cxw:f16[64,256,1600] = add_any cux cxv
            cxx:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] cxm
            cxy:f16[64,256,1600] = add_any cxw cxx
            cxz:f16[1600] = reduce_sum[axes=(0, 1)] cxy
            cya:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] cxz
            cyb:f16[1600] = reduce_sum[axes=(0, 1)] cya
            cyc:f16[1600,6400] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] cxy cmt
            cyd:f16[6400,1600] = transpose[permutation=(1, 0)] cyc
            cye:f16[1600,6400] = transpose[permutation=(1, 0)] cyd
            cyf:f16[64,256,6400] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] cxy cmu
            cyg:f16[64,256,6400] = mul cmv cyf
            cyh:f16[64,256,6400] = mul 0.5 cyg
            cyi:f16[64,256,6400] = mul cyh cmw
            cyj:f16[64,256,6400] = mul cyi cmx
            cyk:f16[64,256,6400] = add_any cyi cyj
            cyl:f16[64,256,6400] = mul 0.7978515625 cyk
            cym:f16[64,256,6400] = mul 0.044708251953125 cyl
            cyn:f16[64,256,6400] = mul cym cmy
            cyo:f16[64,256,6400] = add_any cyl cyn
            cyp:f16[64,256,6400] = mul cyf cmz
            cyq:f16[64,256,6400] = add_any cyo cyp
            cyr:f16[6400] = reduce_sum[axes=(0, 1)] cyq
            cys:f16[1,1,6400] = reshape[dimensions=None new_sizes=(1, 1, 6400)] cyr
            cyt:f16[6400] = reduce_sum[axes=(0, 1)] cys
            cyu:f16[6400,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] cyq cna
            cyv:f16[1600,6400] = transpose[permutation=(1, 0)] cyu
            cyw:f16[6400,1600] = transpose[permutation=(1, 0)] cyv
            cyx:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] cyq cnb
            cyy:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] cyx
            cyz:f32[1600] = reduce_sum[axes=(0, 1)] cyy
            cza:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] cyz
            czb:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] cza
            czc:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] czb
            czd:f32[64,256,1600] = mul cnc cyy
            cze:f32[64,256,1600] = mul cnd czd
            czf:f32[1600] = reduce_sum[axes=(0, 1)] cze
            czg:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] czf
            czh:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] czg
            czi:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] czh
            czj:f32[64,256,1600] = mul czd cne
            czk:f32[64,256] = reduce_sum[axes=(2,)] czj
            czl:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] czk
            czm:f32[64,256,1] = mul czl cnf
            czn:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] czm
            czo:f32[64,256] = mul czn cng
            czp:f32[64,256] = neg czo
            czq:f32[64,256] = mul czp cnh
            czr:f32[64,256] = div czo 1600.0
            czs:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] czr
            czt:f32[64,256,1600] = mul czs cni
            czu:f32[64,256,1600] = mul cyy cnj
            czv:f32[64,256,1600] = neg czu
            czw:f32[64,256] = reduce_sum[axes=(2,)] czv
            czx:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] czw
            czy:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] czx
            czz:f32[64,256] = add_any czq czy
            daa:f32[64,256] = div czz 1600.0
            dab:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] daa
            dac:f32[64,256,1600] = add_any czt dab
            dad:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] dac
            dae:f16[64,256,1600] = add_any cxy dad
            daf:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] czu
            dag:f16[64,256,1600] = add_any dae daf
            dah:f16[1600] = reduce_sum[axes=(0, 1)] dag
            dai:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] dah
            daj:f16[1600] = reduce_sum[axes=(0, 1)] dai
            dak:f16[1600,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] dag cnk
            dal:f16[1600,1600] = transpose[permutation=(1, 0)] dak
            dam:f16[1600,1600] = transpose[permutation=(1, 0)] dal
            dan:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] dag cnl
            dao:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] dan
            dap:f16[64,25,64,256] = transpose[permutation=(0, 2, 3, 1)] dao
            daq:f16[64,25,256,256] = dot_general[
              dimension_numbers=(((2,), (3,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] dap cnm
            dar:f16[64,25,256,256] = mul daq cnn
            das:f16[64,25,256,256] = mul dar cno
            dat:f16[64,25,256] = reduce_sum[axes=(3,)] das
            dau:f16[64,25,256,1] = reshape[
              dimensions=None
              new_sizes=(64, 25, 256, 1)
            ] dat
            dav:f16[64,25,256,1] = neg dau
            daw:f32[64,25,256,1] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] dav
            dax:f32[64,25,256] = reduce_sum[axes=(3,)] daw
            day:f32[64,25,256,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 256)
            ] dax
            daz:f16[64,25,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] day
            dba:f16[64,25,256,256] = div daq cnp
            dbb:f16[64,25,256,256] = add_any daz dba
            dbc:f16[64,25,256,256] = mul dbb cno
            dbd:f16[64,25,256,64] = dot_general[
              dimension_numbers=(((2,), (1,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] dbc cnq
            dbe:f16[64,256,25,64] = transpose[permutation=(0, 2, 1, 3)] dbd
            dbf:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] dbe
            dbg:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (1600, 1600, 0))
            ] dbf 0.0
            dbh:f16[64,25,256,64] = dot_general[
              dimension_numbers=(((3,), (1,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] dbc cnr
            dbi:f16[64,256,25,64] = transpose[permutation=(0, 2, 1, 3)] dbh
            dbj:f16[64,256,25,64] = div dbi cns
            dbk:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] dbj
            dbl:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (0, 3200, 0))
            ] dbk 0.0
            dbm:f16[64,256,4800] = add_any dbg dbl
            dbn:f16[64,25,64,256] = dot_general[
              dimension_numbers=(((3,), (2,)), ((0, 1), (0, 1)))
              precision=None
              preferred_element_type=None
            ] dap cnt
            dbo:f16[64,256,25,64] = transpose[permutation=(0, 3, 1, 2)] dbn
            dbp:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] dbo
            dbq:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (3200, 0, 0))
            ] dbp 0.0
            dbr:f16[64,256,4800] = add_any dbm dbq
            dbs:f16[4800] = reduce_sum[axes=(0, 1)] dbr
            dbt:f16[1,1,4800] = reshape[dimensions=None new_sizes=(1, 1, 4800)] dbs
            dbu:f16[4800] = reduce_sum[axes=(0, 1)] dbt
            dbv:f16[4800,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] dbr cnu
            dbw:f16[1600,4800] = transpose[permutation=(1, 0)] dbv
            dbx:f16[4800,1600] = transpose[permutation=(1, 0)] dbw
            dby:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] dbr cnv
            dbz:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] dby
            dca:f32[1600] = reduce_sum[axes=(0, 1)] dbz
            dcb:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] dca
            dcc:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] dcb
            dcd:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] dcc
            dce:f32[64,256,1600] = mul cnw dbz
            dcf:f32[64,256,1600] = mul cnx dce
            dcg:f32[1600] = reduce_sum[axes=(0, 1)] dcf
            dch:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] dcg
            dci:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] dch
            dcj:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] dci
            dck:f32[64,256,1600] = mul dce cny
            dcl:f32[64,256] = reduce_sum[axes=(2,)] dck
            dcm:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] dcl
            dcn:f32[64,256,1] = mul dcm cnz
            dco:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] dcn
            dcp:f32[64,256] = mul dco coa
            dcq:f32[64,256] = neg dcp
            dcr:f32[64,256] = mul dcq cob
            dcs:f32[64,256] = div dcp 1600.0
            dct:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] dcs
            dcu:f32[64,256,1600] = mul dct coc
            dcv:f32[64,256,1600] = mul dbz cod
            dcw:f32[64,256,1600] = neg dcv
            dcx:f32[64,256] = reduce_sum[axes=(2,)] dcw
            dcy:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] dcx
            dcz:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] dcy
            dda:f32[64,256] = add_any dcr dcz
            ddb:f32[64,256] = div dda 1600.0
            ddc:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] ddb
            ddd:f32[64,256,1600] = add_any dcu ddc
            dde:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] ddd
            ddf:f16[64,256,1600] = add_any dag dde
            ddg:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] dcv
            ddh:f16[64,256,1600] = add_any ddf ddg
            ddi:f16[1600] = reduce_sum[axes=(0, 1)] ddh
            ddj:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] ddi
            ddk:f16[1600] = reduce_sum[axes=(0, 1)] ddj
            ddl:f16[1600,6400] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] ddh coe
            ddm:f16[6400,1600] = transpose[permutation=(1, 0)] ddl
            ddn:f16[1600,6400] = transpose[permutation=(1, 0)] ddm
            ddo:f16[64,256,6400] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] ddh cof
            ddp:f16[64,256,6400] = mul cog ddo
            ddq:f16[64,256,6400] = mul 0.5 ddp
            ddr:f16[64,256,6400] = mul ddq coh
            dds:f16[64,256,6400] = mul ddr coi
            ddt:f16[64,256,6400] = add_any ddr dds
            ddu:f16[64,256,6400] = mul 0.7978515625 ddt
            ddv:f16[64,256,6400] = mul 0.044708251953125 ddu
            ddw:f16[64,256,6400] = mul ddv coj
            ddx:f16[64,256,6400] = add_any ddu ddw
            ddy:f16[64,256,6400] = mul ddo cok
            ddz:f16[64,256,6400] = add_any ddx ddy
            dea:f16[6400] = reduce_sum[axes=(0, 1)] ddz
            deb:f16[1,1,6400] = reshape[dimensions=None new_sizes=(1, 1, 6400)] dea
            dec:f16[6400] = reduce_sum[axes=(0, 1)] deb
            ded:f16[6400,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] ddz col
            dee:f16[1600,6400] = transpose[permutation=(1, 0)] ded
            def:f16[6400,1600] = transpose[permutation=(1, 0)] dee
            deg:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] ddz com
            deh:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] deg
            dei:f32[1600] = reduce_sum[axes=(0, 1)] deh
            dej:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] dei
            dek:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] dej
            del:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] dek
            dem:f32[64,256,1600] = mul con deh
            den:f32[64,256,1600] = mul coo dem
            deo:f32[1600] = reduce_sum[axes=(0, 1)] den
            dep:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] deo
            deq:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] dep
            der:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] deq
            des:f32[64,256,1600] = mul dem cop
            det:f32[64,256] = reduce_sum[axes=(2,)] des
            deu:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] det
            dev:f32[64,256,1] = mul deu coq
            dew:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] dev
            dex:f32[64,256] = mul dew cor
            dey:f32[64,256] = neg dex
            dez:f32[64,256] = mul dey cos
            dfa:f32[64,256] = div dex 1600.0
            dfb:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] dfa
            dfc:f32[64,256,1600] = mul dfb cot
            dfd:f32[64,256,1600] = mul deh cou
            dfe:f32[64,256,1600] = neg dfd
            dff:f32[64,256] = reduce_sum[axes=(2,)] dfe
            dfg:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] dff
            dfh:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] dfg
            dfi:f32[64,256] = add_any dez dfh
            dfj:f32[64,256] = div dfi 1600.0
            dfk:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] dfj
            dfl:f32[64,256,1600] = add_any dfc dfk
            dfm:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] dfl
            dfn:f16[64,256,1600] = add_any ddh dfm
            dfo:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] dfd
            dfp:f16[64,256,1600] = add_any dfn dfo
            dfq:f16[1600] = reduce_sum[axes=(0, 1)] dfp
            dfr:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] dfq
            dfs:f16[1600] = reduce_sum[axes=(0, 1)] dfr
            dft:f16[1600,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] dfp cov
            dfu:f16[1600,1600] = transpose[permutation=(1, 0)] dft
            dfv:f16[1600,1600] = transpose[permutation=(1, 0)] dfu
            dfw:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] dfp cow
            dfx:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] dfw
            dfy:f16[64,25,64,256] = transpose[permutation=(0, 2, 3, 1)] dfx
            dfz:f16[64,25,256,256] = dot_general[
              dimension_numbers=(((2,), (3,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] dfy cox
            dga:f16[64,25,256,256] = mul dfz coy
            dgb:f16[64,25,256,256] = mul dga coz
            dgc:f16[64,25,256] = reduce_sum[axes=(3,)] dgb
            dgd:f16[64,25,256,1] = reshape[
              dimensions=None
              new_sizes=(64, 25, 256, 1)
            ] dgc
            dge:f16[64,25,256,1] = neg dgd
            dgf:f32[64,25,256,1] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] dge
            dgg:f32[64,25,256] = reduce_sum[axes=(3,)] dgf
            dgh:f32[64,25,256,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 256)
            ] dgg
            dgi:f16[64,25,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] dgh
            dgj:f16[64,25,256,256] = div dfz cpa
            dgk:f16[64,25,256,256] = add_any dgi dgj
            dgl:f16[64,25,256,256] = mul dgk coz
            dgm:f16[64,25,256,64] = dot_general[
              dimension_numbers=(((2,), (1,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] dgl cpb
            dgn:f16[64,256,25,64] = transpose[permutation=(0, 2, 1, 3)] dgm
            dgo:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] dgn
            dgp:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (1600, 1600, 0))
            ] dgo 0.0
            dgq:f16[64,25,256,64] = dot_general[
              dimension_numbers=(((3,), (1,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] dgl cpc
            dgr:f16[64,256,25,64] = transpose[permutation=(0, 2, 1, 3)] dgq
            dgs:f16[64,256,25,64] = div dgr cpd
            dgt:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] dgs
            dgu:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (0, 3200, 0))
            ] dgt 0.0
            dgv:f16[64,256,4800] = add_any dgp dgu
            dgw:f16[64,25,64,256] = dot_general[
              dimension_numbers=(((3,), (2,)), ((0, 1), (0, 1)))
              precision=None
              preferred_element_type=None
            ] dfy cpe
            dgx:f16[64,256,25,64] = transpose[permutation=(0, 3, 1, 2)] dgw
            dgy:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] dgx
            dgz:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (3200, 0, 0))
            ] dgy 0.0
            dha:f16[64,256,4800] = add_any dgv dgz
            dhb:f16[4800] = reduce_sum[axes=(0, 1)] dha
            dhc:f16[1,1,4800] = reshape[dimensions=None new_sizes=(1, 1, 4800)] dhb
            dhd:f16[4800] = reduce_sum[axes=(0, 1)] dhc
            dhe:f16[4800,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] dha cpf
            dhf:f16[1600,4800] = transpose[permutation=(1, 0)] dhe
            dhg:f16[4800,1600] = transpose[permutation=(1, 0)] dhf
            dhh:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] dha cpg
            dhi:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] dhh
            dhj:f32[1600] = reduce_sum[axes=(0, 1)] dhi
            dhk:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] dhj
            dhl:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] dhk
            dhm:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] dhl
            dhn:f32[64,256,1600] = mul cph dhi
            dho:f32[64,256,1600] = mul cpi dhn
            dhp:f32[1600] = reduce_sum[axes=(0, 1)] dho
            dhq:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] dhp
            dhr:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] dhq
            dhs:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] dhr
            dht:f32[64,256,1600] = mul dhn cpj
            dhu:f32[64,256] = reduce_sum[axes=(2,)] dht
            dhv:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] dhu
            dhw:f32[64,256,1] = mul dhv cpk
            dhx:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] dhw
            dhy:f32[64,256] = mul dhx cpl
            dhz:f32[64,256] = neg dhy
            dia:f32[64,256] = mul dhz cpm
            dib:f32[64,256] = div dhy 1600.0
            dic:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] dib
            did:f32[64,256,1600] = mul dic cpn
            die:f32[64,256,1600] = mul dhi cpo
            dif:f32[64,256,1600] = neg die
            dig:f32[64,256] = reduce_sum[axes=(2,)] dif
            dih:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] dig
            dii:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] dih
            dij:f32[64,256] = add_any dia dii
            dik:f32[64,256] = div dij 1600.0
            dil:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] dik
            dim:f32[64,256,1600] = add_any did dil
            din:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] dim
            dio:f16[64,256,1600] = add_any dfp din
            dip:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] die
            diq:f16[64,256,1600] = add_any dio dip
            dir:f16[1600] = add ciy cpr
            dis:f16[1600,1600] = add ciz cpu
            dit:f16[4800] = add cja crc
            diu:f16[4800,1600] = add cjb crf
            div:f16[1600] = add cjc crl
            diw:f16[1600] = add cjd crr
            dix:f16[1600] = add cje css
            diy:f16[1600,6400] = add cjf csv
            diz:f16[6400] = add cjg ctk
            dja:f16[6400,1600] = add cjh ctn
            djb:f16[1600] = add cji ctt
            djc:f16[1600] = add cjj ctz
            djd:f16[1600] = add cjk cva
            dje:f16[1600,1600] = add cjl cvd
            djf:f16[4800] = add cjm cwl
            djg:f16[4800,1600] = add cjn cwo
            djh:f16[1600] = add cjo cwu
            dji:f16[1600] = add cjp cxa
            djj:f16[1600] = add cjq cyb
            djk:f16[1600,6400] = add cjr cye
            djl:f16[6400] = add cjs cyt
            djm:f16[6400,1600] = add cjt cyw
            djn:f16[1600] = add cju czc
            djo:f16[1600] = add cjv czi
            djp:f16[1600] = add cjw daj
            djq:f16[1600,1600] = add cjx dam
            djr:f16[4800] = add cjy dbu
            djs:f16[4800,1600] = add cjz dbx
            djt:f16[1600] = add cka dcd
            dju:f16[1600] = add ckb dcj
            djv:f16[1600] = add ckc ddk
            djw:f16[1600,6400] = add ckd ddn
            djx:f16[6400] = add cke dec
            djy:f16[6400,1600] = add ckf def
            djz:f16[1600] = add ckg del
            dka:f16[1600] = add ckh der
            dkb:f16[1600] = add cki dfs
            dkc:f16[1600,1600] = add ckj dfv
            dkd:f16[4800] = add ckk dhd
            dke:f16[4800,1600] = add ckl dhg
            dkf:f16[1600] = add ckm dhm
            dkg:f16[1600] = add ckn dhs
          in (diq, dir, dis, dit, diu, div, diw, dix, diy, diz, dja, djb, djc, djd,
            dje, djf, djg, djh, dji, djj, djk, djl, djm, djn, djo, djp, djq, djr,
            djs, djt, dju, djv, djw, djx, djy, djz, dka, dkb, dkc, dkd, dke, dkf,
            dkg) }
        name=42
      ] bao gb gc gd ge gf gg gh gi gj gk gl gm gn go gp gq gr gs gt gu gv gw gx
        gy gz ha hb hc hd he hf hg hh hi hj hk hl hm hn ho hp hq op oq or os ot ou
        ov ow ox oy oz pa pb pc pd pe pf pg ph pi pj pk pl pm pn po pp pq pr ps pt
        pu pv pw px py pz qa qb qc qd qe qf qg qh qi qj qk ql qm qn qo qp qq qr qs
        qt qu qv qw qx qy qz ra rb rc rd re rf rg rh ri rj rk rl rm rn ro rp rq rr
        rs rt ru rv rw rx ry rz sa sb sc sd se sf sg sh si sj sk sl sm sn so sp sq
        sr ss st su sv sw sx sy sz ta tb tc td te tf tg th ti tj tk tl tm tn to tp
    in (tr, ts, tt, tu, tv, tw, tx, ty, tz, bap, baq, bar, bas, bat, bau, bav, baw,
      bax, bay, baz, bba, bbb, bbc, bbd, bbe, bbf, bbg, bbh, bbi, bbj, bbk, bbl,
      bbm, bbn, bbo, bbp, bbq, bbr, bbs, bbt, bbu, bbv, bbw, bbx, bby, bbz, bca,
      bcb, bcc, bcd, bce, bcf, bcg, bch, bci, bcj, bck, chh, chi, chj, chk, chl,
      chm, chn, cho, chp, chq, chr, chs, cht, chu, chv, chw, chx, chy, chz, cia,
      cib, cic, cid, cie, cif, cig, cih, cii, cij, cik, cil, cim, cin, cio, cip,
      ciq, cir, cis, cit, ciu, civ, ciw, chg) }
  name=4
] dkh dki dkj dkk dkl dkm dkn dko dkp dkq dkr dks dkt dku dkv dkw dkx dky dkz dla
  dlb dlc dld dle dlf dlg dlh dli dlj dlk dll dlm dln dlo dlp dlq dlr dls dlt dlu
  dlv dlw dlx dly dlz dma dmb dmc dmd dme dmf dmg dmh dmi dmj dmk dml dmm dmn dmo
  dmp dmq dmr dms dmt dmu dmv dmw dmx dmy dmz dna dnb dnc dnd dne dnf dng dnh dni
  dnj dnk dnl dnm dnn dno dnp dnq dnr dns dnt dnu dnv dnw dnx dny dnz doa dob doc
  dod doe dof dog doh doi doj dok dol dom don doo dop doq dor dos dot dou dov dow
  dox doy doz dpa dpb dpc dpd dpe dpf dpg dph dpi dpj dpk dpl dpm dpn dpo dpp dpq
  dpr dps dpt dpu dpv dpw dpx dpy dpz dqa dqb dqc dqd dqe dqf dqg dqh dqi dqj dqk
  dql dqm dqn dqo dqp dqq dqr dqs dqt dqu dqv dqw dqx dqy dqz dra drb drc drd dre
  drf drg drh dri drj drk drl drm drn dro drp drq drr drs drt dru drv drw drx dry
  drz dsa dsb dsc dsd dse dsf dsg dsh dsi dsj dsk dsl dsm dsn dso dsp dsq dsr dss
  dst dsu dsv dsw dsx dsy dsz dta dtb dtc dtd dte dtf dtg dth dti dtj dtk dtl dtm
  dtn dto dtp dtq dtr dts dtt dtu dtv dtw dtx dty dtz dua dub duc dud due duf dug
  duh dui duj duk dul dum dun duo dup duq dur dus dut duu duv duw dux duy duz dva
  dvb dvc dvd dve dvf dvg dvh dvi dvj dvk dvl dvm dvn dvo dvp dvq dvr dvs dvt dvu
  dvv dvw dvx dvy dvz dwa dwb dwc dwd dwe dwf dwg dwh dwi dwj dwk dwl dwm dwn dwo
  dwp dwq dwr dws dwt dwu dwv dww dwx dwy dwz dxa dxb dxc dxd dxe dxf dxg dxh dxi
  dxj dxk dxl dxm dxn dxo dxp dxq dxr dxs dxt dxu dxv dxw dxx dxy dxz dya dyb dyc
  dyd dye dyf dyg dyh dyi dyj dyk dyl dym dyn dyo dyp dyq dyr dys dyt dyu dyv dyw
  dyx dyy dyz dza dzb dzc dzd dze dzf dzg dzh dzi dzj dzk dzl dzm dzn dzo dzp dzq
  dzr dzs dzt dzu dzv dzw dzx dzy dzz eaa
eqn: a:f16[50257,1600] b:f16[1600] c:f16[1600] d:f16[1600] e:f16[1600,6400] f:f16[6400]
  g:f16[6400,1600] h:f16[1600] i:f16[1600] j:f16[1600] k:f16[1600,1600] l:f16[4800]
  m:f16[4800,1600] n:f16[1600] o:f16[1600] p:f16[1600] q:f16[1600,6400] r:f16[6400]
  s:f16[6400,1600] t:f16[1600] u:f16[1600] v:f16[1600] w:f16[1600,1600] x:f16[4800]
  y:f16[4800,1600] z:f16[1600] ba:f16[1600] bb:f16[1600] bc:f16[1600,6400] bd:f16[6400]
  be:f16[6400,1600] bf:f16[1600] bg:f16[1600] bh:f16[1600] bi:f16[1600,1600] bj:f16[4800]
  bk:f16[4800,1600] bl:f16[1600] bm:f16[1600] bn:f16[1600] bo:f16[1600,6400] bp:f16[6400]
  bq:f16[6400,1600] br:f16[1600] bs:f16[1600] bt:f16[1600] bu:f16[1600,1600] bv:f16[4800]
  bw:f16[4800,1600] bx:f16[1600] by:f16[1600] bz:f16[1600] ca:f16[1600,6400] cb:f16[6400]
  cc:f16[6400,1600] cd:f16[1600] ce:f16[1600] cf:f16[1600] cg:f16[1600,1600] ch:f16[4800]
  ci:f16[4800,1600] cj:f16[1600] ck:f16[1600] cl:f16[1600] cm:f16[1600,6400] cn:f16[6400]
  co:f16[6400,1600] cp:f16[1600] cq:f16[1600] cr:f16[1600] cs:f16[1600,1600] ct:f16[4800]
  cu:f16[4800,1600] cv:f16[1600] cw:f16[1600] cx:f16[1600] cy:f16[1600,6400] cz:f16[6400]
  da:f16[6400,1600] db:f16[1600] dc:f16[1600] dd:f16[1600] de:f16[1600,1600] df:f16[4800]
  dg:f16[4800,1600] dh:f16[1600] di:f16[1600] dj:f16[1600] dk:f16[1600,6400] dl:f16[6400]
  dm:f16[6400,1600] dn:f16[1600] do:f16[1600] dp:f16[1600] dq:f16[1600,1600] dr:f16[4800]
  ds:f16[4800,1600] dt:f16[1600] du:f16[1600] dv:f16[64,256,1600] = pipeline_marker[
  mark_type=end
  name=4
] dw dx dy dz ea eb ec ed ee ef eg eh ei ej ek el em en eo ep eq er es et eu ev ew
  ex ey ez fa fb fc fd fe ff fg fh fi fj fk fl fm fn fo fp fq fr fs ft fu fv fw fx
  fy fz ga gb gc gd ge gf gg gh gi gj gk gl gm gn go gp gq gr gs gt gu gv gw gx gy
  gz ha hb hc hd he hf hg hh hi hj hk hl hm hn ho hp hq hr
input_var_mem_size
[cmci, cmcf, cmcg, clzv, clzw, clzt, clzu, clzr, clzs, clzn, clzo, clzl, clzm, clzp, clzq, clzj, clzk, clzh, clzi, clzf, clzg, clzb, clzc, clyz, clza, clzd, clze, clyx, clyy, clyv, clyw, clyt, clyu, clyp, clyq, clyn, clyo, clyr, clys, clyl, clym, clyj, clyk, clyh, clyi, clyd, clye, clyb, clyc, clyf, clyg, clxz, clya, clxx, clxy, clxv, clxw, clxr, clxs, clxp, clxq, clxt, clxu, clxn, clxo, clxl, clxm, clxj, clxk, clxf, clxg, clxd, clxe, clxh, clxi, clxb, clxc, clwz, clxa, clwx, clwy, clwt, clwu, clwr, clws, clwv, clww, clwp, clwq, clwn, clwo, clwl, clwm, clwh, clwi, clwf, clwg, clwj, clwk, pqq, ppv, pqh, pqd, ppj, ppg, pph, pou, pow, ppa, poy, poq, pof, poa, ppb, pnp, pnq, pne, pnm, pnl, pnh, pno, pna, pnb, pmo, pmq, pmu, pms, pmk, plz, plu, pmv, pky, pkz, pjk, pkv, pkp, pkt, pkf, pjj, pke, pku, piu, pjb, pii, pik, pio, pim, pie, pht, pho, pip, phd, phe, pgs, pha, pgz, pgv, phc, pgo, pgp, pgc, pge, pgi, pgg, pfy, pfn, pfi, pgj, pex, pey, pdj, peu, peo, pes, pee, pdi, ped, pet, pct, pda, pch, pcj, pcn, pcl, pcd, pbs, pbn, pco, pbc, pbd, par, paz, pay, pau, pbb, pan, pao, pab, pad, pah, paf, ozx, ozm, ozh, pai, oyw, oyx, oxi, oyt, oyn, oyr, oyd, oxh, oyc, oys, ows, owz, owg, owi, owm, owk, owc, ovr, ovm, own, ovb, ovc, ouq, ouy, oux, out, ova, oum, oun, oua, ouc, oug, oue, otw, otl, otg, ouh, osv, osw, orh, oss, osm, osq, osc, org, osb, osr, oqr, oqy, oqf, oqh, oql, oqj, oqb, opq, opl, oqm, opa, opb, oop, oox, oow, oos, ooz, ool, oom, onz, oob, oof, ood, onv, onk, onf, oog, okv, okw, ojh, oks, okm, okq, okc, ojg, okb, okr, oir, oiy, oif, oih, oil, oij, oib, ohq, ohl, oim, oha, ohb, ogp, ogx, ogw, ogs, ogz, ogl, ogm, ofz, ogb, ogf, ogd, ofv, ofk, off, ogg, oeu, oev, odg, oer, oel, oep, oeb, odf, oea, oeq, ocq, ocx, oce, ocg, ock, oci, oca, obp, obk, ocl, oaz, oba, oao, oaw, oav, oar, oay, oak, oal, nzy, oaa, oae, oac, nzu, nzj, nze, oaf, nyt, nyu, nxf, nyq, nyk, nyo, nya, nxe, nxz, nyp, nwp, nww, nwd, nwf, nwj, nwh, nvz, nvo, nvj, nwk, nuy, nuz, nun, nuv, nuu, nuq, nux, nuj, nuk, ntx, ntz, nud, nub, ntt, nti, ntd, nue, nss, nst, nre, nsp, nsj, nsn, nrz, nrd, nry, nso, nqo, nqv, nqc, nqe, nqi, nqg, npy, npn, npi, nqj]
[(50257, 1600), (1600,), (1600,), (1600,), (1600, 6400), (6400,), (6400, 1600), (1600,), (1600,), (1600,), (1600, 1600), (4800,), (4800, 1600), (1600,), (1600,), (1600,), (1600, 6400), (6400,), (6400, 1600), (1600,), (1600,), (1600,), (1600, 1600), (4800,), (4800, 1600), (1600,), (1600,), (1600,), (1600, 6400), (6400,), (6400, 1600), (1600,), (1600,), (1600,), (1600, 1600), (4800,), (4800, 1600), (1600,), (1600,), (1600,), (1600, 6400), (6400,), (6400, 1600), (1600,), (1600,), (1600,), (1600, 1600), (4800,), (4800, 1600), (1600,), (1600,), (1600,), (1600, 6400), (6400,), (6400, 1600), (1600,), (1600,), (1600,), (1600, 1600), (4800,), (4800, 1600), (1600,), (1600,), (1600,), (1600, 6400), (6400,), (6400, 1600), (1600,), (1600,), (1600,), (1600, 1600), (4800,), (4800, 1600), (1600,), (1600,), (1600,), (1600, 6400), (6400,), (6400, 1600), (1600,), (1600,), (1600,), (1600, 1600), (4800,), (4800, 1600), (1600,), (1600,), (1600,), (1600, 6400), (6400,), (6400, 1600), (1600,), (1600,), (1600,), (1600, 1600), (4800,), (4800, 1600), (1600,), (1600,), (), (64, 255, 50257), (64, 255, 1), (64, 255, 50257), (1,), (64, 256, 1600), (1600, 50257), (64, 256, 1600), (64, 256, 1), (1, 1, 1600), (64, 256, 1), (64, 256), (64, 256), (64, 256, 1600), (64, 256, 1600), (64, 256, 6400), (6400, 1600), (64, 256, 6400), (64, 256, 6400), (64, 256, 6400), (64, 256, 6400), (64, 256, 6400), (64, 256, 1600), (1600, 6400), (64, 256, 1600), (64, 256, 1), (1, 1, 1600), (64, 256, 1), (64, 256), (64, 256), (64, 256, 1600), (64, 256, 1600), (64, 256, 1600), (1600, 1600), (64, 256, 25, 64), (64, 25, 256, 1), (64, 25, 256, 256), (64, 25, 256, 1), (64, 256, 25, 64), (64, 256, 25, 64), (), (64, 25, 256, 256), (64, 256, 1600), (1600, 4800), (64, 256, 1600), (64, 256, 1), (1, 1, 1600), (64, 256, 1), (64, 256), (64, 256), (64, 256, 1600), (64, 256, 1600), (64, 256, 6400), (6400, 1600), (64, 256, 6400), (64, 256, 6400), (64, 256, 6400), (64, 256, 6400), (64, 256, 6400), (64, 256, 1600), (1600, 6400), (64, 256, 1600), (64, 256, 1), (1, 1, 1600), (64, 256, 1), (64, 256), (64, 256), (64, 256, 1600), (64, 256, 1600), (64, 256, 1600), (1600, 1600), (64, 256, 25, 64), (64, 25, 256, 1), (64, 25, 256, 256), (64, 25, 256, 1), (64, 256, 25, 64), (64, 256, 25, 64), (), (64, 25, 256, 256), (64, 256, 1600), (1600, 4800), (64, 256, 1600), (64, 256, 1), (1, 1, 1600), (64, 256, 1), (64, 256), (64, 256), (64, 256, 1600), (64, 256, 1600), (64, 256, 6400), (6400, 1600), (64, 256, 6400), (64, 256, 6400), (64, 256, 6400), (64, 256, 6400), (64, 256, 6400), (64, 256, 1600), (1600, 6400), (64, 256, 1600), (64, 256, 1), (1, 1, 1600), (64, 256, 1), (64, 256), (64, 256), (64, 256, 1600), (64, 256, 1600), (64, 256, 1600), (1600, 1600), (64, 256, 25, 64), (64, 25, 256, 1), (64, 25, 256, 256), (64, 25, 256, 1), (64, 256, 25, 64), (64, 256, 25, 64), (), (64, 25, 256, 256), (64, 256, 1600), (1600, 4800), (64, 256, 1600), (64, 256, 1), (1, 1, 1600), (64, 256, 1), (64, 256), (64, 256), (64, 256, 1600), (64, 256, 1600), (64, 256, 6400), (6400, 1600), (64, 256, 6400), (64, 256, 6400), (64, 256, 6400), (64, 256, 6400), (64, 256, 6400), (64, 256, 1600), (1600, 6400), (64, 256, 1600), (64, 256, 1), (1, 1, 1600), (64, 256, 1), (64, 256), (64, 256), (64, 256, 1600), (64, 256, 1600), (64, 256, 1600), (1600, 1600), (64, 256, 25, 64), (64, 25, 256, 1), (64, 25, 256, 256), (64, 25, 256, 1), (64, 256, 25, 64), (64, 256, 25, 64), (), (64, 25, 256, 256), (64, 256, 1600), (1600, 4800), (64, 256, 1600), (64, 256, 1), (1, 1, 1600), (64, 256, 1), (64, 256), (64, 256), (64, 256, 1600), (64, 256, 1600), (64, 256, 6400), (6400, 1600), (64, 256, 6400), (64, 256, 6400), (64, 256, 6400), (64, 256, 6400), (64, 256, 6400), (64, 256, 1600), (1600, 6400), (64, 256, 1600), (64, 256, 1), (1, 1, 1600), (64, 256, 1), (64, 256), (64, 256), (64, 256, 1600), (64, 256, 1600), (64, 256, 1600), (1600, 1600), (64, 256, 25, 64), (64, 25, 256, 1), (64, 25, 256, 256), (64, 25, 256, 1), (64, 256, 25, 64), (64, 256, 25, 64), (), (64, 25, 256, 256), (64, 256, 1600), (1600, 4800), (64, 256, 1600), (64, 256, 1), (1, 1, 1600), (64, 256, 1), (64, 256), (64, 256), (64, 256, 1600), (64, 256, 1600), (64, 256, 6400), (6400, 1600), (64, 256, 6400), (64, 256, 6400), (64, 256, 6400), (64, 256, 6400), (64, 256, 6400), (64, 256, 1600), (1600, 6400), (64, 256, 1600), (64, 256, 1), (1, 1, 1600), (64, 256, 1), (64, 256), (64, 256), (64, 256, 1600), (64, 256, 1600), (64, 256, 1600), (1600, 1600), (64, 256, 25, 64), (64, 25, 256, 1), (64, 25, 256, 256), (64, 25, 256, 1), (64, 256, 25, 64), (64, 256, 25, 64), (), (64, 25, 256, 256), (64, 256, 1600), (1600, 4800), (64, 256, 1600), (64, 256, 1), (1, 1, 1600), (64, 256, 1), (64, 256), (64, 256), (64, 256, 1600), (64, 256, 1600), (64, 256, 6400), (6400, 1600), (64, 256, 6400), (64, 256, 6400), (64, 256, 6400), (64, 256, 6400), (64, 256, 6400), (64, 256, 1600), (1600, 6400), (64, 256, 1600), (64, 256, 1), (1, 1, 1600), (64, 256, 1), (64, 256), (64, 256), (64, 256, 1600), (64, 256, 1600), (64, 256, 1600), (1600, 1600), (64, 256, 25, 64), (64, 25, 256, 1), (64, 25, 256, 256), (64, 25, 256, 1), (64, 256, 25, 64), (64, 256, 25, 64), (), (64, 25, 256, 256), (64, 256, 1600), (1600, 4800), (64, 256, 1600), (64, 256, 1), (1, 1, 1600), (64, 256, 1), (64, 256), (64, 256), (64, 256, 1600), (64, 256, 1600), (64, 256, 6400), (6400, 1600), (64, 256, 6400), (64, 256, 6400), (64, 256, 6400), (64, 256, 6400), (64, 256, 6400), (64, 256, 1600), (1600, 6400), (64, 256, 1600), (64, 256, 1), (1, 1, 1600), (64, 256, 1), (64, 256), (64, 256), (64, 256, 1600), (64, 256, 1600), (64, 256, 1600), (1600, 1600), (64, 256, 25, 64), (64, 25, 256, 1), (64, 25, 256, 256), (64, 25, 256, 1), (64, 256, 25, 64), (64, 256, 25, 64), (), (64, 25, 256, 256), (64, 256, 1600), (1600, 4800), (64, 256, 1600), (64, 256, 1), (1, 1, 1600), (64, 256, 1), (64, 256), (64, 256), (64, 256, 1600), (64, 256, 1600)]
param_size: 10.83401788212359 [GiB] 
jaxpr.eqns, len: 3
eqn: a:f16[1600] b:f16[1600,6400] c:f16[6400] d:f16[6400,1600] e:f16[1600] f:f16[1600]
  g:f16[1600] h:f16[1600,1600] i:f16[4800] j:f16[4800,1600] k:f16[1600] l:f16[1600]
  m:f16[1600] n:f16[1600,6400] o:f16[6400] p:f16[6400,1600] q:f16[1600] r:f16[1600]
  s:f16[1600] t:f16[1600,1600] u:f16[4800] v:f16[4800,1600] w:f16[1600] x:f16[1600]
  y:f16[1600] z:f16[1600,6400] ba:f16[6400] bb:f16[6400,1600] bc:f16[1600] bd:f16[1600]
  be:f16[1600] bf:f16[1600,1600] bg:f16[4800] bh:f16[4800,1600] bi:f16[1600] bj:f16[1600]
  bk:f16[1600] bl:f16[1600,6400] bm:f16[6400] bn:f16[6400,1600] bo:f16[1600] bp:f16[1600]
  bq:f16[1600] br:f16[1600,1600] bs:f16[4800] bt:f16[4800,1600] bu:f16[1600] bv:f16[1600]
  bw:f16[1600] bx:f16[1600,6400] by:f16[6400] bz:f16[6400,1600] ca:f16[1600] cb:f16[1600]
  cc:f16[1600] cd:f16[1600,1600] ce:f16[4800] cf:f16[4800,1600] cg:f16[1600] ch:f16[1600]
  ci:f16[1600] cj:f16[1600,6400] ck:f16[6400] cl:f16[6400,1600] cm:f16[1600] cn:f16[1600]
  co:f16[1600] cp:f16[1600,1600] cq:f16[4800] cr:f16[4800,1600] cs:f16[1600] ct:f16[1600]
  cu:f16[1600] cv:f16[1600,6400] cw:f16[6400] cx:f16[6400,1600] cy:f16[1600] cz:f16[1600]
  da:f16[1600] db:f16[1600,1600] dc:f16[4800] dd:f16[4800,1600] de:f16[1600] df:f16[1600]
  dg:f16[1600] dh:f16[1600,6400] di:f16[6400] dj:f16[6400,1600] dk:f16[1600] dl:f16[1600]
  dm:f16[1600] dn:f16[1600,1600] do:f16[4800] dp:f16[4800,1600] dq:f16[1600] dr:f16[1600]
  ds:f16[1600] dt:f16[1600,6400] du:f16[6400] dv:f16[6400,1600] dw:f16[1600] dx:f16[1600]
  dy:f16[1600] dz:f16[1600,1600] ea:f16[4800] eb:f16[4800,1600] ec:f16[1600] ed:f16[1600]
  ee:f16[1600] ef:f16[1600,6400] eg:f16[6400] eh:f16[6400,1600] ei:f16[1600] ej:f16[1600]
  ek:f16[1600] el:f16[1600,1600] em:f16[4800] en:f16[4800,1600] eo:f16[1600] ep:f16[1600]
  eq:f16[1600] er:f16[1600,6400] es:f16[6400] et:f16[6400,1600] eu:f16[1600] ev:f16[1600]
  ew:f16[1600] ex:f16[1600,1600] ey:f16[4800] ez:f16[4800,1600] fa:f16[1600] fb:f16[1600]
  fc:f16[1600] fd:f16[1600,6400] fe:f16[6400] ff:f16[6400,1600] fg:f16[1600] fh:f16[1600]
  fi:f16[64,256,1600] fj:f16[64,256,6400] fk:f16[6400,1600] fl:f16[64,256,6400] fm:f16[64,256,6400]
  fn:f16[64,256,6400] fo:f16[64,256,6400] fp:f16[64,256,6400] fq:f16[64,256,1600]
  fr:f16[1600,6400] fs:f32[64,256,1600] ft:f32[64,256,1] fu:f32[1,1,1600] fv:f32[64,256,1]
  fw:f32[64,256] fx:f32[64,256] fy:f32[64,256,1600] fz:f32[64,256,1600] ga:f16[64,256,1600]
  gb:f16[1600,1600] gc:f16[64,256,25,64] gd:f16[64,25,256,1] ge:f16[64,25,256,256]
  gf:f16[64,25,256,1] gg:f16[64,256,25,64] gh:f16[64,256,25,64] gi:f16[] gj:f16[64,25,256,256]
  gk:f16[64,256,1600] gl:f16[1600,4800] gm:f32[64,256,1600] gn:f32[64,256,1] go:f32[1,1,1600]
  gp:f32[64,256,1] gq:f32[64,256] gr:f32[64,256] gs:f32[64,256,1600] gt:f32[64,256,1600]
  gu:f16[64,256,6400] gv:f16[6400,1600] gw:f16[64,256,6400] gx:f16[64,256,6400] gy:f16[64,256,6400]
  gz:f16[64,256,6400] ha:f16[64,256,6400] hb:f16[64,256,1600] hc:f16[1600,6400] hd:f32[64,256,1600]
  he:f32[64,256,1] hf:f32[1,1,1600] hg:f32[64,256,1] hh:f32[64,256] hi:f32[64,256]
  hj:f32[64,256,1600] hk:f32[64,256,1600] hl:f16[64,256,1600] hm:f16[1600,1600] hn:f16[64,256,25,64]
  ho:f16[64,25,256,1] hp:f16[64,25,256,256] hq:f16[64,25,256,1] hr:f16[64,256,25,64]
  hs:f16[64,256,25,64] ht:f16[] hu:f16[64,25,256,256] hv:f16[64,256,1600] hw:f16[1600,4800]
  hx:f32[64,256,1600] hy:f32[64,256,1] hz:f32[1,1,1600] ia:f32[64,256,1] ib:f32[64,256]
  ic:f32[64,256] id:f32[64,256,1600] ie:f32[64,256,1600] if:f16[64,256,6400] ig:f16[6400,1600]
  ih:f16[64,256,6400] ii:f16[64,256,6400] ij:f16[64,256,6400] ik:f16[64,256,6400]
  il:f16[64,256,6400] im:f16[64,256,1600] in:f16[1600,6400] io:f32[64,256,1600] ip:f32[64,256,1]
  iq:f32[1,1,1600] ir:f32[64,256,1] is:f32[64,256] it:f32[64,256] iu:f32[64,256,1600]
  iv:f32[64,256,1600] iw:f16[64,256,1600] ix:f16[1600,1600] iy:f16[64,256,25,64]
  iz:f16[64,25,256,1] ja:f16[64,25,256,256] jb:f16[64,25,256,1] jc:f16[64,256,25,64]
  jd:f16[64,256,25,64] je:f16[] jf:f16[64,25,256,256] jg:f16[64,256,1600] jh:f16[1600,4800]
  ji:f32[64,256,1600] jj:f32[64,256,1] jk:f32[1,1,1600] jl:f32[64,256,1] jm:f32[64,256]
  jn:f32[64,256] jo:f32[64,256,1600] jp:f32[64,256,1600] jq:f16[64,256,6400] jr:f16[6400,1600]
  js:f16[64,256,6400] jt:f16[64,256,6400] ju:f16[64,256,6400] jv:f16[64,256,6400]
  jw:f16[64,256,6400] jx:f16[64,256,1600] jy:f16[1600,6400] jz:f32[64,256,1600] ka:f32[64,256,1]
  kb:f32[1,1,1600] kc:f32[64,256,1] kd:f32[64,256] ke:f32[64,256] kf:f32[64,256,1600]
  kg:f32[64,256,1600] kh:f16[64,256,1600] ki:f16[1600,1600] kj:f16[64,256,25,64]
  kk:f16[64,25,256,1] kl:f16[64,25,256,256] km:f16[64,25,256,1] kn:f16[64,256,25,64]
  ko:f16[64,256,25,64] kp:f16[] kq:f16[64,25,256,256] kr:f16[64,256,1600] ks:f16[1600,4800]
  kt:f32[64,256,1600] ku:f32[64,256,1] kv:f32[1,1,1600] kw:f32[64,256,1] kx:f32[64,256]
  ky:f32[64,256] kz:f32[64,256,1600] la:f32[64,256,1600] lb:f16[64,256,6400] lc:f16[6400,1600]
  ld:f16[64,256,6400] le:f16[64,256,6400] lf:f16[64,256,6400] lg:f16[64,256,6400]
  lh:f16[64,256,6400] li:f16[64,256,1600] lj:f16[1600,6400] lk:f32[64,256,1600] ll:f32[64,256,1]
  lm:f32[1,1,1600] ln:f32[64,256,1] lo:f32[64,256] lp:f32[64,256] lq:f32[64,256,1600]
  lr:f32[64,256,1600] ls:f16[64,256,1600] lt:f16[1600,1600] lu:f16[64,256,25,64]
  lv:f16[64,25,256,1] lw:f16[64,25,256,256] lx:f16[64,25,256,1] ly:f16[64,256,25,64]
  lz:f16[64,256,25,64] ma:f16[] mb:f16[64,25,256,256] mc:f16[64,256,1600] md:f16[1600,4800]
  me:f32[64,256,1600] mf:f32[64,256,1] mg:f32[1,1,1600] mh:f32[64,256,1] mi:f32[64,256]
  mj:f32[64,256] mk:f32[64,256,1600] ml:f32[64,256,1600] mm:f16[64,256,6400] mn:f16[6400,1600]
  mo:f16[64,256,6400] mp:f16[64,256,6400] mq:f16[64,256,6400] mr:f16[64,256,6400]
  ms:f16[64,256,6400] mt:f16[64,256,1600] mu:f16[1600,6400] mv:f32[64,256,1600] mw:f32[64,256,1]
  mx:f32[1,1,1600] my:f32[64,256,1] mz:f32[64,256] na:f32[64,256] nb:f32[64,256,1600]
  nc:f32[64,256,1600] nd:f16[64,256,1600] ne:f16[1600,1600] nf:f16[64,256,25,64]
  ng:f16[64,25,256,1] nh:f16[64,25,256,256] ni:f16[64,25,256,1] nj:f16[64,256,25,64]
  nk:f16[64,256,25,64] nl:f16[] nm:f16[64,25,256,256] nn:f16[64,256,1600] no:f16[1600,4800]
  np:f32[64,256,1600] nq:f32[64,256,1] nr:f32[1,1,1600] ns:f32[64,256,1] nt:f32[64,256]
  nu:f32[64,256] nv:f32[64,256,1600] nw:f32[64,256,1600] nx:f16[64,256,6400] ny:f16[6400,1600]
  nz:f16[64,256,6400] oa:f16[64,256,6400] ob:f16[64,256,6400] oc:f16[64,256,6400]
  od:f16[64,256,6400] oe:f16[64,256,1600] of:f16[1600,6400] og:f32[64,256,1600] oh:f32[64,256,1]
  oi:f32[1,1,1600] oj:f32[64,256,1] ok:f32[64,256] ol:f32[64,256] om:f32[64,256,1600]
  on:f32[64,256,1600] oo:f16[64,256,1600] op:f16[1600,1600] oq:f16[64,256,25,64]
  or:f16[64,25,256,1] os:f16[64,25,256,256] ot:f16[64,25,256,1] ou:f16[64,256,25,64]
  ov:f16[64,256,25,64] ow:f16[] ox:f16[64,25,256,256] oy:f16[64,256,1600] oz:f16[1600,4800]
  pa:f32[64,256,1600] pb:f32[64,256,1] pc:f32[1,1,1600] pd:f32[64,256,1] pe:f32[64,256]
  pf:f32[64,256] pg:f32[64,256,1600] ph:f32[64,256,1600] pi:f16[64,256,6400] pj:f16[6400,1600]
  pk:f16[64,256,6400] pl:f16[64,256,6400] pm:f16[64,256,6400] pn:f16[64,256,6400]
  po:f16[64,256,6400] pp:f16[64,256,1600] pq:f16[1600,6400] pr:f32[64,256,1600] ps:f32[64,256,1]
  pt:f32[1,1,1600] pu:f32[64,256,1] pv:f32[64,256] pw:f32[64,256] px:f32[64,256,1600]
  py:f32[64,256,1600] pz:f16[64,256,1600] qa:f16[1600,1600] qb:f16[64,256,25,64]
  qc:f16[64,25,256,1] qd:f16[64,25,256,256] qe:f16[64,25,256,1] qf:f16[64,256,25,64]
  qg:f16[64,256,25,64] qh:f16[] qi:f16[64,25,256,256] qj:f16[64,256,1600] qk:f16[1600,4800]
  ql:f32[64,256,1600] qm:f32[64,256,1] qn:f32[1,1,1600] qo:f32[64,256,1] qp:f32[64,256]
  qq:f32[64,256] qr:f32[64,256,1600] qs:f32[64,256,1600] qt:f16[64,256,6400] qu:f16[6400,1600]
  qv:f16[64,256,6400] qw:f16[64,256,6400] qx:f16[64,256,6400] qy:f16[64,256,6400]
  qz:f16[64,256,6400] ra:f16[64,256,1600] rb:f16[1600,6400] rc:f32[64,256,1600] rd:f32[64,256,1]
  re:f32[1,1,1600] rf:f32[64,256,1] rg:f32[64,256] rh:f32[64,256] ri:f32[64,256,1600]
  rj:f32[64,256,1600] rk:f16[64,256,1600] rl:f16[1600,1600] rm:f16[64,256,25,64]
  rn:f16[64,25,256,1] ro:f16[64,25,256,256] rp:f16[64,25,256,1] rq:f16[64,256,25,64]
  rr:f16[64,256,25,64] rs:f16[] rt:f16[64,25,256,256] ru:f16[64,256,1600] rv:f16[1600,4800]
  rw:f32[64,256,1600] rx:f32[64,256,1] ry:f32[1,1,1600] rz:f32[64,256,1] sa:f32[64,256]
  sb:f32[64,256] sc:f32[64,256,1600] sd:f32[64,256,1600] se:f16[64,256,6400] sf:f16[6400,1600]
  sg:f16[64,256,6400] sh:f16[64,256,6400] si:f16[64,256,6400] sj:f16[64,256,6400]
  sk:f16[64,256,6400] sl:f16[64,256,1600] sm:f16[1600,6400] sn:f32[64,256,1600] so:f32[64,256,1]
  sp:f32[1,1,1600] sq:f32[64,256,1] sr:f32[64,256] ss:f32[64,256] st:f32[64,256,1600]
  su:f32[64,256,1600] sv:f16[64,256,1600] sw:f16[1600,1600] sx:f16[64,256,25,64]
  sy:f16[64,25,256,1] sz:f16[64,25,256,256] ta:f16[64,25,256,1] tb:f16[64,256,25,64]
  tc:f16[64,256,25,64] td:f16[] te:f16[64,25,256,256] tf:f16[64,256,1600] tg:f16[1600,4800]
  th:f32[64,256,1600] ti:f32[64,256,1] tj:f32[1,1,1600] tk:f32[64,256,1] tl:f32[64,256]
  tm:f32[64,256] tn:f32[64,256,1600] to:f32[64,256,1600] tp:f16[64,256,6400] tq:f16[6400,1600]
  tr:f16[64,256,6400] ts:f16[64,256,6400] tt:f16[64,256,6400] tu:f16[64,256,6400]
  tv:f16[64,256,6400] tw:f16[64,256,1600] tx:f16[1600,6400] ty:f32[64,256,1600] tz:f32[64,256,1]
  ua:f32[1,1,1600] ub:f32[64,256,1] uc:f32[64,256] ud:f32[64,256] ue:f32[64,256,1600]
  uf:f32[64,256,1600] ug:f16[64,256,1600] uh:f16[1600,1600] ui:f16[64,256,25,64]
  uj:f16[64,25,256,1] uk:f16[64,25,256,256] ul:f16[64,25,256,1] um:f16[64,256,25,64]
  un:f16[64,256,25,64] uo:f16[] up:f16[64,25,256,256] uq:f16[64,256,1600] ur:f16[1600,4800]
  us:f32[64,256,1600] ut:f32[64,256,1] uu:f32[1,1,1600] uv:f32[64,256,1] uw:f32[64,256]
  ux:f32[64,256] uy:f32[64,256,1600] uz:f32[64,256,1600] va:f16[64,256,6400] vb:f16[6400,1600]
  vc:f16[64,256,6400] vd:f16[64,256,6400] ve:f16[64,256,6400] vf:f16[64,256,6400]
  vg:f16[64,256,6400] vh:f16[64,256,1600] vi:f16[1600,6400] vj:f32[64,256,1600] vk:f32[64,256,1]
  vl:f32[1,1,1600] vm:f32[64,256,1] vn:f32[64,256] vo:f32[64,256] vp:f32[64,256,1600]
  vq:f32[64,256,1600] = pipeline_marker[mark_type=start name=5] vr vs vt vu vv vw
  vx vy vz wa wb wc wd we wf wg wh wi wj wk wl wm wn wo wp wq wr ws wt wu wv ww wx
  wy wz xa xb xc xd xe xf xg xh xi xj xk xl xm xn xo xp xq xr xs xt xu xv xw xx xy
  xz ya yb yc yd ye yf yg yh yi yj yk yl ym yn yo yp yq yr ys yt yu yv yw yx yy yz
  za zb zc zd ze zf zg zh zi zj zk zl zm zn zo zp zq zr zs zt zu zv zw zx zy zz baa
  bab bac bad bae baf bag bah bai baj bak bal bam ban bao bap baq bar bas bat bau
  bav baw bax bay baz bba bbb bbc bbd bbe bbf bbg bbh bbi bbj bbk bbl bbm bbn bbo
  bbp bbq bbr bbs bbt bbu bbv bbw bbx bby bbz bca bcb bcc bcd bce bcf bcg bch bci
  bcj bck bcl bcm bcn bco bcp bcq bcr bcs bct bcu bcv bcw bcx bcy bcz bda bdb bdc
  bdd bde bdf bdg bdh bdi bdj bdk bdl bdm bdn bdo bdp bdq bdr bds bdt bdu bdv bdw
  bdx bdy bdz bea beb bec bed bee bef beg beh bei bej bek bel bem ben beo bep beq
  ber bes bet beu bev bew bex bey bez bfa bfb bfc bfd bfe bff bfg bfh bfi bfj bfk
  bfl bfm bfn bfo bfp bfq bfr bfs bft bfu bfv bfw bfx bfy bfz bga bgb bgc bgd bge
  bgf bgg bgh bgi bgj bgk bgl bgm bgn bgo bgp bgq bgr bgs bgt bgu bgv bgw bgx bgy
  bgz bha bhb bhc bhd bhe bhf bhg bhh bhi bhj bhk bhl bhm bhn bho bhp bhq bhr bhs
  bht bhu bhv bhw bhx bhy bhz bia bib bic bid bie bif big bih bii bij bik bil bim
  bin bio bip biq bir bis bit biu biv biw bix biy biz bja bjb bjc bjd bje bjf bjg
  bjh bji bjj bjk bjl bjm bjn bjo bjp bjq bjr bjs bjt bju bjv bjw bjx bjy bjz bka
  bkb bkc bkd bke bkf bkg bkh bki bkj bkk bkl bkm bkn bko bkp bkq bkr bks bkt bku
  bkv bkw bkx bky bkz bla blb blc bld ble blf blg blh bli blj blk bll blm bln blo
  blp blq blr bls blt blu blv blw blx bly blz bma bmb bmc bmd bme bmf bmg bmh bmi
  bmj bmk bml bmm bmn bmo bmp bmq bmr bms bmt bmu bmv bmw bmx bmy bmz bna bnb bnc
  bnd bne bnf bng bnh bni bnj bnk bnl bnm bnn bno bnp bnq bnr bns bnt bnu bnv bnw
  bnx bny bnz boa bob boc bod boe bof bog boh boi boj bok bol bom bon boo bop boq
  bor bos bot bou bov bow box boy boz bpa bpb bpc bpd bpe bpf bpg bph bpi bpj bpk
  bpl bpm bpn bpo bpp bpq bpr bps bpt bpu bpv bpw bpx bpy bpz bqa bqb bqc bqd bqe
  bqf bqg bqh bqi bqj bqk bql bqm bqn bqo bqp bqq bqr bqs bqt bqu bqv bqw bqx bqy
  bqz bra brb brc brd bre brf brg brh
eqn: a:f16[1600] b:f16[1600,6400] c:f16[6400] d:f16[6400,1600] e:f16[1600] f:f16[1600]
  g:f16[1600] h:f16[1600,1600] i:f16[4800] j:f16[4800,1600] k:f16[1600] l:f16[1600]
  m:f16[1600] n:f16[1600,6400] o:f16[6400] p:f16[6400,1600] q:f16[1600] r:f16[1600]
  s:f16[1600] t:f16[1600,1600] u:f16[4800] v:f16[4800,1600] w:f16[1600] x:f16[1600]
  y:f16[1600] z:f16[1600,6400] ba:f16[6400] bb:f16[6400,1600] bc:f16[1600] bd:f16[1600]
  be:f16[1600] bf:f16[1600,1600] bg:f16[4800] bh:f16[4800,1600] bi:f16[1600] bj:f16[1600]
  bk:f16[1600] bl:f16[1600,6400] bm:f16[6400] bn:f16[6400,1600] bo:f16[1600] bp:f16[1600]
  bq:f16[1600] br:f16[1600,1600] bs:f16[4800] bt:f16[4800,1600] bu:f16[1600] bv:f16[1600]
  bw:f16[1600] bx:f16[1600,6400] by:f16[6400] bz:f16[6400,1600] ca:f16[1600] cb:f16[1600]
  cc:f16[1600] cd:f16[1600,1600] ce:f16[4800] cf:f16[4800,1600] cg:f16[1600] ch:f16[1600]
  ci:f16[1600] cj:f16[1600,6400] ck:f16[6400] cl:f16[6400,1600] cm:f16[1600] cn:f16[1600]
  co:f16[1600] cp:f16[1600,1600] cq:f16[4800] cr:f16[4800,1600] cs:f16[1600] ct:f16[1600]
  cu:f16[1600] cv:f16[1600,6400] cw:f16[6400] cx:f16[6400,1600] cy:f16[1600] cz:f16[1600]
  da:f16[1600] db:f16[1600,1600] dc:f16[4800] dd:f16[4800,1600] de:f16[1600] df:f16[1600]
  dg:f16[1600] dh:f16[1600,6400] di:f16[6400] dj:f16[6400,1600] dk:f16[1600] dl:f16[1600]
  dm:f16[1600] dn:f16[1600,1600] do:f16[4800] dp:f16[4800,1600] dq:f16[1600] dr:f16[1600]
  ds:f16[1600] dt:f16[1600,6400] du:f16[6400] dv:f16[6400,1600] dw:f16[1600] dx:f16[1600]
  dy:f16[1600] dz:f16[1600,1600] ea:f16[4800] eb:f16[4800,1600] ec:f16[1600] ed:f16[1600]
  ee:f16[1600] ef:f16[1600,6400] eg:f16[6400] eh:f16[6400,1600] ei:f16[1600] ej:f16[1600]
  ek:f16[1600] el:f16[1600,1600] em:f16[4800] en:f16[4800,1600] eo:f16[1600] ep:f16[1600]
  eq:f16[1600] er:f16[1600,6400] es:f16[6400] et:f16[6400,1600] eu:f16[1600] ev:f16[1600]
  ew:f16[1600] ex:f16[1600,1600] ey:f16[4800] ez:f16[4800,1600] fa:f16[1600] fb:f16[1600]
  fc:f16[1600] fd:f16[1600,6400] fe:f16[6400] ff:f16[6400,1600] fg:f16[1600] fh:f16[1600]
  fi:f16[64,256,1600] = named_call[
  call_jaxpr={ lambda ; fj:f16[1600] fk:f16[1600,6400] fl:f16[6400] fm:f16[6400,1600]
      fn:f16[1600] fo:f16[1600] fp:f16[1600] fq:f16[1600,1600] fr:f16[4800] fs:f16[4800,1600]
      ft:f16[1600] fu:f16[1600] fv:f16[1600] fw:f16[1600,6400] fx:f16[6400] fy:f16[6400,1600]
      fz:f16[1600] ga:f16[1600] gb:f16[1600] gc:f16[1600,1600] gd:f16[4800] ge:f16[4800,1600]
      gf:f16[1600] gg:f16[1600] gh:f16[1600] gi:f16[1600,6400] gj:f16[6400] gk:f16[6400,1600]
      gl:f16[1600] gm:f16[1600] gn:f16[1600] go:f16[1600,1600] gp:f16[4800] gq:f16[4800,1600]
      gr:f16[1600] gs:f16[1600] gt:f16[1600] gu:f16[1600,6400] gv:f16[6400] gw:f16[6400,1600]
      gx:f16[1600] gy:f16[1600] gz:f16[1600] ha:f16[1600,1600] hb:f16[4800] hc:f16[4800,1600]
      hd:f16[1600] he:f16[1600] hf:f16[1600] hg:f16[1600,6400] hh:f16[6400] hi:f16[6400,1600]
      hj:f16[1600] hk:f16[1600] hl:f16[1600] hm:f16[1600,1600] hn:f16[4800] ho:f16[4800,1600]
      hp:f16[1600] hq:f16[1600] hr:f16[1600] hs:f16[1600,6400] ht:f16[6400] hu:f16[6400,1600]
      hv:f16[1600] hw:f16[1600] hx:f16[1600] hy:f16[1600,1600] hz:f16[4800] ia:f16[4800,1600]
      ib:f16[1600] ic:f16[1600] id:f16[1600] ie:f16[1600,6400] if:f16[6400] ig:f16[6400,1600]
      ih:f16[1600] ii:f16[1600] ij:f16[1600] ik:f16[1600,1600] il:f16[4800] im:f16[4800,1600]
      in:f16[1600] io:f16[1600] ip:f16[1600] iq:f16[1600,6400] ir:f16[6400] is:f16[6400,1600]
      it:f16[1600] iu:f16[1600] iv:f16[1600] iw:f16[1600,1600] ix:f16[4800] iy:f16[4800,1600]
      iz:f16[1600] ja:f16[1600] jb:f16[1600] jc:f16[1600,6400] jd:f16[6400] je:f16[6400,1600]
      jf:f16[1600] jg:f16[1600] jh:f16[1600] ji:f16[1600,1600] jj:f16[4800] jk:f16[4800,1600]
      jl:f16[1600] jm:f16[1600] jn:f16[1600] jo:f16[1600,6400] jp:f16[6400] jq:f16[6400,1600]
      jr:f16[1600] js:f16[1600] jt:f16[1600] ju:f16[1600,1600] jv:f16[4800] jw:f16[4800,1600]
      jx:f16[1600] jy:f16[1600] jz:f16[1600] ka:f16[1600,6400] kb:f16[6400] kc:f16[6400,1600]
      kd:f16[1600] ke:f16[1600] kf:f16[1600] kg:f16[1600,1600] kh:f16[4800] ki:f16[4800,1600]
      kj:f16[1600] kk:f16[1600] kl:f16[1600] km:f16[1600,6400] kn:f16[6400] ko:f16[6400,1600]
      kp:f16[1600] kq:f16[1600] kr:f16[64,256,1600] ks:f16[64,256,6400] kt:f16[6400,1600]
      ku:f16[64,256,6400] kv:f16[64,256,6400] kw:f16[64,256,6400] kx:f16[64,256,6400]
      ky:f16[64,256,6400] kz:f16[64,256,1600] la:f16[1600,6400] lb:f32[64,256,1600]
      lc:f32[64,256,1] ld:f32[1,1,1600] le:f32[64,256,1] lf:f32[64,256] lg:f32[64,256]
      lh:f32[64,256,1600] li:f32[64,256,1600] lj:f16[64,256,1600] lk:f16[1600,1600]
      ll:f16[64,256,25,64] lm:f16[64,25,256,1] ln:f16[64,25,256,256] lo:f16[64,25,256,1]
      lp:f16[64,256,25,64] lq:f16[64,256,25,64] lr:f16[] ls:f16[64,25,256,256] lt:f16[64,256,1600]
      lu:f16[1600,4800] lv:f32[64,256,1600] lw:f32[64,256,1] lx:f32[1,1,1600] ly:f32[64,256,1]
      lz:f32[64,256] ma:f32[64,256] mb:f32[64,256,1600] mc:f32[64,256,1600] md:f16[64,256,6400]
      me:f16[6400,1600] mf:f16[64,256,6400] mg:f16[64,256,6400] mh:f16[64,256,6400]
      mi:f16[64,256,6400] mj:f16[64,256,6400] mk:f16[64,256,1600] ml:f16[1600,6400]
      mm:f32[64,256,1600] mn:f32[64,256,1] mo:f32[1,1,1600] mp:f32[64,256,1] mq:f32[64,256]
      mr:f32[64,256] ms:f32[64,256,1600] mt:f32[64,256,1600] mu:f16[64,256,1600]
      mv:f16[1600,1600] mw:f16[64,256,25,64] mx:f16[64,25,256,1] my:f16[64,25,256,256]
      mz:f16[64,25,256,1] na:f16[64,256,25,64] nb:f16[64,256,25,64] nc:f16[] nd:f16[64,25,256,256]
      ne:f16[64,256,1600] nf:f16[1600,4800] ng:f32[64,256,1600] nh:f32[64,256,1]
      ni:f32[1,1,1600] nj:f32[64,256,1] nk:f32[64,256] nl:f32[64,256] nm:f32[64,256,1600]
      nn:f32[64,256,1600] no:f16[64,256,6400] np:f16[6400,1600] nq:f16[64,256,6400]
      nr:f16[64,256,6400] ns:f16[64,256,6400] nt:f16[64,256,6400] nu:f16[64,256,6400]
      nv:f16[64,256,1600] nw:f16[1600,6400] nx:f32[64,256,1600] ny:f32[64,256,1]
      nz:f32[1,1,1600] oa:f32[64,256,1] ob:f32[64,256] oc:f32[64,256] od:f32[64,256,1600]
      oe:f32[64,256,1600] of:f16[64,256,1600] og:f16[1600,1600] oh:f16[64,256,25,64]
      oi:f16[64,25,256,1] oj:f16[64,25,256,256] ok:f16[64,25,256,1] ol:f16[64,256,25,64]
      om:f16[64,256,25,64] on:f16[] oo:f16[64,25,256,256] op:f16[64,256,1600] oq:f16[1600,4800]
      or:f32[64,256,1600] os:f32[64,256,1] ot:f32[1,1,1600] ou:f32[64,256,1] ov:f32[64,256]
      ow:f32[64,256] ox:f32[64,256,1600] oy:f32[64,256,1600] oz:f16[64,256,6400]
      pa:f16[6400,1600] pb:f16[64,256,6400] pc:f16[64,256,6400] pd:f16[64,256,6400]
      pe:f16[64,256,6400] pf:f16[64,256,6400] pg:f16[64,256,1600] ph:f16[1600,6400]
      pi:f32[64,256,1600] pj:f32[64,256,1] pk:f32[1,1,1600] pl:f32[64,256,1] pm:f32[64,256]
      pn:f32[64,256] po:f32[64,256,1600] pp:f32[64,256,1600] pq:f16[64,256,1600]
      pr:f16[1600,1600] ps:f16[64,256,25,64] pt:f16[64,25,256,1] pu:f16[64,25,256,256]
      pv:f16[64,25,256,1] pw:f16[64,256,25,64] px:f16[64,256,25,64] py:f16[] pz:f16[64,25,256,256]
      qa:f16[64,256,1600] qb:f16[1600,4800] qc:f32[64,256,1600] qd:f32[64,256,1]
      qe:f32[1,1,1600] qf:f32[64,256,1] qg:f32[64,256] qh:f32[64,256] qi:f32[64,256,1600]
      qj:f32[64,256,1600] qk:f16[64,256,6400] ql:f16[6400,1600] qm:f16[64,256,6400]
      qn:f16[64,256,6400] qo:f16[64,256,6400] qp:f16[64,256,6400] qq:f16[64,256,6400]
      qr:f16[64,256,1600] qs:f16[1600,6400] qt:f32[64,256,1600] qu:f32[64,256,1]
      qv:f32[1,1,1600] qw:f32[64,256,1] qx:f32[64,256] qy:f32[64,256] qz:f32[64,256,1600]
      ra:f32[64,256,1600] rb:f16[64,256,1600] rc:f16[1600,1600] rd:f16[64,256,25,64]
      re:f16[64,25,256,1] rf:f16[64,25,256,256] rg:f16[64,25,256,1] rh:f16[64,256,25,64]
      ri:f16[64,256,25,64] rj:f16[] rk:f16[64,25,256,256] rl:f16[64,256,1600] rm:f16[1600,4800]
      rn:f32[64,256,1600] ro:f32[64,256,1] rp:f32[1,1,1600] rq:f32[64,256,1] rr:f32[64,256]
      rs:f32[64,256] rt:f32[64,256,1600] ru:f32[64,256,1600] rv:f16[64,256,6400]
      rw:f16[6400,1600] rx:f16[64,256,6400] ry:f16[64,256,6400] rz:f16[64,256,6400]
      sa:f16[64,256,6400] sb:f16[64,256,6400] sc:f16[64,256,1600] sd:f16[1600,6400]
      se:f32[64,256,1600] sf:f32[64,256,1] sg:f32[1,1,1600] sh:f32[64,256,1] si:f32[64,256]
      sj:f32[64,256] sk:f32[64,256,1600] sl:f32[64,256,1600] sm:f16[64,256,1600]
      sn:f16[1600,1600] so:f16[64,256,25,64] sp:f16[64,25,256,1] sq:f16[64,25,256,256]
      sr:f16[64,25,256,1] ss:f16[64,256,25,64] st:f16[64,256,25,64] su:f16[] sv:f16[64,25,256,256]
      sw:f16[64,256,1600] sx:f16[1600,4800] sy:f32[64,256,1600] sz:f32[64,256,1]
      ta:f32[1,1,1600] tb:f32[64,256,1] tc:f32[64,256] td:f32[64,256] te:f32[64,256,1600]
      tf:f32[64,256,1600] tg:f16[64,256,6400] th:f16[6400,1600] ti:f16[64,256,6400]
      tj:f16[64,256,6400] tk:f16[64,256,6400] tl:f16[64,256,6400] tm:f16[64,256,6400]
      tn:f16[64,256,1600] to:f16[1600,6400] tp:f32[64,256,1600] tq:f32[64,256,1]
      tr:f32[1,1,1600] ts:f32[64,256,1] tt:f32[64,256] tu:f32[64,256] tv:f32[64,256,1600]
      tw:f32[64,256,1600] tx:f16[64,256,1600] ty:f16[1600,1600] tz:f16[64,256,25,64]
      ua:f16[64,25,256,1] ub:f16[64,25,256,256] uc:f16[64,25,256,1] ud:f16[64,256,25,64]
      ue:f16[64,256,25,64] uf:f16[] ug:f16[64,25,256,256] uh:f16[64,256,1600] ui:f16[1600,4800]
      uj:f32[64,256,1600] uk:f32[64,256,1] ul:f32[1,1,1600] um:f32[64,256,1] un:f32[64,256]
      uo:f32[64,256] up:f32[64,256,1600] uq:f32[64,256,1600] ur:f16[64,256,6400]
      us:f16[6400,1600] ut:f16[64,256,6400] uu:f16[64,256,6400] uv:f16[64,256,6400]
      uw:f16[64,256,6400] ux:f16[64,256,6400] uy:f16[64,256,1600] uz:f16[1600,6400]
      va:f32[64,256,1600] vb:f32[64,256,1] vc:f32[1,1,1600] vd:f32[64,256,1] ve:f32[64,256]
      vf:f32[64,256] vg:f32[64,256,1600] vh:f32[64,256,1600] vi:f16[64,256,1600]
      vj:f16[1600,1600] vk:f16[64,256,25,64] vl:f16[64,25,256,1] vm:f16[64,25,256,256]
      vn:f16[64,25,256,1] vo:f16[64,256,25,64] vp:f16[64,256,25,64] vq:f16[] vr:f16[64,25,256,256]
      vs:f16[64,256,1600] vt:f16[1600,4800] vu:f32[64,256,1600] vv:f32[64,256,1]
      vw:f32[1,1,1600] vx:f32[64,256,1] vy:f32[64,256] vz:f32[64,256] wa:f32[64,256,1600]
      wb:f32[64,256,1600] wc:f16[64,256,6400] wd:f16[6400,1600] we:f16[64,256,6400]
      wf:f16[64,256,6400] wg:f16[64,256,6400] wh:f16[64,256,6400] wi:f16[64,256,6400]
      wj:f16[64,256,1600] wk:f16[1600,6400] wl:f32[64,256,1600] wm:f32[64,256,1]
      wn:f32[1,1,1600] wo:f32[64,256,1] wp:f32[64,256] wq:f32[64,256] wr:f32[64,256,1600]
      ws:f32[64,256,1600] wt:f16[64,256,1600] wu:f16[1600,1600] wv:f16[64,256,25,64]
      ww:f16[64,25,256,1] wx:f16[64,25,256,256] wy:f16[64,25,256,1] wz:f16[64,256,25,64]
      xa:f16[64,256,25,64] xb:f16[] xc:f16[64,25,256,256] xd:f16[64,256,1600] xe:f16[1600,4800]
      xf:f32[64,256,1600] xg:f32[64,256,1] xh:f32[1,1,1600] xi:f32[64,256,1] xj:f32[64,256]
      xk:f32[64,256] xl:f32[64,256,1600] xm:f32[64,256,1600] xn:f16[64,256,6400]
      xo:f16[6400,1600] xp:f16[64,256,6400] xq:f16[64,256,6400] xr:f16[64,256,6400]
      xs:f16[64,256,6400] xt:f16[64,256,6400] xu:f16[64,256,1600] xv:f16[1600,6400]
      xw:f32[64,256,1600] xx:f32[64,256,1] xy:f32[1,1,1600] xz:f32[64,256,1] ya:f32[64,256]
      yb:f32[64,256] yc:f32[64,256,1600] yd:f32[64,256,1600] ye:f16[64,256,1600]
      yf:f16[1600,1600] yg:f16[64,256,25,64] yh:f16[64,25,256,1] yi:f16[64,25,256,256]
      yj:f16[64,25,256,1] yk:f16[64,256,25,64] yl:f16[64,256,25,64] ym:f16[] yn:f16[64,25,256,256]
      yo:f16[64,256,1600] yp:f16[1600,4800] yq:f32[64,256,1600] yr:f32[64,256,1]
      ys:f32[1,1,1600] yt:f32[64,256,1] yu:f32[64,256] yv:f32[64,256] yw:f32[64,256,1600]
      yx:f32[64,256,1600] yy:f16[64,256,6400] yz:f16[6400,1600] za:f16[64,256,6400]
      zb:f16[64,256,6400] zc:f16[64,256,6400] zd:f16[64,256,6400] ze:f16[64,256,6400]
      zf:f16[64,256,1600] zg:f16[1600,6400] zh:f32[64,256,1600] zi:f32[64,256,1]
      zj:f32[1,1,1600] zk:f32[64,256,1] zl:f32[64,256] zm:f32[64,256] zn:f32[64,256,1600]
      zo:f32[64,256,1600] zp:f16[64,256,1600] zq:f16[1600,1600] zr:f16[64,256,25,64]
      zs:f16[64,25,256,1] zt:f16[64,25,256,256] zu:f16[64,25,256,1] zv:f16[64,256,25,64]
      zw:f16[64,256,25,64] zx:f16[] zy:f16[64,25,256,256] zz:f16[64,256,1600] baa:f16[1600,4800]
      bab:f32[64,256,1600] bac:f32[64,256,1] bad:f32[1,1,1600] bae:f32[64,256,1]
      baf:f32[64,256] bag:f32[64,256] bah:f32[64,256,1600] bai:f32[64,256,1600] baj:f16[64,256,6400]
      bak:f16[6400,1600] bal:f16[64,256,6400] bam:f16[64,256,6400] ban:f16[64,256,6400]
      bao:f16[64,256,6400] bap:f16[64,256,6400] baq:f16[64,256,1600] bar:f16[1600,6400]
      bas:f32[64,256,1600] bat:f32[64,256,1] bau:f32[1,1,1600] bav:f32[64,256,1]
      baw:f32[64,256] bax:f32[64,256] bay:f32[64,256,1600] baz:f32[64,256,1600]. let
      bba:f16[64,256,1600] bbb:f16[1600] bbc:f16[1600,6400] bbd:f16[6400] bbe:f16[6400,1600]
        bbf:f16[1600] bbg:f16[1600] bbh:f16[1600] bbi:f16[1600,1600] bbj:f16[4800]
        bbk:f16[4800,1600] bbl:f16[1600] bbm:f16[1600] bbn:f16[1600] bbo:f16[1600,6400]
        bbp:f16[6400] bbq:f16[6400,1600] bbr:f16[1600] bbs:f16[1600] bbt:f16[1600]
        bbu:f16[1600,1600] bbv:f16[4800] bbw:f16[4800,1600] bbx:f16[1600] bby:f16[1600]
        bbz:f16[1600] bca:f16[1600,6400] bcb:f16[6400] bcc:f16[6400,1600] bcd:f16[1600]
        bce:f16[1600] bcf:f16[1600] bcg:f16[1600,1600] bch:f16[4800] bci:f16[4800,1600]
        bcj:f16[1600] bck:f16[1600] bcl:f16[1600] bcm:f16[1600,6400] bcn:f16[6400]
        bco:f16[6400,1600] bcp:f16[1600] bcq:f16[1600] bcr:f16[1600] bcs:f16[1600,1600]
        bct:f16[4800] bcu:f16[4800,1600] bcv:f16[1600] bcw:f16[1600] = named_call[
        call_jaxpr={ lambda ; bcx:f16[64,256,1600] bcy:f16[1600] bcz:f16[1600,6400]
            bda:f16[6400] bdb:f16[6400,1600] bdc:f16[1600] bdd:f16[1600] bde:f16[1600]
            bdf:f16[1600,1600] bdg:f16[4800] bdh:f16[4800,1600] bdi:f16[1600] bdj:f16[1600]
            bdk:f16[1600] bdl:f16[1600,6400] bdm:f16[6400] bdn:f16[6400,1600] bdo:f16[1600]
            bdp:f16[1600] bdq:f16[1600] bdr:f16[1600,1600] bds:f16[4800] bdt:f16[4800,1600]
            bdu:f16[1600] bdv:f16[1600] bdw:f16[1600] bdx:f16[1600,6400] bdy:f16[6400]
            bdz:f16[6400,1600] bea:f16[1600] beb:f16[1600] bec:f16[1600] bed:f16[1600,1600]
            bee:f16[4800] bef:f16[4800,1600] beg:f16[1600] beh:f16[1600] bei:f16[1600]
            bej:f16[1600,6400] bek:f16[6400] bel:f16[6400,1600] bem:f16[1600] ben:f16[1600]
            beo:f16[1600] bep:f16[1600,1600] beq:f16[4800] ber:f16[4800,1600] bes:f16[1600]
            bet:f16[1600] beu:f16[64,256,6400] bev:f16[6400,1600] bew:f16[64,256,6400]
            bex:f16[64,256,6400] bey:f16[64,256,6400] bez:f16[64,256,6400] bfa:f16[64,256,6400]
            bfb:f16[64,256,1600] bfc:f16[1600,6400] bfd:f32[64,256,1600] bfe:f32[64,256,1]
            bff:f32[1,1,1600] bfg:f32[64,256,1] bfh:f32[64,256] bfi:f32[64,256] bfj:f32[64,256,1600]
            bfk:f32[64,256,1600] bfl:f16[64,256,1600] bfm:f16[1600,1600] bfn:f16[64,256,25,64]
            bfo:f16[64,25,256,1] bfp:f16[64,25,256,256] bfq:f16[64,25,256,1] bfr:f16[64,256,25,64]
            bfs:f16[64,256,25,64] bft:f16[] bfu:f16[64,25,256,256] bfv:f16[64,256,1600]
            bfw:f16[1600,4800] bfx:f32[64,256,1600] bfy:f32[64,256,1] bfz:f32[1,1,1600]
            bga:f32[64,256,1] bgb:f32[64,256] bgc:f32[64,256] bgd:f32[64,256,1600]
            bge:f32[64,256,1600] bgf:f16[64,256,6400] bgg:f16[6400,1600] bgh:f16[64,256,6400]
            bgi:f16[64,256,6400] bgj:f16[64,256,6400] bgk:f16[64,256,6400] bgl:f16[64,256,6400]
            bgm:f16[64,256,1600] bgn:f16[1600,6400] bgo:f32[64,256,1600] bgp:f32[64,256,1]
            bgq:f32[1,1,1600] bgr:f32[64,256,1] bgs:f32[64,256] bgt:f32[64,256] bgu:f32[64,256,1600]
            bgv:f32[64,256,1600] bgw:f16[64,256,1600] bgx:f16[1600,1600] bgy:f16[64,256,25,64]
            bgz:f16[64,25,256,1] bha:f16[64,25,256,256] bhb:f16[64,25,256,1] bhc:f16[64,256,25,64]
            bhd:f16[64,256,25,64] bhe:f16[] bhf:f16[64,25,256,256] bhg:f16[64,256,1600]
            bhh:f16[1600,4800] bhi:f32[64,256,1600] bhj:f32[64,256,1] bhk:f32[1,1,1600]
            bhl:f32[64,256,1] bhm:f32[64,256] bhn:f32[64,256] bho:f32[64,256,1600]
            bhp:f32[64,256,1600] bhq:f16[64,256,6400] bhr:f16[6400,1600] bhs:f16[64,256,6400]
            bht:f16[64,256,6400] bhu:f16[64,256,6400] bhv:f16[64,256,6400] bhw:f16[64,256,6400]
            bhx:f16[64,256,1600] bhy:f16[1600,6400] bhz:f32[64,256,1600] bia:f32[64,256,1]
            bib:f32[1,1,1600] bic:f32[64,256,1] bid:f32[64,256] bie:f32[64,256] bif:f32[64,256,1600]
            big:f32[64,256,1600] bih:f16[64,256,1600] bii:f16[1600,1600] bij:f16[64,256,25,64]
            bik:f16[64,25,256,1] bil:f16[64,25,256,256] bim:f16[64,25,256,1] bin:f16[64,256,25,64]
            bio:f16[64,256,25,64] bip:f16[] biq:f16[64,25,256,256] bir:f16[64,256,1600]
            bis:f16[1600,4800] bit:f32[64,256,1600] biu:f32[64,256,1] biv:f32[1,1,1600]
            biw:f32[64,256,1] bix:f32[64,256] biy:f32[64,256] biz:f32[64,256,1600]
            bja:f32[64,256,1600] bjb:f16[64,256,6400] bjc:f16[6400,1600] bjd:f16[64,256,6400]
            bje:f16[64,256,6400] bjf:f16[64,256,6400] bjg:f16[64,256,6400] bjh:f16[64,256,6400]
            bji:f16[64,256,1600] bjj:f16[1600,6400] bjk:f32[64,256,1600] bjl:f32[64,256,1]
            bjm:f32[1,1,1600] bjn:f32[64,256,1] bjo:f32[64,256] bjp:f32[64,256] bjq:f32[64,256,1600]
            bjr:f32[64,256,1600] bjs:f16[64,256,1600] bjt:f16[1600,1600] bju:f16[64,256,25,64]
            bjv:f16[64,25,256,1] bjw:f16[64,25,256,256] bjx:f16[64,25,256,1] bjy:f16[64,256,25,64]
            bjz:f16[64,256,25,64] bka:f16[] bkb:f16[64,25,256,256] bkc:f16[64,256,1600]
            bkd:f16[1600,4800] bke:f32[64,256,1600] bkf:f32[64,256,1] bkg:f32[1,1,1600]
            bkh:f32[64,256,1] bki:f32[64,256] bkj:f32[64,256] bkk:f32[64,256,1600]
            bkl:f32[64,256,1600]. let
            bkm:f16[1600] = reduce_sum[axes=(0, 1)] bcx
            bkn:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] bkm
            bko:f16[1600] = reduce_sum[axes=(0, 1)] bkn
            bkp:f16[1600,6400] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] bcx beu
            bkq:f16[6400,1600] = transpose[permutation=(1, 0)] bkp
            bkr:f16[1600,6400] = transpose[permutation=(1, 0)] bkq
            bks:f16[64,256,6400] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] bcx bev
            bkt:f16[64,256,6400] = mul bew bks
            bku:f16[64,256,6400] = mul 0.5 bkt
            bkv:f16[64,256,6400] = mul bku bex
            bkw:f16[64,256,6400] = mul bkv bey
            bkx:f16[64,256,6400] = add_any bkv bkw
            bky:f16[64,256,6400] = mul 0.7978515625 bkx
            bkz:f16[64,256,6400] = mul 0.044708251953125 bky
            bla:f16[64,256,6400] = mul bkz bez
            blb:f16[64,256,6400] = add_any bky bla
            blc:f16[64,256,6400] = mul bks bfa
            bld:f16[64,256,6400] = add_any blb blc
            ble:f16[6400] = reduce_sum[axes=(0, 1)] bld
            blf:f16[1,1,6400] = reshape[dimensions=None new_sizes=(1, 1, 6400)] ble
            blg:f16[6400] = reduce_sum[axes=(0, 1)] blf
            blh:f16[6400,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] bld bfb
            bli:f16[1600,6400] = transpose[permutation=(1, 0)] blh
            blj:f16[6400,1600] = transpose[permutation=(1, 0)] bli
            blk:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] bld bfc
            bll:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] blk
            blm:f32[1600] = reduce_sum[axes=(0, 1)] bll
            bln:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] blm
            blo:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bln
            blp:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] blo
            blq:f32[64,256,1600] = mul bfd bll
            blr:f32[64,256,1600] = mul bfe blq
            bls:f32[1600] = reduce_sum[axes=(0, 1)] blr
            blt:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] bls
            blu:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] blt
            blv:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] blu
            blw:f32[64,256,1600] = mul blq bff
            blx:f32[64,256] = reduce_sum[axes=(2,)] blw
            bly:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] blx
            blz:f32[64,256,1] = mul bly bfg
            bma:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] blz
            bmb:f32[64,256] = mul bma bfh
            bmc:f32[64,256] = neg bmb
            bmd:f32[64,256] = mul bmc bfi
            bme:f32[64,256] = div bmb 1600.0
            bmf:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] bme
            bmg:f32[64,256,1600] = mul bmf bfj
            bmh:f32[64,256,1600] = mul bll bfk
            bmi:f32[64,256,1600] = neg bmh
            bmj:f32[64,256] = reduce_sum[axes=(2,)] bmi
            bmk:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] bmj
            bml:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] bmk
            bmm:f32[64,256] = add_any bmd bml
            bmn:f32[64,256] = div bmm 1600.0
            bmo:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] bmn
            bmp:f32[64,256,1600] = add_any bmg bmo
            bmq:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bmp
            bmr:f16[64,256,1600] = add_any bcx bmq
            bms:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bmh
            bmt:f16[64,256,1600] = add_any bmr bms
            bmu:f16[1600] = reduce_sum[axes=(0, 1)] bmt
            bmv:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] bmu
            bmw:f16[1600] = reduce_sum[axes=(0, 1)] bmv
            bmx:f16[1600,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] bmt bfl
            bmy:f16[1600,1600] = transpose[permutation=(1, 0)] bmx
            bmz:f16[1600,1600] = transpose[permutation=(1, 0)] bmy
            bna:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] bmt bfm
            bnb:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] bna
            bnc:f16[64,25,64,256] = transpose[permutation=(0, 2, 3, 1)] bnb
            bnd:f16[64,25,256,256] = dot_general[
              dimension_numbers=(((2,), (3,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] bnc bfn
            bne:f16[64,25,256,256] = mul bnd bfo
            bnf:f16[64,25,256,256] = mul bne bfp
            bng:f16[64,25,256] = reduce_sum[axes=(3,)] bnf
            bnh:f16[64,25,256,1] = reshape[
              dimensions=None
              new_sizes=(64, 25, 256, 1)
            ] bng
            bni:f16[64,25,256,1] = neg bnh
            bnj:f32[64,25,256,1] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bni
            bnk:f32[64,25,256] = reduce_sum[axes=(3,)] bnj
            bnl:f32[64,25,256,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 256)
            ] bnk
            bnm:f16[64,25,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bnl
            bnn:f16[64,25,256,256] = div bnd bfq
            bno:f16[64,25,256,256] = add_any bnm bnn
            bnp:f16[64,25,256,256] = mul bno bfp
            bnq:f16[64,25,256,64] = dot_general[
              dimension_numbers=(((2,), (1,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] bnp bfr
            bnr:f16[64,256,25,64] = transpose[permutation=(0, 2, 1, 3)] bnq
            bns:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] bnr
            bnt:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (1600, 1600, 0))
            ] bns 0.0
            bnu:f16[64,25,256,64] = dot_general[
              dimension_numbers=(((3,), (1,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] bnp bfs
            bnv:f16[64,256,25,64] = transpose[permutation=(0, 2, 1, 3)] bnu
            bnw:f16[64,256,25,64] = div bnv bft
            bnx:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] bnw
            bny:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (0, 3200, 0))
            ] bnx 0.0
            bnz:f16[64,256,4800] = add_any bnt bny
            boa:f16[64,25,64,256] = dot_general[
              dimension_numbers=(((3,), (2,)), ((0, 1), (0, 1)))
              precision=None
              preferred_element_type=None
            ] bnc bfu
            bob:f16[64,256,25,64] = transpose[permutation=(0, 3, 1, 2)] boa
            boc:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] bob
            bod:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (3200, 0, 0))
            ] boc 0.0
            boe:f16[64,256,4800] = add_any bnz bod
            bof:f16[4800] = reduce_sum[axes=(0, 1)] boe
            bog:f16[1,1,4800] = reshape[dimensions=None new_sizes=(1, 1, 4800)] bof
            boh:f16[4800] = reduce_sum[axes=(0, 1)] bog
            boi:f16[4800,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] boe bfv
            boj:f16[1600,4800] = transpose[permutation=(1, 0)] boi
            bok:f16[4800,1600] = transpose[permutation=(1, 0)] boj
            bol:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] boe bfw
            bom:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bol
            bon:f32[1600] = reduce_sum[axes=(0, 1)] bom
            boo:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] bon
            bop:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] boo
            boq:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] bop
            bor:f32[64,256,1600] = mul bfx bom
            bos:f32[64,256,1600] = mul bfy bor
            bot:f32[1600] = reduce_sum[axes=(0, 1)] bos
            bou:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] bot
            bov:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bou
            bow:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] bov
            box:f32[64,256,1600] = mul bor bfz
            boy:f32[64,256] = reduce_sum[axes=(2,)] box
            boz:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] boy
            bpa:f32[64,256,1] = mul boz bga
            bpb:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] bpa
            bpc:f32[64,256] = mul bpb bgb
            bpd:f32[64,256] = neg bpc
            bpe:f32[64,256] = mul bpd bgc
            bpf:f32[64,256] = div bpc 1600.0
            bpg:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] bpf
            bph:f32[64,256,1600] = mul bpg bgd
            bpi:f32[64,256,1600] = mul bom bge
            bpj:f32[64,256,1600] = neg bpi
            bpk:f32[64,256] = reduce_sum[axes=(2,)] bpj
            bpl:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] bpk
            bpm:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] bpl
            bpn:f32[64,256] = add_any bpe bpm
            bpo:f32[64,256] = div bpn 1600.0
            bpp:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] bpo
            bpq:f32[64,256,1600] = add_any bph bpp
            bpr:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bpq
            bps:f16[64,256,1600] = add_any bmt bpr
            bpt:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bpi
            bpu:f16[64,256,1600] = add_any bps bpt
            bpv:f16[1600] = reduce_sum[axes=(0, 1)] bpu
            bpw:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] bpv
            bpx:f16[1600] = reduce_sum[axes=(0, 1)] bpw
            bpy:f16[1600,6400] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] bpu bgf
            bpz:f16[6400,1600] = transpose[permutation=(1, 0)] bpy
            bqa:f16[1600,6400] = transpose[permutation=(1, 0)] bpz
            bqb:f16[64,256,6400] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] bpu bgg
            bqc:f16[64,256,6400] = mul bgh bqb
            bqd:f16[64,256,6400] = mul 0.5 bqc
            bqe:f16[64,256,6400] = mul bqd bgi
            bqf:f16[64,256,6400] = mul bqe bgj
            bqg:f16[64,256,6400] = add_any bqe bqf
            bqh:f16[64,256,6400] = mul 0.7978515625 bqg
            bqi:f16[64,256,6400] = mul 0.044708251953125 bqh
            bqj:f16[64,256,6400] = mul bqi bgk
            bqk:f16[64,256,6400] = add_any bqh bqj
            bql:f16[64,256,6400] = mul bqb bgl
            bqm:f16[64,256,6400] = add_any bqk bql
            bqn:f16[6400] = reduce_sum[axes=(0, 1)] bqm
            bqo:f16[1,1,6400] = reshape[dimensions=None new_sizes=(1, 1, 6400)] bqn
            bqp:f16[6400] = reduce_sum[axes=(0, 1)] bqo
            bqq:f16[6400,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] bqm bgm
            bqr:f16[1600,6400] = transpose[permutation=(1, 0)] bqq
            bqs:f16[6400,1600] = transpose[permutation=(1, 0)] bqr
            bqt:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] bqm bgn
            bqu:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bqt
            bqv:f32[1600] = reduce_sum[axes=(0, 1)] bqu
            bqw:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] bqv
            bqx:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bqw
            bqy:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] bqx
            bqz:f32[64,256,1600] = mul bgo bqu
            bra:f32[64,256,1600] = mul bgp bqz
            brb:f32[1600] = reduce_sum[axes=(0, 1)] bra
            brc:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] brb
            brd:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] brc
            bre:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] brd
            brf:f32[64,256,1600] = mul bqz bgq
            brg:f32[64,256] = reduce_sum[axes=(2,)] brf
            brh:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] brg
            bri:f32[64,256,1] = mul brh bgr
            brj:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] bri
            brk:f32[64,256] = mul brj bgs
            brl:f32[64,256] = neg brk
            brm:f32[64,256] = mul brl bgt
            brn:f32[64,256] = div brk 1600.0
            bro:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] brn
            brp:f32[64,256,1600] = mul bro bgu
            brq:f32[64,256,1600] = mul bqu bgv
            brr:f32[64,256,1600] = neg brq
            brs:f32[64,256] = reduce_sum[axes=(2,)] brr
            brt:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] brs
            bru:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] brt
            brv:f32[64,256] = add_any brm bru
            brw:f32[64,256] = div brv 1600.0
            brx:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] brw
            bry:f32[64,256,1600] = add_any brp brx
            brz:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bry
            bsa:f16[64,256,1600] = add_any bpu brz
            bsb:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] brq
            bsc:f16[64,256,1600] = add_any bsa bsb
            bsd:f16[1600] = reduce_sum[axes=(0, 1)] bsc
            bse:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] bsd
            bsf:f16[1600] = reduce_sum[axes=(0, 1)] bse
            bsg:f16[1600,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] bsc bgw
            bsh:f16[1600,1600] = transpose[permutation=(1, 0)] bsg
            bsi:f16[1600,1600] = transpose[permutation=(1, 0)] bsh
            bsj:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] bsc bgx
            bsk:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] bsj
            bsl:f16[64,25,64,256] = transpose[permutation=(0, 2, 3, 1)] bsk
            bsm:f16[64,25,256,256] = dot_general[
              dimension_numbers=(((2,), (3,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] bsl bgy
            bsn:f16[64,25,256,256] = mul bsm bgz
            bso:f16[64,25,256,256] = mul bsn bha
            bsp:f16[64,25,256] = reduce_sum[axes=(3,)] bso
            bsq:f16[64,25,256,1] = reshape[
              dimensions=None
              new_sizes=(64, 25, 256, 1)
            ] bsp
            bsr:f16[64,25,256,1] = neg bsq
            bss:f32[64,25,256,1] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bsr
            bst:f32[64,25,256] = reduce_sum[axes=(3,)] bss
            bsu:f32[64,25,256,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 256)
            ] bst
            bsv:f16[64,25,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bsu
            bsw:f16[64,25,256,256] = div bsm bhb
            bsx:f16[64,25,256,256] = add_any bsv bsw
            bsy:f16[64,25,256,256] = mul bsx bha
            bsz:f16[64,25,256,64] = dot_general[
              dimension_numbers=(((2,), (1,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] bsy bhc
            bta:f16[64,256,25,64] = transpose[permutation=(0, 2, 1, 3)] bsz
            btb:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] bta
            btc:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (1600, 1600, 0))
            ] btb 0.0
            btd:f16[64,25,256,64] = dot_general[
              dimension_numbers=(((3,), (1,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] bsy bhd
            bte:f16[64,256,25,64] = transpose[permutation=(0, 2, 1, 3)] btd
            btf:f16[64,256,25,64] = div bte bhe
            btg:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] btf
            bth:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (0, 3200, 0))
            ] btg 0.0
            bti:f16[64,256,4800] = add_any btc bth
            btj:f16[64,25,64,256] = dot_general[
              dimension_numbers=(((3,), (2,)), ((0, 1), (0, 1)))
              precision=None
              preferred_element_type=None
            ] bsl bhf
            btk:f16[64,256,25,64] = transpose[permutation=(0, 3, 1, 2)] btj
            btl:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] btk
            btm:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (3200, 0, 0))
            ] btl 0.0
            btn:f16[64,256,4800] = add_any bti btm
            bto:f16[4800] = reduce_sum[axes=(0, 1)] btn
            btp:f16[1,1,4800] = reshape[dimensions=None new_sizes=(1, 1, 4800)] bto
            btq:f16[4800] = reduce_sum[axes=(0, 1)] btp
            btr:f16[4800,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] btn bhg
            bts:f16[1600,4800] = transpose[permutation=(1, 0)] btr
            btt:f16[4800,1600] = transpose[permutation=(1, 0)] bts
            btu:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] btn bhh
            btv:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] btu
            btw:f32[1600] = reduce_sum[axes=(0, 1)] btv
            btx:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] btw
            bty:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] btx
            btz:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] bty
            bua:f32[64,256,1600] = mul bhi btv
            bub:f32[64,256,1600] = mul bhj bua
            buc:f32[1600] = reduce_sum[axes=(0, 1)] bub
            bud:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] buc
            bue:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bud
            buf:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] bue
            bug:f32[64,256,1600] = mul bua bhk
            buh:f32[64,256] = reduce_sum[axes=(2,)] bug
            bui:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] buh
            buj:f32[64,256,1] = mul bui bhl
            buk:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] buj
            bul:f32[64,256] = mul buk bhm
            bum:f32[64,256] = neg bul
            bun:f32[64,256] = mul bum bhn
            buo:f32[64,256] = div bul 1600.0
            bup:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] buo
            buq:f32[64,256,1600] = mul bup bho
            bur:f32[64,256,1600] = mul btv bhp
            bus:f32[64,256,1600] = neg bur
            but:f32[64,256] = reduce_sum[axes=(2,)] bus
            buu:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] but
            buv:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] buu
            buw:f32[64,256] = add_any bun buv
            bux:f32[64,256] = div buw 1600.0
            buy:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] bux
            buz:f32[64,256,1600] = add_any buq buy
            bva:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] buz
            bvb:f16[64,256,1600] = add_any bsc bva
            bvc:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bur
            bvd:f16[64,256,1600] = add_any bvb bvc
            bve:f16[1600] = reduce_sum[axes=(0, 1)] bvd
            bvf:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] bve
            bvg:f16[1600] = reduce_sum[axes=(0, 1)] bvf
            bvh:f16[1600,6400] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] bvd bhq
            bvi:f16[6400,1600] = transpose[permutation=(1, 0)] bvh
            bvj:f16[1600,6400] = transpose[permutation=(1, 0)] bvi
            bvk:f16[64,256,6400] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] bvd bhr
            bvl:f16[64,256,6400] = mul bhs bvk
            bvm:f16[64,256,6400] = mul 0.5 bvl
            bvn:f16[64,256,6400] = mul bvm bht
            bvo:f16[64,256,6400] = mul bvn bhu
            bvp:f16[64,256,6400] = add_any bvn bvo
            bvq:f16[64,256,6400] = mul 0.7978515625 bvp
            bvr:f16[64,256,6400] = mul 0.044708251953125 bvq
            bvs:f16[64,256,6400] = mul bvr bhv
            bvt:f16[64,256,6400] = add_any bvq bvs
            bvu:f16[64,256,6400] = mul bvk bhw
            bvv:f16[64,256,6400] = add_any bvt bvu
            bvw:f16[6400] = reduce_sum[axes=(0, 1)] bvv
            bvx:f16[1,1,6400] = reshape[dimensions=None new_sizes=(1, 1, 6400)] bvw
            bvy:f16[6400] = reduce_sum[axes=(0, 1)] bvx
            bvz:f16[6400,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] bvv bhx
            bwa:f16[1600,6400] = transpose[permutation=(1, 0)] bvz
            bwb:f16[6400,1600] = transpose[permutation=(1, 0)] bwa
            bwc:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] bvv bhy
            bwd:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bwc
            bwe:f32[1600] = reduce_sum[axes=(0, 1)] bwd
            bwf:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] bwe
            bwg:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bwf
            bwh:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] bwg
            bwi:f32[64,256,1600] = mul bhz bwd
            bwj:f32[64,256,1600] = mul bia bwi
            bwk:f32[1600] = reduce_sum[axes=(0, 1)] bwj
            bwl:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] bwk
            bwm:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bwl
            bwn:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] bwm
            bwo:f32[64,256,1600] = mul bwi bib
            bwp:f32[64,256] = reduce_sum[axes=(2,)] bwo
            bwq:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] bwp
            bwr:f32[64,256,1] = mul bwq bic
            bws:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] bwr
            bwt:f32[64,256] = mul bws bid
            bwu:f32[64,256] = neg bwt
            bwv:f32[64,256] = mul bwu bie
            bww:f32[64,256] = div bwt 1600.0
            bwx:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] bww
            bwy:f32[64,256,1600] = mul bwx bif
            bwz:f32[64,256,1600] = mul bwd big
            bxa:f32[64,256,1600] = neg bwz
            bxb:f32[64,256] = reduce_sum[axes=(2,)] bxa
            bxc:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] bxb
            bxd:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] bxc
            bxe:f32[64,256] = add_any bwv bxd
            bxf:f32[64,256] = div bxe 1600.0
            bxg:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] bxf
            bxh:f32[64,256,1600] = add_any bwy bxg
            bxi:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bxh
            bxj:f16[64,256,1600] = add_any bvd bxi
            bxk:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bwz
            bxl:f16[64,256,1600] = add_any bxj bxk
            bxm:f16[1600] = reduce_sum[axes=(0, 1)] bxl
            bxn:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] bxm
            bxo:f16[1600] = reduce_sum[axes=(0, 1)] bxn
            bxp:f16[1600,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] bxl bih
            bxq:f16[1600,1600] = transpose[permutation=(1, 0)] bxp
            bxr:f16[1600,1600] = transpose[permutation=(1, 0)] bxq
            bxs:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] bxl bii
            bxt:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] bxs
            bxu:f16[64,25,64,256] = transpose[permutation=(0, 2, 3, 1)] bxt
            bxv:f16[64,25,256,256] = dot_general[
              dimension_numbers=(((2,), (3,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] bxu bij
            bxw:f16[64,25,256,256] = mul bxv bik
            bxx:f16[64,25,256,256] = mul bxw bil
            bxy:f16[64,25,256] = reduce_sum[axes=(3,)] bxx
            bxz:f16[64,25,256,1] = reshape[
              dimensions=None
              new_sizes=(64, 25, 256, 1)
            ] bxy
            bya:f16[64,25,256,1] = neg bxz
            byb:f32[64,25,256,1] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bya
            byc:f32[64,25,256] = reduce_sum[axes=(3,)] byb
            byd:f32[64,25,256,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 256)
            ] byc
            bye:f16[64,25,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] byd
            byf:f16[64,25,256,256] = div bxv bim
            byg:f16[64,25,256,256] = add_any bye byf
            byh:f16[64,25,256,256] = mul byg bil
            byi:f16[64,25,256,64] = dot_general[
              dimension_numbers=(((2,), (1,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] byh bin
            byj:f16[64,256,25,64] = transpose[permutation=(0, 2, 1, 3)] byi
            byk:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] byj
            byl:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (1600, 1600, 0))
            ] byk 0.0
            bym:f16[64,25,256,64] = dot_general[
              dimension_numbers=(((3,), (1,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] byh bio
            byn:f16[64,256,25,64] = transpose[permutation=(0, 2, 1, 3)] bym
            byo:f16[64,256,25,64] = div byn bip
            byp:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] byo
            byq:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (0, 3200, 0))
            ] byp 0.0
            byr:f16[64,256,4800] = add_any byl byq
            bys:f16[64,25,64,256] = dot_general[
              dimension_numbers=(((3,), (2,)), ((0, 1), (0, 1)))
              precision=None
              preferred_element_type=None
            ] bxu biq
            byt:f16[64,256,25,64] = transpose[permutation=(0, 3, 1, 2)] bys
            byu:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] byt
            byv:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (3200, 0, 0))
            ] byu 0.0
            byw:f16[64,256,4800] = add_any byr byv
            byx:f16[4800] = reduce_sum[axes=(0, 1)] byw
            byy:f16[1,1,4800] = reshape[dimensions=None new_sizes=(1, 1, 4800)] byx
            byz:f16[4800] = reduce_sum[axes=(0, 1)] byy
            bza:f16[4800,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] byw bir
            bzb:f16[1600,4800] = transpose[permutation=(1, 0)] bza
            bzc:f16[4800,1600] = transpose[permutation=(1, 0)] bzb
            bzd:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] byw bis
            bze:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bzd
            bzf:f32[1600] = reduce_sum[axes=(0, 1)] bze
            bzg:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] bzf
            bzh:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bzg
            bzi:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] bzh
            bzj:f32[64,256,1600] = mul bit bze
            bzk:f32[64,256,1600] = mul biu bzj
            bzl:f32[1600] = reduce_sum[axes=(0, 1)] bzk
            bzm:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] bzl
            bzn:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bzm
            bzo:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] bzn
            bzp:f32[64,256,1600] = mul bzj biv
            bzq:f32[64,256] = reduce_sum[axes=(2,)] bzp
            bzr:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] bzq
            bzs:f32[64,256,1] = mul bzr biw
            bzt:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] bzs
            bzu:f32[64,256] = mul bzt bix
            bzv:f32[64,256] = neg bzu
            bzw:f32[64,256] = mul bzv biy
            bzx:f32[64,256] = div bzu 1600.0
            bzy:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] bzx
            bzz:f32[64,256,1600] = mul bzy biz
            caa:f32[64,256,1600] = mul bze bja
            cab:f32[64,256,1600] = neg caa
            cac:f32[64,256] = reduce_sum[axes=(2,)] cab
            cad:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] cac
            cae:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] cad
            caf:f32[64,256] = add_any bzw cae
            cag:f32[64,256] = div caf 1600.0
            cah:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] cag
            cai:f32[64,256,1600] = add_any bzz cah
            caj:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] cai
            cak:f16[64,256,1600] = add_any bxl caj
            cal:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] caa
            cam:f16[64,256,1600] = add_any cak cal
            can:f16[1600] = reduce_sum[axes=(0, 1)] cam
            cao:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] can
            cap:f16[1600] = reduce_sum[axes=(0, 1)] cao
            caq:f16[1600,6400] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] cam bjb
            car:f16[6400,1600] = transpose[permutation=(1, 0)] caq
            cas:f16[1600,6400] = transpose[permutation=(1, 0)] car
            cat:f16[64,256,6400] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] cam bjc
            cau:f16[64,256,6400] = mul bjd cat
            cav:f16[64,256,6400] = mul 0.5 cau
            caw:f16[64,256,6400] = mul cav bje
            cax:f16[64,256,6400] = mul caw bjf
            cay:f16[64,256,6400] = add_any caw cax
            caz:f16[64,256,6400] = mul 0.7978515625 cay
            cba:f16[64,256,6400] = mul 0.044708251953125 caz
            cbb:f16[64,256,6400] = mul cba bjg
            cbc:f16[64,256,6400] = add_any caz cbb
            cbd:f16[64,256,6400] = mul cat bjh
            cbe:f16[64,256,6400] = add_any cbc cbd
            cbf:f16[6400] = reduce_sum[axes=(0, 1)] cbe
            cbg:f16[1,1,6400] = reshape[dimensions=None new_sizes=(1, 1, 6400)] cbf
            cbh:f16[6400] = reduce_sum[axes=(0, 1)] cbg
            cbi:f16[6400,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] cbe bji
            cbj:f16[1600,6400] = transpose[permutation=(1, 0)] cbi
            cbk:f16[6400,1600] = transpose[permutation=(1, 0)] cbj
            cbl:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] cbe bjj
            cbm:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] cbl
            cbn:f32[1600] = reduce_sum[axes=(0, 1)] cbm
            cbo:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] cbn
            cbp:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] cbo
            cbq:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] cbp
            cbr:f32[64,256,1600] = mul bjk cbm
            cbs:f32[64,256,1600] = mul bjl cbr
            cbt:f32[1600] = reduce_sum[axes=(0, 1)] cbs
            cbu:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] cbt
            cbv:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] cbu
            cbw:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] cbv
            cbx:f32[64,256,1600] = mul cbr bjm
            cby:f32[64,256] = reduce_sum[axes=(2,)] cbx
            cbz:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] cby
            cca:f32[64,256,1] = mul cbz bjn
            ccb:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] cca
            ccc:f32[64,256] = mul ccb bjo
            ccd:f32[64,256] = neg ccc
            cce:f32[64,256] = mul ccd bjp
            ccf:f32[64,256] = div ccc 1600.0
            ccg:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] ccf
            cch:f32[64,256,1600] = mul ccg bjq
            cci:f32[64,256,1600] = mul cbm bjr
            ccj:f32[64,256,1600] = neg cci
            cck:f32[64,256] = reduce_sum[axes=(2,)] ccj
            ccl:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] cck
            ccm:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] ccl
            ccn:f32[64,256] = add_any cce ccm
            cco:f32[64,256] = div ccn 1600.0
            ccp:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] cco
            ccq:f32[64,256,1600] = add_any cch ccp
            ccr:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] ccq
            ccs:f16[64,256,1600] = add_any cam ccr
            cct:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] cci
            ccu:f16[64,256,1600] = add_any ccs cct
            ccv:f16[1600] = reduce_sum[axes=(0, 1)] ccu
            ccw:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] ccv
            ccx:f16[1600] = reduce_sum[axes=(0, 1)] ccw
            ccy:f16[1600,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] ccu bjs
            ccz:f16[1600,1600] = transpose[permutation=(1, 0)] ccy
            cda:f16[1600,1600] = transpose[permutation=(1, 0)] ccz
            cdb:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] ccu bjt
            cdc:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] cdb
            cdd:f16[64,25,64,256] = transpose[permutation=(0, 2, 3, 1)] cdc
            cde:f16[64,25,256,256] = dot_general[
              dimension_numbers=(((2,), (3,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] cdd bju
            cdf:f16[64,25,256,256] = mul cde bjv
            cdg:f16[64,25,256,256] = mul cdf bjw
            cdh:f16[64,25,256] = reduce_sum[axes=(3,)] cdg
            cdi:f16[64,25,256,1] = reshape[
              dimensions=None
              new_sizes=(64, 25, 256, 1)
            ] cdh
            cdj:f16[64,25,256,1] = neg cdi
            cdk:f32[64,25,256,1] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] cdj
            cdl:f32[64,25,256] = reduce_sum[axes=(3,)] cdk
            cdm:f32[64,25,256,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 256)
            ] cdl
            cdn:f16[64,25,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] cdm
            cdo:f16[64,25,256,256] = div cde bjx
            cdp:f16[64,25,256,256] = add_any cdn cdo
            cdq:f16[64,25,256,256] = mul cdp bjw
            cdr:f16[64,25,256,64] = dot_general[
              dimension_numbers=(((2,), (1,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] cdq bjy
            cds:f16[64,256,25,64] = transpose[permutation=(0, 2, 1, 3)] cdr
            cdt:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] cds
            cdu:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (1600, 1600, 0))
            ] cdt 0.0
            cdv:f16[64,25,256,64] = dot_general[
              dimension_numbers=(((3,), (1,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] cdq bjz
            cdw:f16[64,256,25,64] = transpose[permutation=(0, 2, 1, 3)] cdv
            cdx:f16[64,256,25,64] = div cdw bka
            cdy:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] cdx
            cdz:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (0, 3200, 0))
            ] cdy 0.0
            cea:f16[64,256,4800] = add_any cdu cdz
            ceb:f16[64,25,64,256] = dot_general[
              dimension_numbers=(((3,), (2,)), ((0, 1), (0, 1)))
              precision=None
              preferred_element_type=None
            ] cdd bkb
            cec:f16[64,256,25,64] = transpose[permutation=(0, 3, 1, 2)] ceb
            ced:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] cec
            cee:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (3200, 0, 0))
            ] ced 0.0
            cef:f16[64,256,4800] = add_any cea cee
            ceg:f16[4800] = reduce_sum[axes=(0, 1)] cef
            ceh:f16[1,1,4800] = reshape[dimensions=None new_sizes=(1, 1, 4800)] ceg
            cei:f16[4800] = reduce_sum[axes=(0, 1)] ceh
            cej:f16[4800,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] cef bkc
            cek:f16[1600,4800] = transpose[permutation=(1, 0)] cej
            cel:f16[4800,1600] = transpose[permutation=(1, 0)] cek
            cem:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] cef bkd
            cen:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] cem
            ceo:f32[1600] = reduce_sum[axes=(0, 1)] cen
            cep:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] ceo
            ceq:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] cep
            cer:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] ceq
            ces:f32[64,256,1600] = mul bke cen
            cet:f32[64,256,1600] = mul bkf ces
            ceu:f32[1600] = reduce_sum[axes=(0, 1)] cet
            cev:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] ceu
            cew:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] cev
            cex:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] cew
            cey:f32[64,256,1600] = mul ces bkg
            cez:f32[64,256] = reduce_sum[axes=(2,)] cey
            cfa:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] cez
            cfb:f32[64,256,1] = mul cfa bkh
            cfc:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] cfb
            cfd:f32[64,256] = mul cfc bki
            cfe:f32[64,256] = neg cfd
            cff:f32[64,256] = mul cfe bkj
            cfg:f32[64,256] = div cfd 1600.0
            cfh:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] cfg
            cfi:f32[64,256,1600] = mul cfh bkk
            cfj:f32[64,256,1600] = mul cen bkl
            cfk:f32[64,256,1600] = neg cfj
            cfl:f32[64,256] = reduce_sum[axes=(2,)] cfk
            cfm:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] cfl
            cfn:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] cfm
            cfo:f32[64,256] = add_any cff cfn
            cfp:f32[64,256] = div cfo 1600.0
            cfq:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] cfp
            cfr:f32[64,256,1600] = add_any cfi cfq
            cfs:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] cfr
            cft:f16[64,256,1600] = add_any ccu cfs
            cfu:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] cfj
            cfv:f16[64,256,1600] = add_any cft cfu
            cfw:f16[1600] = add bcy bko
            cfx:f16[1600,6400] = add bcz bkr
            cfy:f16[6400] = add bda blg
            cfz:f16[6400,1600] = add bdb blj
            cga:f16[1600] = add bdc blp
            cgb:f16[1600] = add bdd blv
            cgc:f16[1600] = add bde bmw
            cgd:f16[1600,1600] = add bdf bmz
            cge:f16[4800] = add bdg boh
            cgf:f16[4800,1600] = add bdh bok
            cgg:f16[1600] = add bdi boq
            cgh:f16[1600] = add bdj bow
            cgi:f16[1600] = add bdk bpx
            cgj:f16[1600,6400] = add bdl bqa
            cgk:f16[6400] = add bdm bqp
            cgl:f16[6400,1600] = add bdn bqs
            cgm:f16[1600] = add bdo bqy
            cgn:f16[1600] = add bdp bre
            cgo:f16[1600] = add bdq bsf
            cgp:f16[1600,1600] = add bdr bsi
            cgq:f16[4800] = add bds btq
            cgr:f16[4800,1600] = add bdt btt
            cgs:f16[1600] = add bdu btz
            cgt:f16[1600] = add bdv buf
            cgu:f16[1600] = add bdw bvg
            cgv:f16[1600,6400] = add bdx bvj
            cgw:f16[6400] = add bdy bvy
            cgx:f16[6400,1600] = add bdz bwb
            cgy:f16[1600] = add bea bwh
            cgz:f16[1600] = add beb bwn
            cha:f16[1600] = add bec bxo
            chb:f16[1600,1600] = add bed bxr
            chc:f16[4800] = add bee byz
            chd:f16[4800,1600] = add bef bzc
            che:f16[1600] = add beg bzi
            chf:f16[1600] = add beh bzo
            chg:f16[1600] = add bei cap
            chh:f16[1600,6400] = add bej cas
            chi:f16[6400] = add bek cbh
            chj:f16[6400,1600] = add bel cbk
            chk:f16[1600] = add bem cbq
            chl:f16[1600] = add ben cbw
            chm:f16[1600] = add beo ccx
            chn:f16[1600,1600] = add bep cda
            cho:f16[4800] = add beq cei
            chp:f16[4800,1600] = add ber cel
            chq:f16[1600] = add bes cer
            chr:f16[1600] = add bet cex
          in (cfv, cfw, cfx, cfy, cfz, cga, cgb, cgc, cgd, cge, cgf, cgg, cgh, cgi,
            cgj, cgk, cgl, cgm, cgn, cgo, cgp, cgq, cgr, cgs, cgt, cgu, cgv, cgw,
            cgx, cgy, cgz, cha, chb, chc, chd, che, chf, chg, chh, chi, chj, chk,
            chl, chm, chn, cho, chp, chq, chr) }
        name=50
      ] kr fj fk fl fm fn fo fp fq fr fs ft fu fv fw fx fy fz ga gb gc gd ge gf gg
        gh gi gj gk gl gm gn go gp gq gr gs gt gu gv gw gx gy gz ha hb hc hd he ks
        kt ku kv kw kx ky kz la lb lc ld le lf lg lh li lj lk ll lm ln lo lp lq lr
        ls lt lu lv lw lx ly lz ma mb mc md me mf mg mh mi mj mk ml mm mn mo mp mq
        mr ms mt mu mv mw mx my mz na nb nc nd ne nf ng nh ni nj nk nl nm nn no np
        nq nr ns nt nu nv nw nx ny nz oa ob oc od oe of og oh oi oj ok ol om on oo
        op oq or os ot ou ov ow ox oy oz pa pb pc pd pe pf pg ph pi pj pk pl pm pn
        po pp pq pr ps pt pu pv pw px py pz qa qb qc qd qe qf qg qh qi qj
      chs:f16[64,256,1600] cht:f16[1600] chu:f16[1600,6400] chv:f16[6400] chw:f16[6400,1600]
        chx:f16[1600] chy:f16[1600] chz:f16[1600] cia:f16[1600,1600] cib:f16[4800]
        cic:f16[4800,1600] cid:f16[1600] cie:f16[1600] cif:f16[1600] cig:f16[1600,6400]
        cih:f16[6400] cii:f16[6400,1600] cij:f16[1600] cik:f16[1600] cil:f16[1600]
        cim:f16[1600,1600] cin:f16[4800] cio:f16[4800,1600] cip:f16[1600] ciq:f16[1600]
        cir:f16[1600] cis:f16[1600,6400] cit:f16[6400] ciu:f16[6400,1600] civ:f16[1600]
        ciw:f16[1600] cix:f16[1600] ciy:f16[1600,1600] ciz:f16[4800] cja:f16[4800,1600]
        cjb:f16[1600] cjc:f16[1600] cjd:f16[1600] cje:f16[1600,6400] cjf:f16[6400]
        cjg:f16[6400,1600] cjh:f16[1600] cji:f16[1600] = named_call[
        call_jaxpr={ lambda ; cjj:f16[64,256,1600] cjk:f16[1600] cjl:f16[1600,6400]
            cjm:f16[6400] cjn:f16[6400,1600] cjo:f16[1600] cjp:f16[1600] cjq:f16[1600]
            cjr:f16[1600,1600] cjs:f16[4800] cjt:f16[4800,1600] cju:f16[1600] cjv:f16[1600]
            cjw:f16[1600] cjx:f16[1600,6400] cjy:f16[6400] cjz:f16[6400,1600] cka:f16[1600]
            ckb:f16[1600] ckc:f16[1600] ckd:f16[1600,1600] cke:f16[4800] ckf:f16[4800,1600]
            ckg:f16[1600] ckh:f16[1600] cki:f16[1600] ckj:f16[1600,6400] ckk:f16[6400]
            ckl:f16[6400,1600] ckm:f16[1600] ckn:f16[1600] cko:f16[1600] ckp:f16[1600,1600]
            ckq:f16[4800] ckr:f16[4800,1600] cks:f16[1600] ckt:f16[1600] cku:f16[1600]
            ckv:f16[1600,6400] ckw:f16[6400] ckx:f16[6400,1600] cky:f16[1600] ckz:f16[1600]
            cla:f16[64,256,6400] clb:f16[6400,1600] clc:f16[64,256,6400] cld:f16[64,256,6400]
            cle:f16[64,256,6400] clf:f16[64,256,6400] clg:f16[64,256,6400] clh:f16[64,256,1600]
            cli:f16[1600,6400] clj:f32[64,256,1600] clk:f32[64,256,1] cll:f32[1,1,1600]
            clm:f32[64,256,1] cln:f32[64,256] clo:f32[64,256] clp:f32[64,256,1600]
            clq:f32[64,256,1600] clr:f16[64,256,1600] cls:f16[1600,1600] clt:f16[64,256,25,64]
            clu:f16[64,25,256,1] clv:f16[64,25,256,256] clw:f16[64,25,256,1] clx:f16[64,256,25,64]
            cly:f16[64,256,25,64] clz:f16[] cma:f16[64,25,256,256] cmb:f16[64,256,1600]
            cmc:f16[1600,4800] cmd:f32[64,256,1600] cme:f32[64,256,1] cmf:f32[1,1,1600]
            cmg:f32[64,256,1] cmh:f32[64,256] cmi:f32[64,256] cmj:f32[64,256,1600]
            cmk:f32[64,256,1600] cml:f16[64,256,6400] cmm:f16[6400,1600] cmn:f16[64,256,6400]
            cmo:f16[64,256,6400] cmp:f16[64,256,6400] cmq:f16[64,256,6400] cmr:f16[64,256,6400]
            cms:f16[64,256,1600] cmt:f16[1600,6400] cmu:f32[64,256,1600] cmv:f32[64,256,1]
            cmw:f32[1,1,1600] cmx:f32[64,256,1] cmy:f32[64,256] cmz:f32[64,256] cna:f32[64,256,1600]
            cnb:f32[64,256,1600] cnc:f16[64,256,1600] cnd:f16[1600,1600] cne:f16[64,256,25,64]
            cnf:f16[64,25,256,1] cng:f16[64,25,256,256] cnh:f16[64,25,256,1] cni:f16[64,256,25,64]
            cnj:f16[64,256,25,64] cnk:f16[] cnl:f16[64,25,256,256] cnm:f16[64,256,1600]
            cnn:f16[1600,4800] cno:f32[64,256,1600] cnp:f32[64,256,1] cnq:f32[1,1,1600]
            cnr:f32[64,256,1] cns:f32[64,256] cnt:f32[64,256] cnu:f32[64,256,1600]
            cnv:f32[64,256,1600] cnw:f16[64,256,6400] cnx:f16[6400,1600] cny:f16[64,256,6400]
            cnz:f16[64,256,6400] coa:f16[64,256,6400] cob:f16[64,256,6400] coc:f16[64,256,6400]
            cod:f16[64,256,1600] coe:f16[1600,6400] cof:f32[64,256,1600] cog:f32[64,256,1]
            coh:f32[1,1,1600] coi:f32[64,256,1] coj:f32[64,256] cok:f32[64,256] col:f32[64,256,1600]
            com:f32[64,256,1600] con:f16[64,256,1600] coo:f16[1600,1600] cop:f16[64,256,25,64]
            coq:f16[64,25,256,1] cor:f16[64,25,256,256] cos:f16[64,25,256,1] cot:f16[64,256,25,64]
            cou:f16[64,256,25,64] cov:f16[] cow:f16[64,25,256,256] cox:f16[64,256,1600]
            coy:f16[1600,4800] coz:f32[64,256,1600] cpa:f32[64,256,1] cpb:f32[1,1,1600]
            cpc:f32[64,256,1] cpd:f32[64,256] cpe:f32[64,256] cpf:f32[64,256,1600]
            cpg:f32[64,256,1600] cph:f16[64,256,6400] cpi:f16[6400,1600] cpj:f16[64,256,6400]
            cpk:f16[64,256,6400] cpl:f16[64,256,6400] cpm:f16[64,256,6400] cpn:f16[64,256,6400]
            cpo:f16[64,256,1600] cpp:f16[1600,6400] cpq:f32[64,256,1600] cpr:f32[64,256,1]
            cps:f32[1,1,1600] cpt:f32[64,256,1] cpu:f32[64,256] cpv:f32[64,256] cpw:f32[64,256,1600]
            cpx:f32[64,256,1600]. let
            cpy:f16[1600] = reduce_sum[axes=(0, 1)] cjj
            cpz:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] cpy
            cqa:f16[1600] = reduce_sum[axes=(0, 1)] cpz
            cqb:f16[1600,6400] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] cjj cla
            cqc:f16[6400,1600] = transpose[permutation=(1, 0)] cqb
            cqd:f16[1600,6400] = transpose[permutation=(1, 0)] cqc
            cqe:f16[64,256,6400] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] cjj clb
            cqf:f16[64,256,6400] = mul clc cqe
            cqg:f16[64,256,6400] = mul 0.5 cqf
            cqh:f16[64,256,6400] = mul cqg cld
            cqi:f16[64,256,6400] = mul cqh cle
            cqj:f16[64,256,6400] = add_any cqh cqi
            cqk:f16[64,256,6400] = mul 0.7978515625 cqj
            cql:f16[64,256,6400] = mul 0.044708251953125 cqk
            cqm:f16[64,256,6400] = mul cql clf
            cqn:f16[64,256,6400] = add_any cqk cqm
            cqo:f16[64,256,6400] = mul cqe clg
            cqp:f16[64,256,6400] = add_any cqn cqo
            cqq:f16[6400] = reduce_sum[axes=(0, 1)] cqp
            cqr:f16[1,1,6400] = reshape[dimensions=None new_sizes=(1, 1, 6400)] cqq
            cqs:f16[6400] = reduce_sum[axes=(0, 1)] cqr
            cqt:f16[6400,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] cqp clh
            cqu:f16[1600,6400] = transpose[permutation=(1, 0)] cqt
            cqv:f16[6400,1600] = transpose[permutation=(1, 0)] cqu
            cqw:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] cqp cli
            cqx:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] cqw
            cqy:f32[1600] = reduce_sum[axes=(0, 1)] cqx
            cqz:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] cqy
            cra:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] cqz
            crb:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] cra
            crc:f32[64,256,1600] = mul clj cqx
            crd:f32[64,256,1600] = mul clk crc
            cre:f32[1600] = reduce_sum[axes=(0, 1)] crd
            crf:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] cre
            crg:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] crf
            crh:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] crg
            cri:f32[64,256,1600] = mul crc cll
            crj:f32[64,256] = reduce_sum[axes=(2,)] cri
            crk:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] crj
            crl:f32[64,256,1] = mul crk clm
            crm:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] crl
            crn:f32[64,256] = mul crm cln
            cro:f32[64,256] = neg crn
            crp:f32[64,256] = mul cro clo
            crq:f32[64,256] = div crn 1600.0
            crr:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] crq
            crs:f32[64,256,1600] = mul crr clp
            crt:f32[64,256,1600] = mul cqx clq
            cru:f32[64,256,1600] = neg crt
            crv:f32[64,256] = reduce_sum[axes=(2,)] cru
            crw:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] crv
            crx:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] crw
            cry:f32[64,256] = add_any crp crx
            crz:f32[64,256] = div cry 1600.0
            csa:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] crz
            csb:f32[64,256,1600] = add_any crs csa
            csc:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] csb
            csd:f16[64,256,1600] = add_any cjj csc
            cse:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] crt
            csf:f16[64,256,1600] = add_any csd cse
            csg:f16[1600] = reduce_sum[axes=(0, 1)] csf
            csh:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] csg
            csi:f16[1600] = reduce_sum[axes=(0, 1)] csh
            csj:f16[1600,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] csf clr
            csk:f16[1600,1600] = transpose[permutation=(1, 0)] csj
            csl:f16[1600,1600] = transpose[permutation=(1, 0)] csk
            csm:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] csf cls
            csn:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] csm
            cso:f16[64,25,64,256] = transpose[permutation=(0, 2, 3, 1)] csn
            csp:f16[64,25,256,256] = dot_general[
              dimension_numbers=(((2,), (3,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] cso clt
            csq:f16[64,25,256,256] = mul csp clu
            csr:f16[64,25,256,256] = mul csq clv
            css:f16[64,25,256] = reduce_sum[axes=(3,)] csr
            cst:f16[64,25,256,1] = reshape[
              dimensions=None
              new_sizes=(64, 25, 256, 1)
            ] css
            csu:f16[64,25,256,1] = neg cst
            csv:f32[64,25,256,1] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] csu
            csw:f32[64,25,256] = reduce_sum[axes=(3,)] csv
            csx:f32[64,25,256,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 256)
            ] csw
            csy:f16[64,25,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] csx
            csz:f16[64,25,256,256] = div csp clw
            cta:f16[64,25,256,256] = add_any csy csz
            ctb:f16[64,25,256,256] = mul cta clv
            ctc:f16[64,25,256,64] = dot_general[
              dimension_numbers=(((2,), (1,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] ctb clx
            ctd:f16[64,256,25,64] = transpose[permutation=(0, 2, 1, 3)] ctc
            cte:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] ctd
            ctf:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (1600, 1600, 0))
            ] cte 0.0
            ctg:f16[64,25,256,64] = dot_general[
              dimension_numbers=(((3,), (1,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] ctb cly
            cth:f16[64,256,25,64] = transpose[permutation=(0, 2, 1, 3)] ctg
            cti:f16[64,256,25,64] = div cth clz
            ctj:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] cti
            ctk:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (0, 3200, 0))
            ] ctj 0.0
            ctl:f16[64,256,4800] = add_any ctf ctk
            ctm:f16[64,25,64,256] = dot_general[
              dimension_numbers=(((3,), (2,)), ((0, 1), (0, 1)))
              precision=None
              preferred_element_type=None
            ] cso cma
            ctn:f16[64,256,25,64] = transpose[permutation=(0, 3, 1, 2)] ctm
            cto:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] ctn
            ctp:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (3200, 0, 0))
            ] cto 0.0
            ctq:f16[64,256,4800] = add_any ctl ctp
            ctr:f16[4800] = reduce_sum[axes=(0, 1)] ctq
            cts:f16[1,1,4800] = reshape[dimensions=None new_sizes=(1, 1, 4800)] ctr
            ctt:f16[4800] = reduce_sum[axes=(0, 1)] cts
            ctu:f16[4800,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] ctq cmb
            ctv:f16[1600,4800] = transpose[permutation=(1, 0)] ctu
            ctw:f16[4800,1600] = transpose[permutation=(1, 0)] ctv
            ctx:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] ctq cmc
            cty:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] ctx
            ctz:f32[1600] = reduce_sum[axes=(0, 1)] cty
            cua:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] ctz
            cub:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] cua
            cuc:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] cub
            cud:f32[64,256,1600] = mul cmd cty
            cue:f32[64,256,1600] = mul cme cud
            cuf:f32[1600] = reduce_sum[axes=(0, 1)] cue
            cug:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] cuf
            cuh:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] cug
            cui:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] cuh
            cuj:f32[64,256,1600] = mul cud cmf
            cuk:f32[64,256] = reduce_sum[axes=(2,)] cuj
            cul:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] cuk
            cum:f32[64,256,1] = mul cul cmg
            cun:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] cum
            cuo:f32[64,256] = mul cun cmh
            cup:f32[64,256] = neg cuo
            cuq:f32[64,256] = mul cup cmi
            cur:f32[64,256] = div cuo 1600.0
            cus:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] cur
            cut:f32[64,256,1600] = mul cus cmj
            cuu:f32[64,256,1600] = mul cty cmk
            cuv:f32[64,256,1600] = neg cuu
            cuw:f32[64,256] = reduce_sum[axes=(2,)] cuv
            cux:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] cuw
            cuy:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] cux
            cuz:f32[64,256] = add_any cuq cuy
            cva:f32[64,256] = div cuz 1600.0
            cvb:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] cva
            cvc:f32[64,256,1600] = add_any cut cvb
            cvd:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] cvc
            cve:f16[64,256,1600] = add_any csf cvd
            cvf:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] cuu
            cvg:f16[64,256,1600] = add_any cve cvf
            cvh:f16[1600] = reduce_sum[axes=(0, 1)] cvg
            cvi:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] cvh
            cvj:f16[1600] = reduce_sum[axes=(0, 1)] cvi
            cvk:f16[1600,6400] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] cvg cml
            cvl:f16[6400,1600] = transpose[permutation=(1, 0)] cvk
            cvm:f16[1600,6400] = transpose[permutation=(1, 0)] cvl
            cvn:f16[64,256,6400] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] cvg cmm
            cvo:f16[64,256,6400] = mul cmn cvn
            cvp:f16[64,256,6400] = mul 0.5 cvo
            cvq:f16[64,256,6400] = mul cvp cmo
            cvr:f16[64,256,6400] = mul cvq cmp
            cvs:f16[64,256,6400] = add_any cvq cvr
            cvt:f16[64,256,6400] = mul 0.7978515625 cvs
            cvu:f16[64,256,6400] = mul 0.044708251953125 cvt
            cvv:f16[64,256,6400] = mul cvu cmq
            cvw:f16[64,256,6400] = add_any cvt cvv
            cvx:f16[64,256,6400] = mul cvn cmr
            cvy:f16[64,256,6400] = add_any cvw cvx
            cvz:f16[6400] = reduce_sum[axes=(0, 1)] cvy
            cwa:f16[1,1,6400] = reshape[dimensions=None new_sizes=(1, 1, 6400)] cvz
            cwb:f16[6400] = reduce_sum[axes=(0, 1)] cwa
            cwc:f16[6400,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] cvy cms
            cwd:f16[1600,6400] = transpose[permutation=(1, 0)] cwc
            cwe:f16[6400,1600] = transpose[permutation=(1, 0)] cwd
            cwf:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] cvy cmt
            cwg:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] cwf
            cwh:f32[1600] = reduce_sum[axes=(0, 1)] cwg
            cwi:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] cwh
            cwj:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] cwi
            cwk:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] cwj
            cwl:f32[64,256,1600] = mul cmu cwg
            cwm:f32[64,256,1600] = mul cmv cwl
            cwn:f32[1600] = reduce_sum[axes=(0, 1)] cwm
            cwo:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] cwn
            cwp:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] cwo
            cwq:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] cwp
            cwr:f32[64,256,1600] = mul cwl cmw
            cws:f32[64,256] = reduce_sum[axes=(2,)] cwr
            cwt:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] cws
            cwu:f32[64,256,1] = mul cwt cmx
            cwv:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] cwu
            cww:f32[64,256] = mul cwv cmy
            cwx:f32[64,256] = neg cww
            cwy:f32[64,256] = mul cwx cmz
            cwz:f32[64,256] = div cww 1600.0
            cxa:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] cwz
            cxb:f32[64,256,1600] = mul cxa cna
            cxc:f32[64,256,1600] = mul cwg cnb
            cxd:f32[64,256,1600] = neg cxc
            cxe:f32[64,256] = reduce_sum[axes=(2,)] cxd
            cxf:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] cxe
            cxg:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] cxf
            cxh:f32[64,256] = add_any cwy cxg
            cxi:f32[64,256] = div cxh 1600.0
            cxj:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] cxi
            cxk:f32[64,256,1600] = add_any cxb cxj
            cxl:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] cxk
            cxm:f16[64,256,1600] = add_any cvg cxl
            cxn:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] cxc
            cxo:f16[64,256,1600] = add_any cxm cxn
            cxp:f16[1600] = reduce_sum[axes=(0, 1)] cxo
            cxq:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] cxp
            cxr:f16[1600] = reduce_sum[axes=(0, 1)] cxq
            cxs:f16[1600,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] cxo cnc
            cxt:f16[1600,1600] = transpose[permutation=(1, 0)] cxs
            cxu:f16[1600,1600] = transpose[permutation=(1, 0)] cxt
            cxv:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] cxo cnd
            cxw:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] cxv
            cxx:f16[64,25,64,256] = transpose[permutation=(0, 2, 3, 1)] cxw
            cxy:f16[64,25,256,256] = dot_general[
              dimension_numbers=(((2,), (3,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] cxx cne
            cxz:f16[64,25,256,256] = mul cxy cnf
            cya:f16[64,25,256,256] = mul cxz cng
            cyb:f16[64,25,256] = reduce_sum[axes=(3,)] cya
            cyc:f16[64,25,256,1] = reshape[
              dimensions=None
              new_sizes=(64, 25, 256, 1)
            ] cyb
            cyd:f16[64,25,256,1] = neg cyc
            cye:f32[64,25,256,1] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] cyd
            cyf:f32[64,25,256] = reduce_sum[axes=(3,)] cye
            cyg:f32[64,25,256,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 256)
            ] cyf
            cyh:f16[64,25,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] cyg
            cyi:f16[64,25,256,256] = div cxy cnh
            cyj:f16[64,25,256,256] = add_any cyh cyi
            cyk:f16[64,25,256,256] = mul cyj cng
            cyl:f16[64,25,256,64] = dot_general[
              dimension_numbers=(((2,), (1,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] cyk cni
            cym:f16[64,256,25,64] = transpose[permutation=(0, 2, 1, 3)] cyl
            cyn:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] cym
            cyo:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (1600, 1600, 0))
            ] cyn 0.0
            cyp:f16[64,25,256,64] = dot_general[
              dimension_numbers=(((3,), (1,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] cyk cnj
            cyq:f16[64,256,25,64] = transpose[permutation=(0, 2, 1, 3)] cyp
            cyr:f16[64,256,25,64] = div cyq cnk
            cys:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] cyr
            cyt:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (0, 3200, 0))
            ] cys 0.0
            cyu:f16[64,256,4800] = add_any cyo cyt
            cyv:f16[64,25,64,256] = dot_general[
              dimension_numbers=(((3,), (2,)), ((0, 1), (0, 1)))
              precision=None
              preferred_element_type=None
            ] cxx cnl
            cyw:f16[64,256,25,64] = transpose[permutation=(0, 3, 1, 2)] cyv
            cyx:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] cyw
            cyy:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (3200, 0, 0))
            ] cyx 0.0
            cyz:f16[64,256,4800] = add_any cyu cyy
            cza:f16[4800] = reduce_sum[axes=(0, 1)] cyz
            czb:f16[1,1,4800] = reshape[dimensions=None new_sizes=(1, 1, 4800)] cza
            czc:f16[4800] = reduce_sum[axes=(0, 1)] czb
            czd:f16[4800,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] cyz cnm
            cze:f16[1600,4800] = transpose[permutation=(1, 0)] czd
            czf:f16[4800,1600] = transpose[permutation=(1, 0)] cze
            czg:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] cyz cnn
            czh:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] czg
            czi:f32[1600] = reduce_sum[axes=(0, 1)] czh
            czj:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] czi
            czk:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] czj
            czl:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] czk
            czm:f32[64,256,1600] = mul cno czh
            czn:f32[64,256,1600] = mul cnp czm
            czo:f32[1600] = reduce_sum[axes=(0, 1)] czn
            czp:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] czo
            czq:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] czp
            czr:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] czq
            czs:f32[64,256,1600] = mul czm cnq
            czt:f32[64,256] = reduce_sum[axes=(2,)] czs
            czu:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] czt
            czv:f32[64,256,1] = mul czu cnr
            czw:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] czv
            czx:f32[64,256] = mul czw cns
            czy:f32[64,256] = neg czx
            czz:f32[64,256] = mul czy cnt
            daa:f32[64,256] = div czx 1600.0
            dab:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] daa
            dac:f32[64,256,1600] = mul dab cnu
            dad:f32[64,256,1600] = mul czh cnv
            dae:f32[64,256,1600] = neg dad
            daf:f32[64,256] = reduce_sum[axes=(2,)] dae
            dag:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] daf
            dah:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] dag
            dai:f32[64,256] = add_any czz dah
            daj:f32[64,256] = div dai 1600.0
            dak:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] daj
            dal:f32[64,256,1600] = add_any dac dak
            dam:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] dal
            dan:f16[64,256,1600] = add_any cxo dam
            dao:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] dad
            dap:f16[64,256,1600] = add_any dan dao
            daq:f16[1600] = reduce_sum[axes=(0, 1)] dap
            dar:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] daq
            das:f16[1600] = reduce_sum[axes=(0, 1)] dar
            dat:f16[1600,6400] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] dap cnw
            dau:f16[6400,1600] = transpose[permutation=(1, 0)] dat
            dav:f16[1600,6400] = transpose[permutation=(1, 0)] dau
            daw:f16[64,256,6400] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] dap cnx
            dax:f16[64,256,6400] = mul cny daw
            day:f16[64,256,6400] = mul 0.5 dax
            daz:f16[64,256,6400] = mul day cnz
            dba:f16[64,256,6400] = mul daz coa
            dbb:f16[64,256,6400] = add_any daz dba
            dbc:f16[64,256,6400] = mul 0.7978515625 dbb
            dbd:f16[64,256,6400] = mul 0.044708251953125 dbc
            dbe:f16[64,256,6400] = mul dbd cob
            dbf:f16[64,256,6400] = add_any dbc dbe
            dbg:f16[64,256,6400] = mul daw coc
            dbh:f16[64,256,6400] = add_any dbf dbg
            dbi:f16[6400] = reduce_sum[axes=(0, 1)] dbh
            dbj:f16[1,1,6400] = reshape[dimensions=None new_sizes=(1, 1, 6400)] dbi
            dbk:f16[6400] = reduce_sum[axes=(0, 1)] dbj
            dbl:f16[6400,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] dbh cod
            dbm:f16[1600,6400] = transpose[permutation=(1, 0)] dbl
            dbn:f16[6400,1600] = transpose[permutation=(1, 0)] dbm
            dbo:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] dbh coe
            dbp:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] dbo
            dbq:f32[1600] = reduce_sum[axes=(0, 1)] dbp
            dbr:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] dbq
            dbs:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] dbr
            dbt:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] dbs
            dbu:f32[64,256,1600] = mul cof dbp
            dbv:f32[64,256,1600] = mul cog dbu
            dbw:f32[1600] = reduce_sum[axes=(0, 1)] dbv
            dbx:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] dbw
            dby:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] dbx
            dbz:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] dby
            dca:f32[64,256,1600] = mul dbu coh
            dcb:f32[64,256] = reduce_sum[axes=(2,)] dca
            dcc:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] dcb
            dcd:f32[64,256,1] = mul dcc coi
            dce:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] dcd
            dcf:f32[64,256] = mul dce coj
            dcg:f32[64,256] = neg dcf
            dch:f32[64,256] = mul dcg cok
            dci:f32[64,256] = div dcf 1600.0
            dcj:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] dci
            dck:f32[64,256,1600] = mul dcj col
            dcl:f32[64,256,1600] = mul dbp com
            dcm:f32[64,256,1600] = neg dcl
            dcn:f32[64,256] = reduce_sum[axes=(2,)] dcm
            dco:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] dcn
            dcp:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] dco
            dcq:f32[64,256] = add_any dch dcp
            dcr:f32[64,256] = div dcq 1600.0
            dcs:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] dcr
            dct:f32[64,256,1600] = add_any dck dcs
            dcu:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] dct
            dcv:f16[64,256,1600] = add_any dap dcu
            dcw:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] dcl
            dcx:f16[64,256,1600] = add_any dcv dcw
            dcy:f16[1600] = reduce_sum[axes=(0, 1)] dcx
            dcz:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] dcy
            dda:f16[1600] = reduce_sum[axes=(0, 1)] dcz
            ddb:f16[1600,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] dcx con
            ddc:f16[1600,1600] = transpose[permutation=(1, 0)] ddb
            ddd:f16[1600,1600] = transpose[permutation=(1, 0)] ddc
            dde:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] dcx coo
            ddf:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] dde
            ddg:f16[64,25,64,256] = transpose[permutation=(0, 2, 3, 1)] ddf
            ddh:f16[64,25,256,256] = dot_general[
              dimension_numbers=(((2,), (3,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] ddg cop
            ddi:f16[64,25,256,256] = mul ddh coq
            ddj:f16[64,25,256,256] = mul ddi cor
            ddk:f16[64,25,256] = reduce_sum[axes=(3,)] ddj
            ddl:f16[64,25,256,1] = reshape[
              dimensions=None
              new_sizes=(64, 25, 256, 1)
            ] ddk
            ddm:f16[64,25,256,1] = neg ddl
            ddn:f32[64,25,256,1] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] ddm
            ddo:f32[64,25,256] = reduce_sum[axes=(3,)] ddn
            ddp:f32[64,25,256,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 256)
            ] ddo
            ddq:f16[64,25,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] ddp
            ddr:f16[64,25,256,256] = div ddh cos
            dds:f16[64,25,256,256] = add_any ddq ddr
            ddt:f16[64,25,256,256] = mul dds cor
            ddu:f16[64,25,256,64] = dot_general[
              dimension_numbers=(((2,), (1,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] ddt cot
            ddv:f16[64,256,25,64] = transpose[permutation=(0, 2, 1, 3)] ddu
            ddw:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] ddv
            ddx:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (1600, 1600, 0))
            ] ddw 0.0
            ddy:f16[64,25,256,64] = dot_general[
              dimension_numbers=(((3,), (1,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] ddt cou
            ddz:f16[64,256,25,64] = transpose[permutation=(0, 2, 1, 3)] ddy
            dea:f16[64,256,25,64] = div ddz cov
            deb:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] dea
            dec:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (0, 3200, 0))
            ] deb 0.0
            ded:f16[64,256,4800] = add_any ddx dec
            dee:f16[64,25,64,256] = dot_general[
              dimension_numbers=(((3,), (2,)), ((0, 1), (0, 1)))
              precision=None
              preferred_element_type=None
            ] ddg cow
            def:f16[64,256,25,64] = transpose[permutation=(0, 3, 1, 2)] dee
            deg:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] def
            deh:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (3200, 0, 0))
            ] deg 0.0
            dei:f16[64,256,4800] = add_any ded deh
            dej:f16[4800] = reduce_sum[axes=(0, 1)] dei
            dek:f16[1,1,4800] = reshape[dimensions=None new_sizes=(1, 1, 4800)] dej
            del:f16[4800] = reduce_sum[axes=(0, 1)] dek
            dem:f16[4800,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] dei cox
            den:f16[1600,4800] = transpose[permutation=(1, 0)] dem
            deo:f16[4800,1600] = transpose[permutation=(1, 0)] den
            dep:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] dei coy
            deq:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] dep
            der:f32[1600] = reduce_sum[axes=(0, 1)] deq
            des:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] der
            det:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] des
            deu:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] det
            dev:f32[64,256,1600] = mul coz deq
            dew:f32[64,256,1600] = mul cpa dev
            dex:f32[1600] = reduce_sum[axes=(0, 1)] dew
            dey:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] dex
            dez:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] dey
            dfa:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] dez
            dfb:f32[64,256,1600] = mul dev cpb
            dfc:f32[64,256] = reduce_sum[axes=(2,)] dfb
            dfd:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] dfc
            dfe:f32[64,256,1] = mul dfd cpc
            dff:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] dfe
            dfg:f32[64,256] = mul dff cpd
            dfh:f32[64,256] = neg dfg
            dfi:f32[64,256] = mul dfh cpe
            dfj:f32[64,256] = div dfg 1600.0
            dfk:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] dfj
            dfl:f32[64,256,1600] = mul dfk cpf
            dfm:f32[64,256,1600] = mul deq cpg
            dfn:f32[64,256,1600] = neg dfm
            dfo:f32[64,256] = reduce_sum[axes=(2,)] dfn
            dfp:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] dfo
            dfq:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] dfp
            dfr:f32[64,256] = add_any dfi dfq
            dfs:f32[64,256] = div dfr 1600.0
            dft:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] dfs
            dfu:f32[64,256,1600] = add_any dfl dft
            dfv:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] dfu
            dfw:f16[64,256,1600] = add_any dcx dfv
            dfx:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] dfm
            dfy:f16[64,256,1600] = add_any dfw dfx
            dfz:f16[1600] = reduce_sum[axes=(0, 1)] dfy
            dga:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] dfz
            dgb:f16[1600] = reduce_sum[axes=(0, 1)] dga
            dgc:f16[1600,6400] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] dfy cph
            dgd:f16[6400,1600] = transpose[permutation=(1, 0)] dgc
            dge:f16[1600,6400] = transpose[permutation=(1, 0)] dgd
            dgf:f16[64,256,6400] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] dfy cpi
            dgg:f16[64,256,6400] = mul cpj dgf
            dgh:f16[64,256,6400] = mul 0.5 dgg
            dgi:f16[64,256,6400] = mul dgh cpk
            dgj:f16[64,256,6400] = mul dgi cpl
            dgk:f16[64,256,6400] = add_any dgi dgj
            dgl:f16[64,256,6400] = mul 0.7978515625 dgk
            dgm:f16[64,256,6400] = mul 0.044708251953125 dgl
            dgn:f16[64,256,6400] = mul dgm cpm
            dgo:f16[64,256,6400] = add_any dgl dgn
            dgp:f16[64,256,6400] = mul dgf cpn
            dgq:f16[64,256,6400] = add_any dgo dgp
            dgr:f16[6400] = reduce_sum[axes=(0, 1)] dgq
            dgs:f16[1,1,6400] = reshape[dimensions=None new_sizes=(1, 1, 6400)] dgr
            dgt:f16[6400] = reduce_sum[axes=(0, 1)] dgs
            dgu:f16[6400,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] dgq cpo
            dgv:f16[1600,6400] = transpose[permutation=(1, 0)] dgu
            dgw:f16[6400,1600] = transpose[permutation=(1, 0)] dgv
            dgx:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] dgq cpp
            dgy:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] dgx
            dgz:f32[1600] = reduce_sum[axes=(0, 1)] dgy
            dha:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] dgz
            dhb:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] dha
            dhc:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] dhb
            dhd:f32[64,256,1600] = mul cpq dgy
            dhe:f32[64,256,1600] = mul cpr dhd
            dhf:f32[1600] = reduce_sum[axes=(0, 1)] dhe
            dhg:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] dhf
            dhh:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] dhg
            dhi:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] dhh
            dhj:f32[64,256,1600] = mul dhd cps
            dhk:f32[64,256] = reduce_sum[axes=(2,)] dhj
            dhl:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] dhk
            dhm:f32[64,256,1] = mul dhl cpt
            dhn:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] dhm
            dho:f32[64,256] = mul dhn cpu
            dhp:f32[64,256] = neg dho
            dhq:f32[64,256] = mul dhp cpv
            dhr:f32[64,256] = div dho 1600.0
            dhs:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] dhr
            dht:f32[64,256,1600] = mul dhs cpw
            dhu:f32[64,256,1600] = mul dgy cpx
            dhv:f32[64,256,1600] = neg dhu
            dhw:f32[64,256] = reduce_sum[axes=(2,)] dhv
            dhx:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] dhw
            dhy:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] dhx
            dhz:f32[64,256] = add_any dhq dhy
            dia:f32[64,256] = div dhz 1600.0
            dib:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] dia
            dic:f32[64,256,1600] = add_any dht dib
            did:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] dic
            die:f16[64,256,1600] = add_any dfy did
            dif:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] dhu
            dig:f16[64,256,1600] = add_any die dif
            dih:f16[1600] = add cjk cqa
            dii:f16[1600,6400] = add cjl cqd
            dij:f16[6400] = add cjm cqs
            dik:f16[6400,1600] = add cjn cqv
            dil:f16[1600] = add cjo crb
            dim:f16[1600] = add cjp crh
            din:f16[1600] = add cjq csi
            dio:f16[1600,1600] = add cjr csl
            dip:f16[4800] = add cjs ctt
            diq:f16[4800,1600] = add cjt ctw
            dir:f16[1600] = add cju cuc
            dis:f16[1600] = add cjv cui
            dit:f16[1600] = add cjw cvj
            diu:f16[1600,6400] = add cjx cvm
            div:f16[6400] = add cjy cwb
            diw:f16[6400,1600] = add cjz cwe
            dix:f16[1600] = add cka cwk
            diy:f16[1600] = add ckb cwq
            diz:f16[1600] = add ckc cxr
            dja:f16[1600,1600] = add ckd cxu
            djb:f16[4800] = add cke czc
            djc:f16[4800,1600] = add ckf czf
            djd:f16[1600] = add ckg czl
            dje:f16[1600] = add ckh czr
            djf:f16[1600] = add cki das
            djg:f16[1600,6400] = add ckj dav
            djh:f16[6400] = add ckk dbk
            dji:f16[6400,1600] = add ckl dbn
            djj:f16[1600] = add ckm dbt
            djk:f16[1600] = add ckn dbz
            djl:f16[1600] = add cko dda
            djm:f16[1600,1600] = add ckp ddd
            djn:f16[4800] = add ckq del
            djo:f16[4800,1600] = add ckr deo
            djp:f16[1600] = add cks deu
            djq:f16[1600] = add ckt dfa
            djr:f16[1600] = add cku dgb
            djs:f16[1600,6400] = add ckv dge
            djt:f16[6400] = add ckw dgt
            dju:f16[6400,1600] = add ckx dgw
            djv:f16[1600] = add cky dhc
            djw:f16[1600] = add ckz dhi
          in (dig, dih, dii, dij, dik, dil, dim, din, dio, dip, diq, dir, dis, dit,
            diu, div, diw, dix, diy, diz, dja, djb, djc, djd, dje, djf, djg, djh,
            dji, djj, djk, djl, djm, djn, djo, djp, djq, djr, djs, djt, dju, djv,
            djw) }
        name=51
      ] bba hf hg hh hi hj hk hl hm hn ho hp hq hr hs ht hu hv hw hx hy hz ia ib
        ic id ie if ig ih ii ij ik il im in io ip iq ir is it iu qk ql qm qn qo qp
        qq qr qs qt qu qv qw qx qy qz ra rb rc rd re rf rg rh ri rj rk rl rm rn ro
        rp rq rr rs rt ru rv rw rx ry rz sa sb sc sd se sf sg sh si sj sk sl sm sn
        so sp sq sr ss st su sv sw sx sy sz ta tb tc td te tf tg th ti tj tk tl tm
        tn to tp tq tr ts tt tu tv tw tx ty tz ua ub uc ud ue uf ug uh ui uj uk ul
        um un uo up uq ur us ut uu uv uw ux uy uz va vb vc vd ve vf vg vh
      djx:f16[64,256,1600] djy:f16[1600] djz:f16[1600,1600] dka:f16[4800] dkb:f16[4800,1600]
        dkc:f16[1600] dkd:f16[1600] dke:f16[1600] dkf:f16[1600,6400] dkg:f16[6400]
        dkh:f16[6400,1600] dki:f16[1600] dkj:f16[1600] dkk:f16[1600] dkl:f16[1600,1600]
        dkm:f16[4800] dkn:f16[4800,1600] dko:f16[1600] dkp:f16[1600] dkq:f16[1600]
        dkr:f16[1600,6400] dks:f16[6400] dkt:f16[6400,1600] dku:f16[1600] dkv:f16[1600]
        dkw:f16[1600] dkx:f16[1600,1600] dky:f16[4800] dkz:f16[4800,1600] dla:f16[1600]
        dlb:f16[1600] dlc:f16[1600] dld:f16[1600,6400] dle:f16[6400] dlf:f16[6400,1600]
        dlg:f16[1600] dlh:f16[1600] dli:f16[1600] dlj:f16[1600,1600] dlk:f16[4800]
        dll:f16[4800,1600] dlm:f16[1600] dln:f16[1600] dlo:f16[1600] dlp:f16[1600,6400]
        dlq:f16[6400] dlr:f16[6400,1600] dls:f16[1600] dlt:f16[1600] = named_call[
        call_jaxpr={ lambda ; dlu:f16[64,256,1600] dlv:f16[1600] dlw:f16[1600,1600]
            dlx:f16[4800] dly:f16[4800,1600] dlz:f16[1600] dma:f16[1600] dmb:f16[1600]
            dmc:f16[1600,6400] dmd:f16[6400] dme:f16[6400,1600] dmf:f16[1600] dmg:f16[1600]
            dmh:f16[1600] dmi:f16[1600,1600] dmj:f16[4800] dmk:f16[4800,1600] dml:f16[1600]
            dmm:f16[1600] dmn:f16[1600] dmo:f16[1600,6400] dmp:f16[6400] dmq:f16[6400,1600]
            dmr:f16[1600] dms:f16[1600] dmt:f16[1600] dmu:f16[1600,1600] dmv:f16[4800]
            dmw:f16[4800,1600] dmx:f16[1600] dmy:f16[1600] dmz:f16[1600] dna:f16[1600,6400]
            dnb:f16[6400] dnc:f16[6400,1600] dnd:f16[1600] dne:f16[1600] dnf:f16[1600]
            dng:f16[1600,1600] dnh:f16[4800] dni:f16[4800,1600] dnj:f16[1600] dnk:f16[1600]
            dnl:f16[1600] dnm:f16[1600,6400] dnn:f16[6400] dno:f16[6400,1600] dnp:f16[1600]
            dnq:f16[1600] dnr:f16[64,256,1600] dns:f16[1600,1600] dnt:f16[64,256,25,64]
            dnu:f16[64,25,256,1] dnv:f16[64,25,256,256] dnw:f16[64,25,256,1] dnx:f16[64,256,25,64]
            dny:f16[64,256,25,64] dnz:f16[] doa:f16[64,25,256,256] dob:f16[64,256,1600]
            doc:f16[1600,4800] dod:f32[64,256,1600] doe:f32[64,256,1] dof:f32[1,1,1600]
            dog:f32[64,256,1] doh:f32[64,256] doi:f32[64,256] doj:f32[64,256,1600]
            dok:f32[64,256,1600] dol:f16[64,256,6400] dom:f16[6400,1600] don:f16[64,256,6400]
            doo:f16[64,256,6400] dop:f16[64,256,6400] doq:f16[64,256,6400] dor:f16[64,256,6400]
            dos:f16[64,256,1600] dot:f16[1600,6400] dou:f32[64,256,1600] dov:f32[64,256,1]
            dow:f32[1,1,1600] dox:f32[64,256,1] doy:f32[64,256] doz:f32[64,256] dpa:f32[64,256,1600]
            dpb:f32[64,256,1600] dpc:f16[64,256,1600] dpd:f16[1600,1600] dpe:f16[64,256,25,64]
            dpf:f16[64,25,256,1] dpg:f16[64,25,256,256] dph:f16[64,25,256,1] dpi:f16[64,256,25,64]
            dpj:f16[64,256,25,64] dpk:f16[] dpl:f16[64,25,256,256] dpm:f16[64,256,1600]
            dpn:f16[1600,4800] dpo:f32[64,256,1600] dpp:f32[64,256,1] dpq:f32[1,1,1600]
            dpr:f32[64,256,1] dps:f32[64,256] dpt:f32[64,256] dpu:f32[64,256,1600]
            dpv:f32[64,256,1600] dpw:f16[64,256,6400] dpx:f16[6400,1600] dpy:f16[64,256,6400]
            dpz:f16[64,256,6400] dqa:f16[64,256,6400] dqb:f16[64,256,6400] dqc:f16[64,256,6400]
            dqd:f16[64,256,1600] dqe:f16[1600,6400] dqf:f32[64,256,1600] dqg:f32[64,256,1]
            dqh:f32[1,1,1600] dqi:f32[64,256,1] dqj:f32[64,256] dqk:f32[64,256] dql:f32[64,256,1600]
            dqm:f32[64,256,1600] dqn:f16[64,256,1600] dqo:f16[1600,1600] dqp:f16[64,256,25,64]
            dqq:f16[64,25,256,1] dqr:f16[64,25,256,256] dqs:f16[64,25,256,1] dqt:f16[64,256,25,64]
            dqu:f16[64,256,25,64] dqv:f16[] dqw:f16[64,25,256,256] dqx:f16[64,256,1600]
            dqy:f16[1600,4800] dqz:f32[64,256,1600] dra:f32[64,256,1] drb:f32[1,1,1600]
            drc:f32[64,256,1] drd:f32[64,256] dre:f32[64,256] drf:f32[64,256,1600]
            drg:f32[64,256,1600] drh:f16[64,256,6400] dri:f16[6400,1600] drj:f16[64,256,6400]
            drk:f16[64,256,6400] drl:f16[64,256,6400] drm:f16[64,256,6400] drn:f16[64,256,6400]
            dro:f16[64,256,1600] drp:f16[1600,6400] drq:f32[64,256,1600] drr:f32[64,256,1]
            drs:f32[1,1,1600] drt:f32[64,256,1] dru:f32[64,256] drv:f32[64,256] drw:f32[64,256,1600]
            drx:f32[64,256,1600] dry:f16[64,256,1600] drz:f16[1600,1600] dsa:f16[64,256,25,64]
            dsb:f16[64,25,256,1] dsc:f16[64,25,256,256] dsd:f16[64,25,256,1] dse:f16[64,256,25,64]
            dsf:f16[64,256,25,64] dsg:f16[] dsh:f16[64,25,256,256] dsi:f16[64,256,1600]
            dsj:f16[1600,4800] dsk:f32[64,256,1600] dsl:f32[64,256,1] dsm:f32[1,1,1600]
            dsn:f32[64,256,1] dso:f32[64,256] dsp:f32[64,256] dsq:f32[64,256,1600]
            dsr:f32[64,256,1600] dss:f16[64,256,6400] dst:f16[6400,1600] dsu:f16[64,256,6400]
            dsv:f16[64,256,6400] dsw:f16[64,256,6400] dsx:f16[64,256,6400] dsy:f16[64,256,6400]
            dsz:f16[64,256,1600] dta:f16[1600,6400] dtb:f32[64,256,1600] dtc:f32[64,256,1]
            dtd:f32[1,1,1600] dte:f32[64,256,1] dtf:f32[64,256] dtg:f32[64,256] dth:f32[64,256,1600]
            dti:f32[64,256,1600]. let
            dtj:f16[1600] = reduce_sum[axes=(0, 1)] dlu
            dtk:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] dtj
            dtl:f16[1600] = reduce_sum[axes=(0, 1)] dtk
            dtm:f16[1600,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] dlu dnr
            dtn:f16[1600,1600] = transpose[permutation=(1, 0)] dtm
            dto:f16[1600,1600] = transpose[permutation=(1, 0)] dtn
            dtp:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] dlu dns
            dtq:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] dtp
            dtr:f16[64,25,64,256] = transpose[permutation=(0, 2, 3, 1)] dtq
            dts:f16[64,25,256,256] = dot_general[
              dimension_numbers=(((2,), (3,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] dtr dnt
            dtt:f16[64,25,256,256] = mul dts dnu
            dtu:f16[64,25,256,256] = mul dtt dnv
            dtv:f16[64,25,256] = reduce_sum[axes=(3,)] dtu
            dtw:f16[64,25,256,1] = reshape[
              dimensions=None
              new_sizes=(64, 25, 256, 1)
            ] dtv
            dtx:f16[64,25,256,1] = neg dtw
            dty:f32[64,25,256,1] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] dtx
            dtz:f32[64,25,256] = reduce_sum[axes=(3,)] dty
            dua:f32[64,25,256,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 256)
            ] dtz
            dub:f16[64,25,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] dua
            duc:f16[64,25,256,256] = div dts dnw
            dud:f16[64,25,256,256] = add_any dub duc
            due:f16[64,25,256,256] = mul dud dnv
            duf:f16[64,25,256,64] = dot_general[
              dimension_numbers=(((2,), (1,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] due dnx
            dug:f16[64,256,25,64] = transpose[permutation=(0, 2, 1, 3)] duf
            duh:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] dug
            dui:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (1600, 1600, 0))
            ] duh 0.0
            duj:f16[64,25,256,64] = dot_general[
              dimension_numbers=(((3,), (1,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] due dny
            duk:f16[64,256,25,64] = transpose[permutation=(0, 2, 1, 3)] duj
            dul:f16[64,256,25,64] = div duk dnz
            dum:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] dul
            dun:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (0, 3200, 0))
            ] dum 0.0
            duo:f16[64,256,4800] = add_any dui dun
            dup:f16[64,25,64,256] = dot_general[
              dimension_numbers=(((3,), (2,)), ((0, 1), (0, 1)))
              precision=None
              preferred_element_type=None
            ] dtr doa
            duq:f16[64,256,25,64] = transpose[permutation=(0, 3, 1, 2)] dup
            dur:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] duq
            dus:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (3200, 0, 0))
            ] dur 0.0
            dut:f16[64,256,4800] = add_any duo dus
            duu:f16[4800] = reduce_sum[axes=(0, 1)] dut
            duv:f16[1,1,4800] = reshape[dimensions=None new_sizes=(1, 1, 4800)] duu
            duw:f16[4800] = reduce_sum[axes=(0, 1)] duv
            dux:f16[4800,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] dut dob
            duy:f16[1600,4800] = transpose[permutation=(1, 0)] dux
            duz:f16[4800,1600] = transpose[permutation=(1, 0)] duy
            dva:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] dut doc
            dvb:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] dva
            dvc:f32[1600] = reduce_sum[axes=(0, 1)] dvb
            dvd:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] dvc
            dve:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] dvd
            dvf:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] dve
            dvg:f32[64,256,1600] = mul dod dvb
            dvh:f32[64,256,1600] = mul doe dvg
            dvi:f32[1600] = reduce_sum[axes=(0, 1)] dvh
            dvj:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] dvi
            dvk:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] dvj
            dvl:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] dvk
            dvm:f32[64,256,1600] = mul dvg dof
            dvn:f32[64,256] = reduce_sum[axes=(2,)] dvm
            dvo:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] dvn
            dvp:f32[64,256,1] = mul dvo dog
            dvq:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] dvp
            dvr:f32[64,256] = mul dvq doh
            dvs:f32[64,256] = neg dvr
            dvt:f32[64,256] = mul dvs doi
            dvu:f32[64,256] = div dvr 1600.0
            dvv:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] dvu
            dvw:f32[64,256,1600] = mul dvv doj
            dvx:f32[64,256,1600] = mul dvb dok
            dvy:f32[64,256,1600] = neg dvx
            dvz:f32[64,256] = reduce_sum[axes=(2,)] dvy
            dwa:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] dvz
            dwb:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] dwa
            dwc:f32[64,256] = add_any dvt dwb
            dwd:f32[64,256] = div dwc 1600.0
            dwe:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] dwd
            dwf:f32[64,256,1600] = add_any dvw dwe
            dwg:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] dwf
            dwh:f16[64,256,1600] = add_any dlu dwg
            dwi:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] dvx
            dwj:f16[64,256,1600] = add_any dwh dwi
            dwk:f16[1600] = reduce_sum[axes=(0, 1)] dwj
            dwl:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] dwk
            dwm:f16[1600] = reduce_sum[axes=(0, 1)] dwl
            dwn:f16[1600,6400] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] dwj dol
            dwo:f16[6400,1600] = transpose[permutation=(1, 0)] dwn
            dwp:f16[1600,6400] = transpose[permutation=(1, 0)] dwo
            dwq:f16[64,256,6400] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] dwj dom
            dwr:f16[64,256,6400] = mul don dwq
            dws:f16[64,256,6400] = mul 0.5 dwr
            dwt:f16[64,256,6400] = mul dws doo
            dwu:f16[64,256,6400] = mul dwt dop
            dwv:f16[64,256,6400] = add_any dwt dwu
            dww:f16[64,256,6400] = mul 0.7978515625 dwv
            dwx:f16[64,256,6400] = mul 0.044708251953125 dww
            dwy:f16[64,256,6400] = mul dwx doq
            dwz:f16[64,256,6400] = add_any dww dwy
            dxa:f16[64,256,6400] = mul dwq dor
            dxb:f16[64,256,6400] = add_any dwz dxa
            dxc:f16[6400] = reduce_sum[axes=(0, 1)] dxb
            dxd:f16[1,1,6400] = reshape[dimensions=None new_sizes=(1, 1, 6400)] dxc
            dxe:f16[6400] = reduce_sum[axes=(0, 1)] dxd
            dxf:f16[6400,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] dxb dos
            dxg:f16[1600,6400] = transpose[permutation=(1, 0)] dxf
            dxh:f16[6400,1600] = transpose[permutation=(1, 0)] dxg
            dxi:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] dxb dot
            dxj:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] dxi
            dxk:f32[1600] = reduce_sum[axes=(0, 1)] dxj
            dxl:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] dxk
            dxm:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] dxl
            dxn:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] dxm
            dxo:f32[64,256,1600] = mul dou dxj
            dxp:f32[64,256,1600] = mul dov dxo
            dxq:f32[1600] = reduce_sum[axes=(0, 1)] dxp
            dxr:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] dxq
            dxs:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] dxr
            dxt:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] dxs
            dxu:f32[64,256,1600] = mul dxo dow
            dxv:f32[64,256] = reduce_sum[axes=(2,)] dxu
            dxw:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] dxv
            dxx:f32[64,256,1] = mul dxw dox
            dxy:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] dxx
            dxz:f32[64,256] = mul dxy doy
            dya:f32[64,256] = neg dxz
            dyb:f32[64,256] = mul dya doz
            dyc:f32[64,256] = div dxz 1600.0
            dyd:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] dyc
            dye:f32[64,256,1600] = mul dyd dpa
            dyf:f32[64,256,1600] = mul dxj dpb
            dyg:f32[64,256,1600] = neg dyf
            dyh:f32[64,256] = reduce_sum[axes=(2,)] dyg
            dyi:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] dyh
            dyj:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] dyi
            dyk:f32[64,256] = add_any dyb dyj
            dyl:f32[64,256] = div dyk 1600.0
            dym:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] dyl
            dyn:f32[64,256,1600] = add_any dye dym
            dyo:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] dyn
            dyp:f16[64,256,1600] = add_any dwj dyo
            dyq:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] dyf
            dyr:f16[64,256,1600] = add_any dyp dyq
            dys:f16[1600] = reduce_sum[axes=(0, 1)] dyr
            dyt:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] dys
            dyu:f16[1600] = reduce_sum[axes=(0, 1)] dyt
            dyv:f16[1600,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] dyr dpc
            dyw:f16[1600,1600] = transpose[permutation=(1, 0)] dyv
            dyx:f16[1600,1600] = transpose[permutation=(1, 0)] dyw
            dyy:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] dyr dpd
            dyz:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] dyy
            dza:f16[64,25,64,256] = transpose[permutation=(0, 2, 3, 1)] dyz
            dzb:f16[64,25,256,256] = dot_general[
              dimension_numbers=(((2,), (3,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] dza dpe
            dzc:f16[64,25,256,256] = mul dzb dpf
            dzd:f16[64,25,256,256] = mul dzc dpg
            dze:f16[64,25,256] = reduce_sum[axes=(3,)] dzd
            dzf:f16[64,25,256,1] = reshape[
              dimensions=None
              new_sizes=(64, 25, 256, 1)
            ] dze
            dzg:f16[64,25,256,1] = neg dzf
            dzh:f32[64,25,256,1] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] dzg
            dzi:f32[64,25,256] = reduce_sum[axes=(3,)] dzh
            dzj:f32[64,25,256,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 256)
            ] dzi
            dzk:f16[64,25,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] dzj
            dzl:f16[64,25,256,256] = div dzb dph
            dzm:f16[64,25,256,256] = add_any dzk dzl
            dzn:f16[64,25,256,256] = mul dzm dpg
            dzo:f16[64,25,256,64] = dot_general[
              dimension_numbers=(((2,), (1,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] dzn dpi
            dzp:f16[64,256,25,64] = transpose[permutation=(0, 2, 1, 3)] dzo
            dzq:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] dzp
            dzr:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (1600, 1600, 0))
            ] dzq 0.0
            dzs:f16[64,25,256,64] = dot_general[
              dimension_numbers=(((3,), (1,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] dzn dpj
            dzt:f16[64,256,25,64] = transpose[permutation=(0, 2, 1, 3)] dzs
            dzu:f16[64,256,25,64] = div dzt dpk
            dzv:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] dzu
            dzw:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (0, 3200, 0))
            ] dzv 0.0
            dzx:f16[64,256,4800] = add_any dzr dzw
            dzy:f16[64,25,64,256] = dot_general[
              dimension_numbers=(((3,), (2,)), ((0, 1), (0, 1)))
              precision=None
              preferred_element_type=None
            ] dza dpl
            dzz:f16[64,256,25,64] = transpose[permutation=(0, 3, 1, 2)] dzy
            eaa:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] dzz
            eab:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (3200, 0, 0))
            ] eaa 0.0
            eac:f16[64,256,4800] = add_any dzx eab
            ead:f16[4800] = reduce_sum[axes=(0, 1)] eac
            eae:f16[1,1,4800] = reshape[dimensions=None new_sizes=(1, 1, 4800)] ead
            eaf:f16[4800] = reduce_sum[axes=(0, 1)] eae
            eag:f16[4800,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] eac dpm
            eah:f16[1600,4800] = transpose[permutation=(1, 0)] eag
            eai:f16[4800,1600] = transpose[permutation=(1, 0)] eah
            eaj:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] eac dpn
            eak:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] eaj
            eal:f32[1600] = reduce_sum[axes=(0, 1)] eak
            eam:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] eal
            ean:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] eam
            eao:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] ean
            eap:f32[64,256,1600] = mul dpo eak
            eaq:f32[64,256,1600] = mul dpp eap
            ear:f32[1600] = reduce_sum[axes=(0, 1)] eaq
            eas:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] ear
            eat:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] eas
            eau:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] eat
            eav:f32[64,256,1600] = mul eap dpq
            eaw:f32[64,256] = reduce_sum[axes=(2,)] eav
            eax:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] eaw
            eay:f32[64,256,1] = mul eax dpr
            eaz:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] eay
            eba:f32[64,256] = mul eaz dps
            ebb:f32[64,256] = neg eba
            ebc:f32[64,256] = mul ebb dpt
            ebd:f32[64,256] = div eba 1600.0
            ebe:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] ebd
            ebf:f32[64,256,1600] = mul ebe dpu
            ebg:f32[64,256,1600] = mul eak dpv
            ebh:f32[64,256,1600] = neg ebg
            ebi:f32[64,256] = reduce_sum[axes=(2,)] ebh
            ebj:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] ebi
            ebk:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] ebj
            ebl:f32[64,256] = add_any ebc ebk
            ebm:f32[64,256] = div ebl 1600.0
            ebn:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] ebm
            ebo:f32[64,256,1600] = add_any ebf ebn
            ebp:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] ebo
            ebq:f16[64,256,1600] = add_any dyr ebp
            ebr:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] ebg
            ebs:f16[64,256,1600] = add_any ebq ebr
            ebt:f16[1600] = reduce_sum[axes=(0, 1)] ebs
            ebu:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] ebt
            ebv:f16[1600] = reduce_sum[axes=(0, 1)] ebu
            ebw:f16[1600,6400] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] ebs dpw
            ebx:f16[6400,1600] = transpose[permutation=(1, 0)] ebw
            eby:f16[1600,6400] = transpose[permutation=(1, 0)] ebx
            ebz:f16[64,256,6400] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] ebs dpx
            eca:f16[64,256,6400] = mul dpy ebz
            ecb:f16[64,256,6400] = mul 0.5 eca
            ecc:f16[64,256,6400] = mul ecb dpz
            ecd:f16[64,256,6400] = mul ecc dqa
            ece:f16[64,256,6400] = add_any ecc ecd
            ecf:f16[64,256,6400] = mul 0.7978515625 ece
            ecg:f16[64,256,6400] = mul 0.044708251953125 ecf
            ech:f16[64,256,6400] = mul ecg dqb
            eci:f16[64,256,6400] = add_any ecf ech
            ecj:f16[64,256,6400] = mul ebz dqc
            eck:f16[64,256,6400] = add_any eci ecj
            ecl:f16[6400] = reduce_sum[axes=(0, 1)] eck
            ecm:f16[1,1,6400] = reshape[dimensions=None new_sizes=(1, 1, 6400)] ecl
            ecn:f16[6400] = reduce_sum[axes=(0, 1)] ecm
            eco:f16[6400,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] eck dqd
            ecp:f16[1600,6400] = transpose[permutation=(1, 0)] eco
            ecq:f16[6400,1600] = transpose[permutation=(1, 0)] ecp
            ecr:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] eck dqe
            ecs:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] ecr
            ect:f32[1600] = reduce_sum[axes=(0, 1)] ecs
            ecu:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] ect
            ecv:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] ecu
            ecw:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] ecv
            ecx:f32[64,256,1600] = mul dqf ecs
            ecy:f32[64,256,1600] = mul dqg ecx
            ecz:f32[1600] = reduce_sum[axes=(0, 1)] ecy
            eda:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] ecz
            edb:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] eda
            edc:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] edb
            edd:f32[64,256,1600] = mul ecx dqh
            ede:f32[64,256] = reduce_sum[axes=(2,)] edd
            edf:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] ede
            edg:f32[64,256,1] = mul edf dqi
            edh:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] edg
            edi:f32[64,256] = mul edh dqj
            edj:f32[64,256] = neg edi
            edk:f32[64,256] = mul edj dqk
            edl:f32[64,256] = div edi 1600.0
            edm:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] edl
            edn:f32[64,256,1600] = mul edm dql
            edo:f32[64,256,1600] = mul ecs dqm
            edp:f32[64,256,1600] = neg edo
            edq:f32[64,256] = reduce_sum[axes=(2,)] edp
            edr:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] edq
            eds:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] edr
            edt:f32[64,256] = add_any edk eds
            edu:f32[64,256] = div edt 1600.0
            edv:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] edu
            edw:f32[64,256,1600] = add_any edn edv
            edx:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] edw
            edy:f16[64,256,1600] = add_any ebs edx
            edz:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] edo
            eea:f16[64,256,1600] = add_any edy edz
            eeb:f16[1600] = reduce_sum[axes=(0, 1)] eea
            eec:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] eeb
            eed:f16[1600] = reduce_sum[axes=(0, 1)] eec
            eee:f16[1600,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] eea dqn
            eef:f16[1600,1600] = transpose[permutation=(1, 0)] eee
            eeg:f16[1600,1600] = transpose[permutation=(1, 0)] eef
            eeh:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] eea dqo
            eei:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] eeh
            eej:f16[64,25,64,256] = transpose[permutation=(0, 2, 3, 1)] eei
            eek:f16[64,25,256,256] = dot_general[
              dimension_numbers=(((2,), (3,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] eej dqp
            eel:f16[64,25,256,256] = mul eek dqq
            eem:f16[64,25,256,256] = mul eel dqr
            een:f16[64,25,256] = reduce_sum[axes=(3,)] eem
            eeo:f16[64,25,256,1] = reshape[
              dimensions=None
              new_sizes=(64, 25, 256, 1)
            ] een
            eep:f16[64,25,256,1] = neg eeo
            eeq:f32[64,25,256,1] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] eep
            eer:f32[64,25,256] = reduce_sum[axes=(3,)] eeq
            ees:f32[64,25,256,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 256)
            ] eer
            eet:f16[64,25,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] ees
            eeu:f16[64,25,256,256] = div eek dqs
            eev:f16[64,25,256,256] = add_any eet eeu
            eew:f16[64,25,256,256] = mul eev dqr
            eex:f16[64,25,256,64] = dot_general[
              dimension_numbers=(((2,), (1,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] eew dqt
            eey:f16[64,256,25,64] = transpose[permutation=(0, 2, 1, 3)] eex
            eez:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] eey
            efa:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (1600, 1600, 0))
            ] eez 0.0
            efb:f16[64,25,256,64] = dot_general[
              dimension_numbers=(((3,), (1,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] eew dqu
            efc:f16[64,256,25,64] = transpose[permutation=(0, 2, 1, 3)] efb
            efd:f16[64,256,25,64] = div efc dqv
            efe:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] efd
            eff:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (0, 3200, 0))
            ] efe 0.0
            efg:f16[64,256,4800] = add_any efa eff
            efh:f16[64,25,64,256] = dot_general[
              dimension_numbers=(((3,), (2,)), ((0, 1), (0, 1)))
              precision=None
              preferred_element_type=None
            ] eej dqw
            efi:f16[64,256,25,64] = transpose[permutation=(0, 3, 1, 2)] efh
            efj:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] efi
            efk:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (3200, 0, 0))
            ] efj 0.0
            efl:f16[64,256,4800] = add_any efg efk
            efm:f16[4800] = reduce_sum[axes=(0, 1)] efl
            efn:f16[1,1,4800] = reshape[dimensions=None new_sizes=(1, 1, 4800)] efm
            efo:f16[4800] = reduce_sum[axes=(0, 1)] efn
            efp:f16[4800,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] efl dqx
            efq:f16[1600,4800] = transpose[permutation=(1, 0)] efp
            efr:f16[4800,1600] = transpose[permutation=(1, 0)] efq
            efs:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] efl dqy
            eft:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] efs
            efu:f32[1600] = reduce_sum[axes=(0, 1)] eft
            efv:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] efu
            efw:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] efv
            efx:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] efw
            efy:f32[64,256,1600] = mul dqz eft
            efz:f32[64,256,1600] = mul dra efy
            ega:f32[1600] = reduce_sum[axes=(0, 1)] efz
            egb:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] ega
            egc:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] egb
            egd:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] egc
            ege:f32[64,256,1600] = mul efy drb
            egf:f32[64,256] = reduce_sum[axes=(2,)] ege
            egg:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] egf
            egh:f32[64,256,1] = mul egg drc
            egi:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] egh
            egj:f32[64,256] = mul egi drd
            egk:f32[64,256] = neg egj
            egl:f32[64,256] = mul egk dre
            egm:f32[64,256] = div egj 1600.0
            egn:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] egm
            ego:f32[64,256,1600] = mul egn drf
            egp:f32[64,256,1600] = mul eft drg
            egq:f32[64,256,1600] = neg egp
            egr:f32[64,256] = reduce_sum[axes=(2,)] egq
            egs:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] egr
            egt:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] egs
            egu:f32[64,256] = add_any egl egt
            egv:f32[64,256] = div egu 1600.0
            egw:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] egv
            egx:f32[64,256,1600] = add_any ego egw
            egy:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] egx
            egz:f16[64,256,1600] = add_any eea egy
            eha:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] egp
            ehb:f16[64,256,1600] = add_any egz eha
            ehc:f16[1600] = reduce_sum[axes=(0, 1)] ehb
            ehd:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] ehc
            ehe:f16[1600] = reduce_sum[axes=(0, 1)] ehd
            ehf:f16[1600,6400] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] ehb drh
            ehg:f16[6400,1600] = transpose[permutation=(1, 0)] ehf
            ehh:f16[1600,6400] = transpose[permutation=(1, 0)] ehg
            ehi:f16[64,256,6400] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] ehb dri
            ehj:f16[64,256,6400] = mul drj ehi
            ehk:f16[64,256,6400] = mul 0.5 ehj
            ehl:f16[64,256,6400] = mul ehk drk
            ehm:f16[64,256,6400] = mul ehl drl
            ehn:f16[64,256,6400] = add_any ehl ehm
            eho:f16[64,256,6400] = mul 0.7978515625 ehn
            ehp:f16[64,256,6400] = mul 0.044708251953125 eho
            ehq:f16[64,256,6400] = mul ehp drm
            ehr:f16[64,256,6400] = add_any eho ehq
            ehs:f16[64,256,6400] = mul ehi drn
            eht:f16[64,256,6400] = add_any ehr ehs
            ehu:f16[6400] = reduce_sum[axes=(0, 1)] eht
            ehv:f16[1,1,6400] = reshape[dimensions=None new_sizes=(1, 1, 6400)] ehu
            ehw:f16[6400] = reduce_sum[axes=(0, 1)] ehv
            ehx:f16[6400,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] eht dro
            ehy:f16[1600,6400] = transpose[permutation=(1, 0)] ehx
            ehz:f16[6400,1600] = transpose[permutation=(1, 0)] ehy
            eia:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] eht drp
            eib:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] eia
            eic:f32[1600] = reduce_sum[axes=(0, 1)] eib
            eid:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] eic
            eie:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] eid
            eif:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] eie
            eig:f32[64,256,1600] = mul drq eib
            eih:f32[64,256,1600] = mul drr eig
            eii:f32[1600] = reduce_sum[axes=(0, 1)] eih
            eij:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] eii
            eik:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] eij
            eil:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] eik
            eim:f32[64,256,1600] = mul eig drs
            ein:f32[64,256] = reduce_sum[axes=(2,)] eim
            eio:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] ein
            eip:f32[64,256,1] = mul eio drt
            eiq:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] eip
            eir:f32[64,256] = mul eiq dru
            eis:f32[64,256] = neg eir
            eit:f32[64,256] = mul eis drv
            eiu:f32[64,256] = div eir 1600.0
            eiv:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] eiu
            eiw:f32[64,256,1600] = mul eiv drw
            eix:f32[64,256,1600] = mul eib drx
            eiy:f32[64,256,1600] = neg eix
            eiz:f32[64,256] = reduce_sum[axes=(2,)] eiy
            eja:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] eiz
            ejb:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] eja
            ejc:f32[64,256] = add_any eit ejb
            ejd:f32[64,256] = div ejc 1600.0
            eje:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] ejd
            ejf:f32[64,256,1600] = add_any eiw eje
            ejg:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] ejf
            ejh:f16[64,256,1600] = add_any ehb ejg
            eji:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] eix
            ejj:f16[64,256,1600] = add_any ejh eji
            ejk:f16[1600] = reduce_sum[axes=(0, 1)] ejj
            ejl:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] ejk
            ejm:f16[1600] = reduce_sum[axes=(0, 1)] ejl
            ejn:f16[1600,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] ejj dry
            ejo:f16[1600,1600] = transpose[permutation=(1, 0)] ejn
            ejp:f16[1600,1600] = transpose[permutation=(1, 0)] ejo
            ejq:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] ejj drz
            ejr:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] ejq
            ejs:f16[64,25,64,256] = transpose[permutation=(0, 2, 3, 1)] ejr
            ejt:f16[64,25,256,256] = dot_general[
              dimension_numbers=(((2,), (3,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] ejs dsa
            eju:f16[64,25,256,256] = mul ejt dsb
            ejv:f16[64,25,256,256] = mul eju dsc
            ejw:f16[64,25,256] = reduce_sum[axes=(3,)] ejv
            ejx:f16[64,25,256,1] = reshape[
              dimensions=None
              new_sizes=(64, 25, 256, 1)
            ] ejw
            ejy:f16[64,25,256,1] = neg ejx
            ejz:f32[64,25,256,1] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] ejy
            eka:f32[64,25,256] = reduce_sum[axes=(3,)] ejz
            ekb:f32[64,25,256,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 256)
            ] eka
            ekc:f16[64,25,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] ekb
            ekd:f16[64,25,256,256] = div ejt dsd
            eke:f16[64,25,256,256] = add_any ekc ekd
            ekf:f16[64,25,256,256] = mul eke dsc
            ekg:f16[64,25,256,64] = dot_general[
              dimension_numbers=(((2,), (1,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] ekf dse
            ekh:f16[64,256,25,64] = transpose[permutation=(0, 2, 1, 3)] ekg
            eki:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] ekh
            ekj:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (1600, 1600, 0))
            ] eki 0.0
            ekk:f16[64,25,256,64] = dot_general[
              dimension_numbers=(((3,), (1,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] ekf dsf
            ekl:f16[64,256,25,64] = transpose[permutation=(0, 2, 1, 3)] ekk
            ekm:f16[64,256,25,64] = div ekl dsg
            ekn:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] ekm
            eko:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (0, 3200, 0))
            ] ekn 0.0
            ekp:f16[64,256,4800] = add_any ekj eko
            ekq:f16[64,25,64,256] = dot_general[
              dimension_numbers=(((3,), (2,)), ((0, 1), (0, 1)))
              precision=None
              preferred_element_type=None
            ] ejs dsh
            ekr:f16[64,256,25,64] = transpose[permutation=(0, 3, 1, 2)] ekq
            eks:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] ekr
            ekt:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (3200, 0, 0))
            ] eks 0.0
            eku:f16[64,256,4800] = add_any ekp ekt
            ekv:f16[4800] = reduce_sum[axes=(0, 1)] eku
            ekw:f16[1,1,4800] = reshape[dimensions=None new_sizes=(1, 1, 4800)] ekv
            ekx:f16[4800] = reduce_sum[axes=(0, 1)] ekw
            eky:f16[4800,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] eku dsi
            ekz:f16[1600,4800] = transpose[permutation=(1, 0)] eky
            ela:f16[4800,1600] = transpose[permutation=(1, 0)] ekz
            elb:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] eku dsj
            elc:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] elb
            eld:f32[1600] = reduce_sum[axes=(0, 1)] elc
            ele:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] eld
            elf:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] ele
            elg:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] elf
            elh:f32[64,256,1600] = mul dsk elc
            eli:f32[64,256,1600] = mul dsl elh
            elj:f32[1600] = reduce_sum[axes=(0, 1)] eli
            elk:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] elj
            ell:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] elk
            elm:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] ell
            eln:f32[64,256,1600] = mul elh dsm
            elo:f32[64,256] = reduce_sum[axes=(2,)] eln
            elp:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] elo
            elq:f32[64,256,1] = mul elp dsn
            elr:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] elq
            els:f32[64,256] = mul elr dso
            elt:f32[64,256] = neg els
            elu:f32[64,256] = mul elt dsp
            elv:f32[64,256] = div els 1600.0
            elw:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] elv
            elx:f32[64,256,1600] = mul elw dsq
            ely:f32[64,256,1600] = mul elc dsr
            elz:f32[64,256,1600] = neg ely
            ema:f32[64,256] = reduce_sum[axes=(2,)] elz
            emb:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] ema
            emc:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] emb
            emd:f32[64,256] = add_any elu emc
            eme:f32[64,256] = div emd 1600.0
            emf:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] eme
            emg:f32[64,256,1600] = add_any elx emf
            emh:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] emg
            emi:f16[64,256,1600] = add_any ejj emh
            emj:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] ely
            emk:f16[64,256,1600] = add_any emi emj
            eml:f16[1600] = reduce_sum[axes=(0, 1)] emk
            emm:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] eml
            emn:f16[1600] = reduce_sum[axes=(0, 1)] emm
            emo:f16[1600,6400] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] emk dss
            emp:f16[6400,1600] = transpose[permutation=(1, 0)] emo
            emq:f16[1600,6400] = transpose[permutation=(1, 0)] emp
            emr:f16[64,256,6400] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] emk dst
            ems:f16[64,256,6400] = mul dsu emr
            emt:f16[64,256,6400] = mul 0.5 ems
            emu:f16[64,256,6400] = mul emt dsv
            emv:f16[64,256,6400] = mul emu dsw
            emw:f16[64,256,6400] = add_any emu emv
            emx:f16[64,256,6400] = mul 0.7978515625 emw
            emy:f16[64,256,6400] = mul 0.044708251953125 emx
            emz:f16[64,256,6400] = mul emy dsx
            ena:f16[64,256,6400] = add_any emx emz
            enb:f16[64,256,6400] = mul emr dsy
            enc:f16[64,256,6400] = add_any ena enb
            end:f16[6400] = reduce_sum[axes=(0, 1)] enc
            ene:f16[1,1,6400] = reshape[dimensions=None new_sizes=(1, 1, 6400)] end
            enf:f16[6400] = reduce_sum[axes=(0, 1)] ene
            eng:f16[6400,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] enc dsz
            enh:f16[1600,6400] = transpose[permutation=(1, 0)] eng
            eni:f16[6400,1600] = transpose[permutation=(1, 0)] enh
            enj:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] enc dta
            enk:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] enj
            enl:f32[1600] = reduce_sum[axes=(0, 1)] enk
            enm:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] enl
            enn:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] enm
            eno:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] enn
            enp:f32[64,256,1600] = mul dtb enk
            enq:f32[64,256,1600] = mul dtc enp
            enr:f32[1600] = reduce_sum[axes=(0, 1)] enq
            ens:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] enr
            ent:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] ens
            enu:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] ent
            env:f32[64,256,1600] = mul enp dtd
            enw:f32[64,256] = reduce_sum[axes=(2,)] env
            enx:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] enw
            eny:f32[64,256,1] = mul enx dte
            enz:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] eny
            eoa:f32[64,256] = mul enz dtf
            eob:f32[64,256] = neg eoa
            eoc:f32[64,256] = mul eob dtg
            eod:f32[64,256] = div eoa 1600.0
            eoe:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] eod
            eof:f32[64,256,1600] = mul eoe dth
            eog:f32[64,256,1600] = mul enk dti
            eoh:f32[64,256,1600] = neg eog
            eoi:f32[64,256] = reduce_sum[axes=(2,)] eoh
            eoj:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] eoi
            eok:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] eoj
            eol:f32[64,256] = add_any eoc eok
            eom:f32[64,256] = div eol 1600.0
            eon:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] eom
            eoo:f32[64,256,1600] = add_any eof eon
            eop:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] eoo
            eoq:f16[64,256,1600] = add_any emk eop
            eor:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] eog
            eos:f16[64,256,1600] = add_any eoq eor
            eot:f16[1600] = add dlv dtl
            eou:f16[1600,1600] = add dlw dto
            eov:f16[4800] = add dlx duw
            eow:f16[4800,1600] = add dly duz
            eox:f16[1600] = add dlz dvf
            eoy:f16[1600] = add dma dvl
            eoz:f16[1600] = add dmb dwm
            epa:f16[1600,6400] = add dmc dwp
            epb:f16[6400] = add dmd dxe
            epc:f16[6400,1600] = add dme dxh
            epd:f16[1600] = add dmf dxn
            epe:f16[1600] = add dmg dxt
            epf:f16[1600] = add dmh dyu
            epg:f16[1600,1600] = add dmi dyx
            eph:f16[4800] = add dmj eaf
            epi:f16[4800,1600] = add dmk eai
            epj:f16[1600] = add dml eao
            epk:f16[1600] = add dmm eau
            epl:f16[1600] = add dmn ebv
            epm:f16[1600,6400] = add dmo eby
            epn:f16[6400] = add dmp ecn
            epo:f16[6400,1600] = add dmq ecq
            epp:f16[1600] = add dmr ecw
            epq:f16[1600] = add dms edc
            epr:f16[1600] = add dmt eed
            eps:f16[1600,1600] = add dmu eeg
            ept:f16[4800] = add dmv efo
            epu:f16[4800,1600] = add dmw efr
            epv:f16[1600] = add dmx efx
            epw:f16[1600] = add dmy egd
            epx:f16[1600] = add dmz ehe
            epy:f16[1600,6400] = add dna ehh
            epz:f16[6400] = add dnb ehw
            eqa:f16[6400,1600] = add dnc ehz
            eqb:f16[1600] = add dnd eif
            eqc:f16[1600] = add dne eil
            eqd:f16[1600] = add dnf ejm
            eqe:f16[1600,1600] = add dng ejp
            eqf:f16[4800] = add dnh ekx
            eqg:f16[4800,1600] = add dni ela
            eqh:f16[1600] = add dnj elg
            eqi:f16[1600] = add dnk elm
            eqj:f16[1600] = add dnl emn
            eqk:f16[1600,6400] = add dnm emq
            eql:f16[6400] = add dnn enf
            eqm:f16[6400,1600] = add dno eni
            eqn:f16[1600] = add dnp eno
            eqo:f16[1600] = add dnq enu
          in (eos, eot, eou, eov, eow, eox, eoy, eoz, epa, epb, epc, epd, epe, epf,
            epg, eph, epi, epj, epk, epl, epm, epn, epo, epp, epq, epr, eps, ept,
            epu, epv, epw, epx, epy, epz, eqa, eqb, eqc, eqd, eqe, eqf, eqg, eqh,
            eqi, eqj, eqk, eql, eqm, eqn, eqo) }
        name=52
      ] chs iv iw ix iy iz ja jb jc jd je jf jg jh ji jj jk jl jm jn jo jp jq jr
        js jt ju jv jw jx jy jz ka kb kc kd ke kf kg kh ki kj kk kl km kn ko kp kq
        vi vj vk vl vm vn vo vp vq vr vs vt vu vv vw vx vy vz wa wb wc wd we wf wg
        wh wi wj wk wl wm wn wo wp wq wr ws wt wu wv ww wx wy wz xa xb xc xd xe xf
        xg xh xi xj xk xl xm xn xo xp xq xr xs xt xu xv xw xx xy xz ya yb yc yd ye
        yf yg yh yi yj yk yl ym yn yo yp yq yr ys yt yu yv yw yx yy yz za zb zc zd
        ze zf zg zh zi zj zk zl zm zn zo zp zq zr zs zt zu zv zw zx zy zz baa bab
        bac bad bae baf bag bah bai baj bak bal bam ban bao bap baq bar bas bat bau
        bav baw bax bay baz
    in (bbb, bbc, bbd, bbe, bbf, bbg, bbh, bbi, bbj, bbk, bbl, bbm, bbn, bbo, bbp,
      bbq, bbr, bbs, bbt, bbu, bbv, bbw, bbx, bby, bbz, bca, bcb, bcc, bcd, bce,
      bcf, bcg, bch, bci, bcj, bck, bcl, bcm, bcn, bco, bcp, bcq, bcr, bcs, bct,
      bcu, bcv, bcw, cht, chu, chv, chw, chx, chy, chz, cia, cib, cic, cid, cie,
      cif, cig, cih, cii, cij, cik, cil, cim, cin, cio, cip, ciq, cir, cis, cit,
      ciu, civ, ciw, cix, ciy, ciz, cja, cjb, cjc, cjd, cje, cjf, cjg, cjh, cji,
      djy, djz, dka, dkb, dkc, dkd, dke, dkf, dkg, dkh, dki, dkj, dkk, dkl, dkm,
      dkn, dko, dkp, dkq, dkr, dks, dkt, dku, dkv, dkw, dkx, dky, dkz, dla, dlb,
      dlc, dld, dle, dlf, dlg, dlh, dli, dlj, dlk, dll, dlm, dln, dlo, dlp, dlq,
      dlr, dls, dlt, djx) }
  name=5
] eqp eqq eqr eqs eqt equ eqv eqw eqx eqy eqz era erb erc erd ere erf erg erh eri
  erj erk erl erm ern ero erp erq err ers ert eru erv erw erx ery erz esa esb esc
  esd ese esf esg esh esi esj esk esl esm esn eso esp esq esr ess est esu esv esw
  esx esy esz eta etb etc etd ete etf etg eth eti etj etk etl etm etn eto etp etq
  etr ets ett etu etv etw etx ety etz eua eub euc eud eue euf eug euh eui euj euk
  eul eum eun euo eup euq eur eus eut euu euv euw eux euy euz eva evb evc evd eve
  evf evg evh evi evj evk evl evm evn evo evp evq evr evs evt evu evv evw evx evy
  evz ewa ewb ewc ewd ewe ewf ewg ewh ewi ewj ewk ewl ewm ewn ewo ewp ewq ewr ews
  ewt ewu ewv eww ewx ewy ewz exa exb exc exd exe exf exg exh exi exj exk exl exm
  exn exo exp exq exr exs ext exu exv exw exx exy exz eya eyb eyc eyd eye eyf eyg
  eyh eyi eyj eyk eyl eym eyn eyo eyp eyq eyr eys eyt eyu eyv eyw eyx eyy eyz eza
  ezb ezc ezd eze ezf ezg ezh ezi ezj ezk ezl ezm ezn ezo ezp ezq ezr ezs ezt ezu
  ezv ezw ezx ezy ezz faa fab fac fad fae faf fag fah fai faj fak fal fam fan fao
  fap faq far fas fat fau fav faw fax fay faz fba fbb fbc fbd fbe fbf fbg fbh fbi
  fbj fbk fbl fbm fbn fbo fbp fbq fbr fbs fbt fbu fbv fbw fbx fby fbz fca fcb fcc
  fcd fce fcf fcg fch fci fcj fck fcl fcm fcn fco fcp fcq fcr fcs fct fcu fcv fcw
  fcx fcy fcz fda fdb fdc fdd fde fdf fdg fdh fdi fdj fdk fdl fdm fdn fdo fdp fdq
  fdr fds fdt fdu fdv fdw fdx fdy fdz fea feb fec fed fee fef feg feh fei fej fek
  fel fem fen feo fep feq fer fes fet feu fev few fex fey fez ffa ffb ffc ffd ffe
  fff ffg ffh ffi ffj ffk ffl ffm ffn ffo ffp ffq ffr ffs fft ffu ffv ffw ffx ffy
  ffz fga fgb fgc fgd fge fgf fgg fgh fgi fgj fgk fgl fgm fgn fgo fgp fgq fgr fgs
  fgt fgu fgv fgw fgx fgy fgz fha fhb fhc fhd fhe fhf fhg fhh fhi fhj fhk fhl fhm
  fhn fho fhp fhq fhr fhs fht fhu fhv fhw fhx fhy fhz fia fib fic fid fie fif fig
  fih fii fij fik fil fim fin fio fip fiq fir fis fit fiu fiv fiw fix fiy fiz fja
  fjb fjc fjd fje fjf fjg fjh fji fjj fjk fjl fjm fjn fjo fjp fjq fjr fjs fjt fju
  fjv fjw fjx fjy fjz fka fkb fkc fkd fke fkf fkg fkh fki fkj fkk fkl fkm fkn fko
  fkp fkq fkr fks fkt fku fkv fkw fkx fky fkz fla flb flc fld fle flf flg flh fli
  flj flk fll flm fln flo flp flq flr fls flt flu flv flw flx fly flz fma fmb fmc
  fmd fme fmf
eqn: a:f16[1600] b:f16[1600,6400] c:f16[6400] d:f16[6400,1600] e:f16[1600] f:f16[1600]
  g:f16[1600] h:f16[1600,1600] i:f16[4800] j:f16[4800,1600] k:f16[1600] l:f16[1600]
  m:f16[1600] n:f16[1600,6400] o:f16[6400] p:f16[6400,1600] q:f16[1600] r:f16[1600]
  s:f16[1600] t:f16[1600,1600] u:f16[4800] v:f16[4800,1600] w:f16[1600] x:f16[1600]
  y:f16[1600] z:f16[1600,6400] ba:f16[6400] bb:f16[6400,1600] bc:f16[1600] bd:f16[1600]
  be:f16[1600] bf:f16[1600,1600] bg:f16[4800] bh:f16[4800,1600] bi:f16[1600] bj:f16[1600]
  bk:f16[1600] bl:f16[1600,6400] bm:f16[6400] bn:f16[6400,1600] bo:f16[1600] bp:f16[1600]
  bq:f16[1600] br:f16[1600,1600] bs:f16[4800] bt:f16[4800,1600] bu:f16[1600] bv:f16[1600]
  bw:f16[1600] bx:f16[1600,6400] by:f16[6400] bz:f16[6400,1600] ca:f16[1600] cb:f16[1600]
  cc:f16[1600] cd:f16[1600,1600] ce:f16[4800] cf:f16[4800,1600] cg:f16[1600] ch:f16[1600]
  ci:f16[1600] cj:f16[1600,6400] ck:f16[6400] cl:f16[6400,1600] cm:f16[1600] cn:f16[1600]
  co:f16[1600] cp:f16[1600,1600] cq:f16[4800] cr:f16[4800,1600] cs:f16[1600] ct:f16[1600]
  cu:f16[1600] cv:f16[1600,6400] cw:f16[6400] cx:f16[6400,1600] cy:f16[1600] cz:f16[1600]
  da:f16[1600] db:f16[1600,1600] dc:f16[4800] dd:f16[4800,1600] de:f16[1600] df:f16[1600]
  dg:f16[1600] dh:f16[1600,6400] di:f16[6400] dj:f16[6400,1600] dk:f16[1600] dl:f16[1600]
  dm:f16[1600] dn:f16[1600,1600] do:f16[4800] dp:f16[4800,1600] dq:f16[1600] dr:f16[1600]
  ds:f16[1600] dt:f16[1600,6400] du:f16[6400] dv:f16[6400,1600] dw:f16[1600] dx:f16[1600]
  dy:f16[1600] dz:f16[1600,1600] ea:f16[4800] eb:f16[4800,1600] ec:f16[1600] ed:f16[1600]
  ee:f16[1600] ef:f16[1600,6400] eg:f16[6400] eh:f16[6400,1600] ei:f16[1600] ej:f16[1600]
  ek:f16[1600] el:f16[1600,1600] em:f16[4800] en:f16[4800,1600] eo:f16[1600] ep:f16[1600]
  eq:f16[1600] er:f16[1600,6400] es:f16[6400] et:f16[6400,1600] eu:f16[1600] ev:f16[1600]
  ew:f16[1600] ex:f16[1600,1600] ey:f16[4800] ez:f16[4800,1600] fa:f16[1600] fb:f16[1600]
  fc:f16[1600] fd:f16[1600,6400] fe:f16[6400] ff:f16[6400,1600] fg:f16[1600] fh:f16[1600]
  fi:f16[64,256,1600] = pipeline_marker[mark_type=end name=5] fj fk fl fm fn fo fp
  fq fr fs ft fu fv fw fx fy fz ga gb gc gd ge gf gg gh gi gj gk gl gm gn go gp gq
  gr gs gt gu gv gw gx gy gz ha hb hc hd he hf hg hh hi hj hk hl hm hn ho hp hq hr
  hs ht hu hv hw hx hy hz ia ib ic id ie if ig ih ii ij ik il im in io ip iq ir is
  it iu iv iw ix iy iz ja jb jc jd je jf jg jh ji jj jk jl jm jn jo jp jq jr js jt
  ju jv jw jx jy jz ka kb kc kd ke kf kg kh ki kj kk kl km kn ko kp kq kr
input_var_mem_size
[clvr, clvs, clvp, clvq, clvn, clvo, clvj, clvk, clvh, clvi, clvl, clvm, clvf, clvg, clvd, clve, clvb, clvc, clux, cluy, cluv, cluw, cluz, clva, clut, cluu, clur, clus, clup, cluq, clul, clum, cluj, cluk, clun, cluo, cluh, clui, cluf, clug, clud, clue, cltz, clua, cltx, clty, club, cluc, cltv, cltw, cltt, cltu, cltr, clts, cltn, clto, cltl, cltm, cltp, cltq, cltj, cltk, clth, clti, cltf, cltg, cltb, cltc, clsz, clta, cltd, clte, clsx, clsy, clsv, clsw, clst, clsu, clsp, clsq, clsn, clso, clsr, clss, clsl, clsm, clsj, clsk, clsh, clsi, clsd, clse, clsb, clsc, clsf, clsg, clrz, clsa, clrx, clry, clrv, clrw, clrr, clrs, clrp, clrq, clrt, clru, clrn, clro, clrl, clrm, clrj, clrk, clrf, clrg, clrd, clre, clrh, clri, clqp, clqq, clqn, clqo, clql, clqm, clqh, clqi, clqf, clqg, clqj, clqk, clqd, clqe, clqb, clqc, clpz, clqa, rmc, nne, nnf, nmt, nnb, nna, nmw, nnd, nmp, nmq, nmd, nmf, nmj, nmh, nlz, nlo, nlj, nmk, nky, nkz, njk, nkv, nkp, nkt, nkf, njj, nke, nku, niu, njb, nii, nik, nio, nim, nie, nht, nho, nip, nhd, nhe, ngs, nha, ngz, ngv, nhc, ngo, ngp, ngc, nge, ngi, ngg, nfy, nfn, nfi, ngj, nex, ney, ndj, neu, neo, nes, nee, ndi, ned, net, nct, nda, nch, ncj, ncn, ncl, ncd, nbs, nbn, nco, nbc, nbd, nar, naz, nay, nau, nbb, nan, nao, nab, nad, nah, naf, mzx, mzm, mzh, nai, myw, myx, mxi, myt, myn, myr, myd, mxh, myc, mys, mws, mwz, mwg, mwi, mwm, mwk, mwc, mvr, mvm, mwn, mvb, mvc, muq, muy, mux, mut, mva, mum, mun, mua, muc, mug, mue, mtw, mtl, mtg, muh, msv, msw, mrh, mss, msm, msq, msc, mrg, msb, msr, mqr, mqy, mqf, mqh, mql, mqj, mqb, mpq, mpl, mqm, mnb, mnc, mmq, mmy, mmx, mmt, mna, mmm, mmn, mma, mmc, mmg, mme, mlw, mll, mlg, mmh, mkv, mkw, mjh, mks, mkm, mkq, mkc, mjg, mkb, mkr, mir, miy, mif, mih, mil, mij, mib, mhq, mhl, mim, mha, mhb, mgp, mgx, mgw, mgs, mgz, mgl, mgm, mfz, mgb, mgf, mgd, mfv, mfk, mff, mgg, meu, mev, mdg, mer, mel, mep, meb, mdf, mea, meq, mcq, mcx, mce, mcg, mck, mci, mca, mbp, mbk, mcl, maz, mba, mao, maw, mav, mar, may, mak, mal, lzy, maa, mae, mac, lzu, lzj, lze, maf, lyt, lyu, lxf, lyq, lyk, lyo, lya, lxe, lxz, lyp, lwp, lww, lwd, lwf, lwj, lwh, lvz, lvo, lvj, lwk, luy, luz, lun, luv, luu, luq, lux, luj, luk, ltx, ltz, lud, lub, ltt, lti, ltd, lue, lqz, lra, lpl, lqw, lqq, lqu, lqg, lpk, lqf, lqv, lov, lpc, loj, lol, lop, lon, lof, lnu, lnp, loq, lne, lnf, lmt, lnb, lna, lmw, lnd, lmp, lmq, lmd, lmf, lmj, lmh, llz, llo, llj, lmk, lky, lkz, ljk, lkv, lkp, lkt, lkf, ljj, lke, lku, liu, ljb, lii, lik, lio, lim, lie, lht, lho, lip, lhd, lhe, lgs, lha, lgz, lgv, lhc, lgo, lgp, lgc, lge, lgi, lgg, lfy, lfn, lfi, lgj, lex, ley, ldj, leu, leo, les, lee, ldi, led, let, lct, lda, lch, lcj, lcn, lcl, lcd, lbs, lbn, lco, lbc, lbd, lar, laz, lay, lau, lbb, lan, lao, lab, lad, lah, laf, kzx, kzm, kzh, lai, kyw, kyx, kxi, kyt, kyn, kyr, kyd, kxh, kyc, kys, kws, kwz, kwg, kwi, kwm, kwk, kwc, kvr, kvm, kwn, kvb, kvc, kuq, kuy, kux, kut, kva, kum, kun, kua, kuc, kug, kue, ktw, ktl, ktg, kuh]
[(1600,), (1600, 6400), (6400,), (6400, 1600), (1600,), (1600,), (1600,), (1600, 1600), (4800,), (4800, 1600), (1600,), (1600,), (1600,), (1600, 6400), (6400,), (6400, 1600), (1600,), (1600,), (1600,), (1600, 1600), (4800,), (4800, 1600), (1600,), (1600,), (1600,), (1600, 6400), (6400,), (6400, 1600), (1600,), (1600,), (1600,), (1600, 1600), (4800,), (4800, 1600), (1600,), (1600,), (1600,), (1600, 6400), (6400,), (6400, 1600), (1600,), (1600,), (1600,), (1600, 1600), (4800,), (4800, 1600), (1600,), (1600,), (1600,), (1600, 6400), (6400,), (6400, 1600), (1600,), (1600,), (1600,), (1600, 1600), (4800,), (4800, 1600), (1600,), (1600,), (1600,), (1600, 6400), (6400,), (6400, 1600), (1600,), (1600,), (1600,), (1600, 1600), (4800,), (4800, 1600), (1600,), (1600,), (1600,), (1600, 6400), (6400,), (6400, 1600), (1600,), (1600,), (1600,), (1600, 1600), (4800,), (4800, 1600), (1600,), (1600,), (1600,), (1600, 6400), (6400,), (6400, 1600), (1600,), (1600,), (1600,), (1600, 1600), (4800,), (4800, 1600), (1600,), (1600,), (1600,), (1600, 6400), (6400,), (6400, 1600), (1600,), (1600,), (1600,), (1600, 1600), (4800,), (4800, 1600), (1600,), (1600,), (1600,), (1600, 6400), (6400,), (6400, 1600), (1600,), (1600,), (1600,), (1600, 1600), (4800,), (4800, 1600), (1600,), (1600,), (1600,), (1600, 6400), (6400,), (6400, 1600), (1600,), (1600,), (1600,), (1600, 1600), (4800,), (4800, 1600), (1600,), (1600,), (1600,), (1600, 6400), (6400,), (6400, 1600), (1600,), (1600,), (64, 256, 1600), (64, 256, 6400), (6400, 1600), (64, 256, 6400), (64, 256, 6400), (64, 256, 6400), (64, 256, 6400), (64, 256, 6400), (64, 256, 1600), (1600, 6400), (64, 256, 1600), (64, 256, 1), (1, 1, 1600), (64, 256, 1), (64, 256), (64, 256), (64, 256, 1600), (64, 256, 1600), (64, 256, 1600), (1600, 1600), (64, 256, 25, 64), (64, 25, 256, 1), (64, 25, 256, 256), (64, 25, 256, 1), (64, 256, 25, 64), (64, 256, 25, 64), (), (64, 25, 256, 256), (64, 256, 1600), (1600, 4800), (64, 256, 1600), (64, 256, 1), (1, 1, 1600), (64, 256, 1), (64, 256), (64, 256), (64, 256, 1600), (64, 256, 1600), (64, 256, 6400), (6400, 1600), (64, 256, 6400), (64, 256, 6400), (64, 256, 6400), (64, 256, 6400), (64, 256, 6400), (64, 256, 1600), (1600, 6400), (64, 256, 1600), (64, 256, 1), (1, 1, 1600), (64, 256, 1), (64, 256), (64, 256), (64, 256, 1600), (64, 256, 1600), (64, 256, 1600), (1600, 1600), (64, 256, 25, 64), (64, 25, 256, 1), (64, 25, 256, 256), (64, 25, 256, 1), (64, 256, 25, 64), (64, 256, 25, 64), (), (64, 25, 256, 256), (64, 256, 1600), (1600, 4800), (64, 256, 1600), (64, 256, 1), (1, 1, 1600), (64, 256, 1), (64, 256), (64, 256), (64, 256, 1600), (64, 256, 1600), (64, 256, 6400), (6400, 1600), (64, 256, 6400), (64, 256, 6400), (64, 256, 6400), (64, 256, 6400), (64, 256, 6400), (64, 256, 1600), (1600, 6400), (64, 256, 1600), (64, 256, 1), (1, 1, 1600), (64, 256, 1), (64, 256), (64, 256), (64, 256, 1600), (64, 256, 1600), (64, 256, 1600), (1600, 1600), (64, 256, 25, 64), (64, 25, 256, 1), (64, 25, 256, 256), (64, 25, 256, 1), (64, 256, 25, 64), (64, 256, 25, 64), (), (64, 25, 256, 256), (64, 256, 1600), (1600, 4800), (64, 256, 1600), (64, 256, 1), (1, 1, 1600), (64, 256, 1), (64, 256), (64, 256), (64, 256, 1600), (64, 256, 1600), (64, 256, 6400), (6400, 1600), (64, 256, 6400), (64, 256, 6400), (64, 256, 6400), (64, 256, 6400), (64, 256, 6400), (64, 256, 1600), (1600, 6400), (64, 256, 1600), (64, 256, 1), (1, 1, 1600), (64, 256, 1), (64, 256), (64, 256), (64, 256, 1600), (64, 256, 1600), (64, 256, 1600), (1600, 1600), (64, 256, 25, 64), (64, 25, 256, 1), (64, 25, 256, 256), (64, 25, 256, 1), (64, 256, 25, 64), (64, 256, 25, 64), (), (64, 25, 256, 256), (64, 256, 1600), (1600, 4800), (64, 256, 1600), (64, 256, 1), (1, 1, 1600), (64, 256, 1), (64, 256), (64, 256), (64, 256, 1600), (64, 256, 1600), (64, 256, 6400), (6400, 1600), (64, 256, 6400), (64, 256, 6400), (64, 256, 6400), (64, 256, 6400), (64, 256, 6400), (64, 256, 1600), (1600, 6400), (64, 256, 1600), (64, 256, 1), (1, 1, 1600), (64, 256, 1), (64, 256), (64, 256), (64, 256, 1600), (64, 256, 1600), (64, 256, 1600), (1600, 1600), (64, 256, 25, 64), (64, 25, 256, 1), (64, 25, 256, 256), (64, 25, 256, 1), (64, 256, 25, 64), (64, 256, 25, 64), (), (64, 25, 256, 256), (64, 256, 1600), (1600, 4800), (64, 256, 1600), (64, 256, 1), (1, 1, 1600), (64, 256, 1), (64, 256), (64, 256), (64, 256, 1600), (64, 256, 1600), (64, 256, 6400), (6400, 1600), (64, 256, 6400), (64, 256, 6400), (64, 256, 6400), (64, 256, 6400), (64, 256, 6400), (64, 256, 1600), (1600, 6400), (64, 256, 1600), (64, 256, 1), (1, 1, 1600), (64, 256, 1), (64, 256), (64, 256), (64, 256, 1600), (64, 256, 1600), (64, 256, 1600), (1600, 1600), (64, 256, 25, 64), (64, 25, 256, 1), (64, 25, 256, 256), (64, 25, 256, 1), (64, 256, 25, 64), (64, 256, 25, 64), (), (64, 25, 256, 256), (64, 256, 1600), (1600, 4800), (64, 256, 1600), (64, 256, 1), (1, 1, 1600), (64, 256, 1), (64, 256), (64, 256), (64, 256, 1600), (64, 256, 1600), (64, 256, 6400), (6400, 1600), (64, 256, 6400), (64, 256, 6400), (64, 256, 6400), (64, 256, 6400), (64, 256, 6400), (64, 256, 1600), (1600, 6400), (64, 256, 1600), (64, 256, 1), (1, 1, 1600), (64, 256, 1), (64, 256), (64, 256), (64, 256, 1600), (64, 256, 1600), (64, 256, 1600), (1600, 1600), (64, 256, 25, 64), (64, 25, 256, 1), (64, 25, 256, 256), (64, 25, 256, 1), (64, 256, 25, 64), (64, 256, 25, 64), (), (64, 25, 256, 256), (64, 256, 1600), (1600, 4800), (64, 256, 1600), (64, 256, 1), (1, 1, 1600), (64, 256, 1), (64, 256), (64, 256), (64, 256, 1600), (64, 256, 1600), (64, 256, 6400), (6400, 1600), (64, 256, 6400), (64, 256, 6400), (64, 256, 6400), (64, 256, 6400), (64, 256, 6400), (64, 256, 1600), (1600, 6400), (64, 256, 1600), (64, 256, 1), (1, 1, 1600), (64, 256, 1), (64, 256), (64, 256), (64, 256, 1600), (64, 256, 1600), (64, 256, 1600), (1600, 1600), (64, 256, 25, 64), (64, 25, 256, 1), (64, 25, 256, 256), (64, 25, 256, 1), (64, 256, 25, 64), (64, 256, 25, 64), (), (64, 25, 256, 256), (64, 256, 1600), (1600, 4800), (64, 256, 1600), (64, 256, 1), (1, 1, 1600), (64, 256, 1), (64, 256), (64, 256), (64, 256, 1600), (64, 256, 1600), (64, 256, 6400), (6400, 1600), (64, 256, 6400), (64, 256, 6400), (64, 256, 6400), (64, 256, 6400), (64, 256, 6400), (64, 256, 1600), (1600, 6400), (64, 256, 1600), (64, 256, 1), (1, 1, 1600), (64, 256, 1), (64, 256), (64, 256), (64, 256, 1600), (64, 256, 1600), (64, 256, 1600), (1600, 1600), (64, 256, 25, 64), (64, 25, 256, 1), (64, 25, 256, 256), (64, 25, 256, 1), (64, 256, 25, 64), (64, 256, 25, 64), (), (64, 25, 256, 256), (64, 256, 1600), (1600, 4800), (64, 256, 1600), (64, 256, 1), (1, 1, 1600), (64, 256, 1), (64, 256), (64, 256), (64, 256, 1600), (64, 256, 1600), (64, 256, 6400), (6400, 1600), (64, 256, 6400), (64, 256, 6400), (64, 256, 6400), (64, 256, 6400), (64, 256, 6400), (64, 256, 1600), (1600, 6400), (64, 256, 1600), (64, 256, 1), (1, 1, 1600), (64, 256, 1), (64, 256), (64, 256), (64, 256, 1600), (64, 256, 1600), (64, 256, 1600), (1600, 1600), (64, 256, 25, 64), (64, 25, 256, 1), (64, 25, 256, 256), (64, 25, 256, 1), (64, 256, 25, 64), (64, 256, 25, 64), (), (64, 25, 256, 256), (64, 256, 1600), (1600, 4800), (64, 256, 1600), (64, 256, 1), (1, 1, 1600), (64, 256, 1), (64, 256), (64, 256), (64, 256, 1600), (64, 256, 1600), (64, 256, 6400), (6400, 1600), (64, 256, 6400), (64, 256, 6400), (64, 256, 6400), (64, 256, 6400), (64, 256, 6400), (64, 256, 1600), (1600, 6400), (64, 256, 1600), (64, 256, 1), (1, 1, 1600), (64, 256, 1), (64, 256), (64, 256), (64, 256, 1600), (64, 256, 1600), (64, 256, 1600), (1600, 1600), (64, 256, 25, 64), (64, 25, 256, 1), (64, 25, 256, 256), (64, 25, 256, 1), (64, 256, 25, 64), (64, 256, 25, 64), (), (64, 25, 256, 256), (64, 256, 1600), (1600, 4800), (64, 256, 1600), (64, 256, 1), (1, 1, 1600), (64, 256, 1), (64, 256), (64, 256), (64, 256, 1600), (64, 256, 1600), (64, 256, 6400), (6400, 1600), (64, 256, 6400), (64, 256, 6400), (64, 256, 6400), (64, 256, 6400), (64, 256, 6400), (64, 256, 1600), (1600, 6400), (64, 256, 1600), (64, 256, 1), (1, 1, 1600), (64, 256, 1), (64, 256), (64, 256), (64, 256, 1600), (64, 256, 1600)]
param_size: 13.202040026895702 [GiB] 
jaxpr.eqns, len: 3
eqn: a:f16[1600] b:f16[1600,1600] c:f16[4800] d:f16[4800,1600] e:f16[1600] f:f16[1600]
  g:f16[1600] h:f16[1600,6400] i:f16[6400] j:f16[6400,1600] k:f16[1600] l:f16[1600]
  m:f16[1600] n:f16[1600,1600] o:f16[4800] p:f16[4800,1600] q:f16[1600] r:f16[1600]
  s:f16[1600] t:f16[1600,6400] u:f16[6400] v:f16[6400,1600] w:f16[1600] x:f16[1600]
  y:f16[1600] z:f16[1600,1600] ba:f16[4800] bb:f16[4800,1600] bc:f16[1600] bd:f16[1600]
  be:f16[1600] bf:f16[1600,6400] bg:f16[6400] bh:f16[6400,1600] bi:f16[1600] bj:f16[1600]
  bk:f16[1600] bl:f16[1600,1600] bm:f16[4800] bn:f16[4800,1600] bo:f16[1600] bp:f16[1600]
  bq:f16[1600] br:f16[1600,6400] bs:f16[6400] bt:f16[6400,1600] bu:f16[1600] bv:f16[1600]
  bw:f16[1600] bx:f16[1600,1600] by:f16[4800] bz:f16[4800,1600] ca:f16[1600] cb:f16[1600]
  cc:f16[1600] cd:f16[1600,6400] ce:f16[6400] cf:f16[6400,1600] cg:f16[1600] ch:f16[1600]
  ci:f16[1600] cj:f16[1600,1600] ck:f16[4800] cl:f16[4800,1600] cm:f16[1600] cn:f16[1600]
  co:f16[1600] cp:f16[1600,6400] cq:f16[6400] cr:f16[6400,1600] cs:f16[1600] ct:f16[1600]
  cu:f16[1600] cv:f16[1600,1600] cw:f16[4800] cx:f16[4800,1600] cy:f16[1600] cz:f16[1600]
  da:f16[1600] db:f16[1600,6400] dc:f16[6400] dd:f16[6400,1600] de:f16[1600] df:f16[1600]
  dg:f16[1600] dh:f16[1600,1600] di:f16[4800] dj:f16[4800,1600] dk:f16[1600] dl:f16[1600]
  dm:f16[1600] dn:f16[1600,6400] do:f16[6400] dp:f16[6400,1600] dq:f16[1600] dr:f16[1600]
  ds:f16[1600] dt:f16[1600,1600] du:f16[4800] dv:f16[4800,1600] dw:f16[1600] dx:f16[1600]
  dy:f16[1600] dz:f16[1600,6400] ea:f16[6400] eb:f16[6400,1600] ec:f16[1600] ed:f16[1600]
  ee:f16[1600] ef:f16[1600,1600] eg:f16[4800] eh:f16[4800,1600] ei:f16[1600] ej:f16[1600]
  ek:f16[1600] el:f16[1600,6400] em:f16[6400] en:f16[6400,1600] eo:f16[1600] ep:f16[1600]
  eq:f16[1600] er:f16[1600,1600] es:f16[4800] et:f16[4800,1600] eu:f16[1600] ev:f16[1600]
  ew:f16[1600] ex:f16[1600,6400] ey:f16[6400] ez:f16[6400,1600] fa:f16[1600] fb:f16[1600]
  fc:f16[1600] fd:f16[1600,1600] fe:f16[4800] ff:f16[4800,1600] fg:f16[1600] fh:f16[1600]
  fi:f16[1600] fj:f16[1600,6400] fk:f16[6400] fl:f16[6400,1600] fm:f16[1600] fn:f16[1600]
  fo:f16[1600] fp:f16[1600,1600] fq:f16[4800] fr:f16[4800,1600] fs:f16[1600] ft:f16[1600]
  fu:f16[1600] fv:f16[1600,6400] fw:f16[6400] fx:f16[6400,1600] fy:f16[1600] fz:f16[1600]
  ga:f16[1600] gb:f16[1600,1600] gc:f16[4800] gd:f16[4800,1600] ge:f16[1600] gf:f16[1600]
  gg:f16[1600] gh:f16[1600,6400] gi:f16[6400] gj:f16[6400,1600] gk:f16[1600] gl:f16[1600]
  gm:f16[1600] gn:f16[1600,1600] go:f16[4800] gp:f16[4800,1600] gq:f16[1600] gr:f16[1600]
  gs:f16[1600] gt:f16[1600,6400] gu:f16[6400] gv:f16[6400,1600] gw:f16[1600] gx:f16[1600]
  gy:f16[1600] gz:f16[1600,1600] ha:f16[4800] hb:f16[4800,1600] hc:f16[1600] hd:f16[1600]
  he:f16[1600] hf:f16[1600,6400] hg:f16[6400] hh:f16[6400,1600] hi:f16[1600] hj:f16[1600]
  hk:f16[1600] hl:f16[1600,1600] hm:f16[4800] hn:f16[4800,1600] ho:f16[1600] hp:f16[1600]
  hq:f16[1600] hr:f16[1600,6400] hs:f16[6400] ht:f16[6400,1600] hu:f16[1600] hv:f16[1600]
  hw:f16[1600] hx:f16[1600,1600] hy:f16[4800] hz:f16[4800,1600] ia:f16[1600] ib:f16[1600]
  ic:f16[1600] id:f16[1600,6400] ie:f16[6400] if:f16[6400,1600] ig:f16[1600] ih:f16[1600]
  ii:f16[1600] ij:f16[1600,1600] ik:f16[4800] il:f16[4800,1600] im:f16[1600] in:f16[1600]
  io:f16[1600] ip:f16[1600,6400] iq:f16[6400] ir:f16[6400,1600] is:f16[1600] it:f16[1600]
  iu:f16[1600] iv:f16[1600,1600] iw:f16[4800] ix:f16[4800,1600] iy:f16[1600] iz:f16[1600]
  ja:f16[64,256,1600] jb:f16[64,256,1600] jc:f16[1600,1600] jd:f16[64,256,25,64]
  je:f16[64,25,256,1] jf:f16[64,25,256,256] jg:f16[64,25,256,1] jh:f16[64,256,25,64]
  ji:f16[64,256,25,64] jj:f16[] jk:f16[64,25,256,256] jl:f16[64,256,1600] jm:f16[1600,4800]
  jn:f32[64,256,1600] jo:f32[64,256,1] jp:f32[1,1,1600] jq:f32[64,256,1] jr:f32[64,256]
  js:f32[64,256] jt:f32[64,256,1600] ju:f32[64,256,1600] jv:f16[64,256,6400] jw:f16[6400,1600]
  jx:f16[64,256,6400] jy:f16[64,256,6400] jz:f16[64,256,6400] ka:f16[64,256,6400]
  kb:f16[64,256,6400] kc:f16[64,256,1600] kd:f16[1600,6400] ke:f32[64,256,1600] kf:f32[64,256,1]
  kg:f32[1,1,1600] kh:f32[64,256,1] ki:f32[64,256] kj:f32[64,256] kk:f32[64,256,1600]
  kl:f32[64,256,1600] km:f16[64,256,1600] kn:f16[1600,1600] ko:f16[64,256,25,64]
  kp:f16[64,25,256,1] kq:f16[64,25,256,256] kr:f16[64,25,256,1] ks:f16[64,256,25,64]
  kt:f16[64,256,25,64] ku:f16[] kv:f16[64,25,256,256] kw:f16[64,256,1600] kx:f16[1600,4800]
  ky:f32[64,256,1600] kz:f32[64,256,1] la:f32[1,1,1600] lb:f32[64,256,1] lc:f32[64,256]
  ld:f32[64,256] le:f32[64,256,1600] lf:f32[64,256,1600] lg:f16[64,256,6400] lh:f16[6400,1600]
  li:f16[64,256,6400] lj:f16[64,256,6400] lk:f16[64,256,6400] ll:f16[64,256,6400]
  lm:f16[64,256,6400] ln:f16[64,256,1600] lo:f16[1600,6400] lp:f32[64,256,1600] lq:f32[64,256,1]
  lr:f32[1,1,1600] ls:f32[64,256,1] lt:f32[64,256] lu:f32[64,256] lv:f32[64,256,1600]
  lw:f32[64,256,1600] lx:f16[64,256,1600] ly:f16[1600,1600] lz:f16[64,256,25,64]
  ma:f16[64,25,256,1] mb:f16[64,25,256,256] mc:f16[64,25,256,1] md:f16[64,256,25,64]
  me:f16[64,256,25,64] mf:f16[] mg:f16[64,25,256,256] mh:f16[64,256,1600] mi:f16[1600,4800]
  mj:f32[64,256,1600] mk:f32[64,256,1] ml:f32[1,1,1600] mm:f32[64,256,1] mn:f32[64,256]
  mo:f32[64,256] mp:f32[64,256,1600] mq:f32[64,256,1600] mr:f16[64,256,6400] ms:f16[6400,1600]
  mt:f16[64,256,6400] mu:f16[64,256,6400] mv:f16[64,256,6400] mw:f16[64,256,6400]
  mx:f16[64,256,6400] my:f16[64,256,1600] mz:f16[1600,6400] na:f32[64,256,1600] nb:f32[64,256,1]
  nc:f32[1,1,1600] nd:f32[64,256,1] ne:f32[64,256] nf:f32[64,256] ng:f32[64,256,1600]
  nh:f32[64,256,1600] ni:f16[64,256,1600] nj:f16[1600,1600] nk:f16[64,256,25,64]
  nl:f16[64,25,256,1] nm:f16[64,25,256,256] nn:f16[64,25,256,1] no:f16[64,256,25,64]
  np:f16[64,256,25,64] nq:f16[] nr:f16[64,25,256,256] ns:f16[64,256,1600] nt:f16[1600,4800]
  nu:f32[64,256,1600] nv:f32[64,256,1] nw:f32[1,1,1600] nx:f32[64,256,1] ny:f32[64,256]
  nz:f32[64,256] oa:f32[64,256,1600] ob:f32[64,256,1600] oc:f16[64,256,6400] od:f16[6400,1600]
  oe:f16[64,256,6400] of:f16[64,256,6400] og:f16[64,256,6400] oh:f16[64,256,6400]
  oi:f16[64,256,6400] oj:f16[64,256,1600] ok:f16[1600,6400] ol:f32[64,256,1600] om:f32[64,256,1]
  on:f32[1,1,1600] oo:f32[64,256,1] op:f32[64,256] oq:f32[64,256] or:f32[64,256,1600]
  os:f32[64,256,1600] ot:f16[64,256,1600] ou:f16[1600,1600] ov:f16[64,256,25,64]
  ow:f16[64,25,256,1] ox:f16[64,25,256,256] oy:f16[64,25,256,1] oz:f16[64,256,25,64]
  pa:f16[64,256,25,64] pb:f16[] pc:f16[64,25,256,256] pd:f16[64,256,1600] pe:f16[1600,4800]
  pf:f32[64,256,1600] pg:f32[64,256,1] ph:f32[1,1,1600] pi:f32[64,256,1] pj:f32[64,256]
  pk:f32[64,256] pl:f32[64,256,1600] pm:f32[64,256,1600] pn:f16[64,256,6400] po:f16[6400,1600]
  pp:f16[64,256,6400] pq:f16[64,256,6400] pr:f16[64,256,6400] ps:f16[64,256,6400]
  pt:f16[64,256,6400] pu:f16[64,256,1600] pv:f16[1600,6400] pw:f32[64,256,1600] px:f32[64,256,1]
  py:f32[1,1,1600] pz:f32[64,256,1] qa:f32[64,256] qb:f32[64,256] qc:f32[64,256,1600]
  qd:f32[64,256,1600] qe:f16[64,256,1600] qf:f16[1600,1600] qg:f16[64,256,25,64]
  qh:f16[64,25,256,1] qi:f16[64,25,256,256] qj:f16[64,25,256,1] qk:f16[64,256,25,64]
  ql:f16[64,256,25,64] qm:f16[] qn:f16[64,25,256,256] qo:f16[64,256,1600] qp:f16[1600,4800]
  qq:f32[64,256,1600] qr:f32[64,256,1] qs:f32[1,1,1600] qt:f32[64,256,1] qu:f32[64,256]
  qv:f32[64,256] qw:f32[64,256,1600] qx:f32[64,256,1600] qy:f16[64,256,6400] qz:f16[6400,1600]
  ra:f16[64,256,6400] rb:f16[64,256,6400] rc:f16[64,256,6400] rd:f16[64,256,6400]
  re:f16[64,256,6400] rf:f16[64,256,1600] rg:f16[1600,6400] rh:f32[64,256,1600] ri:f32[64,256,1]
  rj:f32[1,1,1600] rk:f32[64,256,1] rl:f32[64,256] rm:f32[64,256] rn:f32[64,256,1600]
  ro:f32[64,256,1600] rp:f16[64,256,1600] rq:f16[1600,1600] rr:f16[64,256,25,64]
  rs:f16[64,25,256,1] rt:f16[64,25,256,256] ru:f16[64,25,256,1] rv:f16[64,256,25,64]
  rw:f16[64,256,25,64] rx:f16[] ry:f16[64,25,256,256] rz:f16[64,256,1600] sa:f16[1600,4800]
  sb:f32[64,256,1600] sc:f32[64,256,1] sd:f32[1,1,1600] se:f32[64,256,1] sf:f32[64,256]
  sg:f32[64,256] sh:f32[64,256,1600] si:f32[64,256,1600] sj:f16[64,256,6400] sk:f16[6400,1600]
  sl:f16[64,256,6400] sm:f16[64,256,6400] sn:f16[64,256,6400] so:f16[64,256,6400]
  sp:f16[64,256,6400] sq:f16[64,256,1600] sr:f16[1600,6400] ss:f32[64,256,1600] st:f32[64,256,1]
  su:f32[1,1,1600] sv:f32[64,256,1] sw:f32[64,256] sx:f32[64,256] sy:f32[64,256,1600]
  sz:f32[64,256,1600] ta:f16[64,256,1600] tb:f16[1600,1600] tc:f16[64,256,25,64]
  td:f16[64,25,256,1] te:f16[64,25,256,256] tf:f16[64,25,256,1] tg:f16[64,256,25,64]
  th:f16[64,256,25,64] ti:f16[] tj:f16[64,25,256,256] tk:f16[64,256,1600] tl:f16[1600,4800]
  tm:f32[64,256,1600] tn:f32[64,256,1] to:f32[1,1,1600] tp:f32[64,256,1] tq:f32[64,256]
  tr:f32[64,256] ts:f32[64,256,1600] tt:f32[64,256,1600] tu:f16[64,256,6400] tv:f16[6400,1600]
  tw:f16[64,256,6400] tx:f16[64,256,6400] ty:f16[64,256,6400] tz:f16[64,256,6400]
  ua:f16[64,256,6400] ub:f16[64,256,1600] uc:f16[1600,6400] ud:f32[64,256,1600] ue:f32[64,256,1]
  uf:f32[1,1,1600] ug:f32[64,256,1] uh:f32[64,256] ui:f32[64,256] uj:f32[64,256,1600]
  uk:f32[64,256,1600] ul:f16[64,256,1600] um:f16[1600,1600] un:f16[64,256,25,64]
  uo:f16[64,25,256,1] up:f16[64,25,256,256] uq:f16[64,25,256,1] ur:f16[64,256,25,64]
  us:f16[64,256,25,64] ut:f16[] uu:f16[64,25,256,256] uv:f16[64,256,1600] uw:f16[1600,4800]
  ux:f32[64,256,1600] uy:f32[64,256,1] uz:f32[1,1,1600] va:f32[64,256,1] vb:f32[64,256]
  vc:f32[64,256] vd:f32[64,256,1600] ve:f32[64,256,1600] vf:f16[64,256,6400] vg:f16[6400,1600]
  vh:f16[64,256,6400] vi:f16[64,256,6400] vj:f16[64,256,6400] vk:f16[64,256,6400]
  vl:f16[64,256,6400] vm:f16[64,256,1600] vn:f16[1600,6400] vo:f32[64,256,1600] vp:f32[64,256,1]
  vq:f32[1,1,1600] vr:f32[64,256,1] vs:f32[64,256] vt:f32[64,256] vu:f32[64,256,1600]
  vv:f32[64,256,1600] vw:f16[64,256,1600] vx:f16[1600,1600] vy:f16[64,256,25,64]
  vz:f16[64,25,256,1] wa:f16[64,25,256,256] wb:f16[64,25,256,1] wc:f16[64,256,25,64]
  wd:f16[64,256,25,64] we:f16[] wf:f16[64,25,256,256] wg:f16[64,256,1600] wh:f16[1600,4800]
  wi:f32[64,256,1600] wj:f32[64,256,1] wk:f32[1,1,1600] wl:f32[64,256,1] wm:f32[64,256]
  wn:f32[64,256] wo:f32[64,256,1600] wp:f32[64,256,1600] wq:f16[64,256,6400] wr:f16[6400,1600]
  ws:f16[64,256,6400] wt:f16[64,256,6400] wu:f16[64,256,6400] wv:f16[64,256,6400]
  ww:f16[64,256,6400] wx:f16[64,256,1600] wy:f16[1600,6400] wz:f32[64,256,1600] xa:f32[64,256,1]
  xb:f32[1,1,1600] xc:f32[64,256,1] xd:f32[64,256] xe:f32[64,256] xf:f32[64,256,1600]
  xg:f32[64,256,1600] xh:f16[64,256,1600] xi:f16[1600,1600] xj:f16[64,256,25,64]
  xk:f16[64,25,256,1] xl:f16[64,25,256,256] xm:f16[64,25,256,1] xn:f16[64,256,25,64]
  xo:f16[64,256,25,64] xp:f16[] xq:f16[64,25,256,256] xr:f16[64,256,1600] xs:f16[1600,4800]
  xt:f32[64,256,1600] xu:f32[64,256,1] xv:f32[1,1,1600] xw:f32[64,256,1] xx:f32[64,256]
  xy:f32[64,256] xz:f32[64,256,1600] ya:f32[64,256,1600] yb:f16[64,256,6400] yc:f16[6400,1600]
  yd:f16[64,256,6400] ye:f16[64,256,6400] yf:f16[64,256,6400] yg:f16[64,256,6400]
  yh:f16[64,256,6400] yi:f16[64,256,1600] yj:f16[1600,6400] yk:f32[64,256,1600] yl:f32[64,256,1]
  ym:f32[1,1,1600] yn:f32[64,256,1] yo:f32[64,256] yp:f32[64,256] yq:f32[64,256,1600]
  yr:f32[64,256,1600] ys:f16[64,256,1600] yt:f16[1600,1600] yu:f16[64,256,25,64]
  yv:f16[64,25,256,1] yw:f16[64,25,256,256] yx:f16[64,25,256,1] yy:f16[64,256,25,64]
  yz:f16[64,256,25,64] za:f16[] zb:f16[64,25,256,256] zc:f16[64,256,1600] zd:f16[1600,4800]
  ze:f32[64,256,1600] zf:f32[64,256,1] zg:f32[1,1,1600] zh:f32[64,256,1] zi:f32[64,256]
  zj:f32[64,256] zk:f32[64,256,1600] zl:f32[64,256,1600] zm:f16[64,256,6400] zn:f16[6400,1600]
  zo:f16[64,256,6400] zp:f16[64,256,6400] zq:f16[64,256,6400] zr:f16[64,256,6400]
  zs:f16[64,256,6400] zt:f16[64,256,1600] zu:f16[1600,6400] zv:f32[64,256,1600] zw:f32[64,256,1]
  zx:f32[1,1,1600] zy:f32[64,256,1] zz:f32[64,256] baa:f32[64,256] bab:f32[64,256,1600]
  bac:f32[64,256,1600] bad:f16[64,256,1600] bae:f16[1600,1600] baf:f16[64,256,25,64]
  bag:f16[64,25,256,1] bah:f16[64,25,256,256] bai:f16[64,25,256,1] baj:f16[64,256,25,64]
  bak:f16[64,256,25,64] bal:f16[] bam:f16[64,25,256,256] ban:f16[64,256,1600] bao:f16[1600,4800]
  bap:f32[64,256,1600] baq:f32[64,256,1] bar:f32[1,1,1600] bas:f32[64,256,1] bat:f32[64,256]
  bau:f32[64,256] bav:f32[64,256,1600] baw:f32[64,256,1600] bax:f16[64,256,6400]
  bay:f16[6400,1600] baz:f16[64,256,6400] bba:f16[64,256,6400] bbb:f16[64,256,6400]
  bbc:f16[64,256,6400] bbd:f16[64,256,6400] bbe:f16[64,256,1600] bbf:f16[1600,6400]
  bbg:f32[64,256,1600] bbh:f32[64,256,1] bbi:f32[1,1,1600] bbj:f32[64,256,1] bbk:f32[64,256]
  bbl:f32[64,256] bbm:f32[64,256,1600] bbn:f32[64,256,1600] bbo:f16[64,256,1600]
  bbp:f16[1600,1600] bbq:f16[64,256,25,64] bbr:f16[64,25,256,1] bbs:f16[64,25,256,256]
  bbt:f16[64,25,256,1] bbu:f16[64,256,25,64] bbv:f16[64,256,25,64] bbw:f16[] bbx:f16[64,25,256,256]
  bby:f16[64,256,1600] bbz:f16[1600,4800] bca:f32[64,256,1600] bcb:f32[64,256,1]
  bcc:f32[1,1,1600] bcd:f32[64,256,1] bce:f32[64,256] bcf:f32[64,256] bcg:f32[64,256,1600]
  bch:f32[64,256,1600] bci:f16[64,256,6400] bcj:f16[6400,1600] bck:f16[64,256,6400]
  bcl:f16[64,256,6400] bcm:f16[64,256,6400] bcn:f16[64,256,6400] bco:f16[64,256,6400]
  bcp:f16[64,256,1600] bcq:f16[1600,6400] bcr:f32[64,256,1600] bcs:f32[64,256,1]
  bct:f32[1,1,1600] bcu:f32[64,256,1] bcv:f32[64,256] bcw:f32[64,256] bcx:f32[64,256,1600]
  bcy:f32[64,256,1600] bcz:f16[64,256,1600] bda:f16[1600,1600] bdb:f16[64,256,25,64]
  bdc:f16[64,25,256,1] bdd:f16[64,25,256,256] bde:f16[64,25,256,1] bdf:f16[64,256,25,64]
  bdg:f16[64,256,25,64] bdh:f16[] bdi:f16[64,25,256,256] bdj:f16[64,256,1600] bdk:f16[1600,4800]
  bdl:f32[64,256,1600] bdm:f32[64,256,1] bdn:f32[1,1,1600] bdo:f32[64,256,1] bdp:f32[64,256]
  bdq:f32[64,256] bdr:f32[64,256,1600] bds:f32[64,256,1600] bdt:f16[64,256,6400]
  bdu:f16[6400,1600] bdv:f16[64,256,6400] bdw:f16[64,256,6400] bdx:f16[64,256,6400]
  bdy:f16[64,256,6400] bdz:f16[64,256,6400] bea:f16[64,256,1600] beb:f16[1600,6400]
  bec:f32[64,256,1600] bed:f32[64,256,1] bee:f32[1,1,1600] bef:f32[64,256,1] beg:f32[64,256]
  beh:f32[64,256] bei:f32[64,256,1600] bej:f32[64,256,1600] bek:f16[64,256,1600]
  bel:f16[1600,1600] bem:f16[64,256,25,64] ben:f16[64,25,256,1] beo:f16[64,25,256,256]
  bep:f16[64,25,256,1] beq:f16[64,256,25,64] ber:f16[64,256,25,64] bes:f16[] bet:f16[64,25,256,256]
  beu:f16[64,256,1600] bev:f16[1600,4800] bew:f32[64,256,1600] bex:f32[64,256,1]
  bey:f32[1,1,1600] bez:f32[64,256,1] bfa:f32[64,256] bfb:f32[64,256] bfc:f32[64,256,1600]
  bfd:f32[64,256,1600] bfe:f16[64,256,6400] bff:f16[6400,1600] bfg:f16[64,256,6400]
  bfh:f16[64,256,6400] bfi:f16[64,256,6400] bfj:f16[64,256,6400] bfk:f16[64,256,6400]
  bfl:f16[64,256,1600] bfm:f16[1600,6400] bfn:f32[64,256,1600] bfo:f32[64,256,1]
  bfp:f32[1,1,1600] bfq:f32[64,256,1] bfr:f32[64,256] bfs:f32[64,256] bft:f32[64,256,1600]
  bfu:f32[64,256,1600] bfv:f16[64,256,1600] bfw:f16[1600,1600] bfx:f16[64,256,25,64]
  bfy:f16[64,25,256,1] bfz:f16[64,25,256,256] bga:f16[64,25,256,1] bgb:f16[64,256,25,64]
  bgc:f16[64,256,25,64] bgd:f16[] bge:f16[64,25,256,256] bgf:f16[64,256,1600] bgg:f16[1600,4800]
  bgh:f32[64,256,1600] bgi:f32[64,256,1] bgj:f32[1,1,1600] bgk:f32[64,256,1] bgl:f32[64,256]
  bgm:f32[64,256] bgn:f32[64,256,1600] bgo:f32[64,256,1600] bgp:f16[64,256,6400]
  bgq:f16[6400,1600] bgr:f16[64,256,6400] bgs:f16[64,256,6400] bgt:f16[64,256,6400]
  bgu:f16[64,256,6400] bgv:f16[64,256,6400] bgw:f16[64,256,1600] bgx:f16[1600,6400]
  bgy:f32[64,256,1600] bgz:f32[64,256,1] bha:f32[1,1,1600] bhb:f32[64,256,1] bhc:f32[64,256]
  bhd:f32[64,256] bhe:f32[64,256,1600] bhf:f32[64,256,1600] bhg:f16[64,256,1600]
  bhh:f16[1600,1600] bhi:f16[64,256,25,64] bhj:f16[64,25,256,1] bhk:f16[64,25,256,256]
  bhl:f16[64,25,256,1] bhm:f16[64,256,25,64] bhn:f16[64,256,25,64] bho:f16[] bhp:f16[64,25,256,256]
  bhq:f16[64,256,1600] bhr:f16[1600,4800] bhs:f32[64,256,1600] bht:f32[64,256,1]
  bhu:f32[1,1,1600] bhv:f32[64,256,1] bhw:f32[64,256] bhx:f32[64,256] bhy:f32[64,256,1600]
  bhz:f32[64,256,1600] bia:f16[64,256,6400] bib:f16[6400,1600] bic:f16[64,256,6400]
  bid:f16[64,256,6400] bie:f16[64,256,6400] bif:f16[64,256,6400] big:f16[64,256,6400]
  bih:f16[64,256,1600] bii:f16[1600,6400] bij:f32[64,256,1600] bik:f32[64,256,1]
  bil:f32[1,1,1600] bim:f32[64,256,1] bin:f32[64,256] bio:f32[64,256] bip:f32[64,256,1600]
  biq:f32[64,256,1600] bir:f16[64,256,1600] bis:f16[1600,1600] bit:f16[64,256,25,64]
  biu:f16[64,25,256,1] biv:f16[64,25,256,256] biw:f16[64,25,256,1] bix:f16[64,256,25,64]
  biy:f16[64,256,25,64] biz:f16[] bja:f16[64,25,256,256] bjb:f16[64,256,1600] bjc:f16[1600,4800]
  bjd:f32[64,256,1600] bje:f32[64,256,1] bjf:f32[1,1,1600] bjg:f32[64,256,1] bjh:f32[64,256]
  bji:f32[64,256] bjj:f32[64,256,1600] bjk:f32[64,256,1600] bjl:f16[64,256,6400]
  bjm:f16[6400,1600] bjn:f16[64,256,6400] bjo:f16[64,256,6400] bjp:f16[64,256,6400]
  bjq:f16[64,256,6400] bjr:f16[64,256,6400] bjs:f16[64,256,1600] bjt:f16[1600,6400]
  bju:f32[64,256,1600] bjv:f32[64,256,1] bjw:f32[1,1,1600] bjx:f32[64,256,1] bjy:f32[64,256]
  bjz:f32[64,256] bka:f32[64,256,1600] bkb:f32[64,256,1600] bkc:f16[64,256,1600]
  bkd:f16[1600,1600] bke:f16[64,256,25,64] bkf:f16[64,25,256,1] bkg:f16[64,25,256,256]
  bkh:f16[64,25,256,1] bki:f16[64,256,25,64] bkj:f16[64,256,25,64] bkk:f16[] bkl:f16[64,25,256,256]
  bkm:f16[64,256,1600] bkn:f16[1600,4800] bko:f32[64,256,1600] bkp:f32[64,256,1]
  bkq:f32[1,1,1600] bkr:f32[64,256,1] bks:f32[64,256] bkt:f32[64,256] bku:f32[64,256,1600]
  bkv:f32[64,256,1600] = pipeline_marker[mark_type=start name=6] bkw bkx bky bkz
  bla blb blc bld ble blf blg blh bli blj blk bll blm bln blo blp blq blr bls blt
  blu blv blw blx bly blz bma bmb bmc bmd bme bmf bmg bmh bmi bmj bmk bml bmm bmn
  bmo bmp bmq bmr bms bmt bmu bmv bmw bmx bmy bmz bna bnb bnc bnd bne bnf bng bnh
  bni bnj bnk bnl bnm bnn bno bnp bnq bnr bns bnt bnu bnv bnw bnx bny bnz boa bob
  boc bod boe bof bog boh boi boj bok bol bom bon boo bop boq bor bos bot bou bov
  bow box boy boz bpa bpb bpc bpd bpe bpf bpg bph bpi bpj bpk bpl bpm bpn bpo bpp
  bpq bpr bps bpt bpu bpv bpw bpx bpy bpz bqa bqb bqc bqd bqe bqf bqg bqh bqi bqj
  bqk bql bqm bqn bqo bqp bqq bqr bqs bqt bqu bqv bqw bqx bqy bqz bra brb brc brd
  bre brf brg brh bri brj brk brl brm brn bro brp brq brr brs brt bru brv brw brx
  bry brz bsa bsb bsc bsd bse bsf bsg bsh bsi bsj bsk bsl bsm bsn bso bsp bsq bsr
  bss bst bsu bsv bsw bsx bsy bsz bta btb btc btd bte btf btg bth bti btj btk btl
  btm btn bto btp btq btr bts btt btu btv btw btx bty btz bua bub buc bud bue buf
  bug buh bui buj buk bul bum bun buo bup buq bur bus but buu buv buw bux buy buz
  bva bvb bvc bvd bve bvf bvg bvh bvi bvj bvk bvl bvm bvn bvo bvp bvq bvr bvs bvt
  bvu bvv bvw bvx bvy bvz bwa bwb bwc bwd bwe bwf bwg bwh bwi bwj bwk bwl bwm bwn
  bwo bwp bwq bwr bws bwt bwu bwv bww bwx bwy bwz bxa bxb bxc bxd bxe bxf bxg bxh
  bxi bxj bxk bxl bxm bxn bxo bxp bxq bxr bxs bxt bxu bxv bxw bxx bxy bxz bya byb
  byc byd bye byf byg byh byi byj byk byl bym byn byo byp byq byr bys byt byu byv
  byw byx byy byz bza bzb bzc bzd bze bzf bzg bzh bzi bzj bzk bzl bzm bzn bzo bzp
  bzq bzr bzs bzt bzu bzv bzw bzx bzy bzz caa cab cac cad cae caf cag cah cai caj
  cak cal cam can cao cap caq car cas cat cau cav caw cax cay caz cba cbb cbc cbd
  cbe cbf cbg cbh cbi cbj cbk cbl cbm cbn cbo cbp cbq cbr cbs cbt cbu cbv cbw cbx
  cby cbz cca ccb ccc ccd cce ccf ccg cch cci ccj cck ccl ccm ccn cco ccp ccq ccr
  ccs cct ccu ccv ccw ccx ccy ccz cda cdb cdc cdd cde cdf cdg cdh cdi cdj cdk cdl
  cdm cdn cdo cdp cdq cdr cds cdt cdu cdv cdw cdx cdy cdz cea ceb cec ced cee cef
  ceg ceh cei cej cek cel cem cen ceo cep ceq cer ces cet ceu cev cew cex cey cez
  cfa cfb cfc cfd cfe cff cfg cfh cfi cfj cfk cfl cfm cfn cfo cfp cfq cfr cfs cft
  cfu cfv cfw cfx cfy cfz cga cgb cgc cgd cge cgf cgg cgh cgi cgj cgk cgl cgm cgn
  cgo cgp cgq cgr cgs cgt cgu cgv cgw cgx cgy cgz cha chb chc chd che chf chg chh
  chi chj chk chl chm chn cho chp chq chr chs cht chu chv chw chx chy chz cia cib
  cic cid cie cif cig cih cii cij cik cil cim cin cio cip ciq cir cis cit ciu civ
  ciw cix ciy ciz cja cjb cjc cjd cje cjf cjg cjh cji cjj cjk cjl cjm cjn cjo cjp
  cjq cjr cjs cjt cju cjv cjw cjx cjy cjz cka ckb ckc ckd cke ckf ckg ckh cki ckj
  ckk ckl ckm ckn cko ckp ckq ckr cks ckt cku ckv ckw ckx cky ckz cla clb clc cld
  cle clf clg clh cli clj clk cll clm cln clo clp clq clr cls clt clu clv clw clx
  cly clz cma cmb cmc cmd cme cmf cmg cmh cmi cmj cmk cml cmm cmn cmo cmp cmq cmr
  cms cmt cmu cmv cmw cmx cmy cmz cna cnb cnc cnd cne cnf cng cnh cni cnj cnk cnl
  cnm cnn cno cnp cnq cnr cns cnt cnu cnv cnw cnx cny cnz coa cob coc cod coe cof
  cog coh coi coj cok col com con coo cop coq cor cos cot cou cov cow cox coy coz
  cpa cpb cpc cpd cpe cpf cpg cph cpi cpj cpk cpl cpm cpn cpo cpp cpq cpr cps cpt
  cpu cpv cpw cpx cpy cpz cqa cqb cqc cqd cqe cqf cqg cqh cqi cqj cqk cql cqm cqn
  cqo cqp cqq cqr cqs cqt cqu cqv cqw cqx cqy cqz cra crb crc crd cre crf crg crh
  cri crj crk crl crm crn cro crp crq crr crs crt cru crv crw crx cry crz csa csb
  csc csd cse csf csg csh csi csj csk csl csm csn cso csp csq csr css cst csu csv
  csw csx csy csz cta ctb ctc ctd cte ctf ctg cth cti ctj ctk ctl ctm ctn cto ctp
  ctq ctr cts ctt ctu ctv ctw ctx cty ctz cua cub cuc cud cue cuf cug cuh cui cuj
  cuk cul cum cun cuo cup cuq cur cus cut cuu cuv cuw cux cuy cuz cva cvb cvc cvd
  cve cvf cvg cvh cvi cvj cvk cvl cvm cvn cvo cvp cvq cvr
eqn: a:f16[1600] b:f16[1600,1600] c:f16[4800] d:f16[4800,1600] e:f16[1600] f:f16[1600]
  g:f16[1600] h:f16[1600,6400] i:f16[6400] j:f16[6400,1600] k:f16[1600] l:f16[1600]
  m:f16[1600] n:f16[1600,1600] o:f16[4800] p:f16[4800,1600] q:f16[1600] r:f16[1600]
  s:f16[1600] t:f16[1600,6400] u:f16[6400] v:f16[6400,1600] w:f16[1600] x:f16[1600]
  y:f16[1600] z:f16[1600,1600] ba:f16[4800] bb:f16[4800,1600] bc:f16[1600] bd:f16[1600]
  be:f16[1600] bf:f16[1600,6400] bg:f16[6400] bh:f16[6400,1600] bi:f16[1600] bj:f16[1600]
  bk:f16[1600] bl:f16[1600,1600] bm:f16[4800] bn:f16[4800,1600] bo:f16[1600] bp:f16[1600]
  bq:f16[1600] br:f16[1600,6400] bs:f16[6400] bt:f16[6400,1600] bu:f16[1600] bv:f16[1600]
  bw:f16[1600] bx:f16[1600,1600] by:f16[4800] bz:f16[4800,1600] ca:f16[1600] cb:f16[1600]
  cc:f16[1600] cd:f16[1600,6400] ce:f16[6400] cf:f16[6400,1600] cg:f16[1600] ch:f16[1600]
  ci:f16[1600] cj:f16[1600,1600] ck:f16[4800] cl:f16[4800,1600] cm:f16[1600] cn:f16[1600]
  co:f16[1600] cp:f16[1600,6400] cq:f16[6400] cr:f16[6400,1600] cs:f16[1600] ct:f16[1600]
  cu:f16[1600] cv:f16[1600,1600] cw:f16[4800] cx:f16[4800,1600] cy:f16[1600] cz:f16[1600]
  da:f16[1600] db:f16[1600,6400] dc:f16[6400] dd:f16[6400,1600] de:f16[1600] df:f16[1600]
  dg:f16[1600] dh:f16[1600,1600] di:f16[4800] dj:f16[4800,1600] dk:f16[1600] dl:f16[1600]
  dm:f16[1600] dn:f16[1600,6400] do:f16[6400] dp:f16[6400,1600] dq:f16[1600] dr:f16[1600]
  ds:f16[1600] dt:f16[1600,1600] du:f16[4800] dv:f16[4800,1600] dw:f16[1600] dx:f16[1600]
  dy:f16[1600] dz:f16[1600,6400] ea:f16[6400] eb:f16[6400,1600] ec:f16[1600] ed:f16[1600]
  ee:f16[1600] ef:f16[1600,1600] eg:f16[4800] eh:f16[4800,1600] ei:f16[1600] ej:f16[1600]
  ek:f16[1600] el:f16[1600,6400] em:f16[6400] en:f16[6400,1600] eo:f16[1600] ep:f16[1600]
  eq:f16[1600] er:f16[1600,1600] es:f16[4800] et:f16[4800,1600] eu:f16[1600] ev:f16[1600]
  ew:f16[1600] ex:f16[1600,6400] ey:f16[6400] ez:f16[6400,1600] fa:f16[1600] fb:f16[1600]
  fc:f16[1600] fd:f16[1600,1600] fe:f16[4800] ff:f16[4800,1600] fg:f16[1600] fh:f16[1600]
  fi:f16[1600] fj:f16[1600,6400] fk:f16[6400] fl:f16[6400,1600] fm:f16[1600] fn:f16[1600]
  fo:f16[1600] fp:f16[1600,1600] fq:f16[4800] fr:f16[4800,1600] fs:f16[1600] ft:f16[1600]
  fu:f16[1600] fv:f16[1600,6400] fw:f16[6400] fx:f16[6400,1600] fy:f16[1600] fz:f16[1600]
  ga:f16[1600] gb:f16[1600,1600] gc:f16[4800] gd:f16[4800,1600] ge:f16[1600] gf:f16[1600]
  gg:f16[1600] gh:f16[1600,6400] gi:f16[6400] gj:f16[6400,1600] gk:f16[1600] gl:f16[1600]
  gm:f16[1600] gn:f16[1600,1600] go:f16[4800] gp:f16[4800,1600] gq:f16[1600] gr:f16[1600]
  gs:f16[1600] gt:f16[1600,6400] gu:f16[6400] gv:f16[6400,1600] gw:f16[1600] gx:f16[1600]
  gy:f16[1600] gz:f16[1600,1600] ha:f16[4800] hb:f16[4800,1600] hc:f16[1600] hd:f16[1600]
  he:f16[1600] hf:f16[1600,6400] hg:f16[6400] hh:f16[6400,1600] hi:f16[1600] hj:f16[1600]
  hk:f16[1600] hl:f16[1600,1600] hm:f16[4800] hn:f16[4800,1600] ho:f16[1600] hp:f16[1600]
  hq:f16[1600] hr:f16[1600,6400] hs:f16[6400] ht:f16[6400,1600] hu:f16[1600] hv:f16[1600]
  hw:f16[1600] hx:f16[1600,1600] hy:f16[4800] hz:f16[4800,1600] ia:f16[1600] ib:f16[1600]
  ic:f16[1600] id:f16[1600,6400] ie:f16[6400] if:f16[6400,1600] ig:f16[1600] ih:f16[1600]
  ii:f16[1600] ij:f16[1600,1600] ik:f16[4800] il:f16[4800,1600] im:f16[1600] in:f16[1600]
  io:f16[1600] ip:f16[1600,6400] iq:f16[6400] ir:f16[6400,1600] is:f16[1600] it:f16[1600]
  iu:f16[1600] iv:f16[1600,1600] iw:f16[4800] ix:f16[4800,1600] iy:f16[1600] iz:f16[1600]
  ja:f16[64,256,1600] = named_call[
  call_jaxpr={ lambda ; jb:f16[1600] jc:f16[1600,1600] jd:f16[4800] je:f16[4800,1600]
      jf:f16[1600] jg:f16[1600] jh:f16[1600] ji:f16[1600,6400] jj:f16[6400] jk:f16[6400,1600]
      jl:f16[1600] jm:f16[1600] jn:f16[1600] jo:f16[1600,1600] jp:f16[4800] jq:f16[4800,1600]
      jr:f16[1600] js:f16[1600] jt:f16[1600] ju:f16[1600,6400] jv:f16[6400] jw:f16[6400,1600]
      jx:f16[1600] jy:f16[1600] jz:f16[1600] ka:f16[1600,1600] kb:f16[4800] kc:f16[4800,1600]
      kd:f16[1600] ke:f16[1600] kf:f16[1600] kg:f16[1600,6400] kh:f16[6400] ki:f16[6400,1600]
      kj:f16[1600] kk:f16[1600] kl:f16[1600] km:f16[1600,1600] kn:f16[4800] ko:f16[4800,1600]
      kp:f16[1600] kq:f16[1600] kr:f16[1600] ks:f16[1600,6400] kt:f16[6400] ku:f16[6400,1600]
      kv:f16[1600] kw:f16[1600] kx:f16[1600] ky:f16[1600,1600] kz:f16[4800] la:f16[4800,1600]
      lb:f16[1600] lc:f16[1600] ld:f16[1600] le:f16[1600,6400] lf:f16[6400] lg:f16[6400,1600]
      lh:f16[1600] li:f16[1600] lj:f16[1600] lk:f16[1600,1600] ll:f16[4800] lm:f16[4800,1600]
      ln:f16[1600] lo:f16[1600] lp:f16[1600] lq:f16[1600,6400] lr:f16[6400] ls:f16[6400,1600]
      lt:f16[1600] lu:f16[1600] lv:f16[1600] lw:f16[1600,1600] lx:f16[4800] ly:f16[4800,1600]
      lz:f16[1600] ma:f16[1600] mb:f16[1600] mc:f16[1600,6400] md:f16[6400] me:f16[6400,1600]
      mf:f16[1600] mg:f16[1600] mh:f16[1600] mi:f16[1600,1600] mj:f16[4800] mk:f16[4800,1600]
      ml:f16[1600] mm:f16[1600] mn:f16[1600] mo:f16[1600,6400] mp:f16[6400] mq:f16[6400,1600]
      mr:f16[1600] ms:f16[1600] mt:f16[1600] mu:f16[1600,1600] mv:f16[4800] mw:f16[4800,1600]
      mx:f16[1600] my:f16[1600] mz:f16[1600] na:f16[1600,6400] nb:f16[6400] nc:f16[6400,1600]
      nd:f16[1600] ne:f16[1600] nf:f16[1600] ng:f16[1600,1600] nh:f16[4800] ni:f16[4800,1600]
      nj:f16[1600] nk:f16[1600] nl:f16[1600] nm:f16[1600,6400] nn:f16[6400] no:f16[6400,1600]
      np:f16[1600] nq:f16[1600] nr:f16[1600] ns:f16[1600,1600] nt:f16[4800] nu:f16[4800,1600]
      nv:f16[1600] nw:f16[1600] nx:f16[1600] ny:f16[1600,6400] nz:f16[6400] oa:f16[6400,1600]
      ob:f16[1600] oc:f16[1600] od:f16[1600] oe:f16[1600,1600] of:f16[4800] og:f16[4800,1600]
      oh:f16[1600] oi:f16[1600] oj:f16[1600] ok:f16[1600,6400] ol:f16[6400] om:f16[6400,1600]
      on:f16[1600] oo:f16[1600] op:f16[1600] oq:f16[1600,1600] or:f16[4800] os:f16[4800,1600]
      ot:f16[1600] ou:f16[1600] ov:f16[1600] ow:f16[1600,6400] ox:f16[6400] oy:f16[6400,1600]
      oz:f16[1600] pa:f16[1600] pb:f16[1600] pc:f16[1600,1600] pd:f16[4800] pe:f16[4800,1600]
      pf:f16[1600] pg:f16[1600] ph:f16[1600] pi:f16[1600,6400] pj:f16[6400] pk:f16[6400,1600]
      pl:f16[1600] pm:f16[1600] pn:f16[1600] po:f16[1600,1600] pp:f16[4800] pq:f16[4800,1600]
      pr:f16[1600] ps:f16[1600] pt:f16[1600] pu:f16[1600,6400] pv:f16[6400] pw:f16[6400,1600]
      px:f16[1600] py:f16[1600] pz:f16[1600] qa:f16[1600,1600] qb:f16[4800] qc:f16[4800,1600]
      qd:f16[1600] qe:f16[1600] qf:f16[1600] qg:f16[1600,6400] qh:f16[6400] qi:f16[6400,1600]
      qj:f16[1600] qk:f16[1600] ql:f16[1600] qm:f16[1600,1600] qn:f16[4800] qo:f16[4800,1600]
      qp:f16[1600] qq:f16[1600] qr:f16[1600] qs:f16[1600,6400] qt:f16[6400] qu:f16[6400,1600]
      qv:f16[1600] qw:f16[1600] qx:f16[1600] qy:f16[1600,1600] qz:f16[4800] ra:f16[4800,1600]
      rb:f16[1600] rc:f16[1600] rd:f16[1600] re:f16[1600,6400] rf:f16[6400] rg:f16[6400,1600]
      rh:f16[1600] ri:f16[1600] rj:f16[1600] rk:f16[1600,1600] rl:f16[4800] rm:f16[4800,1600]
      rn:f16[1600] ro:f16[1600] rp:f16[1600] rq:f16[1600,6400] rr:f16[6400] rs:f16[6400,1600]
      rt:f16[1600] ru:f16[1600] rv:f16[1600] rw:f16[1600,1600] rx:f16[4800] ry:f16[4800,1600]
      rz:f16[1600] sa:f16[1600] sb:f16[64,256,1600] sc:f16[64,256,1600] sd:f16[1600,1600]
      se:f16[64,256,25,64] sf:f16[64,25,256,1] sg:f16[64,25,256,256] sh:f16[64,25,256,1]
      si:f16[64,256,25,64] sj:f16[64,256,25,64] sk:f16[] sl:f16[64,25,256,256] sm:f16[64,256,1600]
      sn:f16[1600,4800] so:f32[64,256,1600] sp:f32[64,256,1] sq:f32[1,1,1600] sr:f32[64,256,1]
      ss:f32[64,256] st:f32[64,256] su:f32[64,256,1600] sv:f32[64,256,1600] sw:f16[64,256,6400]
      sx:f16[6400,1600] sy:f16[64,256,6400] sz:f16[64,256,6400] ta:f16[64,256,6400]
      tb:f16[64,256,6400] tc:f16[64,256,6400] td:f16[64,256,1600] te:f16[1600,6400]
      tf:f32[64,256,1600] tg:f32[64,256,1] th:f32[1,1,1600] ti:f32[64,256,1] tj:f32[64,256]
      tk:f32[64,256] tl:f32[64,256,1600] tm:f32[64,256,1600] tn:f16[64,256,1600]
      to:f16[1600,1600] tp:f16[64,256,25,64] tq:f16[64,25,256,1] tr:f16[64,25,256,256]
      ts:f16[64,25,256,1] tt:f16[64,256,25,64] tu:f16[64,256,25,64] tv:f16[] tw:f16[64,25,256,256]
      tx:f16[64,256,1600] ty:f16[1600,4800] tz:f32[64,256,1600] ua:f32[64,256,1]
      ub:f32[1,1,1600] uc:f32[64,256,1] ud:f32[64,256] ue:f32[64,256] uf:f32[64,256,1600]
      ug:f32[64,256,1600] uh:f16[64,256,6400] ui:f16[6400,1600] uj:f16[64,256,6400]
      uk:f16[64,256,6400] ul:f16[64,256,6400] um:f16[64,256,6400] un:f16[64,256,6400]
      uo:f16[64,256,1600] up:f16[1600,6400] uq:f32[64,256,1600] ur:f32[64,256,1]
      us:f32[1,1,1600] ut:f32[64,256,1] uu:f32[64,256] uv:f32[64,256] uw:f32[64,256,1600]
      ux:f32[64,256,1600] uy:f16[64,256,1600] uz:f16[1600,1600] va:f16[64,256,25,64]
      vb:f16[64,25,256,1] vc:f16[64,25,256,256] vd:f16[64,25,256,1] ve:f16[64,256,25,64]
      vf:f16[64,256,25,64] vg:f16[] vh:f16[64,25,256,256] vi:f16[64,256,1600] vj:f16[1600,4800]
      vk:f32[64,256,1600] vl:f32[64,256,1] vm:f32[1,1,1600] vn:f32[64,256,1] vo:f32[64,256]
      vp:f32[64,256] vq:f32[64,256,1600] vr:f32[64,256,1600] vs:f16[64,256,6400]
      vt:f16[6400,1600] vu:f16[64,256,6400] vv:f16[64,256,6400] vw:f16[64,256,6400]
      vx:f16[64,256,6400] vy:f16[64,256,6400] vz:f16[64,256,1600] wa:f16[1600,6400]
      wb:f32[64,256,1600] wc:f32[64,256,1] wd:f32[1,1,1600] we:f32[64,256,1] wf:f32[64,256]
      wg:f32[64,256] wh:f32[64,256,1600] wi:f32[64,256,1600] wj:f16[64,256,1600]
      wk:f16[1600,1600] wl:f16[64,256,25,64] wm:f16[64,25,256,1] wn:f16[64,25,256,256]
      wo:f16[64,25,256,1] wp:f16[64,256,25,64] wq:f16[64,256,25,64] wr:f16[] ws:f16[64,25,256,256]
      wt:f16[64,256,1600] wu:f16[1600,4800] wv:f32[64,256,1600] ww:f32[64,256,1]
      wx:f32[1,1,1600] wy:f32[64,256,1] wz:f32[64,256] xa:f32[64,256] xb:f32[64,256,1600]
      xc:f32[64,256,1600] xd:f16[64,256,6400] xe:f16[6400,1600] xf:f16[64,256,6400]
      xg:f16[64,256,6400] xh:f16[64,256,6400] xi:f16[64,256,6400] xj:f16[64,256,6400]
      xk:f16[64,256,1600] xl:f16[1600,6400] xm:f32[64,256,1600] xn:f32[64,256,1]
      xo:f32[1,1,1600] xp:f32[64,256,1] xq:f32[64,256] xr:f32[64,256] xs:f32[64,256,1600]
      xt:f32[64,256,1600] xu:f16[64,256,1600] xv:f16[1600,1600] xw:f16[64,256,25,64]
      xx:f16[64,25,256,1] xy:f16[64,25,256,256] xz:f16[64,25,256,1] ya:f16[64,256,25,64]
      yb:f16[64,256,25,64] yc:f16[] yd:f16[64,25,256,256] ye:f16[64,256,1600] yf:f16[1600,4800]
      yg:f32[64,256,1600] yh:f32[64,256,1] yi:f32[1,1,1600] yj:f32[64,256,1] yk:f32[64,256]
      yl:f32[64,256] ym:f32[64,256,1600] yn:f32[64,256,1600] yo:f16[64,256,6400]
      yp:f16[6400,1600] yq:f16[64,256,6400] yr:f16[64,256,6400] ys:f16[64,256,6400]
      yt:f16[64,256,6400] yu:f16[64,256,6400] yv:f16[64,256,1600] yw:f16[1600,6400]
      yx:f32[64,256,1600] yy:f32[64,256,1] yz:f32[1,1,1600] za:f32[64,256,1] zb:f32[64,256]
      zc:f32[64,256] zd:f32[64,256,1600] ze:f32[64,256,1600] zf:f16[64,256,1600]
      zg:f16[1600,1600] zh:f16[64,256,25,64] zi:f16[64,25,256,1] zj:f16[64,25,256,256]
      zk:f16[64,25,256,1] zl:f16[64,256,25,64] zm:f16[64,256,25,64] zn:f16[] zo:f16[64,25,256,256]
      zp:f16[64,256,1600] zq:f16[1600,4800] zr:f32[64,256,1600] zs:f32[64,256,1]
      zt:f32[1,1,1600] zu:f32[64,256,1] zv:f32[64,256] zw:f32[64,256] zx:f32[64,256,1600]
      zy:f32[64,256,1600] zz:f16[64,256,6400] baa:f16[6400,1600] bab:f16[64,256,6400]
      bac:f16[64,256,6400] bad:f16[64,256,6400] bae:f16[64,256,6400] baf:f16[64,256,6400]
      bag:f16[64,256,1600] bah:f16[1600,6400] bai:f32[64,256,1600] baj:f32[64,256,1]
      bak:f32[1,1,1600] bal:f32[64,256,1] bam:f32[64,256] ban:f32[64,256] bao:f32[64,256,1600]
      bap:f32[64,256,1600] baq:f16[64,256,1600] bar:f16[1600,1600] bas:f16[64,256,25,64]
      bat:f16[64,25,256,1] bau:f16[64,25,256,256] bav:f16[64,25,256,1] baw:f16[64,256,25,64]
      bax:f16[64,256,25,64] bay:f16[] baz:f16[64,25,256,256] bba:f16[64,256,1600]
      bbb:f16[1600,4800] bbc:f32[64,256,1600] bbd:f32[64,256,1] bbe:f32[1,1,1600]
      bbf:f32[64,256,1] bbg:f32[64,256] bbh:f32[64,256] bbi:f32[64,256,1600] bbj:f32[64,256,1600]
      bbk:f16[64,256,6400] bbl:f16[6400,1600] bbm:f16[64,256,6400] bbn:f16[64,256,6400]
      bbo:f16[64,256,6400] bbp:f16[64,256,6400] bbq:f16[64,256,6400] bbr:f16[64,256,1600]
      bbs:f16[1600,6400] bbt:f32[64,256,1600] bbu:f32[64,256,1] bbv:f32[1,1,1600]
      bbw:f32[64,256,1] bbx:f32[64,256] bby:f32[64,256] bbz:f32[64,256,1600] bca:f32[64,256,1600]
      bcb:f16[64,256,1600] bcc:f16[1600,1600] bcd:f16[64,256,25,64] bce:f16[64,25,256,1]
      bcf:f16[64,25,256,256] bcg:f16[64,25,256,1] bch:f16[64,256,25,64] bci:f16[64,256,25,64]
      bcj:f16[] bck:f16[64,25,256,256] bcl:f16[64,256,1600] bcm:f16[1600,4800] bcn:f32[64,256,1600]
      bco:f32[64,256,1] bcp:f32[1,1,1600] bcq:f32[64,256,1] bcr:f32[64,256] bcs:f32[64,256]
      bct:f32[64,256,1600] bcu:f32[64,256,1600] bcv:f16[64,256,6400] bcw:f16[6400,1600]
      bcx:f16[64,256,6400] bcy:f16[64,256,6400] bcz:f16[64,256,6400] bda:f16[64,256,6400]
      bdb:f16[64,256,6400] bdc:f16[64,256,1600] bdd:f16[1600,6400] bde:f32[64,256,1600]
      bdf:f32[64,256,1] bdg:f32[1,1,1600] bdh:f32[64,256,1] bdi:f32[64,256] bdj:f32[64,256]
      bdk:f32[64,256,1600] bdl:f32[64,256,1600] bdm:f16[64,256,1600] bdn:f16[1600,1600]
      bdo:f16[64,256,25,64] bdp:f16[64,25,256,1] bdq:f16[64,25,256,256] bdr:f16[64,25,256,1]
      bds:f16[64,256,25,64] bdt:f16[64,256,25,64] bdu:f16[] bdv:f16[64,25,256,256]
      bdw:f16[64,256,1600] bdx:f16[1600,4800] bdy:f32[64,256,1600] bdz:f32[64,256,1]
      bea:f32[1,1,1600] beb:f32[64,256,1] bec:f32[64,256] bed:f32[64,256] bee:f32[64,256,1600]
      bef:f32[64,256,1600] beg:f16[64,256,6400] beh:f16[6400,1600] bei:f16[64,256,6400]
      bej:f16[64,256,6400] bek:f16[64,256,6400] bel:f16[64,256,6400] bem:f16[64,256,6400]
      ben:f16[64,256,1600] beo:f16[1600,6400] bep:f32[64,256,1600] beq:f32[64,256,1]
      ber:f32[1,1,1600] bes:f32[64,256,1] bet:f32[64,256] beu:f32[64,256] bev:f32[64,256,1600]
      bew:f32[64,256,1600] bex:f16[64,256,1600] bey:f16[1600,1600] bez:f16[64,256,25,64]
      bfa:f16[64,25,256,1] bfb:f16[64,25,256,256] bfc:f16[64,25,256,1] bfd:f16[64,256,25,64]
      bfe:f16[64,256,25,64] bff:f16[] bfg:f16[64,25,256,256] bfh:f16[64,256,1600]
      bfi:f16[1600,4800] bfj:f32[64,256,1600] bfk:f32[64,256,1] bfl:f32[1,1,1600]
      bfm:f32[64,256,1] bfn:f32[64,256] bfo:f32[64,256] bfp:f32[64,256,1600] bfq:f32[64,256,1600]
      bfr:f16[64,256,6400] bfs:f16[6400,1600] bft:f16[64,256,6400] bfu:f16[64,256,6400]
      bfv:f16[64,256,6400] bfw:f16[64,256,6400] bfx:f16[64,256,6400] bfy:f16[64,256,1600]
      bfz:f16[1600,6400] bga:f32[64,256,1600] bgb:f32[64,256,1] bgc:f32[1,1,1600]
      bgd:f32[64,256,1] bge:f32[64,256] bgf:f32[64,256] bgg:f32[64,256,1600] bgh:f32[64,256,1600]
      bgi:f16[64,256,1600] bgj:f16[1600,1600] bgk:f16[64,256,25,64] bgl:f16[64,25,256,1]
      bgm:f16[64,25,256,256] bgn:f16[64,25,256,1] bgo:f16[64,256,25,64] bgp:f16[64,256,25,64]
      bgq:f16[] bgr:f16[64,25,256,256] bgs:f16[64,256,1600] bgt:f16[1600,4800] bgu:f32[64,256,1600]
      bgv:f32[64,256,1] bgw:f32[1,1,1600] bgx:f32[64,256,1] bgy:f32[64,256] bgz:f32[64,256]
      bha:f32[64,256,1600] bhb:f32[64,256,1600] bhc:f16[64,256,6400] bhd:f16[6400,1600]
      bhe:f16[64,256,6400] bhf:f16[64,256,6400] bhg:f16[64,256,6400] bhh:f16[64,256,6400]
      bhi:f16[64,256,6400] bhj:f16[64,256,1600] bhk:f16[1600,6400] bhl:f32[64,256,1600]
      bhm:f32[64,256,1] bhn:f32[1,1,1600] bho:f32[64,256,1] bhp:f32[64,256] bhq:f32[64,256]
      bhr:f32[64,256,1600] bhs:f32[64,256,1600] bht:f16[64,256,1600] bhu:f16[1600,1600]
      bhv:f16[64,256,25,64] bhw:f16[64,25,256,1] bhx:f16[64,25,256,256] bhy:f16[64,25,256,1]
      bhz:f16[64,256,25,64] bia:f16[64,256,25,64] bib:f16[] bic:f16[64,25,256,256]
      bid:f16[64,256,1600] bie:f16[1600,4800] bif:f32[64,256,1600] big:f32[64,256,1]
      bih:f32[1,1,1600] bii:f32[64,256,1] bij:f32[64,256] bik:f32[64,256] bil:f32[64,256,1600]
      bim:f32[64,256,1600] bin:f16[64,256,6400] bio:f16[6400,1600] bip:f16[64,256,6400]
      biq:f16[64,256,6400] bir:f16[64,256,6400] bis:f16[64,256,6400] bit:f16[64,256,6400]
      biu:f16[64,256,1600] biv:f16[1600,6400] biw:f32[64,256,1600] bix:f32[64,256,1]
      biy:f32[1,1,1600] biz:f32[64,256,1] bja:f32[64,256] bjb:f32[64,256] bjc:f32[64,256,1600]
      bjd:f32[64,256,1600] bje:f16[64,256,1600] bjf:f16[1600,1600] bjg:f16[64,256,25,64]
      bjh:f16[64,25,256,1] bji:f16[64,25,256,256] bjj:f16[64,25,256,1] bjk:f16[64,256,25,64]
      bjl:f16[64,256,25,64] bjm:f16[] bjn:f16[64,25,256,256] bjo:f16[64,256,1600]
      bjp:f16[1600,4800] bjq:f32[64,256,1600] bjr:f32[64,256,1] bjs:f32[1,1,1600]
      bjt:f32[64,256,1] bju:f32[64,256] bjv:f32[64,256] bjw:f32[64,256,1600] bjx:f32[64,256,1600]
      bjy:f16[64,256,6400] bjz:f16[6400,1600] bka:f16[64,256,6400] bkb:f16[64,256,6400]
      bkc:f16[64,256,6400] bkd:f16[64,256,6400] bke:f16[64,256,6400] bkf:f16[64,256,1600]
      bkg:f16[1600,6400] bkh:f32[64,256,1600] bki:f32[64,256,1] bkj:f32[1,1,1600]
      bkk:f32[64,256,1] bkl:f32[64,256] bkm:f32[64,256] bkn:f32[64,256,1600] bko:f32[64,256,1600]
      bkp:f16[64,256,1600] bkq:f16[1600,1600] bkr:f16[64,256,25,64] bks:f16[64,25,256,1]
      bkt:f16[64,25,256,256] bku:f16[64,25,256,1] bkv:f16[64,256,25,64] bkw:f16[64,256,25,64]
      bkx:f16[] bky:f16[64,25,256,256] bkz:f16[64,256,1600] bla:f16[1600,4800] blb:f32[64,256,1600]
      blc:f32[64,256,1] bld:f32[1,1,1600] ble:f32[64,256,1] blf:f32[64,256] blg:f32[64,256]
      blh:f32[64,256,1600] bli:f32[64,256,1600] blj:f16[64,256,6400] blk:f16[6400,1600]
      bll:f16[64,256,6400] blm:f16[64,256,6400] bln:f16[64,256,6400] blo:f16[64,256,6400]
      blp:f16[64,256,6400] blq:f16[64,256,1600] blr:f16[1600,6400] bls:f32[64,256,1600]
      blt:f32[64,256,1] blu:f32[1,1,1600] blv:f32[64,256,1] blw:f32[64,256] blx:f32[64,256]
      bly:f32[64,256,1600] blz:f32[64,256,1600] bma:f16[64,256,1600] bmb:f16[1600,1600]
      bmc:f16[64,256,25,64] bmd:f16[64,25,256,1] bme:f16[64,25,256,256] bmf:f16[64,25,256,1]
      bmg:f16[64,256,25,64] bmh:f16[64,256,25,64] bmi:f16[] bmj:f16[64,25,256,256]
      bmk:f16[64,256,1600] bml:f16[1600,4800] bmm:f32[64,256,1600] bmn:f32[64,256,1]
      bmo:f32[1,1,1600] bmp:f32[64,256,1] bmq:f32[64,256] bmr:f32[64,256] bms:f32[64,256,1600]
      bmt:f32[64,256,1600] bmu:f16[64,256,6400] bmv:f16[6400,1600] bmw:f16[64,256,6400]
      bmx:f16[64,256,6400] bmy:f16[64,256,6400] bmz:f16[64,256,6400] bna:f16[64,256,6400]
      bnb:f16[64,256,1600] bnc:f16[1600,6400] bnd:f32[64,256,1600] bne:f32[64,256,1]
      bnf:f32[1,1,1600] bng:f32[64,256,1] bnh:f32[64,256] bni:f32[64,256] bnj:f32[64,256,1600]
      bnk:f32[64,256,1600] bnl:f16[64,256,1600] bnm:f16[1600,1600] bnn:f16[64,256,25,64]
      bno:f16[64,25,256,1] bnp:f16[64,25,256,256] bnq:f16[64,25,256,1] bnr:f16[64,256,25,64]
      bns:f16[64,256,25,64] bnt:f16[] bnu:f16[64,25,256,256] bnv:f16[64,256,1600]
      bnw:f16[1600,4800] bnx:f32[64,256,1600] bny:f32[64,256,1] bnz:f32[1,1,1600]
      boa:f32[64,256,1] bob:f32[64,256] boc:f32[64,256] bod:f32[64,256,1600] boe:f32[64,256,1600]
      bof:f16[64,256,6400] bog:f16[6400,1600] boh:f16[64,256,6400] boi:f16[64,256,6400]
      boj:f16[64,256,6400] bok:f16[64,256,6400] bol:f16[64,256,6400] bom:f16[64,256,1600]
      bon:f16[1600,6400] boo:f32[64,256,1600] bop:f32[64,256,1] boq:f32[1,1,1600]
      bor:f32[64,256,1] bos:f32[64,256] bot:f32[64,256] bou:f32[64,256,1600] bov:f32[64,256,1600]
      bow:f16[64,256,1600] box:f16[1600,1600] boy:f16[64,256,25,64] boz:f16[64,25,256,1]
      bpa:f16[64,25,256,256] bpb:f16[64,25,256,1] bpc:f16[64,256,25,64] bpd:f16[64,256,25,64]
      bpe:f16[] bpf:f16[64,25,256,256] bpg:f16[64,256,1600] bph:f16[1600,4800] bpi:f32[64,256,1600]
      bpj:f32[64,256,1] bpk:f32[1,1,1600] bpl:f32[64,256,1] bpm:f32[64,256] bpn:f32[64,256]
      bpo:f32[64,256,1600] bpp:f32[64,256,1600] bpq:f16[64,256,6400] bpr:f16[6400,1600]
      bps:f16[64,256,6400] bpt:f16[64,256,6400] bpu:f16[64,256,6400] bpv:f16[64,256,6400]
      bpw:f16[64,256,6400] bpx:f16[64,256,1600] bpy:f16[1600,6400] bpz:f32[64,256,1600]
      bqa:f32[64,256,1] bqb:f32[1,1,1600] bqc:f32[64,256,1] bqd:f32[64,256] bqe:f32[64,256]
      bqf:f32[64,256,1600] bqg:f32[64,256,1600] bqh:f16[64,256,1600] bqi:f16[1600,1600]
      bqj:f16[64,256,25,64] bqk:f16[64,25,256,1] bql:f16[64,25,256,256] bqm:f16[64,25,256,1]
      bqn:f16[64,256,25,64] bqo:f16[64,256,25,64] bqp:f16[] bqq:f16[64,25,256,256]
      bqr:f16[64,256,1600] bqs:f16[1600,4800] bqt:f32[64,256,1600] bqu:f32[64,256,1]
      bqv:f32[1,1,1600] bqw:f32[64,256,1] bqx:f32[64,256] bqy:f32[64,256] bqz:f32[64,256,1600]
      bra:f32[64,256,1600] brb:f16[64,256,6400] brc:f16[6400,1600] brd:f16[64,256,6400]
      bre:f16[64,256,6400] brf:f16[64,256,6400] brg:f16[64,256,6400] brh:f16[64,256,6400]
      bri:f16[64,256,1600] brj:f16[1600,6400] brk:f32[64,256,1600] brl:f32[64,256,1]
      brm:f32[1,1,1600] brn:f32[64,256,1] bro:f32[64,256] brp:f32[64,256] brq:f32[64,256,1600]
      brr:f32[64,256,1600] brs:f16[64,256,1600] brt:f16[1600,1600] bru:f16[64,256,25,64]
      brv:f16[64,25,256,1] brw:f16[64,25,256,256] brx:f16[64,25,256,1] bry:f16[64,256,25,64]
      brz:f16[64,256,25,64] bsa:f16[] bsb:f16[64,25,256,256] bsc:f16[64,256,1600]
      bsd:f16[1600,4800] bse:f32[64,256,1600] bsf:f32[64,256,1] bsg:f32[1,1,1600]
      bsh:f32[64,256,1] bsi:f32[64,256] bsj:f32[64,256] bsk:f32[64,256,1600] bsl:f32[64,256,1600]
      bsm:f16[64,256,6400] bsn:f16[6400,1600] bso:f16[64,256,6400] bsp:f16[64,256,6400]
      bsq:f16[64,256,6400] bsr:f16[64,256,6400] bss:f16[64,256,6400] bst:f16[64,256,1600]
      bsu:f16[1600,6400] bsv:f32[64,256,1600] bsw:f32[64,256,1] bsx:f32[1,1,1600]
      bsy:f32[64,256,1] bsz:f32[64,256] bta:f32[64,256] btb:f32[64,256,1600] btc:f32[64,256,1600]
      btd:f16[64,256,1600] bte:f16[1600,1600] btf:f16[64,256,25,64] btg:f16[64,25,256,1]
      bth:f16[64,25,256,256] bti:f16[64,25,256,1] btj:f16[64,256,25,64] btk:f16[64,256,25,64]
      btl:f16[] btm:f16[64,25,256,256] btn:f16[64,256,1600] bto:f16[1600,4800] btp:f32[64,256,1600]
      btq:f32[64,256,1] btr:f32[1,1,1600] bts:f32[64,256,1] btt:f32[64,256] btu:f32[64,256]
      btv:f32[64,256,1600] btw:f32[64,256,1600]. let
      btx:f16[64,256,1600] bty:f16[1600] btz:f16[1600,1600] bua:f16[4800] bub:f16[4800,1600]
        buc:f16[1600] bud:f16[1600] bue:f16[1600] buf:f16[1600,6400] bug:f16[6400]
        buh:f16[6400,1600] bui:f16[1600] buj:f16[1600] buk:f16[1600] bul:f16[1600,1600]
        bum:f16[4800] bun:f16[4800,1600] buo:f16[1600] bup:f16[1600] buq:f16[1600]
        bur:f16[1600,6400] bus:f16[6400] but:f16[6400,1600] buu:f16[1600] buv:f16[1600]
        buw:f16[1600] bux:f16[1600,1600] buy:f16[4800] buz:f16[4800,1600] bva:f16[1600]
        bvb:f16[1600] bvc:f16[1600] bvd:f16[1600,6400] bve:f16[6400] bvf:f16[6400,1600]
        bvg:f16[1600] bvh:f16[1600] bvi:f16[1600] bvj:f16[1600,1600] bvk:f16[4800]
        bvl:f16[4800,1600] bvm:f16[1600] bvn:f16[1600] bvo:f16[1600] bvp:f16[1600,6400]
        bvq:f16[6400] bvr:f16[6400,1600] bvs:f16[1600] bvt:f16[1600] = named_call[
        call_jaxpr={ lambda ; bvu:f16[64,256,1600] bvv:f16[1600] bvw:f16[1600,1600]
            bvx:f16[4800] bvy:f16[4800,1600] bvz:f16[1600] bwa:f16[1600] bwb:f16[1600]
            bwc:f16[1600,6400] bwd:f16[6400] bwe:f16[6400,1600] bwf:f16[1600] bwg:f16[1600]
            bwh:f16[1600] bwi:f16[1600,1600] bwj:f16[4800] bwk:f16[4800,1600] bwl:f16[1600]
            bwm:f16[1600] bwn:f16[1600] bwo:f16[1600,6400] bwp:f16[6400] bwq:f16[6400,1600]
            bwr:f16[1600] bws:f16[1600] bwt:f16[1600] bwu:f16[1600,1600] bwv:f16[4800]
            bww:f16[4800,1600] bwx:f16[1600] bwy:f16[1600] bwz:f16[1600] bxa:f16[1600,6400]
            bxb:f16[6400] bxc:f16[6400,1600] bxd:f16[1600] bxe:f16[1600] bxf:f16[1600]
            bxg:f16[1600,1600] bxh:f16[4800] bxi:f16[4800,1600] bxj:f16[1600] bxk:f16[1600]
            bxl:f16[1600] bxm:f16[1600,6400] bxn:f16[6400] bxo:f16[6400,1600] bxp:f16[1600]
            bxq:f16[1600] bxr:f16[64,256,1600] bxs:f16[1600,1600] bxt:f16[64,256,25,64]
            bxu:f16[64,25,256,1] bxv:f16[64,25,256,256] bxw:f16[64,25,256,1] bxx:f16[64,256,25,64]
            bxy:f16[64,256,25,64] bxz:f16[] bya:f16[64,25,256,256] byb:f16[64,256,1600]
            byc:f16[1600,4800] byd:f32[64,256,1600] bye:f32[64,256,1] byf:f32[1,1,1600]
            byg:f32[64,256,1] byh:f32[64,256] byi:f32[64,256] byj:f32[64,256,1600]
            byk:f32[64,256,1600] byl:f16[64,256,6400] bym:f16[6400,1600] byn:f16[64,256,6400]
            byo:f16[64,256,6400] byp:f16[64,256,6400] byq:f16[64,256,6400] byr:f16[64,256,6400]
            bys:f16[64,256,1600] byt:f16[1600,6400] byu:f32[64,256,1600] byv:f32[64,256,1]
            byw:f32[1,1,1600] byx:f32[64,256,1] byy:f32[64,256] byz:f32[64,256] bza:f32[64,256,1600]
            bzb:f32[64,256,1600] bzc:f16[64,256,1600] bzd:f16[1600,1600] bze:f16[64,256,25,64]
            bzf:f16[64,25,256,1] bzg:f16[64,25,256,256] bzh:f16[64,25,256,1] bzi:f16[64,256,25,64]
            bzj:f16[64,256,25,64] bzk:f16[] bzl:f16[64,25,256,256] bzm:f16[64,256,1600]
            bzn:f16[1600,4800] bzo:f32[64,256,1600] bzp:f32[64,256,1] bzq:f32[1,1,1600]
            bzr:f32[64,256,1] bzs:f32[64,256] bzt:f32[64,256] bzu:f32[64,256,1600]
            bzv:f32[64,256,1600] bzw:f16[64,256,6400] bzx:f16[6400,1600] bzy:f16[64,256,6400]
            bzz:f16[64,256,6400] caa:f16[64,256,6400] cab:f16[64,256,6400] cac:f16[64,256,6400]
            cad:f16[64,256,1600] cae:f16[1600,6400] caf:f32[64,256,1600] cag:f32[64,256,1]
            cah:f32[1,1,1600] cai:f32[64,256,1] caj:f32[64,256] cak:f32[64,256] cal:f32[64,256,1600]
            cam:f32[64,256,1600] can:f16[64,256,1600] cao:f16[1600,1600] cap:f16[64,256,25,64]
            caq:f16[64,25,256,1] car:f16[64,25,256,256] cas:f16[64,25,256,1] cat:f16[64,256,25,64]
            cau:f16[64,256,25,64] cav:f16[] caw:f16[64,25,256,256] cax:f16[64,256,1600]
            cay:f16[1600,4800] caz:f32[64,256,1600] cba:f32[64,256,1] cbb:f32[1,1,1600]
            cbc:f32[64,256,1] cbd:f32[64,256] cbe:f32[64,256] cbf:f32[64,256,1600]
            cbg:f32[64,256,1600] cbh:f16[64,256,6400] cbi:f16[6400,1600] cbj:f16[64,256,6400]
            cbk:f16[64,256,6400] cbl:f16[64,256,6400] cbm:f16[64,256,6400] cbn:f16[64,256,6400]
            cbo:f16[64,256,1600] cbp:f16[1600,6400] cbq:f32[64,256,1600] cbr:f32[64,256,1]
            cbs:f32[1,1,1600] cbt:f32[64,256,1] cbu:f32[64,256] cbv:f32[64,256] cbw:f32[64,256,1600]
            cbx:f32[64,256,1600] cby:f16[64,256,1600] cbz:f16[1600,1600] cca:f16[64,256,25,64]
            ccb:f16[64,25,256,1] ccc:f16[64,25,256,256] ccd:f16[64,25,256,1] cce:f16[64,256,25,64]
            ccf:f16[64,256,25,64] ccg:f16[] cch:f16[64,25,256,256] cci:f16[64,256,1600]
            ccj:f16[1600,4800] cck:f32[64,256,1600] ccl:f32[64,256,1] ccm:f32[1,1,1600]
            ccn:f32[64,256,1] cco:f32[64,256] ccp:f32[64,256] ccq:f32[64,256,1600]
            ccr:f32[64,256,1600] ccs:f16[64,256,6400] cct:f16[6400,1600] ccu:f16[64,256,6400]
            ccv:f16[64,256,6400] ccw:f16[64,256,6400] ccx:f16[64,256,6400] ccy:f16[64,256,6400]
            ccz:f16[64,256,1600] cda:f16[1600,6400] cdb:f32[64,256,1600] cdc:f32[64,256,1]
            cdd:f32[1,1,1600] cde:f32[64,256,1] cdf:f32[64,256] cdg:f32[64,256] cdh:f32[64,256,1600]
            cdi:f32[64,256,1600]. let
            cdj:f16[1600] = reduce_sum[axes=(0, 1)] bvu
            cdk:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] cdj
            cdl:f16[1600] = reduce_sum[axes=(0, 1)] cdk
            cdm:f16[1600,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] bvu bxr
            cdn:f16[1600,1600] = transpose[permutation=(1, 0)] cdm
            cdo:f16[1600,1600] = transpose[permutation=(1, 0)] cdn
            cdp:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] bvu bxs
            cdq:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] cdp
            cdr:f16[64,25,64,256] = transpose[permutation=(0, 2, 3, 1)] cdq
            cds:f16[64,25,256,256] = dot_general[
              dimension_numbers=(((2,), (3,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] cdr bxt
            cdt:f16[64,25,256,256] = mul cds bxu
            cdu:f16[64,25,256,256] = mul cdt bxv
            cdv:f16[64,25,256] = reduce_sum[axes=(3,)] cdu
            cdw:f16[64,25,256,1] = reshape[
              dimensions=None
              new_sizes=(64, 25, 256, 1)
            ] cdv
            cdx:f16[64,25,256,1] = neg cdw
            cdy:f32[64,25,256,1] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] cdx
            cdz:f32[64,25,256] = reduce_sum[axes=(3,)] cdy
            cea:f32[64,25,256,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 256)
            ] cdz
            ceb:f16[64,25,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] cea
            cec:f16[64,25,256,256] = div cds bxw
            ced:f16[64,25,256,256] = add_any ceb cec
            cee:f16[64,25,256,256] = mul ced bxv
            cef:f16[64,25,256,64] = dot_general[
              dimension_numbers=(((2,), (1,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] cee bxx
            ceg:f16[64,256,25,64] = transpose[permutation=(0, 2, 1, 3)] cef
            ceh:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] ceg
            cei:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (1600, 1600, 0))
            ] ceh 0.0
            cej:f16[64,25,256,64] = dot_general[
              dimension_numbers=(((3,), (1,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] cee bxy
            cek:f16[64,256,25,64] = transpose[permutation=(0, 2, 1, 3)] cej
            cel:f16[64,256,25,64] = div cek bxz
            cem:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] cel
            cen:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (0, 3200, 0))
            ] cem 0.0
            ceo:f16[64,256,4800] = add_any cei cen
            cep:f16[64,25,64,256] = dot_general[
              dimension_numbers=(((3,), (2,)), ((0, 1), (0, 1)))
              precision=None
              preferred_element_type=None
            ] cdr bya
            ceq:f16[64,256,25,64] = transpose[permutation=(0, 3, 1, 2)] cep
            cer:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] ceq
            ces:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (3200, 0, 0))
            ] cer 0.0
            cet:f16[64,256,4800] = add_any ceo ces
            ceu:f16[4800] = reduce_sum[axes=(0, 1)] cet
            cev:f16[1,1,4800] = reshape[dimensions=None new_sizes=(1, 1, 4800)] ceu
            cew:f16[4800] = reduce_sum[axes=(0, 1)] cev
            cex:f16[4800,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] cet byb
            cey:f16[1600,4800] = transpose[permutation=(1, 0)] cex
            cez:f16[4800,1600] = transpose[permutation=(1, 0)] cey
            cfa:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] cet byc
            cfb:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] cfa
            cfc:f32[1600] = reduce_sum[axes=(0, 1)] cfb
            cfd:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] cfc
            cfe:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] cfd
            cff:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] cfe
            cfg:f32[64,256,1600] = mul byd cfb
            cfh:f32[64,256,1600] = mul bye cfg
            cfi:f32[1600] = reduce_sum[axes=(0, 1)] cfh
            cfj:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] cfi
            cfk:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] cfj
            cfl:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] cfk
            cfm:f32[64,256,1600] = mul cfg byf
            cfn:f32[64,256] = reduce_sum[axes=(2,)] cfm
            cfo:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] cfn
            cfp:f32[64,256,1] = mul cfo byg
            cfq:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] cfp
            cfr:f32[64,256] = mul cfq byh
            cfs:f32[64,256] = neg cfr
            cft:f32[64,256] = mul cfs byi
            cfu:f32[64,256] = div cfr 1600.0
            cfv:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] cfu
            cfw:f32[64,256,1600] = mul cfv byj
            cfx:f32[64,256,1600] = mul cfb byk
            cfy:f32[64,256,1600] = neg cfx
            cfz:f32[64,256] = reduce_sum[axes=(2,)] cfy
            cga:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] cfz
            cgb:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] cga
            cgc:f32[64,256] = add_any cft cgb
            cgd:f32[64,256] = div cgc 1600.0
            cge:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] cgd
            cgf:f32[64,256,1600] = add_any cfw cge
            cgg:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] cgf
            cgh:f16[64,256,1600] = add_any bvu cgg
            cgi:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] cfx
            cgj:f16[64,256,1600] = add_any cgh cgi
            cgk:f16[1600] = reduce_sum[axes=(0, 1)] cgj
            cgl:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] cgk
            cgm:f16[1600] = reduce_sum[axes=(0, 1)] cgl
            cgn:f16[1600,6400] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] cgj byl
            cgo:f16[6400,1600] = transpose[permutation=(1, 0)] cgn
            cgp:f16[1600,6400] = transpose[permutation=(1, 0)] cgo
            cgq:f16[64,256,6400] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] cgj bym
            cgr:f16[64,256,6400] = mul byn cgq
            cgs:f16[64,256,6400] = mul 0.5 cgr
            cgt:f16[64,256,6400] = mul cgs byo
            cgu:f16[64,256,6400] = mul cgt byp
            cgv:f16[64,256,6400] = add_any cgt cgu
            cgw:f16[64,256,6400] = mul 0.7978515625 cgv
            cgx:f16[64,256,6400] = mul 0.044708251953125 cgw
            cgy:f16[64,256,6400] = mul cgx byq
            cgz:f16[64,256,6400] = add_any cgw cgy
            cha:f16[64,256,6400] = mul cgq byr
            chb:f16[64,256,6400] = add_any cgz cha
            chc:f16[6400] = reduce_sum[axes=(0, 1)] chb
            chd:f16[1,1,6400] = reshape[dimensions=None new_sizes=(1, 1, 6400)] chc
            che:f16[6400] = reduce_sum[axes=(0, 1)] chd
            chf:f16[6400,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] chb bys
            chg:f16[1600,6400] = transpose[permutation=(1, 0)] chf
            chh:f16[6400,1600] = transpose[permutation=(1, 0)] chg
            chi:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] chb byt
            chj:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] chi
            chk:f32[1600] = reduce_sum[axes=(0, 1)] chj
            chl:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] chk
            chm:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] chl
            chn:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] chm
            cho:f32[64,256,1600] = mul byu chj
            chp:f32[64,256,1600] = mul byv cho
            chq:f32[1600] = reduce_sum[axes=(0, 1)] chp
            chr:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] chq
            chs:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] chr
            cht:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] chs
            chu:f32[64,256,1600] = mul cho byw
            chv:f32[64,256] = reduce_sum[axes=(2,)] chu
            chw:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] chv
            chx:f32[64,256,1] = mul chw byx
            chy:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] chx
            chz:f32[64,256] = mul chy byy
            cia:f32[64,256] = neg chz
            cib:f32[64,256] = mul cia byz
            cic:f32[64,256] = div chz 1600.0
            cid:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] cic
            cie:f32[64,256,1600] = mul cid bza
            cif:f32[64,256,1600] = mul chj bzb
            cig:f32[64,256,1600] = neg cif
            cih:f32[64,256] = reduce_sum[axes=(2,)] cig
            cii:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] cih
            cij:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] cii
            cik:f32[64,256] = add_any cib cij
            cil:f32[64,256] = div cik 1600.0
            cim:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] cil
            cin:f32[64,256,1600] = add_any cie cim
            cio:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] cin
            cip:f16[64,256,1600] = add_any cgj cio
            ciq:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] cif
            cir:f16[64,256,1600] = add_any cip ciq
            cis:f16[1600] = reduce_sum[axes=(0, 1)] cir
            cit:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] cis
            ciu:f16[1600] = reduce_sum[axes=(0, 1)] cit
            civ:f16[1600,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] cir bzc
            ciw:f16[1600,1600] = transpose[permutation=(1, 0)] civ
            cix:f16[1600,1600] = transpose[permutation=(1, 0)] ciw
            ciy:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] cir bzd
            ciz:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] ciy
            cja:f16[64,25,64,256] = transpose[permutation=(0, 2, 3, 1)] ciz
            cjb:f16[64,25,256,256] = dot_general[
              dimension_numbers=(((2,), (3,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] cja bze
            cjc:f16[64,25,256,256] = mul cjb bzf
            cjd:f16[64,25,256,256] = mul cjc bzg
            cje:f16[64,25,256] = reduce_sum[axes=(3,)] cjd
            cjf:f16[64,25,256,1] = reshape[
              dimensions=None
              new_sizes=(64, 25, 256, 1)
            ] cje
            cjg:f16[64,25,256,1] = neg cjf
            cjh:f32[64,25,256,1] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] cjg
            cji:f32[64,25,256] = reduce_sum[axes=(3,)] cjh
            cjj:f32[64,25,256,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 256)
            ] cji
            cjk:f16[64,25,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] cjj
            cjl:f16[64,25,256,256] = div cjb bzh
            cjm:f16[64,25,256,256] = add_any cjk cjl
            cjn:f16[64,25,256,256] = mul cjm bzg
            cjo:f16[64,25,256,64] = dot_general[
              dimension_numbers=(((2,), (1,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] cjn bzi
            cjp:f16[64,256,25,64] = transpose[permutation=(0, 2, 1, 3)] cjo
            cjq:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] cjp
            cjr:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (1600, 1600, 0))
            ] cjq 0.0
            cjs:f16[64,25,256,64] = dot_general[
              dimension_numbers=(((3,), (1,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] cjn bzj
            cjt:f16[64,256,25,64] = transpose[permutation=(0, 2, 1, 3)] cjs
            cju:f16[64,256,25,64] = div cjt bzk
            cjv:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] cju
            cjw:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (0, 3200, 0))
            ] cjv 0.0
            cjx:f16[64,256,4800] = add_any cjr cjw
            cjy:f16[64,25,64,256] = dot_general[
              dimension_numbers=(((3,), (2,)), ((0, 1), (0, 1)))
              precision=None
              preferred_element_type=None
            ] cja bzl
            cjz:f16[64,256,25,64] = transpose[permutation=(0, 3, 1, 2)] cjy
            cka:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] cjz
            ckb:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (3200, 0, 0))
            ] cka 0.0
            ckc:f16[64,256,4800] = add_any cjx ckb
            ckd:f16[4800] = reduce_sum[axes=(0, 1)] ckc
            cke:f16[1,1,4800] = reshape[dimensions=None new_sizes=(1, 1, 4800)] ckd
            ckf:f16[4800] = reduce_sum[axes=(0, 1)] cke
            ckg:f16[4800,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] ckc bzm
            ckh:f16[1600,4800] = transpose[permutation=(1, 0)] ckg
            cki:f16[4800,1600] = transpose[permutation=(1, 0)] ckh
            ckj:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] ckc bzn
            ckk:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] ckj
            ckl:f32[1600] = reduce_sum[axes=(0, 1)] ckk
            ckm:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] ckl
            ckn:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] ckm
            cko:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] ckn
            ckp:f32[64,256,1600] = mul bzo ckk
            ckq:f32[64,256,1600] = mul bzp ckp
            ckr:f32[1600] = reduce_sum[axes=(0, 1)] ckq
            cks:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] ckr
            ckt:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] cks
            cku:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] ckt
            ckv:f32[64,256,1600] = mul ckp bzq
            ckw:f32[64,256] = reduce_sum[axes=(2,)] ckv
            ckx:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] ckw
            cky:f32[64,256,1] = mul ckx bzr
            ckz:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] cky
            cla:f32[64,256] = mul ckz bzs
            clb:f32[64,256] = neg cla
            clc:f32[64,256] = mul clb bzt
            cld:f32[64,256] = div cla 1600.0
            cle:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] cld
            clf:f32[64,256,1600] = mul cle bzu
            clg:f32[64,256,1600] = mul ckk bzv
            clh:f32[64,256,1600] = neg clg
            cli:f32[64,256] = reduce_sum[axes=(2,)] clh
            clj:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] cli
            clk:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] clj
            cll:f32[64,256] = add_any clc clk
            clm:f32[64,256] = div cll 1600.0
            cln:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] clm
            clo:f32[64,256,1600] = add_any clf cln
            clp:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] clo
            clq:f16[64,256,1600] = add_any cir clp
            clr:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] clg
            cls:f16[64,256,1600] = add_any clq clr
            clt:f16[1600] = reduce_sum[axes=(0, 1)] cls
            clu:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] clt
            clv:f16[1600] = reduce_sum[axes=(0, 1)] clu
            clw:f16[1600,6400] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] cls bzw
            clx:f16[6400,1600] = transpose[permutation=(1, 0)] clw
            cly:f16[1600,6400] = transpose[permutation=(1, 0)] clx
            clz:f16[64,256,6400] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] cls bzx
            cma:f16[64,256,6400] = mul bzy clz
            cmb:f16[64,256,6400] = mul 0.5 cma
            cmc:f16[64,256,6400] = mul cmb bzz
            cmd:f16[64,256,6400] = mul cmc caa
            cme:f16[64,256,6400] = add_any cmc cmd
            cmf:f16[64,256,6400] = mul 0.7978515625 cme
            cmg:f16[64,256,6400] = mul 0.044708251953125 cmf
            cmh:f16[64,256,6400] = mul cmg cab
            cmi:f16[64,256,6400] = add_any cmf cmh
            cmj:f16[64,256,6400] = mul clz cac
            cmk:f16[64,256,6400] = add_any cmi cmj
            cml:f16[6400] = reduce_sum[axes=(0, 1)] cmk
            cmm:f16[1,1,6400] = reshape[dimensions=None new_sizes=(1, 1, 6400)] cml
            cmn:f16[6400] = reduce_sum[axes=(0, 1)] cmm
            cmo:f16[6400,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] cmk cad
            cmp:f16[1600,6400] = transpose[permutation=(1, 0)] cmo
            cmq:f16[6400,1600] = transpose[permutation=(1, 0)] cmp
            cmr:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] cmk cae
            cms:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] cmr
            cmt:f32[1600] = reduce_sum[axes=(0, 1)] cms
            cmu:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] cmt
            cmv:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] cmu
            cmw:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] cmv
            cmx:f32[64,256,1600] = mul caf cms
            cmy:f32[64,256,1600] = mul cag cmx
            cmz:f32[1600] = reduce_sum[axes=(0, 1)] cmy
            cna:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] cmz
            cnb:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] cna
            cnc:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] cnb
            cnd:f32[64,256,1600] = mul cmx cah
            cne:f32[64,256] = reduce_sum[axes=(2,)] cnd
            cnf:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] cne
            cng:f32[64,256,1] = mul cnf cai
            cnh:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] cng
            cni:f32[64,256] = mul cnh caj
            cnj:f32[64,256] = neg cni
            cnk:f32[64,256] = mul cnj cak
            cnl:f32[64,256] = div cni 1600.0
            cnm:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] cnl
            cnn:f32[64,256,1600] = mul cnm cal
            cno:f32[64,256,1600] = mul cms cam
            cnp:f32[64,256,1600] = neg cno
            cnq:f32[64,256] = reduce_sum[axes=(2,)] cnp
            cnr:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] cnq
            cns:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] cnr
            cnt:f32[64,256] = add_any cnk cns
            cnu:f32[64,256] = div cnt 1600.0
            cnv:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] cnu
            cnw:f32[64,256,1600] = add_any cnn cnv
            cnx:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] cnw
            cny:f16[64,256,1600] = add_any cls cnx
            cnz:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] cno
            coa:f16[64,256,1600] = add_any cny cnz
            cob:f16[1600] = reduce_sum[axes=(0, 1)] coa
            coc:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] cob
            cod:f16[1600] = reduce_sum[axes=(0, 1)] coc
            coe:f16[1600,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] coa can
            cof:f16[1600,1600] = transpose[permutation=(1, 0)] coe
            cog:f16[1600,1600] = transpose[permutation=(1, 0)] cof
            coh:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] coa cao
            coi:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] coh
            coj:f16[64,25,64,256] = transpose[permutation=(0, 2, 3, 1)] coi
            cok:f16[64,25,256,256] = dot_general[
              dimension_numbers=(((2,), (3,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] coj cap
            col:f16[64,25,256,256] = mul cok caq
            com:f16[64,25,256,256] = mul col car
            con:f16[64,25,256] = reduce_sum[axes=(3,)] com
            coo:f16[64,25,256,1] = reshape[
              dimensions=None
              new_sizes=(64, 25, 256, 1)
            ] con
            cop:f16[64,25,256,1] = neg coo
            coq:f32[64,25,256,1] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] cop
            cor:f32[64,25,256] = reduce_sum[axes=(3,)] coq
            cos:f32[64,25,256,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 256)
            ] cor
            cot:f16[64,25,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] cos
            cou:f16[64,25,256,256] = div cok cas
            cov:f16[64,25,256,256] = add_any cot cou
            cow:f16[64,25,256,256] = mul cov car
            cox:f16[64,25,256,64] = dot_general[
              dimension_numbers=(((2,), (1,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] cow cat
            coy:f16[64,256,25,64] = transpose[permutation=(0, 2, 1, 3)] cox
            coz:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] coy
            cpa:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (1600, 1600, 0))
            ] coz 0.0
            cpb:f16[64,25,256,64] = dot_general[
              dimension_numbers=(((3,), (1,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] cow cau
            cpc:f16[64,256,25,64] = transpose[permutation=(0, 2, 1, 3)] cpb
            cpd:f16[64,256,25,64] = div cpc cav
            cpe:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] cpd
            cpf:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (0, 3200, 0))
            ] cpe 0.0
            cpg:f16[64,256,4800] = add_any cpa cpf
            cph:f16[64,25,64,256] = dot_general[
              dimension_numbers=(((3,), (2,)), ((0, 1), (0, 1)))
              precision=None
              preferred_element_type=None
            ] coj caw
            cpi:f16[64,256,25,64] = transpose[permutation=(0, 3, 1, 2)] cph
            cpj:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] cpi
            cpk:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (3200, 0, 0))
            ] cpj 0.0
            cpl:f16[64,256,4800] = add_any cpg cpk
            cpm:f16[4800] = reduce_sum[axes=(0, 1)] cpl
            cpn:f16[1,1,4800] = reshape[dimensions=None new_sizes=(1, 1, 4800)] cpm
            cpo:f16[4800] = reduce_sum[axes=(0, 1)] cpn
            cpp:f16[4800,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] cpl cax
            cpq:f16[1600,4800] = transpose[permutation=(1, 0)] cpp
            cpr:f16[4800,1600] = transpose[permutation=(1, 0)] cpq
            cps:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] cpl cay
            cpt:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] cps
            cpu:f32[1600] = reduce_sum[axes=(0, 1)] cpt
            cpv:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] cpu
            cpw:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] cpv
            cpx:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] cpw
            cpy:f32[64,256,1600] = mul caz cpt
            cpz:f32[64,256,1600] = mul cba cpy
            cqa:f32[1600] = reduce_sum[axes=(0, 1)] cpz
            cqb:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] cqa
            cqc:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] cqb
            cqd:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] cqc
            cqe:f32[64,256,1600] = mul cpy cbb
            cqf:f32[64,256] = reduce_sum[axes=(2,)] cqe
            cqg:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] cqf
            cqh:f32[64,256,1] = mul cqg cbc
            cqi:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] cqh
            cqj:f32[64,256] = mul cqi cbd
            cqk:f32[64,256] = neg cqj
            cql:f32[64,256] = mul cqk cbe
            cqm:f32[64,256] = div cqj 1600.0
            cqn:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] cqm
            cqo:f32[64,256,1600] = mul cqn cbf
            cqp:f32[64,256,1600] = mul cpt cbg
            cqq:f32[64,256,1600] = neg cqp
            cqr:f32[64,256] = reduce_sum[axes=(2,)] cqq
            cqs:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] cqr
            cqt:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] cqs
            cqu:f32[64,256] = add_any cql cqt
            cqv:f32[64,256] = div cqu 1600.0
            cqw:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] cqv
            cqx:f32[64,256,1600] = add_any cqo cqw
            cqy:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] cqx
            cqz:f16[64,256,1600] = add_any coa cqy
            cra:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] cqp
            crb:f16[64,256,1600] = add_any cqz cra
            crc:f16[1600] = reduce_sum[axes=(0, 1)] crb
            crd:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] crc
            cre:f16[1600] = reduce_sum[axes=(0, 1)] crd
            crf:f16[1600,6400] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] crb cbh
            crg:f16[6400,1600] = transpose[permutation=(1, 0)] crf
            crh:f16[1600,6400] = transpose[permutation=(1, 0)] crg
            cri:f16[64,256,6400] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] crb cbi
            crj:f16[64,256,6400] = mul cbj cri
            crk:f16[64,256,6400] = mul 0.5 crj
            crl:f16[64,256,6400] = mul crk cbk
            crm:f16[64,256,6400] = mul crl cbl
            crn:f16[64,256,6400] = add_any crl crm
            cro:f16[64,256,6400] = mul 0.7978515625 crn
            crp:f16[64,256,6400] = mul 0.044708251953125 cro
            crq:f16[64,256,6400] = mul crp cbm
            crr:f16[64,256,6400] = add_any cro crq
            crs:f16[64,256,6400] = mul cri cbn
            crt:f16[64,256,6400] = add_any crr crs
            cru:f16[6400] = reduce_sum[axes=(0, 1)] crt
            crv:f16[1,1,6400] = reshape[dimensions=None new_sizes=(1, 1, 6400)] cru
            crw:f16[6400] = reduce_sum[axes=(0, 1)] crv
            crx:f16[6400,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] crt cbo
            cry:f16[1600,6400] = transpose[permutation=(1, 0)] crx
            crz:f16[6400,1600] = transpose[permutation=(1, 0)] cry
            csa:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] crt cbp
            csb:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] csa
            csc:f32[1600] = reduce_sum[axes=(0, 1)] csb
            csd:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] csc
            cse:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] csd
            csf:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] cse
            csg:f32[64,256,1600] = mul cbq csb
            csh:f32[64,256,1600] = mul cbr csg
            csi:f32[1600] = reduce_sum[axes=(0, 1)] csh
            csj:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] csi
            csk:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] csj
            csl:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] csk
            csm:f32[64,256,1600] = mul csg cbs
            csn:f32[64,256] = reduce_sum[axes=(2,)] csm
            cso:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] csn
            csp:f32[64,256,1] = mul cso cbt
            csq:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] csp
            csr:f32[64,256] = mul csq cbu
            css:f32[64,256] = neg csr
            cst:f32[64,256] = mul css cbv
            csu:f32[64,256] = div csr 1600.0
            csv:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] csu
            csw:f32[64,256,1600] = mul csv cbw
            csx:f32[64,256,1600] = mul csb cbx
            csy:f32[64,256,1600] = neg csx
            csz:f32[64,256] = reduce_sum[axes=(2,)] csy
            cta:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] csz
            ctb:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] cta
            ctc:f32[64,256] = add_any cst ctb
            ctd:f32[64,256] = div ctc 1600.0
            cte:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] ctd
            ctf:f32[64,256,1600] = add_any csw cte
            ctg:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] ctf
            cth:f16[64,256,1600] = add_any crb ctg
            cti:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] csx
            ctj:f16[64,256,1600] = add_any cth cti
            ctk:f16[1600] = reduce_sum[axes=(0, 1)] ctj
            ctl:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] ctk
            ctm:f16[1600] = reduce_sum[axes=(0, 1)] ctl
            ctn:f16[1600,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] ctj cby
            cto:f16[1600,1600] = transpose[permutation=(1, 0)] ctn
            ctp:f16[1600,1600] = transpose[permutation=(1, 0)] cto
            ctq:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] ctj cbz
            ctr:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] ctq
            cts:f16[64,25,64,256] = transpose[permutation=(0, 2, 3, 1)] ctr
            ctt:f16[64,25,256,256] = dot_general[
              dimension_numbers=(((2,), (3,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] cts cca
            ctu:f16[64,25,256,256] = mul ctt ccb
            ctv:f16[64,25,256,256] = mul ctu ccc
            ctw:f16[64,25,256] = reduce_sum[axes=(3,)] ctv
            ctx:f16[64,25,256,1] = reshape[
              dimensions=None
              new_sizes=(64, 25, 256, 1)
            ] ctw
            cty:f16[64,25,256,1] = neg ctx
            ctz:f32[64,25,256,1] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] cty
            cua:f32[64,25,256] = reduce_sum[axes=(3,)] ctz
            cub:f32[64,25,256,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 256)
            ] cua
            cuc:f16[64,25,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] cub
            cud:f16[64,25,256,256] = div ctt ccd
            cue:f16[64,25,256,256] = add_any cuc cud
            cuf:f16[64,25,256,256] = mul cue ccc
            cug:f16[64,25,256,64] = dot_general[
              dimension_numbers=(((2,), (1,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] cuf cce
            cuh:f16[64,256,25,64] = transpose[permutation=(0, 2, 1, 3)] cug
            cui:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] cuh
            cuj:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (1600, 1600, 0))
            ] cui 0.0
            cuk:f16[64,25,256,64] = dot_general[
              dimension_numbers=(((3,), (1,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] cuf ccf
            cul:f16[64,256,25,64] = transpose[permutation=(0, 2, 1, 3)] cuk
            cum:f16[64,256,25,64] = div cul ccg
            cun:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] cum
            cuo:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (0, 3200, 0))
            ] cun 0.0
            cup:f16[64,256,4800] = add_any cuj cuo
            cuq:f16[64,25,64,256] = dot_general[
              dimension_numbers=(((3,), (2,)), ((0, 1), (0, 1)))
              precision=None
              preferred_element_type=None
            ] cts cch
            cur:f16[64,256,25,64] = transpose[permutation=(0, 3, 1, 2)] cuq
            cus:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] cur
            cut:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (3200, 0, 0))
            ] cus 0.0
            cuu:f16[64,256,4800] = add_any cup cut
            cuv:f16[4800] = reduce_sum[axes=(0, 1)] cuu
            cuw:f16[1,1,4800] = reshape[dimensions=None new_sizes=(1, 1, 4800)] cuv
            cux:f16[4800] = reduce_sum[axes=(0, 1)] cuw
            cuy:f16[4800,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] cuu cci
            cuz:f16[1600,4800] = transpose[permutation=(1, 0)] cuy
            cva:f16[4800,1600] = transpose[permutation=(1, 0)] cuz
            cvb:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] cuu ccj
            cvc:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] cvb
            cvd:f32[1600] = reduce_sum[axes=(0, 1)] cvc
            cve:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] cvd
            cvf:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] cve
            cvg:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] cvf
            cvh:f32[64,256,1600] = mul cck cvc
            cvi:f32[64,256,1600] = mul ccl cvh
            cvj:f32[1600] = reduce_sum[axes=(0, 1)] cvi
            cvk:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] cvj
            cvl:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] cvk
            cvm:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] cvl
            cvn:f32[64,256,1600] = mul cvh ccm
            cvo:f32[64,256] = reduce_sum[axes=(2,)] cvn
            cvp:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] cvo
            cvq:f32[64,256,1] = mul cvp ccn
            cvr:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] cvq
            cvs:f32[64,256] = mul cvr cco
            cvt:f32[64,256] = neg cvs
            cvu:f32[64,256] = mul cvt ccp
            cvv:f32[64,256] = div cvs 1600.0
            cvw:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] cvv
            cvx:f32[64,256,1600] = mul cvw ccq
            cvy:f32[64,256,1600] = mul cvc ccr
            cvz:f32[64,256,1600] = neg cvy
            cwa:f32[64,256] = reduce_sum[axes=(2,)] cvz
            cwb:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] cwa
            cwc:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] cwb
            cwd:f32[64,256] = add_any cvu cwc
            cwe:f32[64,256] = div cwd 1600.0
            cwf:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] cwe
            cwg:f32[64,256,1600] = add_any cvx cwf
            cwh:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] cwg
            cwi:f16[64,256,1600] = add_any ctj cwh
            cwj:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] cvy
            cwk:f16[64,256,1600] = add_any cwi cwj
            cwl:f16[1600] = reduce_sum[axes=(0, 1)] cwk
            cwm:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] cwl
            cwn:f16[1600] = reduce_sum[axes=(0, 1)] cwm
            cwo:f16[1600,6400] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] cwk ccs
            cwp:f16[6400,1600] = transpose[permutation=(1, 0)] cwo
            cwq:f16[1600,6400] = transpose[permutation=(1, 0)] cwp
            cwr:f16[64,256,6400] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] cwk cct
            cws:f16[64,256,6400] = mul ccu cwr
            cwt:f16[64,256,6400] = mul 0.5 cws
            cwu:f16[64,256,6400] = mul cwt ccv
            cwv:f16[64,256,6400] = mul cwu ccw
            cww:f16[64,256,6400] = add_any cwu cwv
            cwx:f16[64,256,6400] = mul 0.7978515625 cww
            cwy:f16[64,256,6400] = mul 0.044708251953125 cwx
            cwz:f16[64,256,6400] = mul cwy ccx
            cxa:f16[64,256,6400] = add_any cwx cwz
            cxb:f16[64,256,6400] = mul cwr ccy
            cxc:f16[64,256,6400] = add_any cxa cxb
            cxd:f16[6400] = reduce_sum[axes=(0, 1)] cxc
            cxe:f16[1,1,6400] = reshape[dimensions=None new_sizes=(1, 1, 6400)] cxd
            cxf:f16[6400] = reduce_sum[axes=(0, 1)] cxe
            cxg:f16[6400,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] cxc ccz
            cxh:f16[1600,6400] = transpose[permutation=(1, 0)] cxg
            cxi:f16[6400,1600] = transpose[permutation=(1, 0)] cxh
            cxj:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] cxc cda
            cxk:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] cxj
            cxl:f32[1600] = reduce_sum[axes=(0, 1)] cxk
            cxm:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] cxl
            cxn:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] cxm
            cxo:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] cxn
            cxp:f32[64,256,1600] = mul cdb cxk
            cxq:f32[64,256,1600] = mul cdc cxp
            cxr:f32[1600] = reduce_sum[axes=(0, 1)] cxq
            cxs:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] cxr
            cxt:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] cxs
            cxu:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] cxt
            cxv:f32[64,256,1600] = mul cxp cdd
            cxw:f32[64,256] = reduce_sum[axes=(2,)] cxv
            cxx:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] cxw
            cxy:f32[64,256,1] = mul cxx cde
            cxz:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] cxy
            cya:f32[64,256] = mul cxz cdf
            cyb:f32[64,256] = neg cya
            cyc:f32[64,256] = mul cyb cdg
            cyd:f32[64,256] = div cya 1600.0
            cye:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] cyd
            cyf:f32[64,256,1600] = mul cye cdh
            cyg:f32[64,256,1600] = mul cxk cdi
            cyh:f32[64,256,1600] = neg cyg
            cyi:f32[64,256] = reduce_sum[axes=(2,)] cyh
            cyj:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] cyi
            cyk:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] cyj
            cyl:f32[64,256] = add_any cyc cyk
            cym:f32[64,256] = div cyl 1600.0
            cyn:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] cym
            cyo:f32[64,256,1600] = add_any cyf cyn
            cyp:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] cyo
            cyq:f16[64,256,1600] = add_any cwk cyp
            cyr:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] cyg
            cys:f16[64,256,1600] = add_any cyq cyr
            cyt:f16[1600] = add bvv cdl
            cyu:f16[1600,1600] = add bvw cdo
            cyv:f16[4800] = add bvx cew
            cyw:f16[4800,1600] = add bvy cez
            cyx:f16[1600] = add bvz cff
            cyy:f16[1600] = add bwa cfl
            cyz:f16[1600] = add bwb cgm
            cza:f16[1600,6400] = add bwc cgp
            czb:f16[6400] = add bwd che
            czc:f16[6400,1600] = add bwe chh
            czd:f16[1600] = add bwf chn
            cze:f16[1600] = add bwg cht
            czf:f16[1600] = add bwh ciu
            czg:f16[1600,1600] = add bwi cix
            czh:f16[4800] = add bwj ckf
            czi:f16[4800,1600] = add bwk cki
            czj:f16[1600] = add bwl cko
            czk:f16[1600] = add bwm cku
            czl:f16[1600] = add bwn clv
            czm:f16[1600,6400] = add bwo cly
            czn:f16[6400] = add bwp cmn
            czo:f16[6400,1600] = add bwq cmq
            czp:f16[1600] = add bwr cmw
            czq:f16[1600] = add bws cnc
            czr:f16[1600] = add bwt cod
            czs:f16[1600,1600] = add bwu cog
            czt:f16[4800] = add bwv cpo
            czu:f16[4800,1600] = add bww cpr
            czv:f16[1600] = add bwx cpx
            czw:f16[1600] = add bwy cqd
            czx:f16[1600] = add bwz cre
            czy:f16[1600,6400] = add bxa crh
            czz:f16[6400] = add bxb crw
            daa:f16[6400,1600] = add bxc crz
            dab:f16[1600] = add bxd csf
            dac:f16[1600] = add bxe csl
            dad:f16[1600] = add bxf ctm
            dae:f16[1600,1600] = add bxg ctp
            daf:f16[4800] = add bxh cux
            dag:f16[4800,1600] = add bxi cva
            dah:f16[1600] = add bxj cvg
            dai:f16[1600] = add bxk cvm
            daj:f16[1600] = add bxl cwn
            dak:f16[1600,6400] = add bxm cwq
            dal:f16[6400] = add bxn cxf
            dam:f16[6400,1600] = add bxo cxi
            dan:f16[1600] = add bxp cxo
            dao:f16[1600] = add bxq cxu
          in (cys, cyt, cyu, cyv, cyw, cyx, cyy, cyz, cza, czb, czc, czd, cze, czf,
            czg, czh, czi, czj, czk, czl, czm, czn, czo, czp, czq, czr, czs, czt,
            czu, czv, czw, czx, czy, czz, daa, dab, dac, dad, dae, daf, dag, dah,
            dai, daj, dak, dal, dam, dan, dao) }
        name=60
      ] sb jb jc jd je jf jg jh ji jj jk jl jm jn jo jp jq jr js jt ju jv jw jx jy
        jz ka kb kc kd ke kf kg kh ki kj kk kl km kn ko kp kq kr ks kt ku kv kw sc
        sd se sf sg sh si sj sk sl sm sn so sp sq sr ss st su sv sw sx sy sz ta tb
        tc td te tf tg th ti tj tk tl tm tn to tp tq tr ts tt tu tv tw tx ty tz ua
        ub uc ud ue uf ug uh ui uj uk ul um un uo up uq ur us ut uu uv uw ux uy uz
        va vb vc vd ve vf vg vh vi vj vk vl vm vn vo vp vq vr vs vt vu vv vw vx vy
        vz wa wb wc wd we wf wg wh wi wj wk wl wm wn wo wp wq wr ws wt wu wv ww wx
        wy wz xa xb xc xd xe xf xg xh xi xj xk xl xm xn xo xp xq xr xs xt
      dap:f16[64,256,1600] daq:f16[1600] dar:f16[1600,1600] das:f16[4800] dat:f16[4800,1600]
        dau:f16[1600] dav:f16[1600] daw:f16[1600] dax:f16[1600,6400] day:f16[6400]
        daz:f16[6400,1600] dba:f16[1600] dbb:f16[1600] dbc:f16[1600] dbd:f16[1600,1600]
        dbe:f16[4800] dbf:f16[4800,1600] dbg:f16[1600] dbh:f16[1600] dbi:f16[1600]
        dbj:f16[1600,6400] dbk:f16[6400] dbl:f16[6400,1600] dbm:f16[1600] dbn:f16[1600]
        dbo:f16[1600] dbp:f16[1600,1600] dbq:f16[4800] dbr:f16[4800,1600] dbs:f16[1600]
        dbt:f16[1600] dbu:f16[1600] dbv:f16[1600,6400] dbw:f16[6400] dbx:f16[6400,1600]
        dby:f16[1600] dbz:f16[1600] dca:f16[1600] dcb:f16[1600,1600] dcc:f16[4800]
        dcd:f16[4800,1600] dce:f16[1600] dcf:f16[1600] dcg:f16[1600] dch:f16[1600,6400]
        dci:f16[6400] dcj:f16[6400,1600] dck:f16[1600] dcl:f16[1600] = named_call[
        call_jaxpr={ lambda ; dcm:f16[64,256,1600] dcn:f16[1600] dco:f16[1600,1600]
            dcp:f16[4800] dcq:f16[4800,1600] dcr:f16[1600] dcs:f16[1600] dct:f16[1600]
            dcu:f16[1600,6400] dcv:f16[6400] dcw:f16[6400,1600] dcx:f16[1600] dcy:f16[1600]
            dcz:f16[1600] dda:f16[1600,1600] ddb:f16[4800] ddc:f16[4800,1600] ddd:f16[1600]
            dde:f16[1600] ddf:f16[1600] ddg:f16[1600,6400] ddh:f16[6400] ddi:f16[6400,1600]
            ddj:f16[1600] ddk:f16[1600] ddl:f16[1600] ddm:f16[1600,1600] ddn:f16[4800]
            ddo:f16[4800,1600] ddp:f16[1600] ddq:f16[1600] ddr:f16[1600] dds:f16[1600,6400]
            ddt:f16[6400] ddu:f16[6400,1600] ddv:f16[1600] ddw:f16[1600] ddx:f16[1600]
            ddy:f16[1600,1600] ddz:f16[4800] dea:f16[4800,1600] deb:f16[1600] dec:f16[1600]
            ded:f16[1600] dee:f16[1600,6400] def:f16[6400] deg:f16[6400,1600] deh:f16[1600]
            dei:f16[1600] dej:f16[64,256,1600] dek:f16[1600,1600] del:f16[64,256,25,64]
            dem:f16[64,25,256,1] den:f16[64,25,256,256] deo:f16[64,25,256,1] dep:f16[64,256,25,64]
            deq:f16[64,256,25,64] der:f16[] des:f16[64,25,256,256] det:f16[64,256,1600]
            deu:f16[1600,4800] dev:f32[64,256,1600] dew:f32[64,256,1] dex:f32[1,1,1600]
            dey:f32[64,256,1] dez:f32[64,256] dfa:f32[64,256] dfb:f32[64,256,1600]
            dfc:f32[64,256,1600] dfd:f16[64,256,6400] dfe:f16[6400,1600] dff:f16[64,256,6400]
            dfg:f16[64,256,6400] dfh:f16[64,256,6400] dfi:f16[64,256,6400] dfj:f16[64,256,6400]
            dfk:f16[64,256,1600] dfl:f16[1600,6400] dfm:f32[64,256,1600] dfn:f32[64,256,1]
            dfo:f32[1,1,1600] dfp:f32[64,256,1] dfq:f32[64,256] dfr:f32[64,256] dfs:f32[64,256,1600]
            dft:f32[64,256,1600] dfu:f16[64,256,1600] dfv:f16[1600,1600] dfw:f16[64,256,25,64]
            dfx:f16[64,25,256,1] dfy:f16[64,25,256,256] dfz:f16[64,25,256,1] dga:f16[64,256,25,64]
            dgb:f16[64,256,25,64] dgc:f16[] dgd:f16[64,25,256,256] dge:f16[64,256,1600]
            dgf:f16[1600,4800] dgg:f32[64,256,1600] dgh:f32[64,256,1] dgi:f32[1,1,1600]
            dgj:f32[64,256,1] dgk:f32[64,256] dgl:f32[64,256] dgm:f32[64,256,1600]
            dgn:f32[64,256,1600] dgo:f16[64,256,6400] dgp:f16[6400,1600] dgq:f16[64,256,6400]
            dgr:f16[64,256,6400] dgs:f16[64,256,6400] dgt:f16[64,256,6400] dgu:f16[64,256,6400]
            dgv:f16[64,256,1600] dgw:f16[1600,6400] dgx:f32[64,256,1600] dgy:f32[64,256,1]
            dgz:f32[1,1,1600] dha:f32[64,256,1] dhb:f32[64,256] dhc:f32[64,256] dhd:f32[64,256,1600]
            dhe:f32[64,256,1600] dhf:f16[64,256,1600] dhg:f16[1600,1600] dhh:f16[64,256,25,64]
            dhi:f16[64,25,256,1] dhj:f16[64,25,256,256] dhk:f16[64,25,256,1] dhl:f16[64,256,25,64]
            dhm:f16[64,256,25,64] dhn:f16[] dho:f16[64,25,256,256] dhp:f16[64,256,1600]
            dhq:f16[1600,4800] dhr:f32[64,256,1600] dhs:f32[64,256,1] dht:f32[1,1,1600]
            dhu:f32[64,256,1] dhv:f32[64,256] dhw:f32[64,256] dhx:f32[64,256,1600]
            dhy:f32[64,256,1600] dhz:f16[64,256,6400] dia:f16[6400,1600] dib:f16[64,256,6400]
            dic:f16[64,256,6400] did:f16[64,256,6400] die:f16[64,256,6400] dif:f16[64,256,6400]
            dig:f16[64,256,1600] dih:f16[1600,6400] dii:f32[64,256,1600] dij:f32[64,256,1]
            dik:f32[1,1,1600] dil:f32[64,256,1] dim:f32[64,256] din:f32[64,256] dio:f32[64,256,1600]
            dip:f32[64,256,1600] diq:f16[64,256,1600] dir:f16[1600,1600] dis:f16[64,256,25,64]
            dit:f16[64,25,256,1] diu:f16[64,25,256,256] div:f16[64,25,256,1] diw:f16[64,256,25,64]
            dix:f16[64,256,25,64] diy:f16[] diz:f16[64,25,256,256] dja:f16[64,256,1600]
            djb:f16[1600,4800] djc:f32[64,256,1600] djd:f32[64,256,1] dje:f32[1,1,1600]
            djf:f32[64,256,1] djg:f32[64,256] djh:f32[64,256] dji:f32[64,256,1600]
            djj:f32[64,256,1600] djk:f16[64,256,6400] djl:f16[6400,1600] djm:f16[64,256,6400]
            djn:f16[64,256,6400] djo:f16[64,256,6400] djp:f16[64,256,6400] djq:f16[64,256,6400]
            djr:f16[64,256,1600] djs:f16[1600,6400] djt:f32[64,256,1600] dju:f32[64,256,1]
            djv:f32[1,1,1600] djw:f32[64,256,1] djx:f32[64,256] djy:f32[64,256] djz:f32[64,256,1600]
            dka:f32[64,256,1600]. let
            dkb:f16[1600] = reduce_sum[axes=(0, 1)] dcm
            dkc:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] dkb
            dkd:f16[1600] = reduce_sum[axes=(0, 1)] dkc
            dke:f16[1600,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] dcm dej
            dkf:f16[1600,1600] = transpose[permutation=(1, 0)] dke
            dkg:f16[1600,1600] = transpose[permutation=(1, 0)] dkf
            dkh:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] dcm dek
            dki:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] dkh
            dkj:f16[64,25,64,256] = transpose[permutation=(0, 2, 3, 1)] dki
            dkk:f16[64,25,256,256] = dot_general[
              dimension_numbers=(((2,), (3,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] dkj del
            dkl:f16[64,25,256,256] = mul dkk dem
            dkm:f16[64,25,256,256] = mul dkl den
            dkn:f16[64,25,256] = reduce_sum[axes=(3,)] dkm
            dko:f16[64,25,256,1] = reshape[
              dimensions=None
              new_sizes=(64, 25, 256, 1)
            ] dkn
            dkp:f16[64,25,256,1] = neg dko
            dkq:f32[64,25,256,1] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] dkp
            dkr:f32[64,25,256] = reduce_sum[axes=(3,)] dkq
            dks:f32[64,25,256,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 256)
            ] dkr
            dkt:f16[64,25,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] dks
            dku:f16[64,25,256,256] = div dkk deo
            dkv:f16[64,25,256,256] = add_any dkt dku
            dkw:f16[64,25,256,256] = mul dkv den
            dkx:f16[64,25,256,64] = dot_general[
              dimension_numbers=(((2,), (1,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] dkw dep
            dky:f16[64,256,25,64] = transpose[permutation=(0, 2, 1, 3)] dkx
            dkz:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] dky
            dla:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (1600, 1600, 0))
            ] dkz 0.0
            dlb:f16[64,25,256,64] = dot_general[
              dimension_numbers=(((3,), (1,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] dkw deq
            dlc:f16[64,256,25,64] = transpose[permutation=(0, 2, 1, 3)] dlb
            dld:f16[64,256,25,64] = div dlc der
            dle:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] dld
            dlf:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (0, 3200, 0))
            ] dle 0.0
            dlg:f16[64,256,4800] = add_any dla dlf
            dlh:f16[64,25,64,256] = dot_general[
              dimension_numbers=(((3,), (2,)), ((0, 1), (0, 1)))
              precision=None
              preferred_element_type=None
            ] dkj des
            dli:f16[64,256,25,64] = transpose[permutation=(0, 3, 1, 2)] dlh
            dlj:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] dli
            dlk:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (3200, 0, 0))
            ] dlj 0.0
            dll:f16[64,256,4800] = add_any dlg dlk
            dlm:f16[4800] = reduce_sum[axes=(0, 1)] dll
            dln:f16[1,1,4800] = reshape[dimensions=None new_sizes=(1, 1, 4800)] dlm
            dlo:f16[4800] = reduce_sum[axes=(0, 1)] dln
            dlp:f16[4800,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] dll det
            dlq:f16[1600,4800] = transpose[permutation=(1, 0)] dlp
            dlr:f16[4800,1600] = transpose[permutation=(1, 0)] dlq
            dls:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] dll deu
            dlt:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] dls
            dlu:f32[1600] = reduce_sum[axes=(0, 1)] dlt
            dlv:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] dlu
            dlw:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] dlv
            dlx:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] dlw
            dly:f32[64,256,1600] = mul dev dlt
            dlz:f32[64,256,1600] = mul dew dly
            dma:f32[1600] = reduce_sum[axes=(0, 1)] dlz
            dmb:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] dma
            dmc:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] dmb
            dmd:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] dmc
            dme:f32[64,256,1600] = mul dly dex
            dmf:f32[64,256] = reduce_sum[axes=(2,)] dme
            dmg:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] dmf
            dmh:f32[64,256,1] = mul dmg dey
            dmi:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] dmh
            dmj:f32[64,256] = mul dmi dez
            dmk:f32[64,256] = neg dmj
            dml:f32[64,256] = mul dmk dfa
            dmm:f32[64,256] = div dmj 1600.0
            dmn:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] dmm
            dmo:f32[64,256,1600] = mul dmn dfb
            dmp:f32[64,256,1600] = mul dlt dfc
            dmq:f32[64,256,1600] = neg dmp
            dmr:f32[64,256] = reduce_sum[axes=(2,)] dmq
            dms:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] dmr
            dmt:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] dms
            dmu:f32[64,256] = add_any dml dmt
            dmv:f32[64,256] = div dmu 1600.0
            dmw:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] dmv
            dmx:f32[64,256,1600] = add_any dmo dmw
            dmy:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] dmx
            dmz:f16[64,256,1600] = add_any dcm dmy
            dna:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] dmp
            dnb:f16[64,256,1600] = add_any dmz dna
            dnc:f16[1600] = reduce_sum[axes=(0, 1)] dnb
            dnd:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] dnc
            dne:f16[1600] = reduce_sum[axes=(0, 1)] dnd
            dnf:f16[1600,6400] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] dnb dfd
            dng:f16[6400,1600] = transpose[permutation=(1, 0)] dnf
            dnh:f16[1600,6400] = transpose[permutation=(1, 0)] dng
            dni:f16[64,256,6400] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] dnb dfe
            dnj:f16[64,256,6400] = mul dff dni
            dnk:f16[64,256,6400] = mul 0.5 dnj
            dnl:f16[64,256,6400] = mul dnk dfg
            dnm:f16[64,256,6400] = mul dnl dfh
            dnn:f16[64,256,6400] = add_any dnl dnm
            dno:f16[64,256,6400] = mul 0.7978515625 dnn
            dnp:f16[64,256,6400] = mul 0.044708251953125 dno
            dnq:f16[64,256,6400] = mul dnp dfi
            dnr:f16[64,256,6400] = add_any dno dnq
            dns:f16[64,256,6400] = mul dni dfj
            dnt:f16[64,256,6400] = add_any dnr dns
            dnu:f16[6400] = reduce_sum[axes=(0, 1)] dnt
            dnv:f16[1,1,6400] = reshape[dimensions=None new_sizes=(1, 1, 6400)] dnu
            dnw:f16[6400] = reduce_sum[axes=(0, 1)] dnv
            dnx:f16[6400,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] dnt dfk
            dny:f16[1600,6400] = transpose[permutation=(1, 0)] dnx
            dnz:f16[6400,1600] = transpose[permutation=(1, 0)] dny
            doa:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] dnt dfl
            dob:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] doa
            doc:f32[1600] = reduce_sum[axes=(0, 1)] dob
            dod:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] doc
            doe:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] dod
            dof:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] doe
            dog:f32[64,256,1600] = mul dfm dob
            doh:f32[64,256,1600] = mul dfn dog
            doi:f32[1600] = reduce_sum[axes=(0, 1)] doh
            doj:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] doi
            dok:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] doj
            dol:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] dok
            dom:f32[64,256,1600] = mul dog dfo
            don:f32[64,256] = reduce_sum[axes=(2,)] dom
            doo:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] don
            dop:f32[64,256,1] = mul doo dfp
            doq:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] dop
            dor:f32[64,256] = mul doq dfq
            dos:f32[64,256] = neg dor
            dot:f32[64,256] = mul dos dfr
            dou:f32[64,256] = div dor 1600.0
            dov:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] dou
            dow:f32[64,256,1600] = mul dov dfs
            dox:f32[64,256,1600] = mul dob dft
            doy:f32[64,256,1600] = neg dox
            doz:f32[64,256] = reduce_sum[axes=(2,)] doy
            dpa:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] doz
            dpb:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] dpa
            dpc:f32[64,256] = add_any dot dpb
            dpd:f32[64,256] = div dpc 1600.0
            dpe:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] dpd
            dpf:f32[64,256,1600] = add_any dow dpe
            dpg:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] dpf
            dph:f16[64,256,1600] = add_any dnb dpg
            dpi:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] dox
            dpj:f16[64,256,1600] = add_any dph dpi
            dpk:f16[1600] = reduce_sum[axes=(0, 1)] dpj
            dpl:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] dpk
            dpm:f16[1600] = reduce_sum[axes=(0, 1)] dpl
            dpn:f16[1600,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] dpj dfu
            dpo:f16[1600,1600] = transpose[permutation=(1, 0)] dpn
            dpp:f16[1600,1600] = transpose[permutation=(1, 0)] dpo
            dpq:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] dpj dfv
            dpr:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] dpq
            dps:f16[64,25,64,256] = transpose[permutation=(0, 2, 3, 1)] dpr
            dpt:f16[64,25,256,256] = dot_general[
              dimension_numbers=(((2,), (3,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] dps dfw
            dpu:f16[64,25,256,256] = mul dpt dfx
            dpv:f16[64,25,256,256] = mul dpu dfy
            dpw:f16[64,25,256] = reduce_sum[axes=(3,)] dpv
            dpx:f16[64,25,256,1] = reshape[
              dimensions=None
              new_sizes=(64, 25, 256, 1)
            ] dpw
            dpy:f16[64,25,256,1] = neg dpx
            dpz:f32[64,25,256,1] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] dpy
            dqa:f32[64,25,256] = reduce_sum[axes=(3,)] dpz
            dqb:f32[64,25,256,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 256)
            ] dqa
            dqc:f16[64,25,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] dqb
            dqd:f16[64,25,256,256] = div dpt dfz
            dqe:f16[64,25,256,256] = add_any dqc dqd
            dqf:f16[64,25,256,256] = mul dqe dfy
            dqg:f16[64,25,256,64] = dot_general[
              dimension_numbers=(((2,), (1,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] dqf dga
            dqh:f16[64,256,25,64] = transpose[permutation=(0, 2, 1, 3)] dqg
            dqi:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] dqh
            dqj:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (1600, 1600, 0))
            ] dqi 0.0
            dqk:f16[64,25,256,64] = dot_general[
              dimension_numbers=(((3,), (1,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] dqf dgb
            dql:f16[64,256,25,64] = transpose[permutation=(0, 2, 1, 3)] dqk
            dqm:f16[64,256,25,64] = div dql dgc
            dqn:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] dqm
            dqo:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (0, 3200, 0))
            ] dqn 0.0
            dqp:f16[64,256,4800] = add_any dqj dqo
            dqq:f16[64,25,64,256] = dot_general[
              dimension_numbers=(((3,), (2,)), ((0, 1), (0, 1)))
              precision=None
              preferred_element_type=None
            ] dps dgd
            dqr:f16[64,256,25,64] = transpose[permutation=(0, 3, 1, 2)] dqq
            dqs:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] dqr
            dqt:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (3200, 0, 0))
            ] dqs 0.0
            dqu:f16[64,256,4800] = add_any dqp dqt
            dqv:f16[4800] = reduce_sum[axes=(0, 1)] dqu
            dqw:f16[1,1,4800] = reshape[dimensions=None new_sizes=(1, 1, 4800)] dqv
            dqx:f16[4800] = reduce_sum[axes=(0, 1)] dqw
            dqy:f16[4800,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] dqu dge
            dqz:f16[1600,4800] = transpose[permutation=(1, 0)] dqy
            dra:f16[4800,1600] = transpose[permutation=(1, 0)] dqz
            drb:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] dqu dgf
            drc:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] drb
            drd:f32[1600] = reduce_sum[axes=(0, 1)] drc
            dre:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] drd
            drf:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] dre
            drg:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] drf
            drh:f32[64,256,1600] = mul dgg drc
            dri:f32[64,256,1600] = mul dgh drh
            drj:f32[1600] = reduce_sum[axes=(0, 1)] dri
            drk:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] drj
            drl:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] drk
            drm:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] drl
            drn:f32[64,256,1600] = mul drh dgi
            dro:f32[64,256] = reduce_sum[axes=(2,)] drn
            drp:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] dro
            drq:f32[64,256,1] = mul drp dgj
            drr:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] drq
            drs:f32[64,256] = mul drr dgk
            drt:f32[64,256] = neg drs
            dru:f32[64,256] = mul drt dgl
            drv:f32[64,256] = div drs 1600.0
            drw:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] drv
            drx:f32[64,256,1600] = mul drw dgm
            dry:f32[64,256,1600] = mul drc dgn
            drz:f32[64,256,1600] = neg dry
            dsa:f32[64,256] = reduce_sum[axes=(2,)] drz
            dsb:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] dsa
            dsc:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] dsb
            dsd:f32[64,256] = add_any dru dsc
            dse:f32[64,256] = div dsd 1600.0
            dsf:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] dse
            dsg:f32[64,256,1600] = add_any drx dsf
            dsh:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] dsg
            dsi:f16[64,256,1600] = add_any dpj dsh
            dsj:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] dry
            dsk:f16[64,256,1600] = add_any dsi dsj
            dsl:f16[1600] = reduce_sum[axes=(0, 1)] dsk
            dsm:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] dsl
            dsn:f16[1600] = reduce_sum[axes=(0, 1)] dsm
            dso:f16[1600,6400] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] dsk dgo
            dsp:f16[6400,1600] = transpose[permutation=(1, 0)] dso
            dsq:f16[1600,6400] = transpose[permutation=(1, 0)] dsp
            dsr:f16[64,256,6400] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] dsk dgp
            dss:f16[64,256,6400] = mul dgq dsr
            dst:f16[64,256,6400] = mul 0.5 dss
            dsu:f16[64,256,6400] = mul dst dgr
            dsv:f16[64,256,6400] = mul dsu dgs
            dsw:f16[64,256,6400] = add_any dsu dsv
            dsx:f16[64,256,6400] = mul 0.7978515625 dsw
            dsy:f16[64,256,6400] = mul 0.044708251953125 dsx
            dsz:f16[64,256,6400] = mul dsy dgt
            dta:f16[64,256,6400] = add_any dsx dsz
            dtb:f16[64,256,6400] = mul dsr dgu
            dtc:f16[64,256,6400] = add_any dta dtb
            dtd:f16[6400] = reduce_sum[axes=(0, 1)] dtc
            dte:f16[1,1,6400] = reshape[dimensions=None new_sizes=(1, 1, 6400)] dtd
            dtf:f16[6400] = reduce_sum[axes=(0, 1)] dte
            dtg:f16[6400,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] dtc dgv
            dth:f16[1600,6400] = transpose[permutation=(1, 0)] dtg
            dti:f16[6400,1600] = transpose[permutation=(1, 0)] dth
            dtj:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] dtc dgw
            dtk:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] dtj
            dtl:f32[1600] = reduce_sum[axes=(0, 1)] dtk
            dtm:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] dtl
            dtn:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] dtm
            dto:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] dtn
            dtp:f32[64,256,1600] = mul dgx dtk
            dtq:f32[64,256,1600] = mul dgy dtp
            dtr:f32[1600] = reduce_sum[axes=(0, 1)] dtq
            dts:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] dtr
            dtt:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] dts
            dtu:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] dtt
            dtv:f32[64,256,1600] = mul dtp dgz
            dtw:f32[64,256] = reduce_sum[axes=(2,)] dtv
            dtx:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] dtw
            dty:f32[64,256,1] = mul dtx dha
            dtz:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] dty
            dua:f32[64,256] = mul dtz dhb
            dub:f32[64,256] = neg dua
            duc:f32[64,256] = mul dub dhc
            dud:f32[64,256] = div dua 1600.0
            due:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] dud
            duf:f32[64,256,1600] = mul due dhd
            dug:f32[64,256,1600] = mul dtk dhe
            duh:f32[64,256,1600] = neg dug
            dui:f32[64,256] = reduce_sum[axes=(2,)] duh
            duj:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] dui
            duk:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] duj
            dul:f32[64,256] = add_any duc duk
            dum:f32[64,256] = div dul 1600.0
            dun:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] dum
            duo:f32[64,256,1600] = add_any duf dun
            dup:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] duo
            duq:f16[64,256,1600] = add_any dsk dup
            dur:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] dug
            dus:f16[64,256,1600] = add_any duq dur
            dut:f16[1600] = reduce_sum[axes=(0, 1)] dus
            duu:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] dut
            duv:f16[1600] = reduce_sum[axes=(0, 1)] duu
            duw:f16[1600,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] dus dhf
            dux:f16[1600,1600] = transpose[permutation=(1, 0)] duw
            duy:f16[1600,1600] = transpose[permutation=(1, 0)] dux
            duz:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] dus dhg
            dva:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] duz
            dvb:f16[64,25,64,256] = transpose[permutation=(0, 2, 3, 1)] dva
            dvc:f16[64,25,256,256] = dot_general[
              dimension_numbers=(((2,), (3,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] dvb dhh
            dvd:f16[64,25,256,256] = mul dvc dhi
            dve:f16[64,25,256,256] = mul dvd dhj
            dvf:f16[64,25,256] = reduce_sum[axes=(3,)] dve
            dvg:f16[64,25,256,1] = reshape[
              dimensions=None
              new_sizes=(64, 25, 256, 1)
            ] dvf
            dvh:f16[64,25,256,1] = neg dvg
            dvi:f32[64,25,256,1] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] dvh
            dvj:f32[64,25,256] = reduce_sum[axes=(3,)] dvi
            dvk:f32[64,25,256,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 256)
            ] dvj
            dvl:f16[64,25,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] dvk
            dvm:f16[64,25,256,256] = div dvc dhk
            dvn:f16[64,25,256,256] = add_any dvl dvm
            dvo:f16[64,25,256,256] = mul dvn dhj
            dvp:f16[64,25,256,64] = dot_general[
              dimension_numbers=(((2,), (1,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] dvo dhl
            dvq:f16[64,256,25,64] = transpose[permutation=(0, 2, 1, 3)] dvp
            dvr:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] dvq
            dvs:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (1600, 1600, 0))
            ] dvr 0.0
            dvt:f16[64,25,256,64] = dot_general[
              dimension_numbers=(((3,), (1,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] dvo dhm
            dvu:f16[64,256,25,64] = transpose[permutation=(0, 2, 1, 3)] dvt
            dvv:f16[64,256,25,64] = div dvu dhn
            dvw:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] dvv
            dvx:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (0, 3200, 0))
            ] dvw 0.0
            dvy:f16[64,256,4800] = add_any dvs dvx
            dvz:f16[64,25,64,256] = dot_general[
              dimension_numbers=(((3,), (2,)), ((0, 1), (0, 1)))
              precision=None
              preferred_element_type=None
            ] dvb dho
            dwa:f16[64,256,25,64] = transpose[permutation=(0, 3, 1, 2)] dvz
            dwb:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] dwa
            dwc:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (3200, 0, 0))
            ] dwb 0.0
            dwd:f16[64,256,4800] = add_any dvy dwc
            dwe:f16[4800] = reduce_sum[axes=(0, 1)] dwd
            dwf:f16[1,1,4800] = reshape[dimensions=None new_sizes=(1, 1, 4800)] dwe
            dwg:f16[4800] = reduce_sum[axes=(0, 1)] dwf
            dwh:f16[4800,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] dwd dhp
            dwi:f16[1600,4800] = transpose[permutation=(1, 0)] dwh
            dwj:f16[4800,1600] = transpose[permutation=(1, 0)] dwi
            dwk:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] dwd dhq
            dwl:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] dwk
            dwm:f32[1600] = reduce_sum[axes=(0, 1)] dwl
            dwn:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] dwm
            dwo:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] dwn
            dwp:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] dwo
            dwq:f32[64,256,1600] = mul dhr dwl
            dwr:f32[64,256,1600] = mul dhs dwq
            dws:f32[1600] = reduce_sum[axes=(0, 1)] dwr
            dwt:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] dws
            dwu:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] dwt
            dwv:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] dwu
            dww:f32[64,256,1600] = mul dwq dht
            dwx:f32[64,256] = reduce_sum[axes=(2,)] dww
            dwy:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] dwx
            dwz:f32[64,256,1] = mul dwy dhu
            dxa:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] dwz
            dxb:f32[64,256] = mul dxa dhv
            dxc:f32[64,256] = neg dxb
            dxd:f32[64,256] = mul dxc dhw
            dxe:f32[64,256] = div dxb 1600.0
            dxf:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] dxe
            dxg:f32[64,256,1600] = mul dxf dhx
            dxh:f32[64,256,1600] = mul dwl dhy
            dxi:f32[64,256,1600] = neg dxh
            dxj:f32[64,256] = reduce_sum[axes=(2,)] dxi
            dxk:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] dxj
            dxl:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] dxk
            dxm:f32[64,256] = add_any dxd dxl
            dxn:f32[64,256] = div dxm 1600.0
            dxo:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] dxn
            dxp:f32[64,256,1600] = add_any dxg dxo
            dxq:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] dxp
            dxr:f16[64,256,1600] = add_any dus dxq
            dxs:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] dxh
            dxt:f16[64,256,1600] = add_any dxr dxs
            dxu:f16[1600] = reduce_sum[axes=(0, 1)] dxt
            dxv:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] dxu
            dxw:f16[1600] = reduce_sum[axes=(0, 1)] dxv
            dxx:f16[1600,6400] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] dxt dhz
            dxy:f16[6400,1600] = transpose[permutation=(1, 0)] dxx
            dxz:f16[1600,6400] = transpose[permutation=(1, 0)] dxy
            dya:f16[64,256,6400] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] dxt dia
            dyb:f16[64,256,6400] = mul dib dya
            dyc:f16[64,256,6400] = mul 0.5 dyb
            dyd:f16[64,256,6400] = mul dyc dic
            dye:f16[64,256,6400] = mul dyd did
            dyf:f16[64,256,6400] = add_any dyd dye
            dyg:f16[64,256,6400] = mul 0.7978515625 dyf
            dyh:f16[64,256,6400] = mul 0.044708251953125 dyg
            dyi:f16[64,256,6400] = mul dyh die
            dyj:f16[64,256,6400] = add_any dyg dyi
            dyk:f16[64,256,6400] = mul dya dif
            dyl:f16[64,256,6400] = add_any dyj dyk
            dym:f16[6400] = reduce_sum[axes=(0, 1)] dyl
            dyn:f16[1,1,6400] = reshape[dimensions=None new_sizes=(1, 1, 6400)] dym
            dyo:f16[6400] = reduce_sum[axes=(0, 1)] dyn
            dyp:f16[6400,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] dyl dig
            dyq:f16[1600,6400] = transpose[permutation=(1, 0)] dyp
            dyr:f16[6400,1600] = transpose[permutation=(1, 0)] dyq
            dys:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] dyl dih
            dyt:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] dys
            dyu:f32[1600] = reduce_sum[axes=(0, 1)] dyt
            dyv:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] dyu
            dyw:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] dyv
            dyx:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] dyw
            dyy:f32[64,256,1600] = mul dii dyt
            dyz:f32[64,256,1600] = mul dij dyy
            dza:f32[1600] = reduce_sum[axes=(0, 1)] dyz
            dzb:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] dza
            dzc:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] dzb
            dzd:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] dzc
            dze:f32[64,256,1600] = mul dyy dik
            dzf:f32[64,256] = reduce_sum[axes=(2,)] dze
            dzg:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] dzf
            dzh:f32[64,256,1] = mul dzg dil
            dzi:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] dzh
            dzj:f32[64,256] = mul dzi dim
            dzk:f32[64,256] = neg dzj
            dzl:f32[64,256] = mul dzk din
            dzm:f32[64,256] = div dzj 1600.0
            dzn:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] dzm
            dzo:f32[64,256,1600] = mul dzn dio
            dzp:f32[64,256,1600] = mul dyt dip
            dzq:f32[64,256,1600] = neg dzp
            dzr:f32[64,256] = reduce_sum[axes=(2,)] dzq
            dzs:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] dzr
            dzt:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] dzs
            dzu:f32[64,256] = add_any dzl dzt
            dzv:f32[64,256] = div dzu 1600.0
            dzw:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] dzv
            dzx:f32[64,256,1600] = add_any dzo dzw
            dzy:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] dzx
            dzz:f16[64,256,1600] = add_any dxt dzy
            eaa:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] dzp
            eab:f16[64,256,1600] = add_any dzz eaa
            eac:f16[1600] = reduce_sum[axes=(0, 1)] eab
            ead:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] eac
            eae:f16[1600] = reduce_sum[axes=(0, 1)] ead
            eaf:f16[1600,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] eab diq
            eag:f16[1600,1600] = transpose[permutation=(1, 0)] eaf
            eah:f16[1600,1600] = transpose[permutation=(1, 0)] eag
            eai:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] eab dir
            eaj:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] eai
            eak:f16[64,25,64,256] = transpose[permutation=(0, 2, 3, 1)] eaj
            eal:f16[64,25,256,256] = dot_general[
              dimension_numbers=(((2,), (3,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] eak dis
            eam:f16[64,25,256,256] = mul eal dit
            ean:f16[64,25,256,256] = mul eam diu
            eao:f16[64,25,256] = reduce_sum[axes=(3,)] ean
            eap:f16[64,25,256,1] = reshape[
              dimensions=None
              new_sizes=(64, 25, 256, 1)
            ] eao
            eaq:f16[64,25,256,1] = neg eap
            ear:f32[64,25,256,1] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] eaq
            eas:f32[64,25,256] = reduce_sum[axes=(3,)] ear
            eat:f32[64,25,256,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 256)
            ] eas
            eau:f16[64,25,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] eat
            eav:f16[64,25,256,256] = div eal div
            eaw:f16[64,25,256,256] = add_any eau eav
            eax:f16[64,25,256,256] = mul eaw diu
            eay:f16[64,25,256,64] = dot_general[
              dimension_numbers=(((2,), (1,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] eax diw
            eaz:f16[64,256,25,64] = transpose[permutation=(0, 2, 1, 3)] eay
            eba:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] eaz
            ebb:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (1600, 1600, 0))
            ] eba 0.0
            ebc:f16[64,25,256,64] = dot_general[
              dimension_numbers=(((3,), (1,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] eax dix
            ebd:f16[64,256,25,64] = transpose[permutation=(0, 2, 1, 3)] ebc
            ebe:f16[64,256,25,64] = div ebd diy
            ebf:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] ebe
            ebg:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (0, 3200, 0))
            ] ebf 0.0
            ebh:f16[64,256,4800] = add_any ebb ebg
            ebi:f16[64,25,64,256] = dot_general[
              dimension_numbers=(((3,), (2,)), ((0, 1), (0, 1)))
              precision=None
              preferred_element_type=None
            ] eak diz
            ebj:f16[64,256,25,64] = transpose[permutation=(0, 3, 1, 2)] ebi
            ebk:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] ebj
            ebl:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (3200, 0, 0))
            ] ebk 0.0
            ebm:f16[64,256,4800] = add_any ebh ebl
            ebn:f16[4800] = reduce_sum[axes=(0, 1)] ebm
            ebo:f16[1,1,4800] = reshape[dimensions=None new_sizes=(1, 1, 4800)] ebn
            ebp:f16[4800] = reduce_sum[axes=(0, 1)] ebo
            ebq:f16[4800,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] ebm dja
            ebr:f16[1600,4800] = transpose[permutation=(1, 0)] ebq
            ebs:f16[4800,1600] = transpose[permutation=(1, 0)] ebr
            ebt:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] ebm djb
            ebu:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] ebt
            ebv:f32[1600] = reduce_sum[axes=(0, 1)] ebu
            ebw:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] ebv
            ebx:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] ebw
            eby:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] ebx
            ebz:f32[64,256,1600] = mul djc ebu
            eca:f32[64,256,1600] = mul djd ebz
            ecb:f32[1600] = reduce_sum[axes=(0, 1)] eca
            ecc:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] ecb
            ecd:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] ecc
            ece:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] ecd
            ecf:f32[64,256,1600] = mul ebz dje
            ecg:f32[64,256] = reduce_sum[axes=(2,)] ecf
            ech:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] ecg
            eci:f32[64,256,1] = mul ech djf
            ecj:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] eci
            eck:f32[64,256] = mul ecj djg
            ecl:f32[64,256] = neg eck
            ecm:f32[64,256] = mul ecl djh
            ecn:f32[64,256] = div eck 1600.0
            eco:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] ecn
            ecp:f32[64,256,1600] = mul eco dji
            ecq:f32[64,256,1600] = mul ebu djj
            ecr:f32[64,256,1600] = neg ecq
            ecs:f32[64,256] = reduce_sum[axes=(2,)] ecr
            ect:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] ecs
            ecu:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] ect
            ecv:f32[64,256] = add_any ecm ecu
            ecw:f32[64,256] = div ecv 1600.0
            ecx:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] ecw
            ecy:f32[64,256,1600] = add_any ecp ecx
            ecz:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] ecy
            eda:f16[64,256,1600] = add_any eab ecz
            edb:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] ecq
            edc:f16[64,256,1600] = add_any eda edb
            edd:f16[1600] = reduce_sum[axes=(0, 1)] edc
            ede:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] edd
            edf:f16[1600] = reduce_sum[axes=(0, 1)] ede
            edg:f16[1600,6400] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] edc djk
            edh:f16[6400,1600] = transpose[permutation=(1, 0)] edg
            edi:f16[1600,6400] = transpose[permutation=(1, 0)] edh
            edj:f16[64,256,6400] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] edc djl
            edk:f16[64,256,6400] = mul djm edj
            edl:f16[64,256,6400] = mul 0.5 edk
            edm:f16[64,256,6400] = mul edl djn
            edn:f16[64,256,6400] = mul edm djo
            edo:f16[64,256,6400] = add_any edm edn
            edp:f16[64,256,6400] = mul 0.7978515625 edo
            edq:f16[64,256,6400] = mul 0.044708251953125 edp
            edr:f16[64,256,6400] = mul edq djp
            eds:f16[64,256,6400] = add_any edp edr
            edt:f16[64,256,6400] = mul edj djq
            edu:f16[64,256,6400] = add_any eds edt
            edv:f16[6400] = reduce_sum[axes=(0, 1)] edu
            edw:f16[1,1,6400] = reshape[dimensions=None new_sizes=(1, 1, 6400)] edv
            edx:f16[6400] = reduce_sum[axes=(0, 1)] edw
            edy:f16[6400,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] edu djr
            edz:f16[1600,6400] = transpose[permutation=(1, 0)] edy
            eea:f16[6400,1600] = transpose[permutation=(1, 0)] edz
            eeb:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] edu djs
            eec:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] eeb
            eed:f32[1600] = reduce_sum[axes=(0, 1)] eec
            eee:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] eed
            eef:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] eee
            eeg:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] eef
            eeh:f32[64,256,1600] = mul djt eec
            eei:f32[64,256,1600] = mul dju eeh
            eej:f32[1600] = reduce_sum[axes=(0, 1)] eei
            eek:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] eej
            eel:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] eek
            eem:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] eel
            een:f32[64,256,1600] = mul eeh djv
            eeo:f32[64,256] = reduce_sum[axes=(2,)] een
            eep:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] eeo
            eeq:f32[64,256,1] = mul eep djw
            eer:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] eeq
            ees:f32[64,256] = mul eer djx
            eet:f32[64,256] = neg ees
            eeu:f32[64,256] = mul eet djy
            eev:f32[64,256] = div ees 1600.0
            eew:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] eev
            eex:f32[64,256,1600] = mul eew djz
            eey:f32[64,256,1600] = mul eec dka
            eez:f32[64,256,1600] = neg eey
            efa:f32[64,256] = reduce_sum[axes=(2,)] eez
            efb:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] efa
            efc:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] efb
            efd:f32[64,256] = add_any eeu efc
            efe:f32[64,256] = div efd 1600.0
            eff:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] efe
            efg:f32[64,256,1600] = add_any eex eff
            efh:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] efg
            efi:f16[64,256,1600] = add_any edc efh
            efj:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] eey
            efk:f16[64,256,1600] = add_any efi efj
            efl:f16[1600] = add dcn dkd
            efm:f16[1600,1600] = add dco dkg
            efn:f16[4800] = add dcp dlo
            efo:f16[4800,1600] = add dcq dlr
            efp:f16[1600] = add dcr dlx
            efq:f16[1600] = add dcs dmd
            efr:f16[1600] = add dct dne
            efs:f16[1600,6400] = add dcu dnh
            eft:f16[6400] = add dcv dnw
            efu:f16[6400,1600] = add dcw dnz
            efv:f16[1600] = add dcx dof
            efw:f16[1600] = add dcy dol
            efx:f16[1600] = add dcz dpm
            efy:f16[1600,1600] = add dda dpp
            efz:f16[4800] = add ddb dqx
            ega:f16[4800,1600] = add ddc dra
            egb:f16[1600] = add ddd drg
            egc:f16[1600] = add dde drm
            egd:f16[1600] = add ddf dsn
            ege:f16[1600,6400] = add ddg dsq
            egf:f16[6400] = add ddh dtf
            egg:f16[6400,1600] = add ddi dti
            egh:f16[1600] = add ddj dto
            egi:f16[1600] = add ddk dtu
            egj:f16[1600] = add ddl duv
            egk:f16[1600,1600] = add ddm duy
            egl:f16[4800] = add ddn dwg
            egm:f16[4800,1600] = add ddo dwj
            egn:f16[1600] = add ddp dwp
            ego:f16[1600] = add ddq dwv
            egp:f16[1600] = add ddr dxw
            egq:f16[1600,6400] = add dds dxz
            egr:f16[6400] = add ddt dyo
            egs:f16[6400,1600] = add ddu dyr
            egt:f16[1600] = add ddv dyx
            egu:f16[1600] = add ddw dzd
            egv:f16[1600] = add ddx eae
            egw:f16[1600,1600] = add ddy eah
            egx:f16[4800] = add ddz ebp
            egy:f16[4800,1600] = add dea ebs
            egz:f16[1600] = add deb eby
            eha:f16[1600] = add dec ece
            ehb:f16[1600] = add ded edf
            ehc:f16[1600,6400] = add dee edi
            ehd:f16[6400] = add def edx
            ehe:f16[6400,1600] = add deg eea
            ehf:f16[1600] = add deh eeg
            ehg:f16[1600] = add dei eem
          in (efk, efl, efm, efn, efo, efp, efq, efr, efs, eft, efu, efv, efw, efx,
            efy, efz, ega, egb, egc, egd, ege, egf, egg, egh, egi, egj, egk, egl,
            egm, egn, ego, egp, egq, egr, egs, egt, egu, egv, egw, egx, egy, egz,
            eha, ehb, ehc, ehd, ehe, ehf, ehg) }
        name=61
      ] btx kx ky kz la lb lc ld le lf lg lh li lj lk ll lm ln lo lp lq lr ls lt
        lu lv lw lx ly lz ma mb mc md me mf mg mh mi mj mk ml mm mn mo mp mq mr ms
        xu xv xw xx xy xz ya yb yc yd ye yf yg yh yi yj yk yl ym yn yo yp yq yr ys
        yt yu yv yw yx yy yz za zb zc zd ze zf zg zh zi zj zk zl zm zn zo zp zq zr
        zs zt zu zv zw zx zy zz baa bab bac bad bae baf bag bah bai baj bak bal bam
        ban bao bap baq bar bas bat bau bav baw bax bay baz bba bbb bbc bbd bbe bbf
        bbg bbh bbi bbj bbk bbl bbm bbn bbo bbp bbq bbr bbs bbt bbu bbv bbw bbx bby
        bbz bca bcb bcc bcd bce bcf bcg bch bci bcj bck bcl bcm bcn bco bcp bcq bcr
        bcs bct bcu bcv bcw bcx bcy bcz bda bdb bdc bdd bde bdf bdg bdh bdi bdj bdk
        bdl
      ehh:f16[64,256,1600] ehi:f16[1600] ehj:f16[1600,1600] ehk:f16[4800] ehl:f16[4800,1600]
        ehm:f16[1600] ehn:f16[1600] eho:f16[1600] ehp:f16[1600,6400] ehq:f16[6400]
        ehr:f16[6400,1600] ehs:f16[1600] eht:f16[1600] ehu:f16[1600] ehv:f16[1600,1600]
        ehw:f16[4800] ehx:f16[4800,1600] ehy:f16[1600] ehz:f16[1600] eia:f16[1600]
        eib:f16[1600,6400] eic:f16[6400] eid:f16[6400,1600] eie:f16[1600] eif:f16[1600]
        eig:f16[1600] eih:f16[1600,1600] eii:f16[4800] eij:f16[4800,1600] eik:f16[1600]
        eil:f16[1600] eim:f16[1600] ein:f16[1600,6400] eio:f16[6400] eip:f16[6400,1600]
        eiq:f16[1600] eir:f16[1600] eis:f16[1600] eit:f16[1600,1600] eiu:f16[4800]
        eiv:f16[4800,1600] eiw:f16[1600] eix:f16[1600] eiy:f16[1600] eiz:f16[1600,6400]
        eja:f16[6400] ejb:f16[6400,1600] ejc:f16[1600] ejd:f16[1600] = named_call[
        call_jaxpr={ lambda ; eje:f16[64,256,1600] ejf:f16[1600] ejg:f16[1600,1600]
            ejh:f16[4800] eji:f16[4800,1600] ejj:f16[1600] ejk:f16[1600] ejl:f16[1600]
            ejm:f16[1600,6400] ejn:f16[6400] ejo:f16[6400,1600] ejp:f16[1600] ejq:f16[1600]
            ejr:f16[1600] ejs:f16[1600,1600] ejt:f16[4800] eju:f16[4800,1600] ejv:f16[1600]
            ejw:f16[1600] ejx:f16[1600] ejy:f16[1600,6400] ejz:f16[6400] eka:f16[6400,1600]
            ekb:f16[1600] ekc:f16[1600] ekd:f16[1600] eke:f16[1600,1600] ekf:f16[4800]
            ekg:f16[4800,1600] ekh:f16[1600] eki:f16[1600] ekj:f16[1600] ekk:f16[1600,6400]
            ekl:f16[6400] ekm:f16[6400,1600] ekn:f16[1600] eko:f16[1600] ekp:f16[1600]
            ekq:f16[1600,1600] ekr:f16[4800] eks:f16[4800,1600] ekt:f16[1600] eku:f16[1600]
            ekv:f16[1600] ekw:f16[1600,6400] ekx:f16[6400] eky:f16[6400,1600] ekz:f16[1600]
            ela:f16[1600] elb:f16[64,256,1600] elc:f16[1600,1600] eld:f16[64,256,25,64]
            ele:f16[64,25,256,1] elf:f16[64,25,256,256] elg:f16[64,25,256,1] elh:f16[64,256,25,64]
            eli:f16[64,256,25,64] elj:f16[] elk:f16[64,25,256,256] ell:f16[64,256,1600]
            elm:f16[1600,4800] eln:f32[64,256,1600] elo:f32[64,256,1] elp:f32[1,1,1600]
            elq:f32[64,256,1] elr:f32[64,256] els:f32[64,256] elt:f32[64,256,1600]
            elu:f32[64,256,1600] elv:f16[64,256,6400] elw:f16[6400,1600] elx:f16[64,256,6400]
            ely:f16[64,256,6400] elz:f16[64,256,6400] ema:f16[64,256,6400] emb:f16[64,256,6400]
            emc:f16[64,256,1600] emd:f16[1600,6400] eme:f32[64,256,1600] emf:f32[64,256,1]
            emg:f32[1,1,1600] emh:f32[64,256,1] emi:f32[64,256] emj:f32[64,256] emk:f32[64,256,1600]
            eml:f32[64,256,1600] emm:f16[64,256,1600] emn:f16[1600,1600] emo:f16[64,256,25,64]
            emp:f16[64,25,256,1] emq:f16[64,25,256,256] emr:f16[64,25,256,1] ems:f16[64,256,25,64]
            emt:f16[64,256,25,64] emu:f16[] emv:f16[64,25,256,256] emw:f16[64,256,1600]
            emx:f16[1600,4800] emy:f32[64,256,1600] emz:f32[64,256,1] ena:f32[1,1,1600]
            enb:f32[64,256,1] enc:f32[64,256] end:f32[64,256] ene:f32[64,256,1600]
            enf:f32[64,256,1600] eng:f16[64,256,6400] enh:f16[6400,1600] eni:f16[64,256,6400]
            enj:f16[64,256,6400] enk:f16[64,256,6400] enl:f16[64,256,6400] enm:f16[64,256,6400]
            enn:f16[64,256,1600] eno:f16[1600,6400] enp:f32[64,256,1600] enq:f32[64,256,1]
            enr:f32[1,1,1600] ens:f32[64,256,1] ent:f32[64,256] enu:f32[64,256] env:f32[64,256,1600]
            enw:f32[64,256,1600] enx:f16[64,256,1600] eny:f16[1600,1600] enz:f16[64,256,25,64]
            eoa:f16[64,25,256,1] eob:f16[64,25,256,256] eoc:f16[64,25,256,1] eod:f16[64,256,25,64]
            eoe:f16[64,256,25,64] eof:f16[] eog:f16[64,25,256,256] eoh:f16[64,256,1600]
            eoi:f16[1600,4800] eoj:f32[64,256,1600] eok:f32[64,256,1] eol:f32[1,1,1600]
            eom:f32[64,256,1] eon:f32[64,256] eoo:f32[64,256] eop:f32[64,256,1600]
            eoq:f32[64,256,1600] eor:f16[64,256,6400] eos:f16[6400,1600] eot:f16[64,256,6400]
            eou:f16[64,256,6400] eov:f16[64,256,6400] eow:f16[64,256,6400] eox:f16[64,256,6400]
            eoy:f16[64,256,1600] eoz:f16[1600,6400] epa:f32[64,256,1600] epb:f32[64,256,1]
            epc:f32[1,1,1600] epd:f32[64,256,1] epe:f32[64,256] epf:f32[64,256] epg:f32[64,256,1600]
            eph:f32[64,256,1600] epi:f16[64,256,1600] epj:f16[1600,1600] epk:f16[64,256,25,64]
            epl:f16[64,25,256,1] epm:f16[64,25,256,256] epn:f16[64,25,256,1] epo:f16[64,256,25,64]
            epp:f16[64,256,25,64] epq:f16[] epr:f16[64,25,256,256] eps:f16[64,256,1600]
            ept:f16[1600,4800] epu:f32[64,256,1600] epv:f32[64,256,1] epw:f32[1,1,1600]
            epx:f32[64,256,1] epy:f32[64,256] epz:f32[64,256] eqa:f32[64,256,1600]
            eqb:f32[64,256,1600] eqc:f16[64,256,6400] eqd:f16[6400,1600] eqe:f16[64,256,6400]
            eqf:f16[64,256,6400] eqg:f16[64,256,6400] eqh:f16[64,256,6400] eqi:f16[64,256,6400]
            eqj:f16[64,256,1600] eqk:f16[1600,6400] eql:f32[64,256,1600] eqm:f32[64,256,1]
            eqn:f32[1,1,1600] eqo:f32[64,256,1] eqp:f32[64,256] eqq:f32[64,256] eqr:f32[64,256,1600]
            eqs:f32[64,256,1600]. let
            eqt:f16[1600] = reduce_sum[axes=(0, 1)] eje
            equ:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] eqt
            eqv:f16[1600] = reduce_sum[axes=(0, 1)] equ
            eqw:f16[1600,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] eje elb
            eqx:f16[1600,1600] = transpose[permutation=(1, 0)] eqw
            eqy:f16[1600,1600] = transpose[permutation=(1, 0)] eqx
            eqz:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] eje elc
            era:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] eqz
            erb:f16[64,25,64,256] = transpose[permutation=(0, 2, 3, 1)] era
            erc:f16[64,25,256,256] = dot_general[
              dimension_numbers=(((2,), (3,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] erb eld
            erd:f16[64,25,256,256] = mul erc ele
            ere:f16[64,25,256,256] = mul erd elf
            erf:f16[64,25,256] = reduce_sum[axes=(3,)] ere
            erg:f16[64,25,256,1] = reshape[
              dimensions=None
              new_sizes=(64, 25, 256, 1)
            ] erf
            erh:f16[64,25,256,1] = neg erg
            eri:f32[64,25,256,1] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] erh
            erj:f32[64,25,256] = reduce_sum[axes=(3,)] eri
            erk:f32[64,25,256,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 256)
            ] erj
            erl:f16[64,25,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] erk
            erm:f16[64,25,256,256] = div erc elg
            ern:f16[64,25,256,256] = add_any erl erm
            ero:f16[64,25,256,256] = mul ern elf
            erp:f16[64,25,256,64] = dot_general[
              dimension_numbers=(((2,), (1,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] ero elh
            erq:f16[64,256,25,64] = transpose[permutation=(0, 2, 1, 3)] erp
            err:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] erq
            ers:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (1600, 1600, 0))
            ] err 0.0
            ert:f16[64,25,256,64] = dot_general[
              dimension_numbers=(((3,), (1,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] ero eli
            eru:f16[64,256,25,64] = transpose[permutation=(0, 2, 1, 3)] ert
            erv:f16[64,256,25,64] = div eru elj
            erw:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] erv
            erx:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (0, 3200, 0))
            ] erw 0.0
            ery:f16[64,256,4800] = add_any ers erx
            erz:f16[64,25,64,256] = dot_general[
              dimension_numbers=(((3,), (2,)), ((0, 1), (0, 1)))
              precision=None
              preferred_element_type=None
            ] erb elk
            esa:f16[64,256,25,64] = transpose[permutation=(0, 3, 1, 2)] erz
            esb:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] esa
            esc:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (3200, 0, 0))
            ] esb 0.0
            esd:f16[64,256,4800] = add_any ery esc
            ese:f16[4800] = reduce_sum[axes=(0, 1)] esd
            esf:f16[1,1,4800] = reshape[dimensions=None new_sizes=(1, 1, 4800)] ese
            esg:f16[4800] = reduce_sum[axes=(0, 1)] esf
            esh:f16[4800,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] esd ell
            esi:f16[1600,4800] = transpose[permutation=(1, 0)] esh
            esj:f16[4800,1600] = transpose[permutation=(1, 0)] esi
            esk:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] esd elm
            esl:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] esk
            esm:f32[1600] = reduce_sum[axes=(0, 1)] esl
            esn:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] esm
            eso:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] esn
            esp:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] eso
            esq:f32[64,256,1600] = mul eln esl
            esr:f32[64,256,1600] = mul elo esq
            ess:f32[1600] = reduce_sum[axes=(0, 1)] esr
            est:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] ess
            esu:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] est
            esv:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] esu
            esw:f32[64,256,1600] = mul esq elp
            esx:f32[64,256] = reduce_sum[axes=(2,)] esw
            esy:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] esx
            esz:f32[64,256,1] = mul esy elq
            eta:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] esz
            etb:f32[64,256] = mul eta elr
            etc:f32[64,256] = neg etb
            etd:f32[64,256] = mul etc els
            ete:f32[64,256] = div etb 1600.0
            etf:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] ete
            etg:f32[64,256,1600] = mul etf elt
            eth:f32[64,256,1600] = mul esl elu
            eti:f32[64,256,1600] = neg eth
            etj:f32[64,256] = reduce_sum[axes=(2,)] eti
            etk:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] etj
            etl:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] etk
            etm:f32[64,256] = add_any etd etl
            etn:f32[64,256] = div etm 1600.0
            eto:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] etn
            etp:f32[64,256,1600] = add_any etg eto
            etq:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] etp
            etr:f16[64,256,1600] = add_any eje etq
            ets:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] eth
            ett:f16[64,256,1600] = add_any etr ets
            etu:f16[1600] = reduce_sum[axes=(0, 1)] ett
            etv:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] etu
            etw:f16[1600] = reduce_sum[axes=(0, 1)] etv
            etx:f16[1600,6400] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] ett elv
            ety:f16[6400,1600] = transpose[permutation=(1, 0)] etx
            etz:f16[1600,6400] = transpose[permutation=(1, 0)] ety
            eua:f16[64,256,6400] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] ett elw
            eub:f16[64,256,6400] = mul elx eua
            euc:f16[64,256,6400] = mul 0.5 eub
            eud:f16[64,256,6400] = mul euc ely
            eue:f16[64,256,6400] = mul eud elz
            euf:f16[64,256,6400] = add_any eud eue
            eug:f16[64,256,6400] = mul 0.7978515625 euf
            euh:f16[64,256,6400] = mul 0.044708251953125 eug
            eui:f16[64,256,6400] = mul euh ema
            euj:f16[64,256,6400] = add_any eug eui
            euk:f16[64,256,6400] = mul eua emb
            eul:f16[64,256,6400] = add_any euj euk
            eum:f16[6400] = reduce_sum[axes=(0, 1)] eul
            eun:f16[1,1,6400] = reshape[dimensions=None new_sizes=(1, 1, 6400)] eum
            euo:f16[6400] = reduce_sum[axes=(0, 1)] eun
            eup:f16[6400,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] eul emc
            euq:f16[1600,6400] = transpose[permutation=(1, 0)] eup
            eur:f16[6400,1600] = transpose[permutation=(1, 0)] euq
            eus:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] eul emd
            eut:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] eus
            euu:f32[1600] = reduce_sum[axes=(0, 1)] eut
            euv:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] euu
            euw:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] euv
            eux:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] euw
            euy:f32[64,256,1600] = mul eme eut
            euz:f32[64,256,1600] = mul emf euy
            eva:f32[1600] = reduce_sum[axes=(0, 1)] euz
            evb:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] eva
            evc:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] evb
            evd:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] evc
            eve:f32[64,256,1600] = mul euy emg
            evf:f32[64,256] = reduce_sum[axes=(2,)] eve
            evg:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] evf
            evh:f32[64,256,1] = mul evg emh
            evi:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] evh
            evj:f32[64,256] = mul evi emi
            evk:f32[64,256] = neg evj
            evl:f32[64,256] = mul evk emj
            evm:f32[64,256] = div evj 1600.0
            evn:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] evm
            evo:f32[64,256,1600] = mul evn emk
            evp:f32[64,256,1600] = mul eut eml
            evq:f32[64,256,1600] = neg evp
            evr:f32[64,256] = reduce_sum[axes=(2,)] evq
            evs:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] evr
            evt:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] evs
            evu:f32[64,256] = add_any evl evt
            evv:f32[64,256] = div evu 1600.0
            evw:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] evv
            evx:f32[64,256,1600] = add_any evo evw
            evy:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] evx
            evz:f16[64,256,1600] = add_any ett evy
            ewa:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] evp
            ewb:f16[64,256,1600] = add_any evz ewa
            ewc:f16[1600] = reduce_sum[axes=(0, 1)] ewb
            ewd:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] ewc
            ewe:f16[1600] = reduce_sum[axes=(0, 1)] ewd
            ewf:f16[1600,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] ewb emm
            ewg:f16[1600,1600] = transpose[permutation=(1, 0)] ewf
            ewh:f16[1600,1600] = transpose[permutation=(1, 0)] ewg
            ewi:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] ewb emn
            ewj:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] ewi
            ewk:f16[64,25,64,256] = transpose[permutation=(0, 2, 3, 1)] ewj
            ewl:f16[64,25,256,256] = dot_general[
              dimension_numbers=(((2,), (3,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] ewk emo
            ewm:f16[64,25,256,256] = mul ewl emp
            ewn:f16[64,25,256,256] = mul ewm emq
            ewo:f16[64,25,256] = reduce_sum[axes=(3,)] ewn
            ewp:f16[64,25,256,1] = reshape[
              dimensions=None
              new_sizes=(64, 25, 256, 1)
            ] ewo
            ewq:f16[64,25,256,1] = neg ewp
            ewr:f32[64,25,256,1] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] ewq
            ews:f32[64,25,256] = reduce_sum[axes=(3,)] ewr
            ewt:f32[64,25,256,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 256)
            ] ews
            ewu:f16[64,25,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] ewt
            ewv:f16[64,25,256,256] = div ewl emr
            eww:f16[64,25,256,256] = add_any ewu ewv
            ewx:f16[64,25,256,256] = mul eww emq
            ewy:f16[64,25,256,64] = dot_general[
              dimension_numbers=(((2,), (1,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] ewx ems
            ewz:f16[64,256,25,64] = transpose[permutation=(0, 2, 1, 3)] ewy
            exa:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] ewz
            exb:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (1600, 1600, 0))
            ] exa 0.0
            exc:f16[64,25,256,64] = dot_general[
              dimension_numbers=(((3,), (1,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] ewx emt
            exd:f16[64,256,25,64] = transpose[permutation=(0, 2, 1, 3)] exc
            exe:f16[64,256,25,64] = div exd emu
            exf:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] exe
            exg:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (0, 3200, 0))
            ] exf 0.0
            exh:f16[64,256,4800] = add_any exb exg
            exi:f16[64,25,64,256] = dot_general[
              dimension_numbers=(((3,), (2,)), ((0, 1), (0, 1)))
              precision=None
              preferred_element_type=None
            ] ewk emv
            exj:f16[64,256,25,64] = transpose[permutation=(0, 3, 1, 2)] exi
            exk:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] exj
            exl:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (3200, 0, 0))
            ] exk 0.0
            exm:f16[64,256,4800] = add_any exh exl
            exn:f16[4800] = reduce_sum[axes=(0, 1)] exm
            exo:f16[1,1,4800] = reshape[dimensions=None new_sizes=(1, 1, 4800)] exn
            exp:f16[4800] = reduce_sum[axes=(0, 1)] exo
            exq:f16[4800,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] exm emw
            exr:f16[1600,4800] = transpose[permutation=(1, 0)] exq
            exs:f16[4800,1600] = transpose[permutation=(1, 0)] exr
            ext:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] exm emx
            exu:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] ext
            exv:f32[1600] = reduce_sum[axes=(0, 1)] exu
            exw:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] exv
            exx:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] exw
            exy:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] exx
            exz:f32[64,256,1600] = mul emy exu
            eya:f32[64,256,1600] = mul emz exz
            eyb:f32[1600] = reduce_sum[axes=(0, 1)] eya
            eyc:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] eyb
            eyd:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] eyc
            eye:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] eyd
            eyf:f32[64,256,1600] = mul exz ena
            eyg:f32[64,256] = reduce_sum[axes=(2,)] eyf
            eyh:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] eyg
            eyi:f32[64,256,1] = mul eyh enb
            eyj:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] eyi
            eyk:f32[64,256] = mul eyj enc
            eyl:f32[64,256] = neg eyk
            eym:f32[64,256] = mul eyl end
            eyn:f32[64,256] = div eyk 1600.0
            eyo:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] eyn
            eyp:f32[64,256,1600] = mul eyo ene
            eyq:f32[64,256,1600] = mul exu enf
            eyr:f32[64,256,1600] = neg eyq
            eys:f32[64,256] = reduce_sum[axes=(2,)] eyr
            eyt:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] eys
            eyu:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] eyt
            eyv:f32[64,256] = add_any eym eyu
            eyw:f32[64,256] = div eyv 1600.0
            eyx:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] eyw
            eyy:f32[64,256,1600] = add_any eyp eyx
            eyz:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] eyy
            eza:f16[64,256,1600] = add_any ewb eyz
            ezb:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] eyq
            ezc:f16[64,256,1600] = add_any eza ezb
            ezd:f16[1600] = reduce_sum[axes=(0, 1)] ezc
            eze:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] ezd
            ezf:f16[1600] = reduce_sum[axes=(0, 1)] eze
            ezg:f16[1600,6400] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] ezc eng
            ezh:f16[6400,1600] = transpose[permutation=(1, 0)] ezg
            ezi:f16[1600,6400] = transpose[permutation=(1, 0)] ezh
            ezj:f16[64,256,6400] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] ezc enh
            ezk:f16[64,256,6400] = mul eni ezj
            ezl:f16[64,256,6400] = mul 0.5 ezk
            ezm:f16[64,256,6400] = mul ezl enj
            ezn:f16[64,256,6400] = mul ezm enk
            ezo:f16[64,256,6400] = add_any ezm ezn
            ezp:f16[64,256,6400] = mul 0.7978515625 ezo
            ezq:f16[64,256,6400] = mul 0.044708251953125 ezp
            ezr:f16[64,256,6400] = mul ezq enl
            ezs:f16[64,256,6400] = add_any ezp ezr
            ezt:f16[64,256,6400] = mul ezj enm
            ezu:f16[64,256,6400] = add_any ezs ezt
            ezv:f16[6400] = reduce_sum[axes=(0, 1)] ezu
            ezw:f16[1,1,6400] = reshape[dimensions=None new_sizes=(1, 1, 6400)] ezv
            ezx:f16[6400] = reduce_sum[axes=(0, 1)] ezw
            ezy:f16[6400,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] ezu enn
            ezz:f16[1600,6400] = transpose[permutation=(1, 0)] ezy
            faa:f16[6400,1600] = transpose[permutation=(1, 0)] ezz
            fab:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] ezu eno
            fac:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] fab
            fad:f32[1600] = reduce_sum[axes=(0, 1)] fac
            fae:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] fad
            faf:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] fae
            fag:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] faf
            fah:f32[64,256,1600] = mul enp fac
            fai:f32[64,256,1600] = mul enq fah
            faj:f32[1600] = reduce_sum[axes=(0, 1)] fai
            fak:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] faj
            fal:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] fak
            fam:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] fal
            fan:f32[64,256,1600] = mul fah enr
            fao:f32[64,256] = reduce_sum[axes=(2,)] fan
            fap:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] fao
            faq:f32[64,256,1] = mul fap ens
            far:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] faq
            fas:f32[64,256] = mul far ent
            fat:f32[64,256] = neg fas
            fau:f32[64,256] = mul fat enu
            fav:f32[64,256] = div fas 1600.0
            faw:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] fav
            fax:f32[64,256,1600] = mul faw env
            fay:f32[64,256,1600] = mul fac enw
            faz:f32[64,256,1600] = neg fay
            fba:f32[64,256] = reduce_sum[axes=(2,)] faz
            fbb:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] fba
            fbc:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] fbb
            fbd:f32[64,256] = add_any fau fbc
            fbe:f32[64,256] = div fbd 1600.0
            fbf:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] fbe
            fbg:f32[64,256,1600] = add_any fax fbf
            fbh:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] fbg
            fbi:f16[64,256,1600] = add_any ezc fbh
            fbj:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] fay
            fbk:f16[64,256,1600] = add_any fbi fbj
            fbl:f16[1600] = reduce_sum[axes=(0, 1)] fbk
            fbm:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] fbl
            fbn:f16[1600] = reduce_sum[axes=(0, 1)] fbm
            fbo:f16[1600,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] fbk enx
            fbp:f16[1600,1600] = transpose[permutation=(1, 0)] fbo
            fbq:f16[1600,1600] = transpose[permutation=(1, 0)] fbp
            fbr:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] fbk eny
            fbs:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] fbr
            fbt:f16[64,25,64,256] = transpose[permutation=(0, 2, 3, 1)] fbs
            fbu:f16[64,25,256,256] = dot_general[
              dimension_numbers=(((2,), (3,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] fbt enz
            fbv:f16[64,25,256,256] = mul fbu eoa
            fbw:f16[64,25,256,256] = mul fbv eob
            fbx:f16[64,25,256] = reduce_sum[axes=(3,)] fbw
            fby:f16[64,25,256,1] = reshape[
              dimensions=None
              new_sizes=(64, 25, 256, 1)
            ] fbx
            fbz:f16[64,25,256,1] = neg fby
            fca:f32[64,25,256,1] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] fbz
            fcb:f32[64,25,256] = reduce_sum[axes=(3,)] fca
            fcc:f32[64,25,256,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 256)
            ] fcb
            fcd:f16[64,25,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] fcc
            fce:f16[64,25,256,256] = div fbu eoc
            fcf:f16[64,25,256,256] = add_any fcd fce
            fcg:f16[64,25,256,256] = mul fcf eob
            fch:f16[64,25,256,64] = dot_general[
              dimension_numbers=(((2,), (1,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] fcg eod
            fci:f16[64,256,25,64] = transpose[permutation=(0, 2, 1, 3)] fch
            fcj:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] fci
            fck:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (1600, 1600, 0))
            ] fcj 0.0
            fcl:f16[64,25,256,64] = dot_general[
              dimension_numbers=(((3,), (1,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] fcg eoe
            fcm:f16[64,256,25,64] = transpose[permutation=(0, 2, 1, 3)] fcl
            fcn:f16[64,256,25,64] = div fcm eof
            fco:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] fcn
            fcp:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (0, 3200, 0))
            ] fco 0.0
            fcq:f16[64,256,4800] = add_any fck fcp
            fcr:f16[64,25,64,256] = dot_general[
              dimension_numbers=(((3,), (2,)), ((0, 1), (0, 1)))
              precision=None
              preferred_element_type=None
            ] fbt eog
            fcs:f16[64,256,25,64] = transpose[permutation=(0, 3, 1, 2)] fcr
            fct:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] fcs
            fcu:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (3200, 0, 0))
            ] fct 0.0
            fcv:f16[64,256,4800] = add_any fcq fcu
            fcw:f16[4800] = reduce_sum[axes=(0, 1)] fcv
            fcx:f16[1,1,4800] = reshape[dimensions=None new_sizes=(1, 1, 4800)] fcw
            fcy:f16[4800] = reduce_sum[axes=(0, 1)] fcx
            fcz:f16[4800,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] fcv eoh
            fda:f16[1600,4800] = transpose[permutation=(1, 0)] fcz
            fdb:f16[4800,1600] = transpose[permutation=(1, 0)] fda
            fdc:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] fcv eoi
            fdd:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] fdc
            fde:f32[1600] = reduce_sum[axes=(0, 1)] fdd
            fdf:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] fde
            fdg:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] fdf
            fdh:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] fdg
            fdi:f32[64,256,1600] = mul eoj fdd
            fdj:f32[64,256,1600] = mul eok fdi
            fdk:f32[1600] = reduce_sum[axes=(0, 1)] fdj
            fdl:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] fdk
            fdm:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] fdl
            fdn:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] fdm
            fdo:f32[64,256,1600] = mul fdi eol
            fdp:f32[64,256] = reduce_sum[axes=(2,)] fdo
            fdq:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] fdp
            fdr:f32[64,256,1] = mul fdq eom
            fds:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] fdr
            fdt:f32[64,256] = mul fds eon
            fdu:f32[64,256] = neg fdt
            fdv:f32[64,256] = mul fdu eoo
            fdw:f32[64,256] = div fdt 1600.0
            fdx:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] fdw
            fdy:f32[64,256,1600] = mul fdx eop
            fdz:f32[64,256,1600] = mul fdd eoq
            fea:f32[64,256,1600] = neg fdz
            feb:f32[64,256] = reduce_sum[axes=(2,)] fea
            fec:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] feb
            fed:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] fec
            fee:f32[64,256] = add_any fdv fed
            fef:f32[64,256] = div fee 1600.0
            feg:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] fef
            feh:f32[64,256,1600] = add_any fdy feg
            fei:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] feh
            fej:f16[64,256,1600] = add_any fbk fei
            fek:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] fdz
            fel:f16[64,256,1600] = add_any fej fek
            fem:f16[1600] = reduce_sum[axes=(0, 1)] fel
            fen:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] fem
            feo:f16[1600] = reduce_sum[axes=(0, 1)] fen
            fep:f16[1600,6400] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] fel eor
            feq:f16[6400,1600] = transpose[permutation=(1, 0)] fep
            fer:f16[1600,6400] = transpose[permutation=(1, 0)] feq
            fes:f16[64,256,6400] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] fel eos
            fet:f16[64,256,6400] = mul eot fes
            feu:f16[64,256,6400] = mul 0.5 fet
            fev:f16[64,256,6400] = mul feu eou
            few:f16[64,256,6400] = mul fev eov
            fex:f16[64,256,6400] = add_any fev few
            fey:f16[64,256,6400] = mul 0.7978515625 fex
            fez:f16[64,256,6400] = mul 0.044708251953125 fey
            ffa:f16[64,256,6400] = mul fez eow
            ffb:f16[64,256,6400] = add_any fey ffa
            ffc:f16[64,256,6400] = mul fes eox
            ffd:f16[64,256,6400] = add_any ffb ffc
            ffe:f16[6400] = reduce_sum[axes=(0, 1)] ffd
            fff:f16[1,1,6400] = reshape[dimensions=None new_sizes=(1, 1, 6400)] ffe
            ffg:f16[6400] = reduce_sum[axes=(0, 1)] fff
            ffh:f16[6400,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] ffd eoy
            ffi:f16[1600,6400] = transpose[permutation=(1, 0)] ffh
            ffj:f16[6400,1600] = transpose[permutation=(1, 0)] ffi
            ffk:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] ffd eoz
            ffl:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] ffk
            ffm:f32[1600] = reduce_sum[axes=(0, 1)] ffl
            ffn:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] ffm
            ffo:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] ffn
            ffp:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] ffo
            ffq:f32[64,256,1600] = mul epa ffl
            ffr:f32[64,256,1600] = mul epb ffq
            ffs:f32[1600] = reduce_sum[axes=(0, 1)] ffr
            fft:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] ffs
            ffu:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] fft
            ffv:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] ffu
            ffw:f32[64,256,1600] = mul ffq epc
            ffx:f32[64,256] = reduce_sum[axes=(2,)] ffw
            ffy:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] ffx
            ffz:f32[64,256,1] = mul ffy epd
            fga:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] ffz
            fgb:f32[64,256] = mul fga epe
            fgc:f32[64,256] = neg fgb
            fgd:f32[64,256] = mul fgc epf
            fge:f32[64,256] = div fgb 1600.0
            fgf:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] fge
            fgg:f32[64,256,1600] = mul fgf epg
            fgh:f32[64,256,1600] = mul ffl eph
            fgi:f32[64,256,1600] = neg fgh
            fgj:f32[64,256] = reduce_sum[axes=(2,)] fgi
            fgk:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] fgj
            fgl:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] fgk
            fgm:f32[64,256] = add_any fgd fgl
            fgn:f32[64,256] = div fgm 1600.0
            fgo:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] fgn
            fgp:f32[64,256,1600] = add_any fgg fgo
            fgq:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] fgp
            fgr:f16[64,256,1600] = add_any fel fgq
            fgs:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] fgh
            fgt:f16[64,256,1600] = add_any fgr fgs
            fgu:f16[1600] = reduce_sum[axes=(0, 1)] fgt
            fgv:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] fgu
            fgw:f16[1600] = reduce_sum[axes=(0, 1)] fgv
            fgx:f16[1600,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] fgt epi
            fgy:f16[1600,1600] = transpose[permutation=(1, 0)] fgx
            fgz:f16[1600,1600] = transpose[permutation=(1, 0)] fgy
            fha:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] fgt epj
            fhb:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] fha
            fhc:f16[64,25,64,256] = transpose[permutation=(0, 2, 3, 1)] fhb
            fhd:f16[64,25,256,256] = dot_general[
              dimension_numbers=(((2,), (3,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] fhc epk
            fhe:f16[64,25,256,256] = mul fhd epl
            fhf:f16[64,25,256,256] = mul fhe epm
            fhg:f16[64,25,256] = reduce_sum[axes=(3,)] fhf
            fhh:f16[64,25,256,1] = reshape[
              dimensions=None
              new_sizes=(64, 25, 256, 1)
            ] fhg
            fhi:f16[64,25,256,1] = neg fhh
            fhj:f32[64,25,256,1] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] fhi
            fhk:f32[64,25,256] = reduce_sum[axes=(3,)] fhj
            fhl:f32[64,25,256,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 256)
            ] fhk
            fhm:f16[64,25,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] fhl
            fhn:f16[64,25,256,256] = div fhd epn
            fho:f16[64,25,256,256] = add_any fhm fhn
            fhp:f16[64,25,256,256] = mul fho epm
            fhq:f16[64,25,256,64] = dot_general[
              dimension_numbers=(((2,), (1,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] fhp epo
            fhr:f16[64,256,25,64] = transpose[permutation=(0, 2, 1, 3)] fhq
            fhs:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] fhr
            fht:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (1600, 1600, 0))
            ] fhs 0.0
            fhu:f16[64,25,256,64] = dot_general[
              dimension_numbers=(((3,), (1,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] fhp epp
            fhv:f16[64,256,25,64] = transpose[permutation=(0, 2, 1, 3)] fhu
            fhw:f16[64,256,25,64] = div fhv epq
            fhx:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] fhw
            fhy:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (0, 3200, 0))
            ] fhx 0.0
            fhz:f16[64,256,4800] = add_any fht fhy
            fia:f16[64,25,64,256] = dot_general[
              dimension_numbers=(((3,), (2,)), ((0, 1), (0, 1)))
              precision=None
              preferred_element_type=None
            ] fhc epr
            fib:f16[64,256,25,64] = transpose[permutation=(0, 3, 1, 2)] fia
            fic:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] fib
            fid:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (3200, 0, 0))
            ] fic 0.0
            fie:f16[64,256,4800] = add_any fhz fid
            fif:f16[4800] = reduce_sum[axes=(0, 1)] fie
            fig:f16[1,1,4800] = reshape[dimensions=None new_sizes=(1, 1, 4800)] fif
            fih:f16[4800] = reduce_sum[axes=(0, 1)] fig
            fii:f16[4800,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] fie eps
            fij:f16[1600,4800] = transpose[permutation=(1, 0)] fii
            fik:f16[4800,1600] = transpose[permutation=(1, 0)] fij
            fil:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] fie ept
            fim:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] fil
            fin:f32[1600] = reduce_sum[axes=(0, 1)] fim
            fio:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] fin
            fip:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] fio
            fiq:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] fip
            fir:f32[64,256,1600] = mul epu fim
            fis:f32[64,256,1600] = mul epv fir
            fit:f32[1600] = reduce_sum[axes=(0, 1)] fis
            fiu:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] fit
            fiv:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] fiu
            fiw:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] fiv
            fix:f32[64,256,1600] = mul fir epw
            fiy:f32[64,256] = reduce_sum[axes=(2,)] fix
            fiz:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] fiy
            fja:f32[64,256,1] = mul fiz epx
            fjb:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] fja
            fjc:f32[64,256] = mul fjb epy
            fjd:f32[64,256] = neg fjc
            fje:f32[64,256] = mul fjd epz
            fjf:f32[64,256] = div fjc 1600.0
            fjg:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] fjf
            fjh:f32[64,256,1600] = mul fjg eqa
            fji:f32[64,256,1600] = mul fim eqb
            fjj:f32[64,256,1600] = neg fji
            fjk:f32[64,256] = reduce_sum[axes=(2,)] fjj
            fjl:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] fjk
            fjm:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] fjl
            fjn:f32[64,256] = add_any fje fjm
            fjo:f32[64,256] = div fjn 1600.0
            fjp:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] fjo
            fjq:f32[64,256,1600] = add_any fjh fjp
            fjr:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] fjq
            fjs:f16[64,256,1600] = add_any fgt fjr
            fjt:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] fji
            fju:f16[64,256,1600] = add_any fjs fjt
            fjv:f16[1600] = reduce_sum[axes=(0, 1)] fju
            fjw:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] fjv
            fjx:f16[1600] = reduce_sum[axes=(0, 1)] fjw
            fjy:f16[1600,6400] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] fju eqc
            fjz:f16[6400,1600] = transpose[permutation=(1, 0)] fjy
            fka:f16[1600,6400] = transpose[permutation=(1, 0)] fjz
            fkb:f16[64,256,6400] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] fju eqd
            fkc:f16[64,256,6400] = mul eqe fkb
            fkd:f16[64,256,6400] = mul 0.5 fkc
            fke:f16[64,256,6400] = mul fkd eqf
            fkf:f16[64,256,6400] = mul fke eqg
            fkg:f16[64,256,6400] = add_any fke fkf
            fkh:f16[64,256,6400] = mul 0.7978515625 fkg
            fki:f16[64,256,6400] = mul 0.044708251953125 fkh
            fkj:f16[64,256,6400] = mul fki eqh
            fkk:f16[64,256,6400] = add_any fkh fkj
            fkl:f16[64,256,6400] = mul fkb eqi
            fkm:f16[64,256,6400] = add_any fkk fkl
            fkn:f16[6400] = reduce_sum[axes=(0, 1)] fkm
            fko:f16[1,1,6400] = reshape[dimensions=None new_sizes=(1, 1, 6400)] fkn
            fkp:f16[6400] = reduce_sum[axes=(0, 1)] fko
            fkq:f16[6400,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] fkm eqj
            fkr:f16[1600,6400] = transpose[permutation=(1, 0)] fkq
            fks:f16[6400,1600] = transpose[permutation=(1, 0)] fkr
            fkt:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] fkm eqk
            fku:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] fkt
            fkv:f32[1600] = reduce_sum[axes=(0, 1)] fku
            fkw:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] fkv
            fkx:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] fkw
            fky:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] fkx
            fkz:f32[64,256,1600] = mul eql fku
            fla:f32[64,256,1600] = mul eqm fkz
            flb:f32[1600] = reduce_sum[axes=(0, 1)] fla
            flc:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] flb
            fld:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] flc
            fle:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] fld
            flf:f32[64,256,1600] = mul fkz eqn
            flg:f32[64,256] = reduce_sum[axes=(2,)] flf
            flh:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] flg
            fli:f32[64,256,1] = mul flh eqo
            flj:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] fli
            flk:f32[64,256] = mul flj eqp
            fll:f32[64,256] = neg flk
            flm:f32[64,256] = mul fll eqq
            fln:f32[64,256] = div flk 1600.0
            flo:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] fln
            flp:f32[64,256,1600] = mul flo eqr
            flq:f32[64,256,1600] = mul fku eqs
            flr:f32[64,256,1600] = neg flq
            fls:f32[64,256] = reduce_sum[axes=(2,)] flr
            flt:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] fls
            flu:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] flt
            flv:f32[64,256] = add_any flm flu
            flw:f32[64,256] = div flv 1600.0
            flx:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] flw
            fly:f32[64,256,1600] = add_any flp flx
            flz:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] fly
            fma:f16[64,256,1600] = add_any fju flz
            fmb:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] flq
            fmc:f16[64,256,1600] = add_any fma fmb
            fmd:f16[1600] = add ejf eqv
            fme:f16[1600,1600] = add ejg eqy
            fmf:f16[4800] = add ejh esg
            fmg:f16[4800,1600] = add eji esj
            fmh:f16[1600] = add ejj esp
            fmi:f16[1600] = add ejk esv
            fmj:f16[1600] = add ejl etw
            fmk:f16[1600,6400] = add ejm etz
            fml:f16[6400] = add ejn euo
            fmm:f16[6400,1600] = add ejo eur
            fmn:f16[1600] = add ejp eux
            fmo:f16[1600] = add ejq evd
            fmp:f16[1600] = add ejr ewe
            fmq:f16[1600,1600] = add ejs ewh
            fmr:f16[4800] = add ejt exp
            fms:f16[4800,1600] = add eju exs
            fmt:f16[1600] = add ejv exy
            fmu:f16[1600] = add ejw eye
            fmv:f16[1600] = add ejx ezf
            fmw:f16[1600,6400] = add ejy ezi
            fmx:f16[6400] = add ejz ezx
            fmy:f16[6400,1600] = add eka faa
            fmz:f16[1600] = add ekb fag
            fna:f16[1600] = add ekc fam
            fnb:f16[1600] = add ekd fbn
            fnc:f16[1600,1600] = add eke fbq
            fnd:f16[4800] = add ekf fcy
            fne:f16[4800,1600] = add ekg fdb
            fnf:f16[1600] = add ekh fdh
            fng:f16[1600] = add eki fdn
            fnh:f16[1600] = add ekj feo
            fni:f16[1600,6400] = add ekk fer
            fnj:f16[6400] = add ekl ffg
            fnk:f16[6400,1600] = add ekm ffj
            fnl:f16[1600] = add ekn ffp
            fnm:f16[1600] = add eko ffv
            fnn:f16[1600] = add ekp fgw
            fno:f16[1600,1600] = add ekq fgz
            fnp:f16[4800] = add ekr fih
            fnq:f16[4800,1600] = add eks fik
            fnr:f16[1600] = add ekt fiq
            fns:f16[1600] = add eku fiw
            fnt:f16[1600] = add ekv fjx
            fnu:f16[1600,6400] = add ekw fka
            fnv:f16[6400] = add ekx fkp
            fnw:f16[6400,1600] = add eky fks
            fnx:f16[1600] = add ekz fky
            fny:f16[1600] = add ela fle
          in (fmc, fmd, fme, fmf, fmg, fmh, fmi, fmj, fmk, fml, fmm, fmn, fmo, fmp,
            fmq, fmr, fms, fmt, fmu, fmv, fmw, fmx, fmy, fmz, fna, fnb, fnc, fnd,
            fne, fnf, fng, fnh, fni, fnj, fnk, fnl, fnm, fnn, fno, fnp, fnq, fnr,
            fns, fnt, fnu, fnv, fnw, fnx, fny) }
        name=62
      ] dap mt mu mv mw mx my mz na nb nc nd ne nf ng nh ni nj nk nl nm nn no np
        nq nr ns nt nu nv nw nx ny nz oa ob oc od oe of og oh oi oj ok ol om on oo
        bdm bdn bdo bdp bdq bdr bds bdt bdu bdv bdw bdx bdy bdz bea beb bec bed bee
        bef beg beh bei bej bek bel bem ben beo bep beq ber bes bet beu bev bew bex
        bey bez bfa bfb bfc bfd bfe bff bfg bfh bfi bfj bfk bfl bfm bfn bfo bfp bfq
        bfr bfs bft bfu bfv bfw bfx bfy bfz bga bgb bgc bgd bge bgf bgg bgh bgi bgj
        bgk bgl bgm bgn bgo bgp bgq bgr bgs bgt bgu bgv bgw bgx bgy bgz bha bhb bhc
        bhd bhe bhf bhg bhh bhi bhj bhk bhl bhm bhn bho bhp bhq bhr bhs bht bhu bhv
        bhw bhx bhy bhz bia bib bic bid bie bif big bih bii bij bik bil bim bin bio
        bip biq bir bis bit biu biv biw bix biy biz bja bjb bjc bjd
      fnz:f16[64,256,1600] foa:f16[1600] fob:f16[1600,1600] foc:f16[4800] fod:f16[4800,1600]
        foe:f16[1600] fof:f16[1600] fog:f16[1600] foh:f16[1600,6400] foi:f16[6400]
        foj:f16[6400,1600] fok:f16[1600] fol:f16[1600] fom:f16[1600] fon:f16[1600,1600]
        foo:f16[4800] fop:f16[4800,1600] foq:f16[1600] for:f16[1600] fos:f16[1600]
        fot:f16[1600,6400] fou:f16[6400] fov:f16[6400,1600] fow:f16[1600] fox:f16[1600]
        foy:f16[1600] foz:f16[1600,1600] fpa:f16[4800] fpb:f16[4800,1600] fpc:f16[1600]
        fpd:f16[1600] fpe:f16[1600] fpf:f16[1600,6400] fpg:f16[6400] fph:f16[6400,1600]
        fpi:f16[1600] fpj:f16[1600] fpk:f16[1600] fpl:f16[1600,1600] fpm:f16[4800]
        fpn:f16[4800,1600] fpo:f16[1600] fpp:f16[1600] fpq:f16[1600] fpr:f16[1600,6400]
        fps:f16[6400] fpt:f16[6400,1600] fpu:f16[1600] fpv:f16[1600] = named_call[
        call_jaxpr={ lambda ; fpw:f16[64,256,1600] fpx:f16[1600] fpy:f16[1600,1600]
            fpz:f16[4800] fqa:f16[4800,1600] fqb:f16[1600] fqc:f16[1600] fqd:f16[1600]
            fqe:f16[1600,6400] fqf:f16[6400] fqg:f16[6400,1600] fqh:f16[1600] fqi:f16[1600]
            fqj:f16[1600] fqk:f16[1600,1600] fql:f16[4800] fqm:f16[4800,1600] fqn:f16[1600]
            fqo:f16[1600] fqp:f16[1600] fqq:f16[1600,6400] fqr:f16[6400] fqs:f16[6400,1600]
            fqt:f16[1600] fqu:f16[1600] fqv:f16[1600] fqw:f16[1600,1600] fqx:f16[4800]
            fqy:f16[4800,1600] fqz:f16[1600] fra:f16[1600] frb:f16[1600] frc:f16[1600,6400]
            frd:f16[6400] fre:f16[6400,1600] frf:f16[1600] frg:f16[1600] frh:f16[1600]
            fri:f16[1600,1600] frj:f16[4800] frk:f16[4800,1600] frl:f16[1600] frm:f16[1600]
            frn:f16[1600] fro:f16[1600,6400] frp:f16[6400] frq:f16[6400,1600] frr:f16[1600]
            frs:f16[1600] frt:f16[64,256,1600] fru:f16[1600,1600] frv:f16[64,256,25,64]
            frw:f16[64,25,256,1] frx:f16[64,25,256,256] fry:f16[64,25,256,1] frz:f16[64,256,25,64]
            fsa:f16[64,256,25,64] fsb:f16[] fsc:f16[64,25,256,256] fsd:f16[64,256,1600]
            fse:f16[1600,4800] fsf:f32[64,256,1600] fsg:f32[64,256,1] fsh:f32[1,1,1600]
            fsi:f32[64,256,1] fsj:f32[64,256] fsk:f32[64,256] fsl:f32[64,256,1600]
            fsm:f32[64,256,1600] fsn:f16[64,256,6400] fso:f16[6400,1600] fsp:f16[64,256,6400]
            fsq:f16[64,256,6400] fsr:f16[64,256,6400] fss:f16[64,256,6400] fst:f16[64,256,6400]
            fsu:f16[64,256,1600] fsv:f16[1600,6400] fsw:f32[64,256,1600] fsx:f32[64,256,1]
            fsy:f32[1,1,1600] fsz:f32[64,256,1] fta:f32[64,256] ftb:f32[64,256] ftc:f32[64,256,1600]
            ftd:f32[64,256,1600] fte:f16[64,256,1600] ftf:f16[1600,1600] ftg:f16[64,256,25,64]
            fth:f16[64,25,256,1] fti:f16[64,25,256,256] ftj:f16[64,25,256,1] ftk:f16[64,256,25,64]
            ftl:f16[64,256,25,64] ftm:f16[] ftn:f16[64,25,256,256] fto:f16[64,256,1600]
            ftp:f16[1600,4800] ftq:f32[64,256,1600] ftr:f32[64,256,1] fts:f32[1,1,1600]
            ftt:f32[64,256,1] ftu:f32[64,256] ftv:f32[64,256] ftw:f32[64,256,1600]
            ftx:f32[64,256,1600] fty:f16[64,256,6400] ftz:f16[6400,1600] fua:f16[64,256,6400]
            fub:f16[64,256,6400] fuc:f16[64,256,6400] fud:f16[64,256,6400] fue:f16[64,256,6400]
            fuf:f16[64,256,1600] fug:f16[1600,6400] fuh:f32[64,256,1600] fui:f32[64,256,1]
            fuj:f32[1,1,1600] fuk:f32[64,256,1] ful:f32[64,256] fum:f32[64,256] fun:f32[64,256,1600]
            fuo:f32[64,256,1600] fup:f16[64,256,1600] fuq:f16[1600,1600] fur:f16[64,256,25,64]
            fus:f16[64,25,256,1] fut:f16[64,25,256,256] fuu:f16[64,25,256,1] fuv:f16[64,256,25,64]
            fuw:f16[64,256,25,64] fux:f16[] fuy:f16[64,25,256,256] fuz:f16[64,256,1600]
            fva:f16[1600,4800] fvb:f32[64,256,1600] fvc:f32[64,256,1] fvd:f32[1,1,1600]
            fve:f32[64,256,1] fvf:f32[64,256] fvg:f32[64,256] fvh:f32[64,256,1600]
            fvi:f32[64,256,1600] fvj:f16[64,256,6400] fvk:f16[6400,1600] fvl:f16[64,256,6400]
            fvm:f16[64,256,6400] fvn:f16[64,256,6400] fvo:f16[64,256,6400] fvp:f16[64,256,6400]
            fvq:f16[64,256,1600] fvr:f16[1600,6400] fvs:f32[64,256,1600] fvt:f32[64,256,1]
            fvu:f32[1,1,1600] fvv:f32[64,256,1] fvw:f32[64,256] fvx:f32[64,256] fvy:f32[64,256,1600]
            fvz:f32[64,256,1600] fwa:f16[64,256,1600] fwb:f16[1600,1600] fwc:f16[64,256,25,64]
            fwd:f16[64,25,256,1] fwe:f16[64,25,256,256] fwf:f16[64,25,256,1] fwg:f16[64,256,25,64]
            fwh:f16[64,256,25,64] fwi:f16[] fwj:f16[64,25,256,256] fwk:f16[64,256,1600]
            fwl:f16[1600,4800] fwm:f32[64,256,1600] fwn:f32[64,256,1] fwo:f32[1,1,1600]
            fwp:f32[64,256,1] fwq:f32[64,256] fwr:f32[64,256] fws:f32[64,256,1600]
            fwt:f32[64,256,1600] fwu:f16[64,256,6400] fwv:f16[6400,1600] fww:f16[64,256,6400]
            fwx:f16[64,256,6400] fwy:f16[64,256,6400] fwz:f16[64,256,6400] fxa:f16[64,256,6400]
            fxb:f16[64,256,1600] fxc:f16[1600,6400] fxd:f32[64,256,1600] fxe:f32[64,256,1]
            fxf:f32[1,1,1600] fxg:f32[64,256,1] fxh:f32[64,256] fxi:f32[64,256] fxj:f32[64,256,1600]
            fxk:f32[64,256,1600]. let
            fxl:f16[1600] = reduce_sum[axes=(0, 1)] fpw
            fxm:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] fxl
            fxn:f16[1600] = reduce_sum[axes=(0, 1)] fxm
            fxo:f16[1600,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] fpw frt
            fxp:f16[1600,1600] = transpose[permutation=(1, 0)] fxo
            fxq:f16[1600,1600] = transpose[permutation=(1, 0)] fxp
            fxr:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] fpw fru
            fxs:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] fxr
            fxt:f16[64,25,64,256] = transpose[permutation=(0, 2, 3, 1)] fxs
            fxu:f16[64,25,256,256] = dot_general[
              dimension_numbers=(((2,), (3,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] fxt frv
            fxv:f16[64,25,256,256] = mul fxu frw
            fxw:f16[64,25,256,256] = mul fxv frx
            fxx:f16[64,25,256] = reduce_sum[axes=(3,)] fxw
            fxy:f16[64,25,256,1] = reshape[
              dimensions=None
              new_sizes=(64, 25, 256, 1)
            ] fxx
            fxz:f16[64,25,256,1] = neg fxy
            fya:f32[64,25,256,1] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] fxz
            fyb:f32[64,25,256] = reduce_sum[axes=(3,)] fya
            fyc:f32[64,25,256,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 256)
            ] fyb
            fyd:f16[64,25,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] fyc
            fye:f16[64,25,256,256] = div fxu fry
            fyf:f16[64,25,256,256] = add_any fyd fye
            fyg:f16[64,25,256,256] = mul fyf frx
            fyh:f16[64,25,256,64] = dot_general[
              dimension_numbers=(((2,), (1,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] fyg frz
            fyi:f16[64,256,25,64] = transpose[permutation=(0, 2, 1, 3)] fyh
            fyj:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] fyi
            fyk:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (1600, 1600, 0))
            ] fyj 0.0
            fyl:f16[64,25,256,64] = dot_general[
              dimension_numbers=(((3,), (1,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] fyg fsa
            fym:f16[64,256,25,64] = transpose[permutation=(0, 2, 1, 3)] fyl
            fyn:f16[64,256,25,64] = div fym fsb
            fyo:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] fyn
            fyp:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (0, 3200, 0))
            ] fyo 0.0
            fyq:f16[64,256,4800] = add_any fyk fyp
            fyr:f16[64,25,64,256] = dot_general[
              dimension_numbers=(((3,), (2,)), ((0, 1), (0, 1)))
              precision=None
              preferred_element_type=None
            ] fxt fsc
            fys:f16[64,256,25,64] = transpose[permutation=(0, 3, 1, 2)] fyr
            fyt:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] fys
            fyu:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (3200, 0, 0))
            ] fyt 0.0
            fyv:f16[64,256,4800] = add_any fyq fyu
            fyw:f16[4800] = reduce_sum[axes=(0, 1)] fyv
            fyx:f16[1,1,4800] = reshape[dimensions=None new_sizes=(1, 1, 4800)] fyw
            fyy:f16[4800] = reduce_sum[axes=(0, 1)] fyx
            fyz:f16[4800,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] fyv fsd
            fza:f16[1600,4800] = transpose[permutation=(1, 0)] fyz
            fzb:f16[4800,1600] = transpose[permutation=(1, 0)] fza
            fzc:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] fyv fse
            fzd:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] fzc
            fze:f32[1600] = reduce_sum[axes=(0, 1)] fzd
            fzf:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] fze
            fzg:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] fzf
            fzh:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] fzg
            fzi:f32[64,256,1600] = mul fsf fzd
            fzj:f32[64,256,1600] = mul fsg fzi
            fzk:f32[1600] = reduce_sum[axes=(0, 1)] fzj
            fzl:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] fzk
            fzm:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] fzl
            fzn:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] fzm
            fzo:f32[64,256,1600] = mul fzi fsh
            fzp:f32[64,256] = reduce_sum[axes=(2,)] fzo
            fzq:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] fzp
            fzr:f32[64,256,1] = mul fzq fsi
            fzs:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] fzr
            fzt:f32[64,256] = mul fzs fsj
            fzu:f32[64,256] = neg fzt
            fzv:f32[64,256] = mul fzu fsk
            fzw:f32[64,256] = div fzt 1600.0
            fzx:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] fzw
            fzy:f32[64,256,1600] = mul fzx fsl
            fzz:f32[64,256,1600] = mul fzd fsm
            gaa:f32[64,256,1600] = neg fzz
            gab:f32[64,256] = reduce_sum[axes=(2,)] gaa
            gac:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] gab
            gad:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] gac
            gae:f32[64,256] = add_any fzv gad
            gaf:f32[64,256] = div gae 1600.0
            gag:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] gaf
            gah:f32[64,256,1600] = add_any fzy gag
            gai:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] gah
            gaj:f16[64,256,1600] = add_any fpw gai
            gak:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] fzz
            gal:f16[64,256,1600] = add_any gaj gak
            gam:f16[1600] = reduce_sum[axes=(0, 1)] gal
            gan:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] gam
            gao:f16[1600] = reduce_sum[axes=(0, 1)] gan
            gap:f16[1600,6400] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] gal fsn
            gaq:f16[6400,1600] = transpose[permutation=(1, 0)] gap
            gar:f16[1600,6400] = transpose[permutation=(1, 0)] gaq
            gas:f16[64,256,6400] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] gal fso
            gat:f16[64,256,6400] = mul fsp gas
            gau:f16[64,256,6400] = mul 0.5 gat
            gav:f16[64,256,6400] = mul gau fsq
            gaw:f16[64,256,6400] = mul gav fsr
            gax:f16[64,256,6400] = add_any gav gaw
            gay:f16[64,256,6400] = mul 0.7978515625 gax
            gaz:f16[64,256,6400] = mul 0.044708251953125 gay
            gba:f16[64,256,6400] = mul gaz fss
            gbb:f16[64,256,6400] = add_any gay gba
            gbc:f16[64,256,6400] = mul gas fst
            gbd:f16[64,256,6400] = add_any gbb gbc
            gbe:f16[6400] = reduce_sum[axes=(0, 1)] gbd
            gbf:f16[1,1,6400] = reshape[dimensions=None new_sizes=(1, 1, 6400)] gbe
            gbg:f16[6400] = reduce_sum[axes=(0, 1)] gbf
            gbh:f16[6400,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] gbd fsu
            gbi:f16[1600,6400] = transpose[permutation=(1, 0)] gbh
            gbj:f16[6400,1600] = transpose[permutation=(1, 0)] gbi
            gbk:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] gbd fsv
            gbl:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] gbk
            gbm:f32[1600] = reduce_sum[axes=(0, 1)] gbl
            gbn:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] gbm
            gbo:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] gbn
            gbp:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] gbo
            gbq:f32[64,256,1600] = mul fsw gbl
            gbr:f32[64,256,1600] = mul fsx gbq
            gbs:f32[1600] = reduce_sum[axes=(0, 1)] gbr
            gbt:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] gbs
            gbu:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] gbt
            gbv:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] gbu
            gbw:f32[64,256,1600] = mul gbq fsy
            gbx:f32[64,256] = reduce_sum[axes=(2,)] gbw
            gby:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] gbx
            gbz:f32[64,256,1] = mul gby fsz
            gca:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] gbz
            gcb:f32[64,256] = mul gca fta
            gcc:f32[64,256] = neg gcb
            gcd:f32[64,256] = mul gcc ftb
            gce:f32[64,256] = div gcb 1600.0
            gcf:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] gce
            gcg:f32[64,256,1600] = mul gcf ftc
            gch:f32[64,256,1600] = mul gbl ftd
            gci:f32[64,256,1600] = neg gch
            gcj:f32[64,256] = reduce_sum[axes=(2,)] gci
            gck:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] gcj
            gcl:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] gck
            gcm:f32[64,256] = add_any gcd gcl
            gcn:f32[64,256] = div gcm 1600.0
            gco:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] gcn
            gcp:f32[64,256,1600] = add_any gcg gco
            gcq:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] gcp
            gcr:f16[64,256,1600] = add_any gal gcq
            gcs:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] gch
            gct:f16[64,256,1600] = add_any gcr gcs
            gcu:f16[1600] = reduce_sum[axes=(0, 1)] gct
            gcv:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] gcu
            gcw:f16[1600] = reduce_sum[axes=(0, 1)] gcv
            gcx:f16[1600,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] gct fte
            gcy:f16[1600,1600] = transpose[permutation=(1, 0)] gcx
            gcz:f16[1600,1600] = transpose[permutation=(1, 0)] gcy
            gda:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] gct ftf
            gdb:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] gda
            gdc:f16[64,25,64,256] = transpose[permutation=(0, 2, 3, 1)] gdb
            gdd:f16[64,25,256,256] = dot_general[
              dimension_numbers=(((2,), (3,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] gdc ftg
            gde:f16[64,25,256,256] = mul gdd fth
            gdf:f16[64,25,256,256] = mul gde fti
            gdg:f16[64,25,256] = reduce_sum[axes=(3,)] gdf
            gdh:f16[64,25,256,1] = reshape[
              dimensions=None
              new_sizes=(64, 25, 256, 1)
            ] gdg
            gdi:f16[64,25,256,1] = neg gdh
            gdj:f32[64,25,256,1] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] gdi
            gdk:f32[64,25,256] = reduce_sum[axes=(3,)] gdj
            gdl:f32[64,25,256,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 256)
            ] gdk
            gdm:f16[64,25,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] gdl
            gdn:f16[64,25,256,256] = div gdd ftj
            gdo:f16[64,25,256,256] = add_any gdm gdn
            gdp:f16[64,25,256,256] = mul gdo fti
            gdq:f16[64,25,256,64] = dot_general[
              dimension_numbers=(((2,), (1,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] gdp ftk
            gdr:f16[64,256,25,64] = transpose[permutation=(0, 2, 1, 3)] gdq
            gds:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] gdr
            gdt:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (1600, 1600, 0))
            ] gds 0.0
            gdu:f16[64,25,256,64] = dot_general[
              dimension_numbers=(((3,), (1,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] gdp ftl
            gdv:f16[64,256,25,64] = transpose[permutation=(0, 2, 1, 3)] gdu
            gdw:f16[64,256,25,64] = div gdv ftm
            gdx:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] gdw
            gdy:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (0, 3200, 0))
            ] gdx 0.0
            gdz:f16[64,256,4800] = add_any gdt gdy
            gea:f16[64,25,64,256] = dot_general[
              dimension_numbers=(((3,), (2,)), ((0, 1), (0, 1)))
              precision=None
              preferred_element_type=None
            ] gdc ftn
            geb:f16[64,256,25,64] = transpose[permutation=(0, 3, 1, 2)] gea
            gec:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] geb
            ged:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (3200, 0, 0))
            ] gec 0.0
            gee:f16[64,256,4800] = add_any gdz ged
            gef:f16[4800] = reduce_sum[axes=(0, 1)] gee
            geg:f16[1,1,4800] = reshape[dimensions=None new_sizes=(1, 1, 4800)] gef
            geh:f16[4800] = reduce_sum[axes=(0, 1)] geg
            gei:f16[4800,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] gee fto
            gej:f16[1600,4800] = transpose[permutation=(1, 0)] gei
            gek:f16[4800,1600] = transpose[permutation=(1, 0)] gej
            gel:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] gee ftp
            gem:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] gel
            gen:f32[1600] = reduce_sum[axes=(0, 1)] gem
            geo:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] gen
            gep:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] geo
            geq:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] gep
            ger:f32[64,256,1600] = mul ftq gem
            ges:f32[64,256,1600] = mul ftr ger
            get:f32[1600] = reduce_sum[axes=(0, 1)] ges
            geu:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] get
            gev:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] geu
            gew:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] gev
            gex:f32[64,256,1600] = mul ger fts
            gey:f32[64,256] = reduce_sum[axes=(2,)] gex
            gez:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] gey
            gfa:f32[64,256,1] = mul gez ftt
            gfb:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] gfa
            gfc:f32[64,256] = mul gfb ftu
            gfd:f32[64,256] = neg gfc
            gfe:f32[64,256] = mul gfd ftv
            gff:f32[64,256] = div gfc 1600.0
            gfg:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] gff
            gfh:f32[64,256,1600] = mul gfg ftw
            gfi:f32[64,256,1600] = mul gem ftx
            gfj:f32[64,256,1600] = neg gfi
            gfk:f32[64,256] = reduce_sum[axes=(2,)] gfj
            gfl:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] gfk
            gfm:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] gfl
            gfn:f32[64,256] = add_any gfe gfm
            gfo:f32[64,256] = div gfn 1600.0
            gfp:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] gfo
            gfq:f32[64,256,1600] = add_any gfh gfp
            gfr:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] gfq
            gfs:f16[64,256,1600] = add_any gct gfr
            gft:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] gfi
            gfu:f16[64,256,1600] = add_any gfs gft
            gfv:f16[1600] = reduce_sum[axes=(0, 1)] gfu
            gfw:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] gfv
            gfx:f16[1600] = reduce_sum[axes=(0, 1)] gfw
            gfy:f16[1600,6400] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] gfu fty
            gfz:f16[6400,1600] = transpose[permutation=(1, 0)] gfy
            gga:f16[1600,6400] = transpose[permutation=(1, 0)] gfz
            ggb:f16[64,256,6400] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] gfu ftz
            ggc:f16[64,256,6400] = mul fua ggb
            ggd:f16[64,256,6400] = mul 0.5 ggc
            gge:f16[64,256,6400] = mul ggd fub
            ggf:f16[64,256,6400] = mul gge fuc
            ggg:f16[64,256,6400] = add_any gge ggf
            ggh:f16[64,256,6400] = mul 0.7978515625 ggg
            ggi:f16[64,256,6400] = mul 0.044708251953125 ggh
            ggj:f16[64,256,6400] = mul ggi fud
            ggk:f16[64,256,6400] = add_any ggh ggj
            ggl:f16[64,256,6400] = mul ggb fue
            ggm:f16[64,256,6400] = add_any ggk ggl
            ggn:f16[6400] = reduce_sum[axes=(0, 1)] ggm
            ggo:f16[1,1,6400] = reshape[dimensions=None new_sizes=(1, 1, 6400)] ggn
            ggp:f16[6400] = reduce_sum[axes=(0, 1)] ggo
            ggq:f16[6400,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] ggm fuf
            ggr:f16[1600,6400] = transpose[permutation=(1, 0)] ggq
            ggs:f16[6400,1600] = transpose[permutation=(1, 0)] ggr
            ggt:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] ggm fug
            ggu:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] ggt
            ggv:f32[1600] = reduce_sum[axes=(0, 1)] ggu
            ggw:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] ggv
            ggx:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] ggw
            ggy:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] ggx
            ggz:f32[64,256,1600] = mul fuh ggu
            gha:f32[64,256,1600] = mul fui ggz
            ghb:f32[1600] = reduce_sum[axes=(0, 1)] gha
            ghc:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] ghb
            ghd:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] ghc
            ghe:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] ghd
            ghf:f32[64,256,1600] = mul ggz fuj
            ghg:f32[64,256] = reduce_sum[axes=(2,)] ghf
            ghh:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] ghg
            ghi:f32[64,256,1] = mul ghh fuk
            ghj:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] ghi
            ghk:f32[64,256] = mul ghj ful
            ghl:f32[64,256] = neg ghk
            ghm:f32[64,256] = mul ghl fum
            ghn:f32[64,256] = div ghk 1600.0
            gho:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] ghn
            ghp:f32[64,256,1600] = mul gho fun
            ghq:f32[64,256,1600] = mul ggu fuo
            ghr:f32[64,256,1600] = neg ghq
            ghs:f32[64,256] = reduce_sum[axes=(2,)] ghr
            ght:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] ghs
            ghu:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] ght
            ghv:f32[64,256] = add_any ghm ghu
            ghw:f32[64,256] = div ghv 1600.0
            ghx:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] ghw
            ghy:f32[64,256,1600] = add_any ghp ghx
            ghz:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] ghy
            gia:f16[64,256,1600] = add_any gfu ghz
            gib:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] ghq
            gic:f16[64,256,1600] = add_any gia gib
            gid:f16[1600] = reduce_sum[axes=(0, 1)] gic
            gie:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] gid
            gif:f16[1600] = reduce_sum[axes=(0, 1)] gie
            gig:f16[1600,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] gic fup
            gih:f16[1600,1600] = transpose[permutation=(1, 0)] gig
            gii:f16[1600,1600] = transpose[permutation=(1, 0)] gih
            gij:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] gic fuq
            gik:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] gij
            gil:f16[64,25,64,256] = transpose[permutation=(0, 2, 3, 1)] gik
            gim:f16[64,25,256,256] = dot_general[
              dimension_numbers=(((2,), (3,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] gil fur
            gin:f16[64,25,256,256] = mul gim fus
            gio:f16[64,25,256,256] = mul gin fut
            gip:f16[64,25,256] = reduce_sum[axes=(3,)] gio
            giq:f16[64,25,256,1] = reshape[
              dimensions=None
              new_sizes=(64, 25, 256, 1)
            ] gip
            gir:f16[64,25,256,1] = neg giq
            gis:f32[64,25,256,1] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] gir
            git:f32[64,25,256] = reduce_sum[axes=(3,)] gis
            giu:f32[64,25,256,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 256)
            ] git
            giv:f16[64,25,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] giu
            giw:f16[64,25,256,256] = div gim fuu
            gix:f16[64,25,256,256] = add_any giv giw
            giy:f16[64,25,256,256] = mul gix fut
            giz:f16[64,25,256,64] = dot_general[
              dimension_numbers=(((2,), (1,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] giy fuv
            gja:f16[64,256,25,64] = transpose[permutation=(0, 2, 1, 3)] giz
            gjb:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] gja
            gjc:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (1600, 1600, 0))
            ] gjb 0.0
            gjd:f16[64,25,256,64] = dot_general[
              dimension_numbers=(((3,), (1,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] giy fuw
            gje:f16[64,256,25,64] = transpose[permutation=(0, 2, 1, 3)] gjd
            gjf:f16[64,256,25,64] = div gje fux
            gjg:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] gjf
            gjh:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (0, 3200, 0))
            ] gjg 0.0
            gji:f16[64,256,4800] = add_any gjc gjh
            gjj:f16[64,25,64,256] = dot_general[
              dimension_numbers=(((3,), (2,)), ((0, 1), (0, 1)))
              precision=None
              preferred_element_type=None
            ] gil fuy
            gjk:f16[64,256,25,64] = transpose[permutation=(0, 3, 1, 2)] gjj
            gjl:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] gjk
            gjm:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (3200, 0, 0))
            ] gjl 0.0
            gjn:f16[64,256,4800] = add_any gji gjm
            gjo:f16[4800] = reduce_sum[axes=(0, 1)] gjn
            gjp:f16[1,1,4800] = reshape[dimensions=None new_sizes=(1, 1, 4800)] gjo
            gjq:f16[4800] = reduce_sum[axes=(0, 1)] gjp
            gjr:f16[4800,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] gjn fuz
            gjs:f16[1600,4800] = transpose[permutation=(1, 0)] gjr
            gjt:f16[4800,1600] = transpose[permutation=(1, 0)] gjs
            gju:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] gjn fva
            gjv:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] gju
            gjw:f32[1600] = reduce_sum[axes=(0, 1)] gjv
            gjx:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] gjw
            gjy:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] gjx
            gjz:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] gjy
            gka:f32[64,256,1600] = mul fvb gjv
            gkb:f32[64,256,1600] = mul fvc gka
            gkc:f32[1600] = reduce_sum[axes=(0, 1)] gkb
            gkd:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] gkc
            gke:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] gkd
            gkf:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] gke
            gkg:f32[64,256,1600] = mul gka fvd
            gkh:f32[64,256] = reduce_sum[axes=(2,)] gkg
            gki:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] gkh
            gkj:f32[64,256,1] = mul gki fve
            gkk:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] gkj
            gkl:f32[64,256] = mul gkk fvf
            gkm:f32[64,256] = neg gkl
            gkn:f32[64,256] = mul gkm fvg
            gko:f32[64,256] = div gkl 1600.0
            gkp:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] gko
            gkq:f32[64,256,1600] = mul gkp fvh
            gkr:f32[64,256,1600] = mul gjv fvi
            gks:f32[64,256,1600] = neg gkr
            gkt:f32[64,256] = reduce_sum[axes=(2,)] gks
            gku:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] gkt
            gkv:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] gku
            gkw:f32[64,256] = add_any gkn gkv
            gkx:f32[64,256] = div gkw 1600.0
            gky:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] gkx
            gkz:f32[64,256,1600] = add_any gkq gky
            gla:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] gkz
            glb:f16[64,256,1600] = add_any gic gla
            glc:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] gkr
            gld:f16[64,256,1600] = add_any glb glc
            gle:f16[1600] = reduce_sum[axes=(0, 1)] gld
            glf:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] gle
            glg:f16[1600] = reduce_sum[axes=(0, 1)] glf
            glh:f16[1600,6400] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] gld fvj
            gli:f16[6400,1600] = transpose[permutation=(1, 0)] glh
            glj:f16[1600,6400] = transpose[permutation=(1, 0)] gli
            glk:f16[64,256,6400] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] gld fvk
            gll:f16[64,256,6400] = mul fvl glk
            glm:f16[64,256,6400] = mul 0.5 gll
            gln:f16[64,256,6400] = mul glm fvm
            glo:f16[64,256,6400] = mul gln fvn
            glp:f16[64,256,6400] = add_any gln glo
            glq:f16[64,256,6400] = mul 0.7978515625 glp
            glr:f16[64,256,6400] = mul 0.044708251953125 glq
            gls:f16[64,256,6400] = mul glr fvo
            glt:f16[64,256,6400] = add_any glq gls
            glu:f16[64,256,6400] = mul glk fvp
            glv:f16[64,256,6400] = add_any glt glu
            glw:f16[6400] = reduce_sum[axes=(0, 1)] glv
            glx:f16[1,1,6400] = reshape[dimensions=None new_sizes=(1, 1, 6400)] glw
            gly:f16[6400] = reduce_sum[axes=(0, 1)] glx
            glz:f16[6400,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] glv fvq
            gma:f16[1600,6400] = transpose[permutation=(1, 0)] glz
            gmb:f16[6400,1600] = transpose[permutation=(1, 0)] gma
            gmc:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] glv fvr
            gmd:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] gmc
            gme:f32[1600] = reduce_sum[axes=(0, 1)] gmd
            gmf:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] gme
            gmg:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] gmf
            gmh:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] gmg
            gmi:f32[64,256,1600] = mul fvs gmd
            gmj:f32[64,256,1600] = mul fvt gmi
            gmk:f32[1600] = reduce_sum[axes=(0, 1)] gmj
            gml:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] gmk
            gmm:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] gml
            gmn:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] gmm
            gmo:f32[64,256,1600] = mul gmi fvu
            gmp:f32[64,256] = reduce_sum[axes=(2,)] gmo
            gmq:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] gmp
            gmr:f32[64,256,1] = mul gmq fvv
            gms:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] gmr
            gmt:f32[64,256] = mul gms fvw
            gmu:f32[64,256] = neg gmt
            gmv:f32[64,256] = mul gmu fvx
            gmw:f32[64,256] = div gmt 1600.0
            gmx:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] gmw
            gmy:f32[64,256,1600] = mul gmx fvy
            gmz:f32[64,256,1600] = mul gmd fvz
            gna:f32[64,256,1600] = neg gmz
            gnb:f32[64,256] = reduce_sum[axes=(2,)] gna
            gnc:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] gnb
            gnd:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] gnc
            gne:f32[64,256] = add_any gmv gnd
            gnf:f32[64,256] = div gne 1600.0
            gng:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] gnf
            gnh:f32[64,256,1600] = add_any gmy gng
            gni:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] gnh
            gnj:f16[64,256,1600] = add_any gld gni
            gnk:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] gmz
            gnl:f16[64,256,1600] = add_any gnj gnk
            gnm:f16[1600] = reduce_sum[axes=(0, 1)] gnl
            gnn:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] gnm
            gno:f16[1600] = reduce_sum[axes=(0, 1)] gnn
            gnp:f16[1600,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] gnl fwa
            gnq:f16[1600,1600] = transpose[permutation=(1, 0)] gnp
            gnr:f16[1600,1600] = transpose[permutation=(1, 0)] gnq
            gns:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] gnl fwb
            gnt:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] gns
            gnu:f16[64,25,64,256] = transpose[permutation=(0, 2, 3, 1)] gnt
            gnv:f16[64,25,256,256] = dot_general[
              dimension_numbers=(((2,), (3,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] gnu fwc
            gnw:f16[64,25,256,256] = mul gnv fwd
            gnx:f16[64,25,256,256] = mul gnw fwe
            gny:f16[64,25,256] = reduce_sum[axes=(3,)] gnx
            gnz:f16[64,25,256,1] = reshape[
              dimensions=None
              new_sizes=(64, 25, 256, 1)
            ] gny
            goa:f16[64,25,256,1] = neg gnz
            gob:f32[64,25,256,1] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] goa
            goc:f32[64,25,256] = reduce_sum[axes=(3,)] gob
            god:f32[64,25,256,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 256)
            ] goc
            goe:f16[64,25,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] god
            gof:f16[64,25,256,256] = div gnv fwf
            gog:f16[64,25,256,256] = add_any goe gof
            goh:f16[64,25,256,256] = mul gog fwe
            goi:f16[64,25,256,64] = dot_general[
              dimension_numbers=(((2,), (1,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] goh fwg
            goj:f16[64,256,25,64] = transpose[permutation=(0, 2, 1, 3)] goi
            gok:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] goj
            gol:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (1600, 1600, 0))
            ] gok 0.0
            gom:f16[64,25,256,64] = dot_general[
              dimension_numbers=(((3,), (1,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] goh fwh
            gon:f16[64,256,25,64] = transpose[permutation=(0, 2, 1, 3)] gom
            goo:f16[64,256,25,64] = div gon fwi
            gop:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] goo
            goq:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (0, 3200, 0))
            ] gop 0.0
            gor:f16[64,256,4800] = add_any gol goq
            gos:f16[64,25,64,256] = dot_general[
              dimension_numbers=(((3,), (2,)), ((0, 1), (0, 1)))
              precision=None
              preferred_element_type=None
            ] gnu fwj
            got:f16[64,256,25,64] = transpose[permutation=(0, 3, 1, 2)] gos
            gou:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] got
            gov:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (3200, 0, 0))
            ] gou 0.0
            gow:f16[64,256,4800] = add_any gor gov
            gox:f16[4800] = reduce_sum[axes=(0, 1)] gow
            goy:f16[1,1,4800] = reshape[dimensions=None new_sizes=(1, 1, 4800)] gox
            goz:f16[4800] = reduce_sum[axes=(0, 1)] goy
            gpa:f16[4800,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] gow fwk
            gpb:f16[1600,4800] = transpose[permutation=(1, 0)] gpa
            gpc:f16[4800,1600] = transpose[permutation=(1, 0)] gpb
            gpd:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] gow fwl
            gpe:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] gpd
            gpf:f32[1600] = reduce_sum[axes=(0, 1)] gpe
            gpg:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] gpf
            gph:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] gpg
            gpi:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] gph
            gpj:f32[64,256,1600] = mul fwm gpe
            gpk:f32[64,256,1600] = mul fwn gpj
            gpl:f32[1600] = reduce_sum[axes=(0, 1)] gpk
            gpm:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] gpl
            gpn:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] gpm
            gpo:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] gpn
            gpp:f32[64,256,1600] = mul gpj fwo
            gpq:f32[64,256] = reduce_sum[axes=(2,)] gpp
            gpr:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] gpq
            gps:f32[64,256,1] = mul gpr fwp
            gpt:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] gps
            gpu:f32[64,256] = mul gpt fwq
            gpv:f32[64,256] = neg gpu
            gpw:f32[64,256] = mul gpv fwr
            gpx:f32[64,256] = div gpu 1600.0
            gpy:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] gpx
            gpz:f32[64,256,1600] = mul gpy fws
            gqa:f32[64,256,1600] = mul gpe fwt
            gqb:f32[64,256,1600] = neg gqa
            gqc:f32[64,256] = reduce_sum[axes=(2,)] gqb
            gqd:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] gqc
            gqe:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] gqd
            gqf:f32[64,256] = add_any gpw gqe
            gqg:f32[64,256] = div gqf 1600.0
            gqh:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] gqg
            gqi:f32[64,256,1600] = add_any gpz gqh
            gqj:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] gqi
            gqk:f16[64,256,1600] = add_any gnl gqj
            gql:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] gqa
            gqm:f16[64,256,1600] = add_any gqk gql
            gqn:f16[1600] = reduce_sum[axes=(0, 1)] gqm
            gqo:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] gqn
            gqp:f16[1600] = reduce_sum[axes=(0, 1)] gqo
            gqq:f16[1600,6400] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] gqm fwu
            gqr:f16[6400,1600] = transpose[permutation=(1, 0)] gqq
            gqs:f16[1600,6400] = transpose[permutation=(1, 0)] gqr
            gqt:f16[64,256,6400] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] gqm fwv
            gqu:f16[64,256,6400] = mul fww gqt
            gqv:f16[64,256,6400] = mul 0.5 gqu
            gqw:f16[64,256,6400] = mul gqv fwx
            gqx:f16[64,256,6400] = mul gqw fwy
            gqy:f16[64,256,6400] = add_any gqw gqx
            gqz:f16[64,256,6400] = mul 0.7978515625 gqy
            gra:f16[64,256,6400] = mul 0.044708251953125 gqz
            grb:f16[64,256,6400] = mul gra fwz
            grc:f16[64,256,6400] = add_any gqz grb
            grd:f16[64,256,6400] = mul gqt fxa
            gre:f16[64,256,6400] = add_any grc grd
            grf:f16[6400] = reduce_sum[axes=(0, 1)] gre
            grg:f16[1,1,6400] = reshape[dimensions=None new_sizes=(1, 1, 6400)] grf
            grh:f16[6400] = reduce_sum[axes=(0, 1)] grg
            gri:f16[6400,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] gre fxb
            grj:f16[1600,6400] = transpose[permutation=(1, 0)] gri
            grk:f16[6400,1600] = transpose[permutation=(1, 0)] grj
            grl:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] gre fxc
            grm:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] grl
            grn:f32[1600] = reduce_sum[axes=(0, 1)] grm
            gro:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] grn
            grp:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] gro
            grq:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] grp
            grr:f32[64,256,1600] = mul fxd grm
            grs:f32[64,256,1600] = mul fxe grr
            grt:f32[1600] = reduce_sum[axes=(0, 1)] grs
            gru:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] grt
            grv:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] gru
            grw:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] grv
            grx:f32[64,256,1600] = mul grr fxf
            gry:f32[64,256] = reduce_sum[axes=(2,)] grx
            grz:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] gry
            gsa:f32[64,256,1] = mul grz fxg
            gsb:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] gsa
            gsc:f32[64,256] = mul gsb fxh
            gsd:f32[64,256] = neg gsc
            gse:f32[64,256] = mul gsd fxi
            gsf:f32[64,256] = div gsc 1600.0
            gsg:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] gsf
            gsh:f32[64,256,1600] = mul gsg fxj
            gsi:f32[64,256,1600] = mul grm fxk
            gsj:f32[64,256,1600] = neg gsi
            gsk:f32[64,256] = reduce_sum[axes=(2,)] gsj
            gsl:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] gsk
            gsm:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] gsl
            gsn:f32[64,256] = add_any gse gsm
            gso:f32[64,256] = div gsn 1600.0
            gsp:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] gso
            gsq:f32[64,256,1600] = add_any gsh gsp
            gsr:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] gsq
            gss:f16[64,256,1600] = add_any gqm gsr
            gst:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] gsi
            gsu:f16[64,256,1600] = add_any gss gst
            gsv:f16[1600] = add fpx fxn
            gsw:f16[1600,1600] = add fpy fxq
            gsx:f16[4800] = add fpz fyy
            gsy:f16[4800,1600] = add fqa fzb
            gsz:f16[1600] = add fqb fzh
            gta:f16[1600] = add fqc fzn
            gtb:f16[1600] = add fqd gao
            gtc:f16[1600,6400] = add fqe gar
            gtd:f16[6400] = add fqf gbg
            gte:f16[6400,1600] = add fqg gbj
            gtf:f16[1600] = add fqh gbp
            gtg:f16[1600] = add fqi gbv
            gth:f16[1600] = add fqj gcw
            gti:f16[1600,1600] = add fqk gcz
            gtj:f16[4800] = add fql geh
            gtk:f16[4800,1600] = add fqm gek
            gtl:f16[1600] = add fqn geq
            gtm:f16[1600] = add fqo gew
            gtn:f16[1600] = add fqp gfx
            gto:f16[1600,6400] = add fqq gga
            gtp:f16[6400] = add fqr ggp
            gtq:f16[6400,1600] = add fqs ggs
            gtr:f16[1600] = add fqt ggy
            gts:f16[1600] = add fqu ghe
            gtt:f16[1600] = add fqv gif
            gtu:f16[1600,1600] = add fqw gii
            gtv:f16[4800] = add fqx gjq
            gtw:f16[4800,1600] = add fqy gjt
            gtx:f16[1600] = add fqz gjz
            gty:f16[1600] = add fra gkf
            gtz:f16[1600] = add frb glg
            gua:f16[1600,6400] = add frc glj
            gub:f16[6400] = add frd gly
            guc:f16[6400,1600] = add fre gmb
            gud:f16[1600] = add frf gmh
            gue:f16[1600] = add frg gmn
            guf:f16[1600] = add frh gno
            gug:f16[1600,1600] = add fri gnr
            guh:f16[4800] = add frj goz
            gui:f16[4800,1600] = add frk gpc
            guj:f16[1600] = add frl gpi
            guk:f16[1600] = add frm gpo
            gul:f16[1600] = add frn gqp
            gum:f16[1600,6400] = add fro gqs
            gun:f16[6400] = add frp grh
            guo:f16[6400,1600] = add frq grk
            gup:f16[1600] = add frr grq
            guq:f16[1600] = add frs grw
          in (gsu, gsv, gsw, gsx, gsy, gsz, gta, gtb, gtc, gtd, gte, gtf, gtg, gth,
            gti, gtj, gtk, gtl, gtm, gtn, gto, gtp, gtq, gtr, gts, gtt, gtu, gtv,
            gtw, gtx, gty, gtz, gua, gub, guc, gud, gue, guf, gug, guh, gui, guj,
            guk, gul, gum, gun, guo, gup, guq) }
        name=63
      ] ehh op oq or os ot ou ov ow ox oy oz pa pb pc pd pe pf pg ph pi pj pk pl
        pm pn po pp pq pr ps pt pu pv pw px py pz qa qb qc qd qe qf qg qh qi qj qk
        bje bjf bjg bjh bji bjj bjk bjl bjm bjn bjo bjp bjq bjr bjs bjt bju bjv bjw
        bjx bjy bjz bka bkb bkc bkd bke bkf bkg bkh bki bkj bkk bkl bkm bkn bko bkp
        bkq bkr bks bkt bku bkv bkw bkx bky bkz bla blb blc bld ble blf blg blh bli
        blj blk bll blm bln blo blp blq blr bls blt blu blv blw blx bly blz bma bmb
        bmc bmd bme bmf bmg bmh bmi bmj bmk bml bmm bmn bmo bmp bmq bmr bms bmt bmu
        bmv bmw bmx bmy bmz bna bnb bnc bnd bne bnf bng bnh bni bnj bnk bnl bnm bnn
        bno bnp bnq bnr bns bnt bnu bnv bnw bnx bny bnz boa bob boc bod boe bof bog
        boh boi boj bok bol bom bon boo bop boq bor bos bot bou bov
      gur:f16[64,256,1600] gus:f16[1600] gut:f16[1600,1600] guu:f16[4800] guv:f16[4800,1600]
        guw:f16[1600] gux:f16[1600] guy:f16[1600] guz:f16[1600,6400] gva:f16[6400]
        gvb:f16[6400,1600] gvc:f16[1600] gvd:f16[1600] gve:f16[1600] gvf:f16[1600,1600]
        gvg:f16[4800] gvh:f16[4800,1600] gvi:f16[1600] gvj:f16[1600] gvk:f16[1600]
        gvl:f16[1600,6400] gvm:f16[6400] gvn:f16[6400,1600] gvo:f16[1600] gvp:f16[1600]
        gvq:f16[1600] gvr:f16[1600,1600] gvs:f16[4800] gvt:f16[4800,1600] gvu:f16[1600]
        gvv:f16[1600] gvw:f16[1600] gvx:f16[1600,6400] gvy:f16[6400] gvz:f16[6400,1600]
        gwa:f16[1600] gwb:f16[1600] gwc:f16[1600] gwd:f16[1600,1600] gwe:f16[4800]
        gwf:f16[4800,1600] gwg:f16[1600] gwh:f16[1600] = named_call[
        call_jaxpr={ lambda ; gwi:f16[64,256,1600] gwj:f16[1600] gwk:f16[1600,1600]
            gwl:f16[4800] gwm:f16[4800,1600] gwn:f16[1600] gwo:f16[1600] gwp:f16[1600]
            gwq:f16[1600,6400] gwr:f16[6400] gws:f16[6400,1600] gwt:f16[1600] gwu:f16[1600]
            gwv:f16[1600] gww:f16[1600,1600] gwx:f16[4800] gwy:f16[4800,1600] gwz:f16[1600]
            gxa:f16[1600] gxb:f16[1600] gxc:f16[1600,6400] gxd:f16[6400] gxe:f16[6400,1600]
            gxf:f16[1600] gxg:f16[1600] gxh:f16[1600] gxi:f16[1600,1600] gxj:f16[4800]
            gxk:f16[4800,1600] gxl:f16[1600] gxm:f16[1600] gxn:f16[1600] gxo:f16[1600,6400]
            gxp:f16[6400] gxq:f16[6400,1600] gxr:f16[1600] gxs:f16[1600] gxt:f16[1600]
            gxu:f16[1600,1600] gxv:f16[4800] gxw:f16[4800,1600] gxx:f16[1600] gxy:f16[1600]
            gxz:f16[64,256,1600] gya:f16[1600,1600] gyb:f16[64,256,25,64] gyc:f16[64,25,256,1]
            gyd:f16[64,25,256,256] gye:f16[64,25,256,1] gyf:f16[64,256,25,64] gyg:f16[64,256,25,64]
            gyh:f16[] gyi:f16[64,25,256,256] gyj:f16[64,256,1600] gyk:f16[1600,4800]
            gyl:f32[64,256,1600] gym:f32[64,256,1] gyn:f32[1,1,1600] gyo:f32[64,256,1]
            gyp:f32[64,256] gyq:f32[64,256] gyr:f32[64,256,1600] gys:f32[64,256,1600]
            gyt:f16[64,256,6400] gyu:f16[6400,1600] gyv:f16[64,256,6400] gyw:f16[64,256,6400]
            gyx:f16[64,256,6400] gyy:f16[64,256,6400] gyz:f16[64,256,6400] gza:f16[64,256,1600]
            gzb:f16[1600,6400] gzc:f32[64,256,1600] gzd:f32[64,256,1] gze:f32[1,1,1600]
            gzf:f32[64,256,1] gzg:f32[64,256] gzh:f32[64,256] gzi:f32[64,256,1600]
            gzj:f32[64,256,1600] gzk:f16[64,256,1600] gzl:f16[1600,1600] gzm:f16[64,256,25,64]
            gzn:f16[64,25,256,1] gzo:f16[64,25,256,256] gzp:f16[64,25,256,1] gzq:f16[64,256,25,64]
            gzr:f16[64,256,25,64] gzs:f16[] gzt:f16[64,25,256,256] gzu:f16[64,256,1600]
            gzv:f16[1600,4800] gzw:f32[64,256,1600] gzx:f32[64,256,1] gzy:f32[1,1,1600]
            gzz:f32[64,256,1] haa:f32[64,256] hab:f32[64,256] hac:f32[64,256,1600]
            had:f32[64,256,1600] hae:f16[64,256,6400] haf:f16[6400,1600] hag:f16[64,256,6400]
            hah:f16[64,256,6400] hai:f16[64,256,6400] haj:f16[64,256,6400] hak:f16[64,256,6400]
            hal:f16[64,256,1600] ham:f16[1600,6400] han:f32[64,256,1600] hao:f32[64,256,1]
            hap:f32[1,1,1600] haq:f32[64,256,1] har:f32[64,256] has:f32[64,256] hat:f32[64,256,1600]
            hau:f32[64,256,1600] hav:f16[64,256,1600] haw:f16[1600,1600] hax:f16[64,256,25,64]
            hay:f16[64,25,256,1] haz:f16[64,25,256,256] hba:f16[64,25,256,1] hbb:f16[64,256,25,64]
            hbc:f16[64,256,25,64] hbd:f16[] hbe:f16[64,25,256,256] hbf:f16[64,256,1600]
            hbg:f16[1600,4800] hbh:f32[64,256,1600] hbi:f32[64,256,1] hbj:f32[1,1,1600]
            hbk:f32[64,256,1] hbl:f32[64,256] hbm:f32[64,256] hbn:f32[64,256,1600]
            hbo:f32[64,256,1600] hbp:f16[64,256,6400] hbq:f16[6400,1600] hbr:f16[64,256,6400]
            hbs:f16[64,256,6400] hbt:f16[64,256,6400] hbu:f16[64,256,6400] hbv:f16[64,256,6400]
            hbw:f16[64,256,1600] hbx:f16[1600,6400] hby:f32[64,256,1600] hbz:f32[64,256,1]
            hca:f32[1,1,1600] hcb:f32[64,256,1] hcc:f32[64,256] hcd:f32[64,256] hce:f32[64,256,1600]
            hcf:f32[64,256,1600] hcg:f16[64,256,1600] hch:f16[1600,1600] hci:f16[64,256,25,64]
            hcj:f16[64,25,256,1] hck:f16[64,25,256,256] hcl:f16[64,25,256,1] hcm:f16[64,256,25,64]
            hcn:f16[64,256,25,64] hco:f16[] hcp:f16[64,25,256,256] hcq:f16[64,256,1600]
            hcr:f16[1600,4800] hcs:f32[64,256,1600] hct:f32[64,256,1] hcu:f32[1,1,1600]
            hcv:f32[64,256,1] hcw:f32[64,256] hcx:f32[64,256] hcy:f32[64,256,1600]
            hcz:f32[64,256,1600]. let
            hda:f16[1600] = reduce_sum[axes=(0, 1)] gwi
            hdb:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] hda
            hdc:f16[1600] = reduce_sum[axes=(0, 1)] hdb
            hdd:f16[1600,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] gwi gxz
            hde:f16[1600,1600] = transpose[permutation=(1, 0)] hdd
            hdf:f16[1600,1600] = transpose[permutation=(1, 0)] hde
            hdg:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] gwi gya
            hdh:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] hdg
            hdi:f16[64,25,64,256] = transpose[permutation=(0, 2, 3, 1)] hdh
            hdj:f16[64,25,256,256] = dot_general[
              dimension_numbers=(((2,), (3,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] hdi gyb
            hdk:f16[64,25,256,256] = mul hdj gyc
            hdl:f16[64,25,256,256] = mul hdk gyd
            hdm:f16[64,25,256] = reduce_sum[axes=(3,)] hdl
            hdn:f16[64,25,256,1] = reshape[
              dimensions=None
              new_sizes=(64, 25, 256, 1)
            ] hdm
            hdo:f16[64,25,256,1] = neg hdn
            hdp:f32[64,25,256,1] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] hdo
            hdq:f32[64,25,256] = reduce_sum[axes=(3,)] hdp
            hdr:f32[64,25,256,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 256)
            ] hdq
            hds:f16[64,25,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] hdr
            hdt:f16[64,25,256,256] = div hdj gye
            hdu:f16[64,25,256,256] = add_any hds hdt
            hdv:f16[64,25,256,256] = mul hdu gyd
            hdw:f16[64,25,256,64] = dot_general[
              dimension_numbers=(((2,), (1,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] hdv gyf
            hdx:f16[64,256,25,64] = transpose[permutation=(0, 2, 1, 3)] hdw
            hdy:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] hdx
            hdz:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (1600, 1600, 0))
            ] hdy 0.0
            hea:f16[64,25,256,64] = dot_general[
              dimension_numbers=(((3,), (1,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] hdv gyg
            heb:f16[64,256,25,64] = transpose[permutation=(0, 2, 1, 3)] hea
            hec:f16[64,256,25,64] = div heb gyh
            hed:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] hec
            hee:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (0, 3200, 0))
            ] hed 0.0
            hef:f16[64,256,4800] = add_any hdz hee
            heg:f16[64,25,64,256] = dot_general[
              dimension_numbers=(((3,), (2,)), ((0, 1), (0, 1)))
              precision=None
              preferred_element_type=None
            ] hdi gyi
            heh:f16[64,256,25,64] = transpose[permutation=(0, 3, 1, 2)] heg
            hei:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] heh
            hej:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (3200, 0, 0))
            ] hei 0.0
            hek:f16[64,256,4800] = add_any hef hej
            hel:f16[4800] = reduce_sum[axes=(0, 1)] hek
            hem:f16[1,1,4800] = reshape[dimensions=None new_sizes=(1, 1, 4800)] hel
            hen:f16[4800] = reduce_sum[axes=(0, 1)] hem
            heo:f16[4800,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] hek gyj
            hep:f16[1600,4800] = transpose[permutation=(1, 0)] heo
            heq:f16[4800,1600] = transpose[permutation=(1, 0)] hep
            her:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] hek gyk
            hes:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] her
            het:f32[1600] = reduce_sum[axes=(0, 1)] hes
            heu:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] het
            hev:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] heu
            hew:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] hev
            hex:f32[64,256,1600] = mul gyl hes
            hey:f32[64,256,1600] = mul gym hex
            hez:f32[1600] = reduce_sum[axes=(0, 1)] hey
            hfa:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] hez
            hfb:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] hfa
            hfc:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] hfb
            hfd:f32[64,256,1600] = mul hex gyn
            hfe:f32[64,256] = reduce_sum[axes=(2,)] hfd
            hff:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] hfe
            hfg:f32[64,256,1] = mul hff gyo
            hfh:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] hfg
            hfi:f32[64,256] = mul hfh gyp
            hfj:f32[64,256] = neg hfi
            hfk:f32[64,256] = mul hfj gyq
            hfl:f32[64,256] = div hfi 1600.0
            hfm:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] hfl
            hfn:f32[64,256,1600] = mul hfm gyr
            hfo:f32[64,256,1600] = mul hes gys
            hfp:f32[64,256,1600] = neg hfo
            hfq:f32[64,256] = reduce_sum[axes=(2,)] hfp
            hfr:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] hfq
            hfs:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] hfr
            hft:f32[64,256] = add_any hfk hfs
            hfu:f32[64,256] = div hft 1600.0
            hfv:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] hfu
            hfw:f32[64,256,1600] = add_any hfn hfv
            hfx:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] hfw
            hfy:f16[64,256,1600] = add_any gwi hfx
            hfz:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] hfo
            hga:f16[64,256,1600] = add_any hfy hfz
            hgb:f16[1600] = reduce_sum[axes=(0, 1)] hga
            hgc:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] hgb
            hgd:f16[1600] = reduce_sum[axes=(0, 1)] hgc
            hge:f16[1600,6400] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] hga gyt
            hgf:f16[6400,1600] = transpose[permutation=(1, 0)] hge
            hgg:f16[1600,6400] = transpose[permutation=(1, 0)] hgf
            hgh:f16[64,256,6400] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] hga gyu
            hgi:f16[64,256,6400] = mul gyv hgh
            hgj:f16[64,256,6400] = mul 0.5 hgi
            hgk:f16[64,256,6400] = mul hgj gyw
            hgl:f16[64,256,6400] = mul hgk gyx
            hgm:f16[64,256,6400] = add_any hgk hgl
            hgn:f16[64,256,6400] = mul 0.7978515625 hgm
            hgo:f16[64,256,6400] = mul 0.044708251953125 hgn
            hgp:f16[64,256,6400] = mul hgo gyy
            hgq:f16[64,256,6400] = add_any hgn hgp
            hgr:f16[64,256,6400] = mul hgh gyz
            hgs:f16[64,256,6400] = add_any hgq hgr
            hgt:f16[6400] = reduce_sum[axes=(0, 1)] hgs
            hgu:f16[1,1,6400] = reshape[dimensions=None new_sizes=(1, 1, 6400)] hgt
            hgv:f16[6400] = reduce_sum[axes=(0, 1)] hgu
            hgw:f16[6400,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] hgs gza
            hgx:f16[1600,6400] = transpose[permutation=(1, 0)] hgw
            hgy:f16[6400,1600] = transpose[permutation=(1, 0)] hgx
            hgz:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] hgs gzb
            hha:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] hgz
            hhb:f32[1600] = reduce_sum[axes=(0, 1)] hha
            hhc:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] hhb
            hhd:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] hhc
            hhe:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] hhd
            hhf:f32[64,256,1600] = mul gzc hha
            hhg:f32[64,256,1600] = mul gzd hhf
            hhh:f32[1600] = reduce_sum[axes=(0, 1)] hhg
            hhi:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] hhh
            hhj:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] hhi
            hhk:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] hhj
            hhl:f32[64,256,1600] = mul hhf gze
            hhm:f32[64,256] = reduce_sum[axes=(2,)] hhl
            hhn:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] hhm
            hho:f32[64,256,1] = mul hhn gzf
            hhp:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] hho
            hhq:f32[64,256] = mul hhp gzg
            hhr:f32[64,256] = neg hhq
            hhs:f32[64,256] = mul hhr gzh
            hht:f32[64,256] = div hhq 1600.0
            hhu:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] hht
            hhv:f32[64,256,1600] = mul hhu gzi
            hhw:f32[64,256,1600] = mul hha gzj
            hhx:f32[64,256,1600] = neg hhw
            hhy:f32[64,256] = reduce_sum[axes=(2,)] hhx
            hhz:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] hhy
            hia:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] hhz
            hib:f32[64,256] = add_any hhs hia
            hic:f32[64,256] = div hib 1600.0
            hid:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] hic
            hie:f32[64,256,1600] = add_any hhv hid
            hif:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] hie
            hig:f16[64,256,1600] = add_any hga hif
            hih:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] hhw
            hii:f16[64,256,1600] = add_any hig hih
            hij:f16[1600] = reduce_sum[axes=(0, 1)] hii
            hik:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] hij
            hil:f16[1600] = reduce_sum[axes=(0, 1)] hik
            him:f16[1600,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] hii gzk
            hin:f16[1600,1600] = transpose[permutation=(1, 0)] him
            hio:f16[1600,1600] = transpose[permutation=(1, 0)] hin
            hip:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] hii gzl
            hiq:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] hip
            hir:f16[64,25,64,256] = transpose[permutation=(0, 2, 3, 1)] hiq
            his:f16[64,25,256,256] = dot_general[
              dimension_numbers=(((2,), (3,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] hir gzm
            hit:f16[64,25,256,256] = mul his gzn
            hiu:f16[64,25,256,256] = mul hit gzo
            hiv:f16[64,25,256] = reduce_sum[axes=(3,)] hiu
            hiw:f16[64,25,256,1] = reshape[
              dimensions=None
              new_sizes=(64, 25, 256, 1)
            ] hiv
            hix:f16[64,25,256,1] = neg hiw
            hiy:f32[64,25,256,1] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] hix
            hiz:f32[64,25,256] = reduce_sum[axes=(3,)] hiy
            hja:f32[64,25,256,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 256)
            ] hiz
            hjb:f16[64,25,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] hja
            hjc:f16[64,25,256,256] = div his gzp
            hjd:f16[64,25,256,256] = add_any hjb hjc
            hje:f16[64,25,256,256] = mul hjd gzo
            hjf:f16[64,25,256,64] = dot_general[
              dimension_numbers=(((2,), (1,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] hje gzq
            hjg:f16[64,256,25,64] = transpose[permutation=(0, 2, 1, 3)] hjf
            hjh:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] hjg
            hji:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (1600, 1600, 0))
            ] hjh 0.0
            hjj:f16[64,25,256,64] = dot_general[
              dimension_numbers=(((3,), (1,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] hje gzr
            hjk:f16[64,256,25,64] = transpose[permutation=(0, 2, 1, 3)] hjj
            hjl:f16[64,256,25,64] = div hjk gzs
            hjm:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] hjl
            hjn:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (0, 3200, 0))
            ] hjm 0.0
            hjo:f16[64,256,4800] = add_any hji hjn
            hjp:f16[64,25,64,256] = dot_general[
              dimension_numbers=(((3,), (2,)), ((0, 1), (0, 1)))
              precision=None
              preferred_element_type=None
            ] hir gzt
            hjq:f16[64,256,25,64] = transpose[permutation=(0, 3, 1, 2)] hjp
            hjr:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] hjq
            hjs:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (3200, 0, 0))
            ] hjr 0.0
            hjt:f16[64,256,4800] = add_any hjo hjs
            hju:f16[4800] = reduce_sum[axes=(0, 1)] hjt
            hjv:f16[1,1,4800] = reshape[dimensions=None new_sizes=(1, 1, 4800)] hju
            hjw:f16[4800] = reduce_sum[axes=(0, 1)] hjv
            hjx:f16[4800,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] hjt gzu
            hjy:f16[1600,4800] = transpose[permutation=(1, 0)] hjx
            hjz:f16[4800,1600] = transpose[permutation=(1, 0)] hjy
            hka:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] hjt gzv
            hkb:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] hka
            hkc:f32[1600] = reduce_sum[axes=(0, 1)] hkb
            hkd:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] hkc
            hke:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] hkd
            hkf:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] hke
            hkg:f32[64,256,1600] = mul gzw hkb
            hkh:f32[64,256,1600] = mul gzx hkg
            hki:f32[1600] = reduce_sum[axes=(0, 1)] hkh
            hkj:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] hki
            hkk:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] hkj
            hkl:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] hkk
            hkm:f32[64,256,1600] = mul hkg gzy
            hkn:f32[64,256] = reduce_sum[axes=(2,)] hkm
            hko:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] hkn
            hkp:f32[64,256,1] = mul hko gzz
            hkq:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] hkp
            hkr:f32[64,256] = mul hkq haa
            hks:f32[64,256] = neg hkr
            hkt:f32[64,256] = mul hks hab
            hku:f32[64,256] = div hkr 1600.0
            hkv:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] hku
            hkw:f32[64,256,1600] = mul hkv hac
            hkx:f32[64,256,1600] = mul hkb had
            hky:f32[64,256,1600] = neg hkx
            hkz:f32[64,256] = reduce_sum[axes=(2,)] hky
            hla:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] hkz
            hlb:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] hla
            hlc:f32[64,256] = add_any hkt hlb
            hld:f32[64,256] = div hlc 1600.0
            hle:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] hld
            hlf:f32[64,256,1600] = add_any hkw hle
            hlg:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] hlf
            hlh:f16[64,256,1600] = add_any hii hlg
            hli:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] hkx
            hlj:f16[64,256,1600] = add_any hlh hli
            hlk:f16[1600] = reduce_sum[axes=(0, 1)] hlj
            hll:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] hlk
            hlm:f16[1600] = reduce_sum[axes=(0, 1)] hll
            hln:f16[1600,6400] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] hlj hae
            hlo:f16[6400,1600] = transpose[permutation=(1, 0)] hln
            hlp:f16[1600,6400] = transpose[permutation=(1, 0)] hlo
            hlq:f16[64,256,6400] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] hlj haf
            hlr:f16[64,256,6400] = mul hag hlq
            hls:f16[64,256,6400] = mul 0.5 hlr
            hlt:f16[64,256,6400] = mul hls hah
            hlu:f16[64,256,6400] = mul hlt hai
            hlv:f16[64,256,6400] = add_any hlt hlu
            hlw:f16[64,256,6400] = mul 0.7978515625 hlv
            hlx:f16[64,256,6400] = mul 0.044708251953125 hlw
            hly:f16[64,256,6400] = mul hlx haj
            hlz:f16[64,256,6400] = add_any hlw hly
            hma:f16[64,256,6400] = mul hlq hak
            hmb:f16[64,256,6400] = add_any hlz hma
            hmc:f16[6400] = reduce_sum[axes=(0, 1)] hmb
            hmd:f16[1,1,6400] = reshape[dimensions=None new_sizes=(1, 1, 6400)] hmc
            hme:f16[6400] = reduce_sum[axes=(0, 1)] hmd
            hmf:f16[6400,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] hmb hal
            hmg:f16[1600,6400] = transpose[permutation=(1, 0)] hmf
            hmh:f16[6400,1600] = transpose[permutation=(1, 0)] hmg
            hmi:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] hmb ham
            hmj:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] hmi
            hmk:f32[1600] = reduce_sum[axes=(0, 1)] hmj
            hml:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] hmk
            hmm:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] hml
            hmn:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] hmm
            hmo:f32[64,256,1600] = mul han hmj
            hmp:f32[64,256,1600] = mul hao hmo
            hmq:f32[1600] = reduce_sum[axes=(0, 1)] hmp
            hmr:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] hmq
            hms:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] hmr
            hmt:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] hms
            hmu:f32[64,256,1600] = mul hmo hap
            hmv:f32[64,256] = reduce_sum[axes=(2,)] hmu
            hmw:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] hmv
            hmx:f32[64,256,1] = mul hmw haq
            hmy:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] hmx
            hmz:f32[64,256] = mul hmy har
            hna:f32[64,256] = neg hmz
            hnb:f32[64,256] = mul hna has
            hnc:f32[64,256] = div hmz 1600.0
            hnd:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] hnc
            hne:f32[64,256,1600] = mul hnd hat
            hnf:f32[64,256,1600] = mul hmj hau
            hng:f32[64,256,1600] = neg hnf
            hnh:f32[64,256] = reduce_sum[axes=(2,)] hng
            hni:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] hnh
            hnj:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] hni
            hnk:f32[64,256] = add_any hnb hnj
            hnl:f32[64,256] = div hnk 1600.0
            hnm:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] hnl
            hnn:f32[64,256,1600] = add_any hne hnm
            hno:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] hnn
            hnp:f16[64,256,1600] = add_any hlj hno
            hnq:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] hnf
            hnr:f16[64,256,1600] = add_any hnp hnq
            hns:f16[1600] = reduce_sum[axes=(0, 1)] hnr
            hnt:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] hns
            hnu:f16[1600] = reduce_sum[axes=(0, 1)] hnt
            hnv:f16[1600,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] hnr hav
            hnw:f16[1600,1600] = transpose[permutation=(1, 0)] hnv
            hnx:f16[1600,1600] = transpose[permutation=(1, 0)] hnw
            hny:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] hnr haw
            hnz:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] hny
            hoa:f16[64,25,64,256] = transpose[permutation=(0, 2, 3, 1)] hnz
            hob:f16[64,25,256,256] = dot_general[
              dimension_numbers=(((2,), (3,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] hoa hax
            hoc:f16[64,25,256,256] = mul hob hay
            hod:f16[64,25,256,256] = mul hoc haz
            hoe:f16[64,25,256] = reduce_sum[axes=(3,)] hod
            hof:f16[64,25,256,1] = reshape[
              dimensions=None
              new_sizes=(64, 25, 256, 1)
            ] hoe
            hog:f16[64,25,256,1] = neg hof
            hoh:f32[64,25,256,1] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] hog
            hoi:f32[64,25,256] = reduce_sum[axes=(3,)] hoh
            hoj:f32[64,25,256,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 256)
            ] hoi
            hok:f16[64,25,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] hoj
            hol:f16[64,25,256,256] = div hob hba
            hom:f16[64,25,256,256] = add_any hok hol
            hon:f16[64,25,256,256] = mul hom haz
            hoo:f16[64,25,256,64] = dot_general[
              dimension_numbers=(((2,), (1,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] hon hbb
            hop:f16[64,256,25,64] = transpose[permutation=(0, 2, 1, 3)] hoo
            hoq:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] hop
            hor:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (1600, 1600, 0))
            ] hoq 0.0
            hos:f16[64,25,256,64] = dot_general[
              dimension_numbers=(((3,), (1,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] hon hbc
            hot:f16[64,256,25,64] = transpose[permutation=(0, 2, 1, 3)] hos
            hou:f16[64,256,25,64] = div hot hbd
            hov:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] hou
            how:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (0, 3200, 0))
            ] hov 0.0
            hox:f16[64,256,4800] = add_any hor how
            hoy:f16[64,25,64,256] = dot_general[
              dimension_numbers=(((3,), (2,)), ((0, 1), (0, 1)))
              precision=None
              preferred_element_type=None
            ] hoa hbe
            hoz:f16[64,256,25,64] = transpose[permutation=(0, 3, 1, 2)] hoy
            hpa:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] hoz
            hpb:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (3200, 0, 0))
            ] hpa 0.0
            hpc:f16[64,256,4800] = add_any hox hpb
            hpd:f16[4800] = reduce_sum[axes=(0, 1)] hpc
            hpe:f16[1,1,4800] = reshape[dimensions=None new_sizes=(1, 1, 4800)] hpd
            hpf:f16[4800] = reduce_sum[axes=(0, 1)] hpe
            hpg:f16[4800,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] hpc hbf
            hph:f16[1600,4800] = transpose[permutation=(1, 0)] hpg
            hpi:f16[4800,1600] = transpose[permutation=(1, 0)] hph
            hpj:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] hpc hbg
            hpk:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] hpj
            hpl:f32[1600] = reduce_sum[axes=(0, 1)] hpk
            hpm:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] hpl
            hpn:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] hpm
            hpo:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] hpn
            hpp:f32[64,256,1600] = mul hbh hpk
            hpq:f32[64,256,1600] = mul hbi hpp
            hpr:f32[1600] = reduce_sum[axes=(0, 1)] hpq
            hps:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] hpr
            hpt:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] hps
            hpu:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] hpt
            hpv:f32[64,256,1600] = mul hpp hbj
            hpw:f32[64,256] = reduce_sum[axes=(2,)] hpv
            hpx:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] hpw
            hpy:f32[64,256,1] = mul hpx hbk
            hpz:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] hpy
            hqa:f32[64,256] = mul hpz hbl
            hqb:f32[64,256] = neg hqa
            hqc:f32[64,256] = mul hqb hbm
            hqd:f32[64,256] = div hqa 1600.0
            hqe:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] hqd
            hqf:f32[64,256,1600] = mul hqe hbn
            hqg:f32[64,256,1600] = mul hpk hbo
            hqh:f32[64,256,1600] = neg hqg
            hqi:f32[64,256] = reduce_sum[axes=(2,)] hqh
            hqj:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] hqi
            hqk:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] hqj
            hql:f32[64,256] = add_any hqc hqk
            hqm:f32[64,256] = div hql 1600.0
            hqn:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] hqm
            hqo:f32[64,256,1600] = add_any hqf hqn
            hqp:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] hqo
            hqq:f16[64,256,1600] = add_any hnr hqp
            hqr:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] hqg
            hqs:f16[64,256,1600] = add_any hqq hqr
            hqt:f16[1600] = reduce_sum[axes=(0, 1)] hqs
            hqu:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] hqt
            hqv:f16[1600] = reduce_sum[axes=(0, 1)] hqu
            hqw:f16[1600,6400] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] hqs hbp
            hqx:f16[6400,1600] = transpose[permutation=(1, 0)] hqw
            hqy:f16[1600,6400] = transpose[permutation=(1, 0)] hqx
            hqz:f16[64,256,6400] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] hqs hbq
            hra:f16[64,256,6400] = mul hbr hqz
            hrb:f16[64,256,6400] = mul 0.5 hra
            hrc:f16[64,256,6400] = mul hrb hbs
            hrd:f16[64,256,6400] = mul hrc hbt
            hre:f16[64,256,6400] = add_any hrc hrd
            hrf:f16[64,256,6400] = mul 0.7978515625 hre
            hrg:f16[64,256,6400] = mul 0.044708251953125 hrf
            hrh:f16[64,256,6400] = mul hrg hbu
            hri:f16[64,256,6400] = add_any hrf hrh
            hrj:f16[64,256,6400] = mul hqz hbv
            hrk:f16[64,256,6400] = add_any hri hrj
            hrl:f16[6400] = reduce_sum[axes=(0, 1)] hrk
            hrm:f16[1,1,6400] = reshape[dimensions=None new_sizes=(1, 1, 6400)] hrl
            hrn:f16[6400] = reduce_sum[axes=(0, 1)] hrm
            hro:f16[6400,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] hrk hbw
            hrp:f16[1600,6400] = transpose[permutation=(1, 0)] hro
            hrq:f16[6400,1600] = transpose[permutation=(1, 0)] hrp
            hrr:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] hrk hbx
            hrs:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] hrr
            hrt:f32[1600] = reduce_sum[axes=(0, 1)] hrs
            hru:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] hrt
            hrv:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] hru
            hrw:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] hrv
            hrx:f32[64,256,1600] = mul hby hrs
            hry:f32[64,256,1600] = mul hbz hrx
            hrz:f32[1600] = reduce_sum[axes=(0, 1)] hry
            hsa:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] hrz
            hsb:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] hsa
            hsc:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] hsb
            hsd:f32[64,256,1600] = mul hrx hca
            hse:f32[64,256] = reduce_sum[axes=(2,)] hsd
            hsf:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] hse
            hsg:f32[64,256,1] = mul hsf hcb
            hsh:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] hsg
            hsi:f32[64,256] = mul hsh hcc
            hsj:f32[64,256] = neg hsi
            hsk:f32[64,256] = mul hsj hcd
            hsl:f32[64,256] = div hsi 1600.0
            hsm:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] hsl
            hsn:f32[64,256,1600] = mul hsm hce
            hso:f32[64,256,1600] = mul hrs hcf
            hsp:f32[64,256,1600] = neg hso
            hsq:f32[64,256] = reduce_sum[axes=(2,)] hsp
            hsr:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] hsq
            hss:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] hsr
            hst:f32[64,256] = add_any hsk hss
            hsu:f32[64,256] = div hst 1600.0
            hsv:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] hsu
            hsw:f32[64,256,1600] = add_any hsn hsv
            hsx:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] hsw
            hsy:f16[64,256,1600] = add_any hqs hsx
            hsz:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] hso
            hta:f16[64,256,1600] = add_any hsy hsz
            htb:f16[1600] = reduce_sum[axes=(0, 1)] hta
            htc:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] htb
            htd:f16[1600] = reduce_sum[axes=(0, 1)] htc
            hte:f16[1600,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] hta hcg
            htf:f16[1600,1600] = transpose[permutation=(1, 0)] hte
            htg:f16[1600,1600] = transpose[permutation=(1, 0)] htf
            hth:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] hta hch
            hti:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] hth
            htj:f16[64,25,64,256] = transpose[permutation=(0, 2, 3, 1)] hti
            htk:f16[64,25,256,256] = dot_general[
              dimension_numbers=(((2,), (3,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] htj hci
            htl:f16[64,25,256,256] = mul htk hcj
            htm:f16[64,25,256,256] = mul htl hck
            htn:f16[64,25,256] = reduce_sum[axes=(3,)] htm
            hto:f16[64,25,256,1] = reshape[
              dimensions=None
              new_sizes=(64, 25, 256, 1)
            ] htn
            htp:f16[64,25,256,1] = neg hto
            htq:f32[64,25,256,1] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] htp
            htr:f32[64,25,256] = reduce_sum[axes=(3,)] htq
            hts:f32[64,25,256,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 256)
            ] htr
            htt:f16[64,25,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] hts
            htu:f16[64,25,256,256] = div htk hcl
            htv:f16[64,25,256,256] = add_any htt htu
            htw:f16[64,25,256,256] = mul htv hck
            htx:f16[64,25,256,64] = dot_general[
              dimension_numbers=(((2,), (1,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] htw hcm
            hty:f16[64,256,25,64] = transpose[permutation=(0, 2, 1, 3)] htx
            htz:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] hty
            hua:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (1600, 1600, 0))
            ] htz 0.0
            hub:f16[64,25,256,64] = dot_general[
              dimension_numbers=(((3,), (1,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] htw hcn
            huc:f16[64,256,25,64] = transpose[permutation=(0, 2, 1, 3)] hub
            hud:f16[64,256,25,64] = div huc hco
            hue:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] hud
            huf:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (0, 3200, 0))
            ] hue 0.0
            hug:f16[64,256,4800] = add_any hua huf
            huh:f16[64,25,64,256] = dot_general[
              dimension_numbers=(((3,), (2,)), ((0, 1), (0, 1)))
              precision=None
              preferred_element_type=None
            ] htj hcp
            hui:f16[64,256,25,64] = transpose[permutation=(0, 3, 1, 2)] huh
            huj:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] hui
            huk:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (3200, 0, 0))
            ] huj 0.0
            hul:f16[64,256,4800] = add_any hug huk
            hum:f16[4800] = reduce_sum[axes=(0, 1)] hul
            hun:f16[1,1,4800] = reshape[dimensions=None new_sizes=(1, 1, 4800)] hum
            huo:f16[4800] = reduce_sum[axes=(0, 1)] hun
            hup:f16[4800,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] hul hcq
            huq:f16[1600,4800] = transpose[permutation=(1, 0)] hup
            hur:f16[4800,1600] = transpose[permutation=(1, 0)] huq
            hus:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] hul hcr
            hut:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] hus
            huu:f32[1600] = reduce_sum[axes=(0, 1)] hut
            huv:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] huu
            huw:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] huv
            hux:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] huw
            huy:f32[64,256,1600] = mul hcs hut
            huz:f32[64,256,1600] = mul hct huy
            hva:f32[1600] = reduce_sum[axes=(0, 1)] huz
            hvb:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] hva
            hvc:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] hvb
            hvd:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] hvc
            hve:f32[64,256,1600] = mul huy hcu
            hvf:f32[64,256] = reduce_sum[axes=(2,)] hve
            hvg:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] hvf
            hvh:f32[64,256,1] = mul hvg hcv
            hvi:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] hvh
            hvj:f32[64,256] = mul hvi hcw
            hvk:f32[64,256] = neg hvj
            hvl:f32[64,256] = mul hvk hcx
            hvm:f32[64,256] = div hvj 1600.0
            hvn:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] hvm
            hvo:f32[64,256,1600] = mul hvn hcy
            hvp:f32[64,256,1600] = mul hut hcz
            hvq:f32[64,256,1600] = neg hvp
            hvr:f32[64,256] = reduce_sum[axes=(2,)] hvq
            hvs:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] hvr
            hvt:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] hvs
            hvu:f32[64,256] = add_any hvl hvt
            hvv:f32[64,256] = div hvu 1600.0
            hvw:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] hvv
            hvx:f32[64,256,1600] = add_any hvo hvw
            hvy:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] hvx
            hvz:f16[64,256,1600] = add_any hta hvy
            hwa:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] hvp
            hwb:f16[64,256,1600] = add_any hvz hwa
            hwc:f16[1600] = add gwj hdc
            hwd:f16[1600,1600] = add gwk hdf
            hwe:f16[4800] = add gwl hen
            hwf:f16[4800,1600] = add gwm heq
            hwg:f16[1600] = add gwn hew
            hwh:f16[1600] = add gwo hfc
            hwi:f16[1600] = add gwp hgd
            hwj:f16[1600,6400] = add gwq hgg
            hwk:f16[6400] = add gwr hgv
            hwl:f16[6400,1600] = add gws hgy
            hwm:f16[1600] = add gwt hhe
            hwn:f16[1600] = add gwu hhk
            hwo:f16[1600] = add gwv hil
            hwp:f16[1600,1600] = add gww hio
            hwq:f16[4800] = add gwx hjw
            hwr:f16[4800,1600] = add gwy hjz
            hws:f16[1600] = add gwz hkf
            hwt:f16[1600] = add gxa hkl
            hwu:f16[1600] = add gxb hlm
            hwv:f16[1600,6400] = add gxc hlp
            hww:f16[6400] = add gxd hme
            hwx:f16[6400,1600] = add gxe hmh
            hwy:f16[1600] = add gxf hmn
            hwz:f16[1600] = add gxg hmt
            hxa:f16[1600] = add gxh hnu
            hxb:f16[1600,1600] = add gxi hnx
            hxc:f16[4800] = add gxj hpf
            hxd:f16[4800,1600] = add gxk hpi
            hxe:f16[1600] = add gxl hpo
            hxf:f16[1600] = add gxm hpu
            hxg:f16[1600] = add gxn hqv
            hxh:f16[1600,6400] = add gxo hqy
            hxi:f16[6400] = add gxp hrn
            hxj:f16[6400,1600] = add gxq hrq
            hxk:f16[1600] = add gxr hrw
            hxl:f16[1600] = add gxs hsc
            hxm:f16[1600] = add gxt htd
            hxn:f16[1600,1600] = add gxu htg
            hxo:f16[4800] = add gxv huo
            hxp:f16[4800,1600] = add gxw hur
            hxq:f16[1600] = add gxx hux
            hxr:f16[1600] = add gxy hvd
          in (hwb, hwc, hwd, hwe, hwf, hwg, hwh, hwi, hwj, hwk, hwl, hwm, hwn, hwo,
            hwp, hwq, hwr, hws, hwt, hwu, hwv, hww, hwx, hwy, hwz, hxa, hxb, hxc,
            hxd, hxe, hxf, hxg, hxh, hxi, hxj, hxk, hxl, hxm, hxn, hxo, hxp, hxq,
            hxr) }
        name=64
      ] fnz ql qm qn qo qp qq qr qs qt qu qv qw qx qy qz ra rb rc rd re rf rg rh
        ri rj rk rl rm rn ro rp rq rr rs rt ru rv rw rx ry rz sa bow box boy boz
        bpa bpb bpc bpd bpe bpf bpg bph bpi bpj bpk bpl bpm bpn bpo bpp bpq bpr bps
        bpt bpu bpv bpw bpx bpy bpz bqa bqb bqc bqd bqe bqf bqg bqh bqi bqj bqk bql
        bqm bqn bqo bqp bqq bqr bqs bqt bqu bqv bqw bqx bqy bqz bra brb brc brd bre
        brf brg brh bri brj brk brl brm brn bro brp brq brr brs brt bru brv brw brx
        bry brz bsa bsb bsc bsd bse bsf bsg bsh bsi bsj bsk bsl bsm bsn bso bsp bsq
        bsr bss bst bsu bsv bsw bsx bsy bsz bta btb btc btd bte btf btg bth bti btj
        btk btl btm btn bto btp btq btr bts btt btu btv btw
    in (bty, btz, bua, bub, buc, bud, bue, buf, bug, buh, bui, buj, buk, bul, bum,
      bun, buo, bup, buq, bur, bus, but, buu, buv, buw, bux, buy, buz, bva, bvb,
      bvc, bvd, bve, bvf, bvg, bvh, bvi, bvj, bvk, bvl, bvm, bvn, bvo, bvp, bvq,
      bvr, bvs, bvt, daq, dar, das, dat, dau, dav, daw, dax, day, daz, dba, dbb,
      dbc, dbd, dbe, dbf, dbg, dbh, dbi, dbj, dbk, dbl, dbm, dbn, dbo, dbp, dbq,
      dbr, dbs, dbt, dbu, dbv, dbw, dbx, dby, dbz, dca, dcb, dcc, dcd, dce, dcf,
      dcg, dch, dci, dcj, dck, dcl, ehi, ehj, ehk, ehl, ehm, ehn, eho, ehp, ehq,
      ehr, ehs, eht, ehu, ehv, ehw, ehx, ehy, ehz, eia, eib, eic, eid, eie, eif,
      eig, eih, eii, eij, eik, eil, eim, ein, eio, eip, eiq, eir, eis, eit, eiu,
      eiv, eiw, eix, eiy, eiz, eja, ejb, ejc, ejd, foa, fob, foc, fod, foe, fof,
      fog, foh, foi, foj, fok, fol, fom, fon, foo, fop, foq, for, fos, fot, fou,
      fov, fow, fox, foy, foz, fpa, fpb, fpc, fpd, fpe, fpf, fpg, fph, fpi, fpj,
      fpk, fpl, fpm, fpn, fpo, fpp, fpq, fpr, fps, fpt, fpu, fpv, gus, gut, guu,
      guv, guw, gux, guy, guz, gva, gvb, gvc, gvd, gve, gvf, gvg, gvh, gvi, gvj,
      gvk, gvl, gvm, gvn, gvo, gvp, gvq, gvr, gvs, gvt, gvu, gvv, gvw, gvx, gvy,
      gvz, gwa, gwb, gwc, gwd, gwe, gwf, gwg, gwh, gur) }
  name=6
] hxs hxt hxu hxv hxw hxx hxy hxz hya hyb hyc hyd hye hyf hyg hyh hyi hyj hyk hyl
  hym hyn hyo hyp hyq hyr hys hyt hyu hyv hyw hyx hyy hyz hza hzb hzc hzd hze hzf
  hzg hzh hzi hzj hzk hzl hzm hzn hzo hzp hzq hzr hzs hzt hzu hzv hzw hzx hzy hzz
  iaa iab iac iad iae iaf iag iah iai iaj iak ial iam ian iao iap iaq iar ias iat
  iau iav iaw iax iay iaz iba ibb ibc ibd ibe ibf ibg ibh ibi ibj ibk ibl ibm ibn
  ibo ibp ibq ibr ibs ibt ibu ibv ibw ibx iby ibz ica icb icc icd ice icf icg ich
  ici icj ick icl icm icn ico icp icq icr ics ict icu icv icw icx icy icz ida idb
  idc idd ide idf idg idh idi idj idk idl idm idn ido idp idq idr ids idt idu idv
  idw idx idy idz iea ieb iec ied iee ief ieg ieh iei iej iek iel iem ien ieo iep
  ieq ier ies iet ieu iev iew iex iey iez ifa ifb ifc ifd ife iff ifg ifh ifi ifj
  ifk ifl ifm ifn ifo ifp ifq ifr ifs ift ifu ifv ifw ifx ify ifz iga igb igc igd
  ige igf igg igh igi igj igk igl igm ign igo igp igq igr igs igt igu igv igw igx
  igy igz iha ihb ihc ihd ihe ihf ihg ihh ihi ihj ihk ihl ihm ihn iho ihp ihq ihr
  ihs iht ihu ihv ihw ihx ihy ihz iia iib iic iid iie iif iig iih iii iij iik iil
  iim iin iio iip iiq iir iis iit iiu iiv iiw iix iiy iiz ija ijb ijc ijd ije ijf
  ijg ijh iji ijj ijk ijl ijm ijn ijo ijp ijq ijr ijs ijt iju ijv ijw ijx ijy ijz
  ika ikb ikc ikd ike ikf ikg ikh iki ikj ikk ikl ikm ikn iko ikp ikq ikr iks ikt
  iku ikv ikw ikx iky ikz ila ilb ilc ild ile ilf ilg ilh ili ilj ilk ill ilm iln
  ilo ilp ilq ilr ils ilt ilu ilv ilw ilx ily ilz ima imb imc imd ime imf img imh
  imi imj imk iml imm imn imo imp imq imr ims imt imu imv imw imx imy imz ina inb
  inc ind ine inf ing inh ini inj ink inl inm inn ino inp inq inr ins int inu inv
  inw inx iny inz ioa iob ioc iod ioe iof iog ioh ioi ioj iok iol iom ion ioo iop
  ioq ior ios iot iou iov iow iox ioy ioz ipa ipb ipc ipd ipe ipf ipg iph ipi ipj
  ipk ipl ipm ipn ipo ipp ipq ipr ips ipt ipu ipv ipw ipx ipy ipz iqa iqb iqc iqd
  iqe iqf iqg iqh iqi iqj iqk iql iqm iqn iqo iqp iqq iqr iqs iqt iqu iqv iqw iqx
  iqy iqz ira irb irc ird ire irf irg irh iri irj irk irl irm irn iro irp irq irr
  irs irt iru irv irw irx iry irz isa isb isc isd ise isf isg ish isi isj isk isl
  ism isn iso isp isq isr iss ist isu isv isw isx isy isz ita itb itc itd ite itf
  itg ith iti itj itk itl itm itn ito itp itq itr its itt itu itv itw itx ity itz
  iua iub iuc iud iue iuf iug iuh iui iuj iuk iul ium iun iuo iup iuq iur ius iut
  iuu iuv iuw iux iuy iuz iva ivb ivc ivd ive ivf ivg ivh ivi ivj ivk ivl ivm ivn
  ivo ivp ivq ivr ivs ivt ivu ivv ivw ivx ivy ivz iwa iwb iwc iwd iwe iwf iwg iwh
  iwi iwj iwk iwl iwm iwn iwo iwp iwq iwr iws iwt iwu iwv iww iwx iwy iwz ixa ixb
  ixc ixd ixe ixf ixg ixh ixi ixj ixk ixl ixm ixn ixo ixp ixq ixr ixs ixt ixu ixv
  ixw ixx ixy ixz iya iyb iyc iyd iye iyf iyg iyh iyi iyj iyk iyl iym iyn iyo iyp
  iyq iyr iys iyt iyu iyv iyw iyx iyy iyz iza izb izc izd ize izf izg izh izi izj
  izk izl izm izn izo izp izq izr izs izt izu izv izw izx izy izz jaa jab jac jad
  jae jaf jag jah jai jaj jak jal jam jan jao jap jaq jar jas jat jau jav jaw jax
  jay jaz jba jbb jbc jbd jbe jbf jbg jbh jbi jbj jbk jbl jbm jbn jbo jbp jbq jbr
  jbs jbt jbu jbv jbw jbx jby jbz jca jcb jcc jcd jce jcf jcg jch jci jcj jck jcl
  jcm jcn jco jcp jcq jcr jcs jct jcu jcv jcw jcx jcy jcz jda jdb jdc jdd jde jdf
  jdg jdh jdi jdj jdk jdl jdm jdn jdo jdp jdq jdr jds jdt jdu jdv jdw jdx jdy jdz
  jea jeb jec jed jee jef jeg jeh jei jej jek jel jem jen jeo jep jeq jer jes jet
  jeu jev jew jex jey jez jfa jfb jfc jfd jfe jff jfg jfh jfi jfj jfk jfl jfm jfn
  jfo jfp jfq jfr jfs jft jfu jfv jfw jfx jfy jfz jga jgb jgc jgd jge jgf jgg jgh
  jgi jgj jgk jgl jgm jgn jgo jgp jgq jgr jgs jgt jgu jgv jgw jgx jgy jgz jha jhb
  jhc jhd jhe jhf jhg jhh jhi jhj jhk jhl jhm jhn jho jhp jhq jhr jhs jht jhu jhv
  jhw jhx jhy jhz jia jib jic jid jie jif jig jih jii jij jik jil jim jin
eqn: a:f16[1600] b:f16[1600,1600] c:f16[4800] d:f16[4800,1600] e:f16[1600] f:f16[1600]
  g:f16[1600] h:f16[1600,6400] i:f16[6400] j:f16[6400,1600] k:f16[1600] l:f16[1600]
  m:f16[1600] n:f16[1600,1600] o:f16[4800] p:f16[4800,1600] q:f16[1600] r:f16[1600]
  s:f16[1600] t:f16[1600,6400] u:f16[6400] v:f16[6400,1600] w:f16[1600] x:f16[1600]
  y:f16[1600] z:f16[1600,1600] ba:f16[4800] bb:f16[4800,1600] bc:f16[1600] bd:f16[1600]
  be:f16[1600] bf:f16[1600,6400] bg:f16[6400] bh:f16[6400,1600] bi:f16[1600] bj:f16[1600]
  bk:f16[1600] bl:f16[1600,1600] bm:f16[4800] bn:f16[4800,1600] bo:f16[1600] bp:f16[1600]
  bq:f16[1600] br:f16[1600,6400] bs:f16[6400] bt:f16[6400,1600] bu:f16[1600] bv:f16[1600]
  bw:f16[1600] bx:f16[1600,1600] by:f16[4800] bz:f16[4800,1600] ca:f16[1600] cb:f16[1600]
  cc:f16[1600] cd:f16[1600,6400] ce:f16[6400] cf:f16[6400,1600] cg:f16[1600] ch:f16[1600]
  ci:f16[1600] cj:f16[1600,1600] ck:f16[4800] cl:f16[4800,1600] cm:f16[1600] cn:f16[1600]
  co:f16[1600] cp:f16[1600,6400] cq:f16[6400] cr:f16[6400,1600] cs:f16[1600] ct:f16[1600]
  cu:f16[1600] cv:f16[1600,1600] cw:f16[4800] cx:f16[4800,1600] cy:f16[1600] cz:f16[1600]
  da:f16[1600] db:f16[1600,6400] dc:f16[6400] dd:f16[6400,1600] de:f16[1600] df:f16[1600]
  dg:f16[1600] dh:f16[1600,1600] di:f16[4800] dj:f16[4800,1600] dk:f16[1600] dl:f16[1600]
  dm:f16[1600] dn:f16[1600,6400] do:f16[6400] dp:f16[6400,1600] dq:f16[1600] dr:f16[1600]
  ds:f16[1600] dt:f16[1600,1600] du:f16[4800] dv:f16[4800,1600] dw:f16[1600] dx:f16[1600]
  dy:f16[1600] dz:f16[1600,6400] ea:f16[6400] eb:f16[6400,1600] ec:f16[1600] ed:f16[1600]
  ee:f16[1600] ef:f16[1600,1600] eg:f16[4800] eh:f16[4800,1600] ei:f16[1600] ej:f16[1600]
  ek:f16[1600] el:f16[1600,6400] em:f16[6400] en:f16[6400,1600] eo:f16[1600] ep:f16[1600]
  eq:f16[1600] er:f16[1600,1600] es:f16[4800] et:f16[4800,1600] eu:f16[1600] ev:f16[1600]
  ew:f16[1600] ex:f16[1600,6400] ey:f16[6400] ez:f16[6400,1600] fa:f16[1600] fb:f16[1600]
  fc:f16[1600] fd:f16[1600,1600] fe:f16[4800] ff:f16[4800,1600] fg:f16[1600] fh:f16[1600]
  fi:f16[1600] fj:f16[1600,6400] fk:f16[6400] fl:f16[6400,1600] fm:f16[1600] fn:f16[1600]
  fo:f16[1600] fp:f16[1600,1600] fq:f16[4800] fr:f16[4800,1600] fs:f16[1600] ft:f16[1600]
  fu:f16[1600] fv:f16[1600,6400] fw:f16[6400] fx:f16[6400,1600] fy:f16[1600] fz:f16[1600]
  ga:f16[1600] gb:f16[1600,1600] gc:f16[4800] gd:f16[4800,1600] ge:f16[1600] gf:f16[1600]
  gg:f16[1600] gh:f16[1600,6400] gi:f16[6400] gj:f16[6400,1600] gk:f16[1600] gl:f16[1600]
  gm:f16[1600] gn:f16[1600,1600] go:f16[4800] gp:f16[4800,1600] gq:f16[1600] gr:f16[1600]
  gs:f16[1600] gt:f16[1600,6400] gu:f16[6400] gv:f16[6400,1600] gw:f16[1600] gx:f16[1600]
  gy:f16[1600] gz:f16[1600,1600] ha:f16[4800] hb:f16[4800,1600] hc:f16[1600] hd:f16[1600]
  he:f16[1600] hf:f16[1600,6400] hg:f16[6400] hh:f16[6400,1600] hi:f16[1600] hj:f16[1600]
  hk:f16[1600] hl:f16[1600,1600] hm:f16[4800] hn:f16[4800,1600] ho:f16[1600] hp:f16[1600]
  hq:f16[1600] hr:f16[1600,6400] hs:f16[6400] ht:f16[6400,1600] hu:f16[1600] hv:f16[1600]
  hw:f16[1600] hx:f16[1600,1600] hy:f16[4800] hz:f16[4800,1600] ia:f16[1600] ib:f16[1600]
  ic:f16[1600] id:f16[1600,6400] ie:f16[6400] if:f16[6400,1600] ig:f16[1600] ih:f16[1600]
  ii:f16[1600] ij:f16[1600,1600] ik:f16[4800] il:f16[4800,1600] im:f16[1600] in:f16[1600]
  io:f16[1600] ip:f16[1600,6400] iq:f16[6400] ir:f16[6400,1600] is:f16[1600] it:f16[1600]
  iu:f16[1600] iv:f16[1600,1600] iw:f16[4800] ix:f16[4800,1600] iy:f16[1600] iz:f16[1600]
  ja:f16[64,256,1600] = pipeline_marker[mark_type=end name=6] jb jc jd je jf jg jh
  ji jj jk jl jm jn jo jp jq jr js jt ju jv jw jx jy jz ka kb kc kd ke kf kg kh ki
  kj kk kl km kn ko kp kq kr ks kt ku kv kw kx ky kz la lb lc ld le lf lg lh li lj
  lk ll lm ln lo lp lq lr ls lt lu lv lw lx ly lz ma mb mc md me mf mg mh mi mj mk
  ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd ne nf ng nh ni nj nk nl
  nm nn no np nq nr ns nt nu nv nw nx ny nz oa ob oc od oe of og oh oi oj ok ol om
  on oo op oq or os ot ou ov ow ox oy oz pa pb pc pd pe pf pg ph pi pj pk pl pm pn
  po pp pq pr ps pt pu pv pw px py pz qa qb qc qd qe qf qg qh qi qj qk ql qm qn qo
  qp qq qr qs qt qu qv qw qx qy qz ra rb rc rd re rf rg rh ri rj rk rl rm rn ro rp
  rq rr rs rt ru rv rw rx ry rz sa sb
input_var_mem_size
[clpv, clpw, clpt, clpu, clpx, clpy, clpr, clps, clpp, clpq, clpn, clpo, clpj, clpk, clph, clpi, clpl, clpm, clpf, clpg, clpd, clpe, clpb, clpc, clox, cloy, clov, clow, cloz, clpa, clot, clou, clor, clos, clop, cloq, clol, clom, cloj, clok, clon, cloo, cloh, cloi, clof, clog, clod, cloe, clnz, cloa, clnx, clny, clob, cloc, clnv, clnw, clnt, clnu, clnr, clns, clnn, clno, clnl, clnm, clnp, clnq, clnj, clnk, clnh, clni, clnf, clng, clnb, clnc, clmz, clna, clnd, clne, clmx, clmy, clmv, clmw, clmt, clmu, clmp, clmq, clmn, clmo, clmr, clms, clml, clmm, clmj, clmk, clmh, clmi, clmd, clme, clmb, clmc, clmf, clmg, clln, cllo, clll, cllm, cllj, cllk, cllf, cllg, clld, clle, cllh, clli, cllb, cllc, clkz, clla, clkx, clky, clkt, clku, clkr, clks, clkv, clkw, clkp, clkq, clkn, clko, clkl, clkm, clkh, clki, clkf, clkg, clkj, clkk, clkd, clke, clkb, clkc, cljz, clka, cljv, cljw, cljt, clju, cljx, cljy, cljr, cljs, cljp, cljq, cljn, cljo, cljj, cljk, cljh, clji, cljl, cljm, cljf, cljg, cljd, clje, cljb, cljc, clix, cliy, cliv, cliw, cliz, clja, clit, cliu, clir, clis, clip, cliq, clil, clim, clij, clik, clin, clio, clih, clii, clif, clig, clid, clie, clhz, clia, clhx, clhy, clib, clic, clhv, clhw, clht, clhu, clhr, clhs, clhn, clho, clhl, clhm, clhp, clhq, clhj, clhk, clhh, clhi, clhf, clhg, clhb, clhc, clgz, clha, clhd, clhe, cmcd, cmce, cmcb, cmcc, cmbz, cmca, cmbv, cmbw, cmbt, cmbu, cmbx, cmby, uan, kqw, kqx, kpi, kqt, kqn, kqr, kqd, kph, kqc, kqs, kos, koz, kog, koi, kom, kok, koc, knr, knm, kon, knb, knc, kmq, kmy, kmx, kmt, kna, kmm, kmn, kma, kmc, kmg, kme, klw, kll, klg, kmh, kkv, kkw, kjh, kks, kkm, kkq, kkc, kjg, kkb, kkr, kir, kiy, kif, kih, kil, kij, kib, khq, khl, kim, kha, khb, kgp, kgx, kgw, kgs, kgz, kgl, kgm, kfz, kgb, kgf, kgd, kfv, kfk, kff, kgg, keu, kev, kdg, ker, kel, kep, keb, kdf, kea, keq, kcq, kcx, kce, kcg, kck, kci, kca, kbp, kbk, kcl, kaz, kba, kao, kaw, kav, kar, kay, kak, kal, jzy, kaa, kae, kac, jzu, jzj, jze, kaf, jyt, jyu, jxf, jyq, jyk, jyo, jya, jxe, jxz, jyp, jwp, jww, jwd, jwf, jwj, jwh, jvz, jvo, jvj, jwk, juy, juz, jun, juv, juu, juq, jux, juj, juk, jtx, jtz, jud, jub, jtt, jti, jtd, jue, jqt, jqu, jpf, jqq, jqk, jqo, jqa, jpe, jpz, jqp, jop, jow, jod, jof, joj, joh, jnz, jno, jnj, jok, jmy, jmz, jmn, jmv, jmu, jmq, jmx, jmj, jmk, jlx, jlz, jmd, jmb, jlt, jli, jld, jme, jks, jkt, jje, jkp, jkj, jkn, jjz, jjd, jjy, jko, jio, jiv, jic, jie, jii, jig, jhy, jhn, jhi, jij, jgx, jgy, jgm, jgu, jgt, jgp, jgw, jgi, jgj, jfw, jfy, jgc, jga, jfs, jfh, jfc, jgd, jer, jes, jdd, jeo, jei, jem, jdy, jdc, jdx, jen, jcn, jcu, jcb, jcd, jch, jcf, jbx, jbm, jbh, jci, jaw, jax, jal, jat, jas, jao, jav, jah, jai, izv, izx, jab, izz, izr, izg, izb, jac, iyq, iyr, ixc, iyn, iyh, iyl, ixx, ixb, ixw, iym, iwm, iwt, iwa, iwc, iwg, iwe, ivw, ivl, ivg, iwh, iuv, iuw, iuk, ius, iur, iun, iuu, iug, iuh, itu, itw, iua, ity, itq, itf, ita, iub, iqq, iqr, ipc, iqn, iqh, iql, ipx, ipb, ipw, iqm, iom, iot, ioa, ioc, iog, ioe, inw, inl, ing, ioh, imv, imw, imk, ims, imr, imn, imu, img, imh, ilu, ilw, ima, ily, ilq, ilf, ila, imb, ikp, ikq, ijb, ikm, ikg, ikk, ijw, ija, ijv, ikl, iil, iis, ihz, iib, iif, iid, ihv, ihk, ihf, iig, igu, igv, igj, igr, igq, igm, igt, igf, igg, ift, ifv, ifz, ifx, ifp, ife, iez, iga, ieo, iep, ida, iel, ief, iej, idv, icz, idu, iek, ick, icr, iby, ica, ice, icc, ibu, ibj, ibe, icf, iat, iau, iai, iaq, iap, ial, ias, iae, iaf, hzs, hzu, hzy, hzw, hzo, hzd, hyy, hzz, hyn, hyo, hwz, hyk, hye, hyi, hxu, hwy, hxt, hyj, hwj, hwq, hvx, hvz, hwd, hwb, hvt, hvi, hvd, hwe, hus, hut, huh, hup, huo, huk, hur, hud, hue, htr, htt, htx, htv, htn, htc, hsx, hty, hqn, hqo, hoz, hqk, hqe, hqi, hpu, hoy, hpt, hqj, hoj, hoq, hnx, hnz, hod, hob, hnt, hni, hnd, hoe, hms, hmt, hmh, hmp, hmo, hmk, hmr, hmd, hme, hlr, hlt, hlx, hlv, hln, hlc, hkx, hly, hkm, hkn, hiy, hkj, hkd, hkh, hjt, hix, hjs, hki, hii, hip, hhw, hhy, hic, hia, hhs, hhh, hhc, hid, hgr, hgs, hgg, hgo, hgn, hgj, hgq, hgc, hgd, hfq, hfs, hfw, hfu, hfm, hfb, hew, hfx, hel, hem, hcx, hei, hec, heg, hds, hcw, hdr, heh, hch, hco, hbv, hbx, hcb, hbz, hbr, hbg, hbb, hcc, haq, har, haf, han, ham, hai, hap, hab, hac, gzp, gzr, gzv, gzt, gzl, gza, gyv, gzw, gyk, gyl, gww, gyh, gyb, gyf, gxr, gwv, gxq, gyg, gwg, gwn, gvu, gvw, gwa, gvy, gvq, gvf, gva, gwb, gup, guq, gue, gum, gul, guh, guo, gua, gub, gto, gtq, gtu, gts, gtk, gsz, gsu, gtv, gqk, gql, gow, gqh, gqb, gqf, gpr, gov, gpq, gqg, gog, gon, gnu, gnw, goa, gny, gnq, gnf, gna, gob, gmp, gmq, gme, gmm, gml, gmh, gmo, gma, gmb, glo, glq, glu, gls, glk, gkz, gku, glv, gkj, gkk, giv, gkg, gka, gke, gjq, giu, gjp, gkf, gif, gim, ght, ghv, ghz, ghx, ghp, ghe, ggz, gia, ggo, ggp, ggd, ggl, ggk, ggg, ggn, gfz, gga, gfn, gfp, gft, gfr, gfj, gey, get, gfu, gei, gej, gcu, gef, gdz, ged, gdp, gct, gdo, gee, gce, gcl, gbs, gbu, gby, gbw, gbo, gbd, gay, gbz, gan, gao, gac, gak, gaj, gaf, gam, fzy, fzz, fzm, fzo, fzs, fzq, fzi, fyx, fys, fzt, fyh, fyi, fwt, fye, fxy, fyc, fxo, fws, fxn, fyd, fwd, fwk, fvr, fvt, fvx, fvv, fvn, fvc, fux, fvy]
[(1600,), (1600, 1600), (4800,), (4800, 1600), (1600,), (1600,), (1600,), (1600, 6400), (6400,), (6400, 1600), (1600,), (1600,), (1600,), (1600, 1600), (4800,), (4800, 1600), (1600,), (1600,), (1600,), (1600, 6400), (6400,), (6400, 1600), (1600,), (1600,), (1600,), (1600, 1600), (4800,), (4800, 1600), (1600,), (1600,), (1600,), (1600, 6400), (6400,), (6400, 1600), (1600,), (1600,), (1600,), (1600, 1600), (4800,), (4800, 1600), (1600,), (1600,), (1600,), (1600, 6400), (6400,), (6400, 1600), (1600,), (1600,), (1600,), (1600, 1600), (4800,), (4800, 1600), (1600,), (1600,), (1600,), (1600, 6400), (6400,), (6400, 1600), (1600,), (1600,), (1600,), (1600, 1600), (4800,), (4800, 1600), (1600,), (1600,), (1600,), (1600, 6400), (6400,), (6400, 1600), (1600,), (1600,), (1600,), (1600, 1600), (4800,), (4800, 1600), (1600,), (1600,), (1600,), (1600, 6400), (6400,), (6400, 1600), (1600,), (1600,), (1600,), (1600, 1600), (4800,), (4800, 1600), (1600,), (1600,), (1600,), (1600, 6400), (6400,), (6400, 1600), (1600,), (1600,), (1600,), (1600, 1600), (4800,), (4800, 1600), (1600,), (1600,), (1600,), (1600, 6400), (6400,), (6400, 1600), (1600,), (1600,), (1600,), (1600, 1600), (4800,), (4800, 1600), (1600,), (1600,), (1600,), (1600, 6400), (6400,), (6400, 1600), (1600,), (1600,), (1600,), (1600, 1600), (4800,), (4800, 1600), (1600,), (1600,), (1600,), (1600, 6400), (6400,), (6400, 1600), (1600,), (1600,), (1600,), (1600, 1600), (4800,), (4800, 1600), (1600,), (1600,), (1600,), (1600, 6400), (6400,), (6400, 1600), (1600,), (1600,), (1600,), (1600, 1600), (4800,), (4800, 1600), (1600,), (1600,), (1600,), (1600, 6400), (6400,), (6400, 1600), (1600,), (1600,), (1600,), (1600, 1600), (4800,), (4800, 1600), (1600,), (1600,), (1600,), (1600, 6400), (6400,), (6400, 1600), (1600,), (1600,), (1600,), (1600, 1600), (4800,), (4800, 1600), (1600,), (1600,), (1600,), (1600, 6400), (6400,), (6400, 1600), (1600,), (1600,), (1600,), (1600, 1600), (4800,), (4800, 1600), (1600,), (1600,), (1600,), (1600, 6400), (6400,), (6400, 1600), (1600,), (1600,), (1600,), (1600, 1600), (4800,), (4800, 1600), (1600,), (1600,), (1600,), (1600, 6400), (6400,), (6400, 1600), (1600,), (1600,), (1600,), (1600, 1600), (4800,), (4800, 1600), (1600,), (1600,), (1600,), (1600, 6400), (6400,), (6400, 1600), (1600,), (1600,), (1600,), (1600, 1600), (4800,), (4800, 1600), (1600,), (1600,), (1600,), (1600, 6400), (6400,), (6400, 1600), (1600,), (1600,), (1600,), (1600, 1600), (4800,), (4800, 1600), (1600,), (1600,), (64, 256, 1600), (64, 256, 1600), (1600, 1600), (64, 256, 25, 64), (64, 25, 256, 1), (64, 25, 256, 256), (64, 25, 256, 1), (64, 256, 25, 64), (64, 256, 25, 64), (), (64, 25, 256, 256), (64, 256, 1600), (1600, 4800), (64, 256, 1600), (64, 256, 1), (1, 1, 1600), (64, 256, 1), (64, 256), (64, 256), (64, 256, 1600), (64, 256, 1600), (64, 256, 6400), (6400, 1600), (64, 256, 6400), (64, 256, 6400), (64, 256, 6400), (64, 256, 6400), (64, 256, 6400), (64, 256, 1600), (1600, 6400), (64, 256, 1600), (64, 256, 1), (1, 1, 1600), (64, 256, 1), (64, 256), (64, 256), (64, 256, 1600), (64, 256, 1600), (64, 256, 1600), (1600, 1600), (64, 256, 25, 64), (64, 25, 256, 1), (64, 25, 256, 256), (64, 25, 256, 1), (64, 256, 25, 64), (64, 256, 25, 64), (), (64, 25, 256, 256), (64, 256, 1600), (1600, 4800), (64, 256, 1600), (64, 256, 1), (1, 1, 1600), (64, 256, 1), (64, 256), (64, 256), (64, 256, 1600), (64, 256, 1600), (64, 256, 6400), (6400, 1600), (64, 256, 6400), (64, 256, 6400), (64, 256, 6400), (64, 256, 6400), (64, 256, 6400), (64, 256, 1600), (1600, 6400), (64, 256, 1600), (64, 256, 1), (1, 1, 1600), (64, 256, 1), (64, 256), (64, 256), (64, 256, 1600), (64, 256, 1600), (64, 256, 1600), (1600, 1600), (64, 256, 25, 64), (64, 25, 256, 1), (64, 25, 256, 256), (64, 25, 256, 1), (64, 256, 25, 64), (64, 256, 25, 64), (), (64, 25, 256, 256), (64, 256, 1600), (1600, 4800), (64, 256, 1600), (64, 256, 1), (1, 1, 1600), (64, 256, 1), (64, 256), (64, 256), (64, 256, 1600), (64, 256, 1600), (64, 256, 6400), (6400, 1600), (64, 256, 6400), (64, 256, 6400), (64, 256, 6400), (64, 256, 6400), (64, 256, 6400), (64, 256, 1600), (1600, 6400), (64, 256, 1600), (64, 256, 1), (1, 1, 1600), (64, 256, 1), (64, 256), (64, 256), (64, 256, 1600), (64, 256, 1600), (64, 256, 1600), (1600, 1600), (64, 256, 25, 64), (64, 25, 256, 1), (64, 25, 256, 256), (64, 25, 256, 1), (64, 256, 25, 64), (64, 256, 25, 64), (), (64, 25, 256, 256), (64, 256, 1600), (1600, 4800), (64, 256, 1600), (64, 256, 1), (1, 1, 1600), (64, 256, 1), (64, 256), (64, 256), (64, 256, 1600), (64, 256, 1600), (64, 256, 6400), (6400, 1600), (64, 256, 6400), (64, 256, 6400), (64, 256, 6400), (64, 256, 6400), (64, 256, 6400), (64, 256, 1600), (1600, 6400), (64, 256, 1600), (64, 256, 1), (1, 1, 1600), (64, 256, 1), (64, 256), (64, 256), (64, 256, 1600), (64, 256, 1600), (64, 256, 1600), (1600, 1600), (64, 256, 25, 64), (64, 25, 256, 1), (64, 25, 256, 256), (64, 25, 256, 1), (64, 256, 25, 64), (64, 256, 25, 64), (), (64, 25, 256, 256), (64, 256, 1600), (1600, 4800), (64, 256, 1600), (64, 256, 1), (1, 1, 1600), (64, 256, 1), (64, 256), (64, 256), (64, 256, 1600), (64, 256, 1600), (64, 256, 6400), (6400, 1600), (64, 256, 6400), (64, 256, 6400), (64, 256, 6400), (64, 256, 6400), (64, 256, 6400), (64, 256, 1600), (1600, 6400), (64, 256, 1600), (64, 256, 1), (1, 1, 1600), (64, 256, 1), (64, 256), (64, 256), (64, 256, 1600), (64, 256, 1600), (64, 256, 1600), (1600, 1600), (64, 256, 25, 64), (64, 25, 256, 1), (64, 25, 256, 256), (64, 25, 256, 1), (64, 256, 25, 64), (64, 256, 25, 64), (), (64, 25, 256, 256), (64, 256, 1600), (1600, 4800), (64, 256, 1600), (64, 256, 1), (1, 1, 1600), (64, 256, 1), (64, 256), (64, 256), (64, 256, 1600), (64, 256, 1600), (64, 256, 6400), (6400, 1600), (64, 256, 6400), (64, 256, 6400), (64, 256, 6400), (64, 256, 6400), (64, 256, 6400), (64, 256, 1600), (1600, 6400), (64, 256, 1600), (64, 256, 1), (1, 1, 1600), (64, 256, 1), (64, 256), (64, 256), (64, 256, 1600), (64, 256, 1600), (64, 256, 1600), (1600, 1600), (64, 256, 25, 64), (64, 25, 256, 1), (64, 25, 256, 256), (64, 25, 256, 1), (64, 256, 25, 64), (64, 256, 25, 64), (), (64, 25, 256, 256), (64, 256, 1600), (1600, 4800), (64, 256, 1600), (64, 256, 1), (1, 1, 1600), (64, 256, 1), (64, 256), (64, 256), (64, 256, 1600), (64, 256, 1600), (64, 256, 6400), (6400, 1600), (64, 256, 6400), (64, 256, 6400), (64, 256, 6400), (64, 256, 6400), (64, 256, 6400), (64, 256, 1600), (1600, 6400), (64, 256, 1600), (64, 256, 1), (1, 1, 1600), (64, 256, 1), (64, 256), (64, 256), (64, 256, 1600), (64, 256, 1600), (64, 256, 1600), (1600, 1600), (64, 256, 25, 64), (64, 25, 256, 1), (64, 25, 256, 256), (64, 25, 256, 1), (64, 256, 25, 64), (64, 256, 25, 64), (), (64, 25, 256, 256), (64, 256, 1600), (1600, 4800), (64, 256, 1600), (64, 256, 1), (1, 1, 1600), (64, 256, 1), (64, 256), (64, 256), (64, 256, 1600), (64, 256, 1600), (64, 256, 6400), (6400, 1600), (64, 256, 6400), (64, 256, 6400), (64, 256, 6400), (64, 256, 6400), (64, 256, 6400), (64, 256, 1600), (1600, 6400), (64, 256, 1600), (64, 256, 1), (1, 1, 1600), (64, 256, 1), (64, 256), (64, 256), (64, 256, 1600), (64, 256, 1600), (64, 256, 1600), (1600, 1600), (64, 256, 25, 64), (64, 25, 256, 1), (64, 25, 256, 256), (64, 25, 256, 1), (64, 256, 25, 64), (64, 256, 25, 64), (), (64, 25, 256, 256), (64, 256, 1600), (1600, 4800), (64, 256, 1600), (64, 256, 1), (1, 1, 1600), (64, 256, 1), (64, 256), (64, 256), (64, 256, 1600), (64, 256, 1600), (64, 256, 6400), (6400, 1600), (64, 256, 6400), (64, 256, 6400), (64, 256, 6400), (64, 256, 6400), (64, 256, 6400), (64, 256, 1600), (1600, 6400), (64, 256, 1600), (64, 256, 1), (1, 1, 1600), (64, 256, 1), (64, 256), (64, 256), (64, 256, 1600), (64, 256, 1600), (64, 256, 1600), (1600, 1600), (64, 256, 25, 64), (64, 25, 256, 1), (64, 25, 256, 256), (64, 25, 256, 1), (64, 256, 25, 64), (64, 256, 25, 64), (), (64, 25, 256, 256), (64, 256, 1600), (1600, 4800), (64, 256, 1600), (64, 256, 1), (1, 1, 1600), (64, 256, 1), (64, 256), (64, 256), (64, 256, 1600), (64, 256, 1600), (64, 256, 6400), (6400, 1600), (64, 256, 6400), (64, 256, 6400), (64, 256, 6400), (64, 256, 6400), (64, 256, 6400), (64, 256, 1600), (1600, 6400), (64, 256, 1600), (64, 256, 1), (1, 1, 1600), (64, 256, 1), (64, 256), (64, 256), (64, 256, 1600), (64, 256, 1600), (64, 256, 1600), (1600, 1600), (64, 256, 25, 64), (64, 25, 256, 1), (64, 25, 256, 256), (64, 25, 256, 1), (64, 256, 25, 64), (64, 256, 25, 64), (), (64, 25, 256, 256), (64, 256, 1600), (1600, 4800), (64, 256, 1600), (64, 256, 1), (1, 1, 1600), (64, 256, 1), (64, 256), (64, 256), (64, 256, 1600), (64, 256, 1600), (64, 256, 6400), (6400, 1600), (64, 256, 6400), (64, 256, 6400), (64, 256, 6400), (64, 256, 6400), (64, 256, 6400), (64, 256, 1600), (1600, 6400), (64, 256, 1600), (64, 256, 1), (1, 1, 1600), (64, 256, 1), (64, 256), (64, 256), (64, 256, 1600), (64, 256, 1600), (64, 256, 1600), (1600, 1600), (64, 256, 25, 64), (64, 25, 256, 1), (64, 25, 256, 256), (64, 25, 256, 1), (64, 256, 25, 64), (64, 256, 25, 64), (), (64, 25, 256, 256), (64, 256, 1600), (1600, 4800), (64, 256, 1600), (64, 256, 1), (1, 1, 1600), (64, 256, 1), (64, 256), (64, 256), (64, 256, 1600), (64, 256, 1600), (64, 256, 6400), (6400, 1600), (64, 256, 6400), (64, 256, 6400), (64, 256, 6400), (64, 256, 6400), (64, 256, 6400), (64, 256, 1600), (1600, 6400), (64, 256, 1600), (64, 256, 1), (1, 1, 1600), (64, 256, 1), (64, 256), (64, 256), (64, 256, 1600), (64, 256, 1600), (64, 256, 1600), (1600, 1600), (64, 256, 25, 64), (64, 25, 256, 1), (64, 25, 256, 256), (64, 25, 256, 1), (64, 256, 25, 64), (64, 256, 25, 64), (), (64, 25, 256, 256), (64, 256, 1600), (1600, 4800), (64, 256, 1600), (64, 256, 1), (1, 1, 1600), (64, 256, 1), (64, 256), (64, 256), (64, 256, 1600), (64, 256, 1600), (64, 256, 6400), (6400, 1600), (64, 256, 6400), (64, 256, 6400), (64, 256, 6400), (64, 256, 6400), (64, 256, 6400), (64, 256, 1600), (1600, 6400), (64, 256, 1600), (64, 256, 1), (1, 1, 1600), (64, 256, 1), (64, 256), (64, 256), (64, 256, 1600), (64, 256, 1600), (64, 256, 1600), (1600, 1600), (64, 256, 25, 64), (64, 25, 256, 1), (64, 25, 256, 256), (64, 25, 256, 1), (64, 256, 25, 64), (64, 256, 25, 64), (), (64, 25, 256, 256), (64, 256, 1600), (1600, 4800), (64, 256, 1600), (64, 256, 1), (1, 1, 1600), (64, 256, 1), (64, 256), (64, 256), (64, 256, 1600), (64, 256, 1600), (64, 256, 6400), (6400, 1600), (64, 256, 6400), (64, 256, 6400), (64, 256, 6400), (64, 256, 6400), (64, 256, 6400), (64, 256, 1600), (1600, 6400), (64, 256, 1600), (64, 256, 1), (1, 1, 1600), (64, 256, 1), (64, 256), (64, 256), (64, 256, 1600), (64, 256, 1600), (64, 256, 1600), (1600, 1600), (64, 256, 25, 64), (64, 25, 256, 1), (64, 25, 256, 256), (64, 25, 256, 1), (64, 256, 25, 64), (64, 256, 25, 64), (), (64, 25, 256, 256), (64, 256, 1600), (1600, 4800), (64, 256, 1600), (64, 256, 1), (1, 1, 1600), (64, 256, 1), (64, 256), (64, 256), (64, 256, 1600), (64, 256, 1600), (64, 256, 6400), (6400, 1600), (64, 256, 6400), (64, 256, 6400), (64, 256, 6400), (64, 256, 6400), (64, 256, 6400), (64, 256, 1600), (1600, 6400), (64, 256, 1600), (64, 256, 1), (1, 1, 1600), (64, 256, 1), (64, 256), (64, 256), (64, 256, 1600), (64, 256, 1600), (64, 256, 1600), (1600, 1600), (64, 256, 25, 64), (64, 25, 256, 1), (64, 25, 256, 256), (64, 25, 256, 1), (64, 256, 25, 64), (64, 256, 25, 64), (), (64, 25, 256, 256), (64, 256, 1600), (1600, 4800), (64, 256, 1600), (64, 256, 1), (1, 1, 1600), (64, 256, 1), (64, 256), (64, 256), (64, 256, 1600), (64, 256, 1600), (64, 256, 6400), (6400, 1600), (64, 256, 6400), (64, 256, 6400), (64, 256, 6400), (64, 256, 6400), (64, 256, 6400), (64, 256, 1600), (1600, 6400), (64, 256, 1600), (64, 256, 1), (1, 1, 1600), (64, 256, 1), (64, 256), (64, 256), (64, 256, 1600), (64, 256, 1600), (64, 256, 1600), (1600, 1600), (64, 256, 25, 64), (64, 25, 256, 1), (64, 25, 256, 256), (64, 25, 256, 1), (64, 256, 25, 64), (64, 256, 25, 64), (), (64, 25, 256, 256), (64, 256, 1600), (1600, 4800), (64, 256, 1600), (64, 256, 1), (1, 1, 1600), (64, 256, 1), (64, 256), (64, 256), (64, 256, 1600), (64, 256, 1600), (64, 256, 6400), (6400, 1600), (64, 256, 6400), (64, 256, 6400), (64, 256, 6400), (64, 256, 6400), (64, 256, 6400), (64, 256, 1600), (1600, 6400), (64, 256, 1600), (64, 256, 1), (1, 1, 1600), (64, 256, 1), (64, 256), (64, 256), (64, 256, 1600), (64, 256, 1600), (64, 256, 1600), (1600, 1600), (64, 256, 25, 64), (64, 25, 256, 1), (64, 25, 256, 256), (64, 25, 256, 1), (64, 256, 25, 64), (64, 256, 25, 64), (), (64, 25, 256, 256), (64, 256, 1600), (1600, 4800), (64, 256, 1600), (64, 256, 1), (1, 1, 1600), (64, 256, 1), (64, 256), (64, 256), (64, 256, 1600), (64, 256, 1600), (64, 256, 6400), (6400, 1600), (64, 256, 6400), (64, 256, 6400), (64, 256, 6400), (64, 256, 6400), (64, 256, 6400), (64, 256, 1600), (1600, 6400), (64, 256, 1600), (64, 256, 1), (1, 1, 1600), (64, 256, 1), (64, 256), (64, 256), (64, 256, 1600), (64, 256, 1600), (64, 256, 1600), (1600, 1600), (64, 256, 25, 64), (64, 25, 256, 1), (64, 25, 256, 256), (64, 25, 256, 1), (64, 256, 25, 64), (64, 256, 25, 64), (), (64, 25, 256, 256), (64, 256, 1600), (1600, 4800), (64, 256, 1600), (64, 256, 1), (1, 1, 1600), (64, 256, 1), (64, 256), (64, 256), (64, 256, 1600), (64, 256, 1600), (64, 256, 6400), (6400, 1600), (64, 256, 6400), (64, 256, 6400), (64, 256, 6400), (64, 256, 6400), (64, 256, 6400), (64, 256, 1600), (1600, 6400), (64, 256, 1600), (64, 256, 1), (1, 1, 1600), (64, 256, 1), (64, 256), (64, 256), (64, 256, 1600), (64, 256, 1600), (64, 256, 1600), (1600, 1600), (64, 256, 25, 64), (64, 25, 256, 1), (64, 25, 256, 256), (64, 25, 256, 1), (64, 256, 25, 64), (64, 256, 25, 64), (), (64, 25, 256, 256), (64, 256, 1600), (1600, 4800), (64, 256, 1600), (64, 256, 1), (1, 1, 1600), (64, 256, 1), (64, 256), (64, 256), (64, 256, 1600), (64, 256, 1600)]
param_size: 21.949531812220812 [GiB] 
jaxpr.eqns, len: 3
eqn: a:f16[1600] b:f16[1600,6400] c:f16[6400] d:f16[6400,1600] e:f16[1600] f:f16[1600]
  g:f16[1600] h:f16[1600,1600] i:f16[4800] j:f16[4800,1600] k:f16[1600] l:f16[1600]
  m:f16[1600] n:f16[1600,6400] o:f16[6400] p:f16[6400,1600] q:f16[1600] r:f16[1600]
  s:f16[1600] t:f16[1600,1600] u:f16[4800] v:f16[4800,1600] w:f16[1600] x:f16[1600]
  y:f16[1600] z:f16[1600,6400] ba:f16[6400] bb:f16[6400,1600] bc:f16[1600] bd:f16[1600]
  be:f16[1600] bf:f16[1600,1600] bg:f16[4800] bh:f16[4800,1600] bi:f16[1600] bj:f16[1600]
  bk:f16[1600] bl:f16[1600,6400] bm:f16[6400] bn:f16[6400,1600] bo:f16[1600] bp:f16[1600]
  bq:f16[1600] br:f16[1600,1600] bs:f16[4800] bt:f16[4800,1600] bu:f16[1600] bv:f16[1600]
  bw:f16[1600] bx:f16[1600,6400] by:f16[6400] bz:f16[6400,1600] ca:f16[1600] cb:f16[1600]
  cc:f16[1600] cd:f16[1600,1600] ce:f16[4800] cf:f16[4800,1600] cg:f16[1600] ch:f16[1600]
  ci:f16[1600] cj:f16[1600,6400] ck:f16[6400] cl:f16[6400,1600] cm:f16[1600] cn:f16[1600]
  co:f16[1600] cp:f16[1600,1600] cq:f16[4800] cr:f16[4800,1600] cs:f16[1600] ct:f16[1600]
  cu:f16[1600] cv:f16[1600,6400] cw:f16[6400] cx:f16[6400,1600] cy:f16[1600] cz:f16[1600]
  da:f16[1600] db:f16[1600,1600] dc:f16[4800] dd:f16[4800,1600] de:f16[1600] df:f16[1600]
  dg:f16[1600] dh:f16[1600,6400] di:f16[6400] dj:f16[6400,1600] dk:f16[1600] dl:f16[1600]
  dm:f16[1600] dn:f16[1600,1600] do:f16[4800] dp:f16[4800,1600] dq:f16[1600] dr:f16[1600]
  ds:f16[1600] dt:f16[1600,6400] du:f16[6400] dv:f16[6400,1600] dw:f16[1600] dx:f16[1600]
  dy:f16[1600] dz:f16[1600,1600] ea:f16[4800] eb:f16[4800,1600] ec:f16[1600] ed:f16[1600]
  ee:f16[1024,1600] ef:f16[50257,1600] eg:f16[64,256,1600] eh:f16[64,256,6400] ei:f16[6400,1600]
  ej:f16[64,256,6400] ek:f16[64,256,6400] el:f16[64,256,6400] em:f16[64,256,6400]
  en:f16[64,256,6400] eo:f16[64,256,1600] ep:f16[1600,6400] eq:f32[64,256,1600] er:f32[64,256,1]
  es:f32[1,1,1600] et:f32[64,256,1] eu:f32[64,256] ev:f32[64,256] ew:f32[64,256,1600]
  ex:f32[64,256,1600] ey:f16[64,256,1600] ez:f16[1600,1600] fa:f16[64,256,25,64]
  fb:f16[64,25,256,1] fc:f16[64,25,256,256] fd:f16[64,25,256,1] fe:f16[64,256,25,64]
  ff:f16[64,256,25,64] fg:f16[] fh:f16[64,25,256,256] fi:f16[64,256,1600] fj:f16[1600,4800]
  fk:f32[64,256,1600] fl:f32[64,256,1] fm:f32[1,1,1600] fn:f32[64,256,1] fo:f32[64,256]
  fp:f32[64,256] fq:f32[64,256,1600] fr:f32[64,256,1600] fs:f16[64,256,6400] ft:f16[6400,1600]
  fu:f16[64,256,6400] fv:f16[64,256,6400] fw:f16[64,256,6400] fx:f16[64,256,6400]
  fy:f16[64,256,6400] fz:f16[64,256,1600] ga:f16[1600,6400] gb:f32[64,256,1600] gc:f32[64,256,1]
  gd:f32[1,1,1600] ge:f32[64,256,1] gf:f32[64,256] gg:f32[64,256] gh:f32[64,256,1600]
  gi:f32[64,256,1600] gj:f16[64,256,1600] gk:f16[1600,1600] gl:f16[64,256,25,64]
  gm:f16[64,25,256,1] gn:f16[64,25,256,256] go:f16[64,25,256,1] gp:f16[64,256,25,64]
  gq:f16[64,256,25,64] gr:f16[] gs:f16[64,25,256,256] gt:f16[64,256,1600] gu:f16[1600,4800]
  gv:f32[64,256,1600] gw:f32[64,256,1] gx:f32[1,1,1600] gy:f32[64,256,1] gz:f32[64,256]
  ha:f32[64,256] hb:f32[64,256,1600] hc:f32[64,256,1600] hd:f16[64,256,6400] he:f16[6400,1600]
  hf:f16[64,256,6400] hg:f16[64,256,6400] hh:f16[64,256,6400] hi:f16[64,256,6400]
  hj:f16[64,256,6400] hk:f16[64,256,1600] hl:f16[1600,6400] hm:f32[64,256,1600] hn:f32[64,256,1]
  ho:f32[1,1,1600] hp:f32[64,256,1] hq:f32[64,256] hr:f32[64,256] hs:f32[64,256,1600]
  ht:f32[64,256,1600] hu:f16[64,256,1600] hv:f16[1600,1600] hw:f16[64,256,25,64]
  hx:f16[64,25,256,1] hy:f16[64,25,256,256] hz:f16[64,25,256,1] ia:f16[64,256,25,64]
  ib:f16[64,256,25,64] ic:f16[] id:f16[64,25,256,256] ie:f16[64,256,1600] if:f16[1600,4800]
  ig:f32[64,256,1600] ih:f32[64,256,1] ii:f32[1,1,1600] ij:f32[64,256,1] ik:f32[64,256]
  il:f32[64,256] im:f32[64,256,1600] in:f32[64,256,1600] io:f16[64,256,6400] ip:f16[6400,1600]
  iq:f16[64,256,6400] ir:f16[64,256,6400] is:f16[64,256,6400] it:f16[64,256,6400]
  iu:f16[64,256,6400] iv:f16[64,256,1600] iw:f16[1600,6400] ix:f32[64,256,1600] iy:f32[64,256,1]
  iz:f32[1,1,1600] ja:f32[64,256,1] jb:f32[64,256] jc:f32[64,256] jd:f32[64,256,1600]
  je:f32[64,256,1600] jf:f16[64,256,1600] jg:f16[1600,1600] jh:f16[64,256,25,64]
  ji:f16[64,25,256,1] jj:f16[64,25,256,256] jk:f16[64,25,256,1] jl:f16[64,256,25,64]
  jm:f16[64,256,25,64] jn:f16[] jo:f16[64,25,256,256] jp:f16[64,256,1600] jq:f16[1600,4800]
  jr:f32[64,256,1600] js:f32[64,256,1] jt:f32[1,1,1600] ju:f32[64,256,1] jv:f32[64,256]
  jw:f32[64,256] jx:f32[64,256,1600] jy:f32[64,256,1600] jz:f16[64,256,6400] ka:f16[6400,1600]
  kb:f16[64,256,6400] kc:f16[64,256,6400] kd:f16[64,256,6400] ke:f16[64,256,6400]
  kf:f16[64,256,6400] kg:f16[64,256,1600] kh:f16[1600,6400] ki:f32[64,256,1600] kj:f32[64,256,1]
  kk:f32[1,1,1600] kl:f32[64,256,1] km:f32[64,256] kn:f32[64,256] ko:f32[64,256,1600]
  kp:f32[64,256,1600] kq:f16[64,256,1600] kr:f16[1600,1600] ks:f16[64,256,25,64]
  kt:f16[64,25,256,1] ku:f16[64,25,256,256] kv:f16[64,25,256,1] kw:f16[64,256,25,64]
  kx:f16[64,256,25,64] ky:f16[] kz:f16[64,25,256,256] la:f16[64,256,1600] lb:f16[1600,4800]
  lc:f32[64,256,1600] ld:f32[64,256,1] le:f32[1,1,1600] lf:f32[64,256,1] lg:f32[64,256]
  lh:f32[64,256] li:f32[64,256,1600] lj:f32[64,256,1600] lk:f16[64,256,6400] ll:f16[6400,1600]
  lm:f16[64,256,6400] ln:f16[64,256,6400] lo:f16[64,256,6400] lp:f16[64,256,6400]
  lq:f16[64,256,6400] lr:f16[64,256,1600] ls:f16[1600,6400] lt:f32[64,256,1600] lu:f32[64,256,1]
  lv:f32[1,1,1600] lw:f32[64,256,1] lx:f32[64,256] ly:f32[64,256] lz:f32[64,256,1600]
  ma:f32[64,256,1600] mb:f16[64,256,1600] mc:f16[1600,1600] md:f16[64,256,25,64]
  me:f16[64,25,256,1] mf:f16[64,25,256,256] mg:f16[64,25,256,1] mh:f16[64,256,25,64]
  mi:f16[64,256,25,64] mj:f16[] mk:f16[64,25,256,256] ml:f16[64,256,1600] mm:f16[1600,4800]
  mn:f32[64,256,1600] mo:f32[64,256,1] mp:f32[1,1,1600] mq:f32[64,256,1] mr:f32[64,256]
  ms:f32[64,256] mt:f32[64,256,1600] mu:f32[64,256,1600] mv:f16[64,256,6400] mw:f16[6400,1600]
  mx:f16[64,256,6400] my:f16[64,256,6400] mz:f16[64,256,6400] na:f16[64,256,6400]
  nb:f16[64,256,6400] nc:f16[64,256,1600] nd:f16[1600,6400] ne:f32[64,256,1600] nf:f32[64,256,1]
  ng:f32[1,1,1600] nh:f32[64,256,1] ni:f32[64,256] nj:f32[64,256] nk:f32[64,256,1600]
  nl:f32[64,256,1600] nm:f16[64,256,1600] nn:f16[1600,1600] no:f16[64,256,25,64]
  np:f16[64,25,256,1] nq:f16[64,25,256,256] nr:f16[64,25,256,1] ns:f16[64,256,25,64]
  nt:f16[64,256,25,64] nu:f16[] nv:f16[64,25,256,256] nw:f16[64,256,1600] nx:f16[1600,4800]
  ny:f32[64,256,1600] nz:f32[64,256,1] oa:f32[1,1,1600] ob:f32[64,256,1] oc:f32[64,256]
  od:f32[64,256] oe:f32[64,256,1600] of:f32[64,256,1600] og:f16[64,256,6400] oh:f16[6400,1600]
  oi:f16[64,256,6400] oj:f16[64,256,6400] ok:f16[64,256,6400] ol:f16[64,256,6400]
  om:f16[64,256,6400] on:f16[64,256,1600] oo:f16[1600,6400] op:f32[64,256,1600] oq:f32[64,256,1]
  or:f32[1,1,1600] os:f32[64,256,1] ot:f32[64,256] ou:f32[64,256] ov:f32[64,256,1600]
  ow:f32[64,256,1600] ox:f16[64,256,1600] oy:f16[1600,1600] oz:f16[64,256,25,64]
  pa:f16[64,25,256,1] pb:f16[64,25,256,256] pc:f16[64,25,256,1] pd:f16[64,256,25,64]
  pe:f16[64,256,25,64] pf:f16[] pg:f16[64,25,256,256] ph:f16[64,256,1600] pi:f16[1600,4800]
  pj:f32[64,256,1600] pk:f32[64,256,1] pl:f32[1,1,1600] pm:f32[64,256,1] pn:f32[64,256]
  po:f32[64,256] pp:f32[64,256,1600] pq:f32[64,256,1600] pr:f16[64,256,6400] ps:f16[6400,1600]
  pt:f16[64,256,6400] pu:f16[64,256,6400] pv:f16[64,256,6400] pw:f16[64,256,6400]
  px:f16[64,256,6400] py:f16[64,256,1600] pz:f16[1600,6400] qa:f32[64,256,1600] qb:f32[64,256,1]
  qc:f32[1,1,1600] qd:f32[64,256,1] qe:f32[64,256] qf:f32[64,256] qg:f32[64,256,1600]
  qh:f32[64,256,1600] qi:f16[64,256,1600] qj:f16[1600,1600] qk:f16[64,256,25,64]
  ql:f16[64,25,256,1] qm:f16[64,25,256,256] qn:f16[64,25,256,1] qo:f16[64,256,25,64]
  qp:f16[64,256,25,64] qq:f16[] qr:f16[64,25,256,256] qs:f16[64,256,1600] qt:f16[1600,4800]
  qu:f32[64,256,1600] qv:f32[64,256,1] qw:f32[1,1,1600] qx:f32[64,256,1] qy:f32[64,256]
  qz:f32[64,256] ra:f32[64,256,1600] rb:f32[64,256,1600] rc:f16[64,256,1024] rd:f16[64,256,50257] = pipeline_marker[
  mark_type=start
  name=7
] re rf rg rh ri rj rk rl rm rn ro rp rq rr rs rt ru rv rw rx ry rz sa sb sc sd se
  sf sg sh si sj sk sl sm sn so sp sq sr ss st su sv sw sx sy sz ta tb tc td te tf
  tg th ti tj tk tl tm tn to tp tq tr ts tt tu tv tw tx ty tz ua ub uc ud ue uf ug
  uh ui uj uk ul um un uo up uq ur us ut uu uv uw ux uy uz va vb vc vd ve vf vg vh
  vi vj vk vl vm vn vo vp vq vr vs vt vu vv vw vx vy vz wa wb wc wd we wf wg wh wi
  wj wk wl wm wn wo wp wq wr ws wt wu wv ww wx wy wz xa xb xc xd xe xf xg xh xi xj
  xk xl xm xn xo xp xq xr xs xt xu xv xw xx xy xz ya yb yc yd ye yf yg yh yi yj yk
  yl ym yn yo yp yq yr ys yt yu yv yw yx yy yz za zb zc zd ze zf zg zh zi zj zk zl
  zm zn zo zp zq zr zs zt zu zv zw zx zy zz baa bab bac bad bae baf bag bah bai baj
  bak bal bam ban bao bap baq bar bas bat bau bav baw bax bay baz bba bbb bbc bbd
  bbe bbf bbg bbh bbi bbj bbk bbl bbm bbn bbo bbp bbq bbr bbs bbt bbu bbv bbw bbx
  bby bbz bca bcb bcc bcd bce bcf bcg bch bci bcj bck bcl bcm bcn bco bcp bcq bcr
  bcs bct bcu bcv bcw bcx bcy bcz bda bdb bdc bdd bde bdf bdg bdh bdi bdj bdk bdl
  bdm bdn bdo bdp bdq bdr bds bdt bdu bdv bdw bdx bdy bdz bea beb bec bed bee bef
  beg beh bei bej bek bel bem ben beo bep beq ber bes bet beu bev bew bex bey bez
  bfa bfb bfc bfd bfe bff bfg bfh bfi bfj bfk bfl bfm bfn bfo bfp bfq bfr bfs bft
  bfu bfv bfw bfx bfy bfz bga bgb bgc bgd bge bgf bgg bgh bgi bgj bgk bgl bgm bgn
  bgo bgp bgq bgr bgs bgt bgu bgv bgw bgx bgy bgz bha bhb bhc bhd bhe bhf bhg bhh
  bhi bhj bhk bhl bhm bhn bho bhp bhq bhr bhs bht bhu bhv bhw bhx bhy bhz bia bib
  bic bid bie bif big bih
eqn: a:f16[1600] b:f16[1600,6400] c:f16[6400] d:f16[6400,1600] e:f16[1600] f:f16[1600]
  g:f16[1600] h:f16[1600,1600] i:f16[4800] j:f16[4800,1600] k:f16[1600] l:f16[1600]
  m:f16[1600] n:f16[1600,6400] o:f16[6400] p:f16[6400,1600] q:f16[1600] r:f16[1600]
  s:f16[1600] t:f16[1600,1600] u:f16[4800] v:f16[4800,1600] w:f16[1600] x:f16[1600]
  y:f16[1600] z:f16[1600,6400] ba:f16[6400] bb:f16[6400,1600] bc:f16[1600] bd:f16[1600]
  be:f16[1600] bf:f16[1600,1600] bg:f16[4800] bh:f16[4800,1600] bi:f16[1600] bj:f16[1600]
  bk:f16[1600] bl:f16[1600,6400] bm:f16[6400] bn:f16[6400,1600] bo:f16[1600] bp:f16[1600]
  bq:f16[1600] br:f16[1600,1600] bs:f16[4800] bt:f16[4800,1600] bu:f16[1600] bv:f16[1600]
  bw:f16[1600] bx:f16[1600,6400] by:f16[6400] bz:f16[6400,1600] ca:f16[1600] cb:f16[1600]
  cc:f16[1600] cd:f16[1600,1600] ce:f16[4800] cf:f16[4800,1600] cg:f16[1600] ch:f16[1600]
  ci:f16[1600] cj:f16[1600,6400] ck:f16[6400] cl:f16[6400,1600] cm:f16[1600] cn:f16[1600]
  co:f16[1600] cp:f16[1600,1600] cq:f16[4800] cr:f16[4800,1600] cs:f16[1600] ct:f16[1600]
  cu:f16[1600] cv:f16[1600,6400] cw:f16[6400] cx:f16[6400,1600] cy:f16[1600] cz:f16[1600]
  da:f16[1600] db:f16[1600,1600] dc:f16[4800] dd:f16[4800,1600] de:f16[1600] df:f16[1600]
  dg:f16[1600] dh:f16[1600,6400] di:f16[6400] dj:f16[6400,1600] dk:f16[1600] dl:f16[1600]
  dm:f16[1600] dn:f16[1600,1600] do:f16[4800] dp:f16[4800,1600] dq:f16[1600] dr:f16[1600]
  ds:f16[1600] dt:f16[1600,6400] du:f16[6400] dv:f16[6400,1600] dw:f16[1600] dx:f16[1600]
  dy:f16[1600] dz:f16[1600,1600] ea:f16[4800] eb:f16[4800,1600] ec:f16[1600] ed:f16[1600]
  ee:f16[1024,1600] ef:f16[50257,1600] = named_call[
  call_jaxpr={ lambda ; eg:f16[1600] eh:f16[1600,6400] ei:f16[6400] ej:f16[6400,1600]
      ek:f16[1600] el:f16[1600] em:f16[1600] en:f16[1600,1600] eo:f16[4800] ep:f16[4800,1600]
      eq:f16[1600] er:f16[1600] es:f16[1600] et:f16[1600,6400] eu:f16[6400] ev:f16[6400,1600]
      ew:f16[1600] ex:f16[1600] ey:f16[1600] ez:f16[1600,1600] fa:f16[4800] fb:f16[4800,1600]
      fc:f16[1600] fd:f16[1600] fe:f16[1600] ff:f16[1600,6400] fg:f16[6400] fh:f16[6400,1600]
      fi:f16[1600] fj:f16[1600] fk:f16[1600] fl:f16[1600,1600] fm:f16[4800] fn:f16[4800,1600]
      fo:f16[1600] fp:f16[1600] fq:f16[1600] fr:f16[1600,6400] fs:f16[6400] ft:f16[6400,1600]
      fu:f16[1600] fv:f16[1600] fw:f16[1600] fx:f16[1600,1600] fy:f16[4800] fz:f16[4800,1600]
      ga:f16[1600] gb:f16[1600] gc:f16[1600] gd:f16[1600,6400] ge:f16[6400] gf:f16[6400,1600]
      gg:f16[1600] gh:f16[1600] gi:f16[1600] gj:f16[1600,1600] gk:f16[4800] gl:f16[4800,1600]
      gm:f16[1600] gn:f16[1600] go:f16[1600] gp:f16[1600,6400] gq:f16[6400] gr:f16[6400,1600]
      gs:f16[1600] gt:f16[1600] gu:f16[1600] gv:f16[1600,1600] gw:f16[4800] gx:f16[4800,1600]
      gy:f16[1600] gz:f16[1600] ha:f16[1600] hb:f16[1600,6400] hc:f16[6400] hd:f16[6400,1600]
      he:f16[1600] hf:f16[1600] hg:f16[1600] hh:f16[1600,1600] hi:f16[4800] hj:f16[4800,1600]
      hk:f16[1600] hl:f16[1600] hm:f16[1600] hn:f16[1600,6400] ho:f16[6400] hp:f16[6400,1600]
      hq:f16[1600] hr:f16[1600] hs:f16[1600] ht:f16[1600,1600] hu:f16[4800] hv:f16[4800,1600]
      hw:f16[1600] hx:f16[1600] hy:f16[1600] hz:f16[1600,6400] ia:f16[6400] ib:f16[6400,1600]
      ic:f16[1600] id:f16[1600] ie:f16[1600] if:f16[1600,1600] ig:f16[4800] ih:f16[4800,1600]
      ii:f16[1600] ij:f16[1600] ik:f16[1024,1600] il:f16[50257,1600] im:f16[64,256,1600]
      in:f16[64,256,6400] io:f16[6400,1600] ip:f16[64,256,6400] iq:f16[64,256,6400]
      ir:f16[64,256,6400] is:f16[64,256,6400] it:f16[64,256,6400] iu:f16[64,256,1600]
      iv:f16[1600,6400] iw:f32[64,256,1600] ix:f32[64,256,1] iy:f32[1,1,1600] iz:f32[64,256,1]
      ja:f32[64,256] jb:f32[64,256] jc:f32[64,256,1600] jd:f32[64,256,1600] je:f16[64,256,1600]
      jf:f16[1600,1600] jg:f16[64,256,25,64] jh:f16[64,25,256,1] ji:f16[64,25,256,256]
      jj:f16[64,25,256,1] jk:f16[64,256,25,64] jl:f16[64,256,25,64] jm:f16[] jn:f16[64,25,256,256]
      jo:f16[64,256,1600] jp:f16[1600,4800] jq:f32[64,256,1600] jr:f32[64,256,1]
      js:f32[1,1,1600] jt:f32[64,256,1] ju:f32[64,256] jv:f32[64,256] jw:f32[64,256,1600]
      jx:f32[64,256,1600] jy:f16[64,256,6400] jz:f16[6400,1600] ka:f16[64,256,6400]
      kb:f16[64,256,6400] kc:f16[64,256,6400] kd:f16[64,256,6400] ke:f16[64,256,6400]
      kf:f16[64,256,1600] kg:f16[1600,6400] kh:f32[64,256,1600] ki:f32[64,256,1]
      kj:f32[1,1,1600] kk:f32[64,256,1] kl:f32[64,256] km:f32[64,256] kn:f32[64,256,1600]
      ko:f32[64,256,1600] kp:f16[64,256,1600] kq:f16[1600,1600] kr:f16[64,256,25,64]
      ks:f16[64,25,256,1] kt:f16[64,25,256,256] ku:f16[64,25,256,1] kv:f16[64,256,25,64]
      kw:f16[64,256,25,64] kx:f16[] ky:f16[64,25,256,256] kz:f16[64,256,1600] la:f16[1600,4800]
      lb:f32[64,256,1600] lc:f32[64,256,1] ld:f32[1,1,1600] le:f32[64,256,1] lf:f32[64,256]
      lg:f32[64,256] lh:f32[64,256,1600] li:f32[64,256,1600] lj:f16[64,256,6400]
      lk:f16[6400,1600] ll:f16[64,256,6400] lm:f16[64,256,6400] ln:f16[64,256,6400]
      lo:f16[64,256,6400] lp:f16[64,256,6400] lq:f16[64,256,1600] lr:f16[1600,6400]
      ls:f32[64,256,1600] lt:f32[64,256,1] lu:f32[1,1,1600] lv:f32[64,256,1] lw:f32[64,256]
      lx:f32[64,256] ly:f32[64,256,1600] lz:f32[64,256,1600] ma:f16[64,256,1600]
      mb:f16[1600,1600] mc:f16[64,256,25,64] md:f16[64,25,256,1] me:f16[64,25,256,256]
      mf:f16[64,25,256,1] mg:f16[64,256,25,64] mh:f16[64,256,25,64] mi:f16[] mj:f16[64,25,256,256]
      mk:f16[64,256,1600] ml:f16[1600,4800] mm:f32[64,256,1600] mn:f32[64,256,1]
      mo:f32[1,1,1600] mp:f32[64,256,1] mq:f32[64,256] mr:f32[64,256] ms:f32[64,256,1600]
      mt:f32[64,256,1600] mu:f16[64,256,6400] mv:f16[6400,1600] mw:f16[64,256,6400]
      mx:f16[64,256,6400] my:f16[64,256,6400] mz:f16[64,256,6400] na:f16[64,256,6400]
      nb:f16[64,256,1600] nc:f16[1600,6400] nd:f32[64,256,1600] ne:f32[64,256,1]
      nf:f32[1,1,1600] ng:f32[64,256,1] nh:f32[64,256] ni:f32[64,256] nj:f32[64,256,1600]
      nk:f32[64,256,1600] nl:f16[64,256,1600] nm:f16[1600,1600] nn:f16[64,256,25,64]
      no:f16[64,25,256,1] np:f16[64,25,256,256] nq:f16[64,25,256,1] nr:f16[64,256,25,64]
      ns:f16[64,256,25,64] nt:f16[] nu:f16[64,25,256,256] nv:f16[64,256,1600] nw:f16[1600,4800]
      nx:f32[64,256,1600] ny:f32[64,256,1] nz:f32[1,1,1600] oa:f32[64,256,1] ob:f32[64,256]
      oc:f32[64,256] od:f32[64,256,1600] oe:f32[64,256,1600] of:f16[64,256,6400]
      og:f16[6400,1600] oh:f16[64,256,6400] oi:f16[64,256,6400] oj:f16[64,256,6400]
      ok:f16[64,256,6400] ol:f16[64,256,6400] om:f16[64,256,1600] on:f16[1600,6400]
      oo:f32[64,256,1600] op:f32[64,256,1] oq:f32[1,1,1600] or:f32[64,256,1] os:f32[64,256]
      ot:f32[64,256] ou:f32[64,256,1600] ov:f32[64,256,1600] ow:f16[64,256,1600]
      ox:f16[1600,1600] oy:f16[64,256,25,64] oz:f16[64,25,256,1] pa:f16[64,25,256,256]
      pb:f16[64,25,256,1] pc:f16[64,256,25,64] pd:f16[64,256,25,64] pe:f16[] pf:f16[64,25,256,256]
      pg:f16[64,256,1600] ph:f16[1600,4800] pi:f32[64,256,1600] pj:f32[64,256,1]
      pk:f32[1,1,1600] pl:f32[64,256,1] pm:f32[64,256] pn:f32[64,256] po:f32[64,256,1600]
      pp:f32[64,256,1600] pq:f16[64,256,6400] pr:f16[6400,1600] ps:f16[64,256,6400]
      pt:f16[64,256,6400] pu:f16[64,256,6400] pv:f16[64,256,6400] pw:f16[64,256,6400]
      px:f16[64,256,1600] py:f16[1600,6400] pz:f32[64,256,1600] qa:f32[64,256,1]
      qb:f32[1,1,1600] qc:f32[64,256,1] qd:f32[64,256] qe:f32[64,256] qf:f32[64,256,1600]
      qg:f32[64,256,1600] qh:f16[64,256,1600] qi:f16[1600,1600] qj:f16[64,256,25,64]
      qk:f16[64,25,256,1] ql:f16[64,25,256,256] qm:f16[64,25,256,1] qn:f16[64,256,25,64]
      qo:f16[64,256,25,64] qp:f16[] qq:f16[64,25,256,256] qr:f16[64,256,1600] qs:f16[1600,4800]
      qt:f32[64,256,1600] qu:f32[64,256,1] qv:f32[1,1,1600] qw:f32[64,256,1] qx:f32[64,256]
      qy:f32[64,256] qz:f32[64,256,1600] ra:f32[64,256,1600] rb:f16[64,256,6400]
      rc:f16[6400,1600] rd:f16[64,256,6400] re:f16[64,256,6400] rf:f16[64,256,6400]
      rg:f16[64,256,6400] rh:f16[64,256,6400] ri:f16[64,256,1600] rj:f16[1600,6400]
      rk:f32[64,256,1600] rl:f32[64,256,1] rm:f32[1,1,1600] rn:f32[64,256,1] ro:f32[64,256]
      rp:f32[64,256] rq:f32[64,256,1600] rr:f32[64,256,1600] rs:f16[64,256,1600]
      rt:f16[1600,1600] ru:f16[64,256,25,64] rv:f16[64,25,256,1] rw:f16[64,25,256,256]
      rx:f16[64,25,256,1] ry:f16[64,256,25,64] rz:f16[64,256,25,64] sa:f16[] sb:f16[64,25,256,256]
      sc:f16[64,256,1600] sd:f16[1600,4800] se:f32[64,256,1600] sf:f32[64,256,1]
      sg:f32[1,1,1600] sh:f32[64,256,1] si:f32[64,256] sj:f32[64,256] sk:f32[64,256,1600]
      sl:f32[64,256,1600] sm:f16[64,256,6400] sn:f16[6400,1600] so:f16[64,256,6400]
      sp:f16[64,256,6400] sq:f16[64,256,6400] sr:f16[64,256,6400] ss:f16[64,256,6400]
      st:f16[64,256,1600] su:f16[1600,6400] sv:f32[64,256,1600] sw:f32[64,256,1]
      sx:f32[1,1,1600] sy:f32[64,256,1] sz:f32[64,256] ta:f32[64,256] tb:f32[64,256,1600]
      tc:f32[64,256,1600] td:f16[64,256,1600] te:f16[1600,1600] tf:f16[64,256,25,64]
      tg:f16[64,25,256,1] th:f16[64,25,256,256] ti:f16[64,25,256,1] tj:f16[64,256,25,64]
      tk:f16[64,256,25,64] tl:f16[] tm:f16[64,25,256,256] tn:f16[64,256,1600] to:f16[1600,4800]
      tp:f32[64,256,1600] tq:f32[64,256,1] tr:f32[1,1,1600] ts:f32[64,256,1] tt:f32[64,256]
      tu:f32[64,256] tv:f32[64,256,1600] tw:f32[64,256,1600] tx:f16[64,256,6400]
      ty:f16[6400,1600] tz:f16[64,256,6400] ua:f16[64,256,6400] ub:f16[64,256,6400]
      uc:f16[64,256,6400] ud:f16[64,256,6400] ue:f16[64,256,1600] uf:f16[1600,6400]
      ug:f32[64,256,1600] uh:f32[64,256,1] ui:f32[1,1,1600] uj:f32[64,256,1] uk:f32[64,256]
      ul:f32[64,256] um:f32[64,256,1600] un:f32[64,256,1600] uo:f16[64,256,1600]
      up:f16[1600,1600] uq:f16[64,256,25,64] ur:f16[64,25,256,1] us:f16[64,25,256,256]
      ut:f16[64,25,256,1] uu:f16[64,256,25,64] uv:f16[64,256,25,64] uw:f16[] ux:f16[64,25,256,256]
      uy:f16[64,256,1600] uz:f16[1600,4800] va:f32[64,256,1600] vb:f32[64,256,1]
      vc:f32[1,1,1600] vd:f32[64,256,1] ve:f32[64,256] vf:f32[64,256] vg:f32[64,256,1600]
      vh:f32[64,256,1600] vi:f16[64,256,1024] vj:f16[64,256,50257]. let
      vk:f16[64,256,1600] vl:f16[1600] vm:f16[1600,6400] vn:f16[6400] vo:f16[6400,1600]
        vp:f16[1600] vq:f16[1600] vr:f16[1600] vs:f16[1600,1600] vt:f16[4800] vu:f16[4800,1600]
        vv:f16[1600] vw:f16[1600] vx:f16[1600] vy:f16[1600,6400] vz:f16[6400] wa:f16[6400,1600]
        wb:f16[1600] wc:f16[1600] wd:f16[1600] we:f16[1600,1600] wf:f16[4800] wg:f16[4800,1600]
        wh:f16[1600] wi:f16[1600] wj:f16[1600] wk:f16[1600,6400] wl:f16[6400] wm:f16[6400,1600]
        wn:f16[1600] wo:f16[1600] wp:f16[1600] wq:f16[1600,1600] wr:f16[4800] ws:f16[4800,1600]
        wt:f16[1600] wu:f16[1600] wv:f16[1600] ww:f16[1600,6400] wx:f16[6400] wy:f16[6400,1600]
        wz:f16[1600] xa:f16[1600] = named_call[
        call_jaxpr={ lambda ; xb:f16[64,256,1600] xc:f16[1600] xd:f16[1600,6400]
            xe:f16[6400] xf:f16[6400,1600] xg:f16[1600] xh:f16[1600] xi:f16[1600]
            xj:f16[1600,1600] xk:f16[4800] xl:f16[4800,1600] xm:f16[1600] xn:f16[1600]
            xo:f16[1600] xp:f16[1600,6400] xq:f16[6400] xr:f16[6400,1600] xs:f16[1600]
            xt:f16[1600] xu:f16[1600] xv:f16[1600,1600] xw:f16[4800] xx:f16[4800,1600]
            xy:f16[1600] xz:f16[1600] ya:f16[1600] yb:f16[1600,6400] yc:f16[6400]
            yd:f16[6400,1600] ye:f16[1600] yf:f16[1600] yg:f16[1600] yh:f16[1600,1600]
            yi:f16[4800] yj:f16[4800,1600] yk:f16[1600] yl:f16[1600] ym:f16[1600]
            yn:f16[1600,6400] yo:f16[6400] yp:f16[6400,1600] yq:f16[1600] yr:f16[1600]
            ys:f16[64,256,6400] yt:f16[6400,1600] yu:f16[64,256,6400] yv:f16[64,256,6400]
            yw:f16[64,256,6400] yx:f16[64,256,6400] yy:f16[64,256,6400] yz:f16[64,256,1600]
            za:f16[1600,6400] zb:f32[64,256,1600] zc:f32[64,256,1] zd:f32[1,1,1600]
            ze:f32[64,256,1] zf:f32[64,256] zg:f32[64,256] zh:f32[64,256,1600] zi:f32[64,256,1600]
            zj:f16[64,256,1600] zk:f16[1600,1600] zl:f16[64,256,25,64] zm:f16[64,25,256,1]
            zn:f16[64,25,256,256] zo:f16[64,25,256,1] zp:f16[64,256,25,64] zq:f16[64,256,25,64]
            zr:f16[] zs:f16[64,25,256,256] zt:f16[64,256,1600] zu:f16[1600,4800]
            zv:f32[64,256,1600] zw:f32[64,256,1] zx:f32[1,1,1600] zy:f32[64,256,1]
            zz:f32[64,256] baa:f32[64,256] bab:f32[64,256,1600] bac:f32[64,256,1600]
            bad:f16[64,256,6400] bae:f16[6400,1600] baf:f16[64,256,6400] bag:f16[64,256,6400]
            bah:f16[64,256,6400] bai:f16[64,256,6400] baj:f16[64,256,6400] bak:f16[64,256,1600]
            bal:f16[1600,6400] bam:f32[64,256,1600] ban:f32[64,256,1] bao:f32[1,1,1600]
            bap:f32[64,256,1] baq:f32[64,256] bar:f32[64,256] bas:f32[64,256,1600]
            bat:f32[64,256,1600] bau:f16[64,256,1600] bav:f16[1600,1600] baw:f16[64,256,25,64]
            bax:f16[64,25,256,1] bay:f16[64,25,256,256] baz:f16[64,25,256,1] bba:f16[64,256,25,64]
            bbb:f16[64,256,25,64] bbc:f16[] bbd:f16[64,25,256,256] bbe:f16[64,256,1600]
            bbf:f16[1600,4800] bbg:f32[64,256,1600] bbh:f32[64,256,1] bbi:f32[1,1,1600]
            bbj:f32[64,256,1] bbk:f32[64,256] bbl:f32[64,256] bbm:f32[64,256,1600]
            bbn:f32[64,256,1600] bbo:f16[64,256,6400] bbp:f16[6400,1600] bbq:f16[64,256,6400]
            bbr:f16[64,256,6400] bbs:f16[64,256,6400] bbt:f16[64,256,6400] bbu:f16[64,256,6400]
            bbv:f16[64,256,1600] bbw:f16[1600,6400] bbx:f32[64,256,1600] bby:f32[64,256,1]
            bbz:f32[1,1,1600] bca:f32[64,256,1] bcb:f32[64,256] bcc:f32[64,256] bcd:f32[64,256,1600]
            bce:f32[64,256,1600] bcf:f16[64,256,1600] bcg:f16[1600,1600] bch:f16[64,256,25,64]
            bci:f16[64,25,256,1] bcj:f16[64,25,256,256] bck:f16[64,25,256,1] bcl:f16[64,256,25,64]
            bcm:f16[64,256,25,64] bcn:f16[] bco:f16[64,25,256,256] bcp:f16[64,256,1600]
            bcq:f16[1600,4800] bcr:f32[64,256,1600] bcs:f32[64,256,1] bct:f32[1,1,1600]
            bcu:f32[64,256,1] bcv:f32[64,256] bcw:f32[64,256] bcx:f32[64,256,1600]
            bcy:f32[64,256,1600] bcz:f16[64,256,6400] bda:f16[6400,1600] bdb:f16[64,256,6400]
            bdc:f16[64,256,6400] bdd:f16[64,256,6400] bde:f16[64,256,6400] bdf:f16[64,256,6400]
            bdg:f16[64,256,1600] bdh:f16[1600,6400] bdi:f32[64,256,1600] bdj:f32[64,256,1]
            bdk:f32[1,1,1600] bdl:f32[64,256,1] bdm:f32[64,256] bdn:f32[64,256] bdo:f32[64,256,1600]
            bdp:f32[64,256,1600]. let
            bdq:f16[1600] = reduce_sum[axes=(0, 1)] xb
            bdr:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] bdq
            bds:f16[1600] = reduce_sum[axes=(0, 1)] bdr
            bdt:f16[1600,6400] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] xb ys
            bdu:f16[6400,1600] = transpose[permutation=(1, 0)] bdt
            bdv:f16[1600,6400] = transpose[permutation=(1, 0)] bdu
            bdw:f16[64,256,6400] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] xb yt
            bdx:f16[64,256,6400] = mul yu bdw
            bdy:f16[64,256,6400] = mul 0.5 bdx
            bdz:f16[64,256,6400] = mul bdy yv
            bea:f16[64,256,6400] = mul bdz yw
            beb:f16[64,256,6400] = add_any bdz bea
            bec:f16[64,256,6400] = mul 0.7978515625 beb
            bed:f16[64,256,6400] = mul 0.044708251953125 bec
            bee:f16[64,256,6400] = mul bed yx
            bef:f16[64,256,6400] = add_any bec bee
            beg:f16[64,256,6400] = mul bdw yy
            beh:f16[64,256,6400] = add_any bef beg
            bei:f16[6400] = reduce_sum[axes=(0, 1)] beh
            bej:f16[1,1,6400] = reshape[dimensions=None new_sizes=(1, 1, 6400)] bei
            bek:f16[6400] = reduce_sum[axes=(0, 1)] bej
            bel:f16[6400,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] beh yz
            bem:f16[1600,6400] = transpose[permutation=(1, 0)] bel
            ben:f16[6400,1600] = transpose[permutation=(1, 0)] bem
            beo:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] beh za
            bep:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] beo
            beq:f32[1600] = reduce_sum[axes=(0, 1)] bep
            ber:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] beq
            bes:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] ber
            bet:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] bes
            beu:f32[64,256,1600] = mul zb bep
            bev:f32[64,256,1600] = mul zc beu
            bew:f32[1600] = reduce_sum[axes=(0, 1)] bev
            bex:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] bew
            bey:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bex
            bez:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] bey
            bfa:f32[64,256,1600] = mul beu zd
            bfb:f32[64,256] = reduce_sum[axes=(2,)] bfa
            bfc:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] bfb
            bfd:f32[64,256,1] = mul bfc ze
            bfe:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] bfd
            bff:f32[64,256] = mul bfe zf
            bfg:f32[64,256] = neg bff
            bfh:f32[64,256] = mul bfg zg
            bfi:f32[64,256] = div bff 1600.0
            bfj:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] bfi
            bfk:f32[64,256,1600] = mul bfj zh
            bfl:f32[64,256,1600] = mul bep zi
            bfm:f32[64,256,1600] = neg bfl
            bfn:f32[64,256] = reduce_sum[axes=(2,)] bfm
            bfo:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] bfn
            bfp:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] bfo
            bfq:f32[64,256] = add_any bfh bfp
            bfr:f32[64,256] = div bfq 1600.0
            bfs:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] bfr
            bft:f32[64,256,1600] = add_any bfk bfs
            bfu:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bft
            bfv:f16[64,256,1600] = add_any xb bfu
            bfw:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bfl
            bfx:f16[64,256,1600] = add_any bfv bfw
            bfy:f16[1600] = reduce_sum[axes=(0, 1)] bfx
            bfz:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] bfy
            bga:f16[1600] = reduce_sum[axes=(0, 1)] bfz
            bgb:f16[1600,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] bfx zj
            bgc:f16[1600,1600] = transpose[permutation=(1, 0)] bgb
            bgd:f16[1600,1600] = transpose[permutation=(1, 0)] bgc
            bge:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] bfx zk
            bgf:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] bge
            bgg:f16[64,25,64,256] = transpose[permutation=(0, 2, 3, 1)] bgf
            bgh:f16[64,25,256,256] = dot_general[
              dimension_numbers=(((2,), (3,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] bgg zl
            bgi:f16[64,25,256,256] = mul bgh zm
            bgj:f16[64,25,256,256] = mul bgi zn
            bgk:f16[64,25,256] = reduce_sum[axes=(3,)] bgj
            bgl:f16[64,25,256,1] = reshape[
              dimensions=None
              new_sizes=(64, 25, 256, 1)
            ] bgk
            bgm:f16[64,25,256,1] = neg bgl
            bgn:f32[64,25,256,1] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bgm
            bgo:f32[64,25,256] = reduce_sum[axes=(3,)] bgn
            bgp:f32[64,25,256,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 256)
            ] bgo
            bgq:f16[64,25,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bgp
            bgr:f16[64,25,256,256] = div bgh zo
            bgs:f16[64,25,256,256] = add_any bgq bgr
            bgt:f16[64,25,256,256] = mul bgs zn
            bgu:f16[64,25,256,64] = dot_general[
              dimension_numbers=(((2,), (1,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] bgt zp
            bgv:f16[64,256,25,64] = transpose[permutation=(0, 2, 1, 3)] bgu
            bgw:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] bgv
            bgx:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (1600, 1600, 0))
            ] bgw 0.0
            bgy:f16[64,25,256,64] = dot_general[
              dimension_numbers=(((3,), (1,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] bgt zq
            bgz:f16[64,256,25,64] = transpose[permutation=(0, 2, 1, 3)] bgy
            bha:f16[64,256,25,64] = div bgz zr
            bhb:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] bha
            bhc:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (0, 3200, 0))
            ] bhb 0.0
            bhd:f16[64,256,4800] = add_any bgx bhc
            bhe:f16[64,25,64,256] = dot_general[
              dimension_numbers=(((3,), (2,)), ((0, 1), (0, 1)))
              precision=None
              preferred_element_type=None
            ] bgg zs
            bhf:f16[64,256,25,64] = transpose[permutation=(0, 3, 1, 2)] bhe
            bhg:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] bhf
            bhh:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (3200, 0, 0))
            ] bhg 0.0
            bhi:f16[64,256,4800] = add_any bhd bhh
            bhj:f16[4800] = reduce_sum[axes=(0, 1)] bhi
            bhk:f16[1,1,4800] = reshape[dimensions=None new_sizes=(1, 1, 4800)] bhj
            bhl:f16[4800] = reduce_sum[axes=(0, 1)] bhk
            bhm:f16[4800,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] bhi zt
            bhn:f16[1600,4800] = transpose[permutation=(1, 0)] bhm
            bho:f16[4800,1600] = transpose[permutation=(1, 0)] bhn
            bhp:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] bhi zu
            bhq:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bhp
            bhr:f32[1600] = reduce_sum[axes=(0, 1)] bhq
            bhs:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] bhr
            bht:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bhs
            bhu:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] bht
            bhv:f32[64,256,1600] = mul zv bhq
            bhw:f32[64,256,1600] = mul zw bhv
            bhx:f32[1600] = reduce_sum[axes=(0, 1)] bhw
            bhy:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] bhx
            bhz:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bhy
            bia:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] bhz
            bib:f32[64,256,1600] = mul bhv zx
            bic:f32[64,256] = reduce_sum[axes=(2,)] bib
            bid:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] bic
            bie:f32[64,256,1] = mul bid zy
            bif:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] bie
            big:f32[64,256] = mul bif zz
            bih:f32[64,256] = neg big
            bii:f32[64,256] = mul bih baa
            bij:f32[64,256] = div big 1600.0
            bik:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] bij
            bil:f32[64,256,1600] = mul bik bab
            bim:f32[64,256,1600] = mul bhq bac
            bin:f32[64,256,1600] = neg bim
            bio:f32[64,256] = reduce_sum[axes=(2,)] bin
            bip:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] bio
            biq:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] bip
            bir:f32[64,256] = add_any bii biq
            bis:f32[64,256] = div bir 1600.0
            bit:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] bis
            biu:f32[64,256,1600] = add_any bil bit
            biv:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] biu
            biw:f16[64,256,1600] = add_any bfx biv
            bix:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bim
            biy:f16[64,256,1600] = add_any biw bix
            biz:f16[1600] = reduce_sum[axes=(0, 1)] biy
            bja:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] biz
            bjb:f16[1600] = reduce_sum[axes=(0, 1)] bja
            bjc:f16[1600,6400] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] biy bad
            bjd:f16[6400,1600] = transpose[permutation=(1, 0)] bjc
            bje:f16[1600,6400] = transpose[permutation=(1, 0)] bjd
            bjf:f16[64,256,6400] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] biy bae
            bjg:f16[64,256,6400] = mul baf bjf
            bjh:f16[64,256,6400] = mul 0.5 bjg
            bji:f16[64,256,6400] = mul bjh bag
            bjj:f16[64,256,6400] = mul bji bah
            bjk:f16[64,256,6400] = add_any bji bjj
            bjl:f16[64,256,6400] = mul 0.7978515625 bjk
            bjm:f16[64,256,6400] = mul 0.044708251953125 bjl
            bjn:f16[64,256,6400] = mul bjm bai
            bjo:f16[64,256,6400] = add_any bjl bjn
            bjp:f16[64,256,6400] = mul bjf baj
            bjq:f16[64,256,6400] = add_any bjo bjp
            bjr:f16[6400] = reduce_sum[axes=(0, 1)] bjq
            bjs:f16[1,1,6400] = reshape[dimensions=None new_sizes=(1, 1, 6400)] bjr
            bjt:f16[6400] = reduce_sum[axes=(0, 1)] bjs
            bju:f16[6400,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] bjq bak
            bjv:f16[1600,6400] = transpose[permutation=(1, 0)] bju
            bjw:f16[6400,1600] = transpose[permutation=(1, 0)] bjv
            bjx:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] bjq bal
            bjy:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bjx
            bjz:f32[1600] = reduce_sum[axes=(0, 1)] bjy
            bka:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] bjz
            bkb:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bka
            bkc:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] bkb
            bkd:f32[64,256,1600] = mul bam bjy
            bke:f32[64,256,1600] = mul ban bkd
            bkf:f32[1600] = reduce_sum[axes=(0, 1)] bke
            bkg:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] bkf
            bkh:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bkg
            bki:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] bkh
            bkj:f32[64,256,1600] = mul bkd bao
            bkk:f32[64,256] = reduce_sum[axes=(2,)] bkj
            bkl:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] bkk
            bkm:f32[64,256,1] = mul bkl bap
            bkn:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] bkm
            bko:f32[64,256] = mul bkn baq
            bkp:f32[64,256] = neg bko
            bkq:f32[64,256] = mul bkp bar
            bkr:f32[64,256] = div bko 1600.0
            bks:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] bkr
            bkt:f32[64,256,1600] = mul bks bas
            bku:f32[64,256,1600] = mul bjy bat
            bkv:f32[64,256,1600] = neg bku
            bkw:f32[64,256] = reduce_sum[axes=(2,)] bkv
            bkx:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] bkw
            bky:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] bkx
            bkz:f32[64,256] = add_any bkq bky
            bla:f32[64,256] = div bkz 1600.0
            blb:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] bla
            blc:f32[64,256,1600] = add_any bkt blb
            bld:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] blc
            ble:f16[64,256,1600] = add_any biy bld
            blf:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bku
            blg:f16[64,256,1600] = add_any ble blf
            blh:f16[1600] = reduce_sum[axes=(0, 1)] blg
            bli:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] blh
            blj:f16[1600] = reduce_sum[axes=(0, 1)] bli
            blk:f16[1600,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] blg bau
            bll:f16[1600,1600] = transpose[permutation=(1, 0)] blk
            blm:f16[1600,1600] = transpose[permutation=(1, 0)] bll
            bln:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] blg bav
            blo:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] bln
            blp:f16[64,25,64,256] = transpose[permutation=(0, 2, 3, 1)] blo
            blq:f16[64,25,256,256] = dot_general[
              dimension_numbers=(((2,), (3,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] blp baw
            blr:f16[64,25,256,256] = mul blq bax
            bls:f16[64,25,256,256] = mul blr bay
            blt:f16[64,25,256] = reduce_sum[axes=(3,)] bls
            blu:f16[64,25,256,1] = reshape[
              dimensions=None
              new_sizes=(64, 25, 256, 1)
            ] blt
            blv:f16[64,25,256,1] = neg blu
            blw:f32[64,25,256,1] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] blv
            blx:f32[64,25,256] = reduce_sum[axes=(3,)] blw
            bly:f32[64,25,256,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 256)
            ] blx
            blz:f16[64,25,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bly
            bma:f16[64,25,256,256] = div blq baz
            bmb:f16[64,25,256,256] = add_any blz bma
            bmc:f16[64,25,256,256] = mul bmb bay
            bmd:f16[64,25,256,64] = dot_general[
              dimension_numbers=(((2,), (1,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] bmc bba
            bme:f16[64,256,25,64] = transpose[permutation=(0, 2, 1, 3)] bmd
            bmf:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] bme
            bmg:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (1600, 1600, 0))
            ] bmf 0.0
            bmh:f16[64,25,256,64] = dot_general[
              dimension_numbers=(((3,), (1,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] bmc bbb
            bmi:f16[64,256,25,64] = transpose[permutation=(0, 2, 1, 3)] bmh
            bmj:f16[64,256,25,64] = div bmi bbc
            bmk:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] bmj
            bml:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (0, 3200, 0))
            ] bmk 0.0
            bmm:f16[64,256,4800] = add_any bmg bml
            bmn:f16[64,25,64,256] = dot_general[
              dimension_numbers=(((3,), (2,)), ((0, 1), (0, 1)))
              precision=None
              preferred_element_type=None
            ] blp bbd
            bmo:f16[64,256,25,64] = transpose[permutation=(0, 3, 1, 2)] bmn
            bmp:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] bmo
            bmq:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (3200, 0, 0))
            ] bmp 0.0
            bmr:f16[64,256,4800] = add_any bmm bmq
            bms:f16[4800] = reduce_sum[axes=(0, 1)] bmr
            bmt:f16[1,1,4800] = reshape[dimensions=None new_sizes=(1, 1, 4800)] bms
            bmu:f16[4800] = reduce_sum[axes=(0, 1)] bmt
            bmv:f16[4800,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] bmr bbe
            bmw:f16[1600,4800] = transpose[permutation=(1, 0)] bmv
            bmx:f16[4800,1600] = transpose[permutation=(1, 0)] bmw
            bmy:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] bmr bbf
            bmz:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bmy
            bna:f32[1600] = reduce_sum[axes=(0, 1)] bmz
            bnb:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] bna
            bnc:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bnb
            bnd:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] bnc
            bne:f32[64,256,1600] = mul bbg bmz
            bnf:f32[64,256,1600] = mul bbh bne
            bng:f32[1600] = reduce_sum[axes=(0, 1)] bnf
            bnh:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] bng
            bni:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bnh
            bnj:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] bni
            bnk:f32[64,256,1600] = mul bne bbi
            bnl:f32[64,256] = reduce_sum[axes=(2,)] bnk
            bnm:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] bnl
            bnn:f32[64,256,1] = mul bnm bbj
            bno:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] bnn
            bnp:f32[64,256] = mul bno bbk
            bnq:f32[64,256] = neg bnp
            bnr:f32[64,256] = mul bnq bbl
            bns:f32[64,256] = div bnp 1600.0
            bnt:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] bns
            bnu:f32[64,256,1600] = mul bnt bbm
            bnv:f32[64,256,1600] = mul bmz bbn
            bnw:f32[64,256,1600] = neg bnv
            bnx:f32[64,256] = reduce_sum[axes=(2,)] bnw
            bny:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] bnx
            bnz:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] bny
            boa:f32[64,256] = add_any bnr bnz
            bob:f32[64,256] = div boa 1600.0
            boc:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] bob
            bod:f32[64,256,1600] = add_any bnu boc
            boe:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bod
            bof:f16[64,256,1600] = add_any blg boe
            bog:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bnv
            boh:f16[64,256,1600] = add_any bof bog
            boi:f16[1600] = reduce_sum[axes=(0, 1)] boh
            boj:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] boi
            bok:f16[1600] = reduce_sum[axes=(0, 1)] boj
            bol:f16[1600,6400] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] boh bbo
            bom:f16[6400,1600] = transpose[permutation=(1, 0)] bol
            bon:f16[1600,6400] = transpose[permutation=(1, 0)] bom
            boo:f16[64,256,6400] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] boh bbp
            bop:f16[64,256,6400] = mul bbq boo
            boq:f16[64,256,6400] = mul 0.5 bop
            bor:f16[64,256,6400] = mul boq bbr
            bos:f16[64,256,6400] = mul bor bbs
            bot:f16[64,256,6400] = add_any bor bos
            bou:f16[64,256,6400] = mul 0.7978515625 bot
            bov:f16[64,256,6400] = mul 0.044708251953125 bou
            bow:f16[64,256,6400] = mul bov bbt
            box:f16[64,256,6400] = add_any bou bow
            boy:f16[64,256,6400] = mul boo bbu
            boz:f16[64,256,6400] = add_any box boy
            bpa:f16[6400] = reduce_sum[axes=(0, 1)] boz
            bpb:f16[1,1,6400] = reshape[dimensions=None new_sizes=(1, 1, 6400)] bpa
            bpc:f16[6400] = reduce_sum[axes=(0, 1)] bpb
            bpd:f16[6400,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] boz bbv
            bpe:f16[1600,6400] = transpose[permutation=(1, 0)] bpd
            bpf:f16[6400,1600] = transpose[permutation=(1, 0)] bpe
            bpg:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] boz bbw
            bph:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bpg
            bpi:f32[1600] = reduce_sum[axes=(0, 1)] bph
            bpj:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] bpi
            bpk:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bpj
            bpl:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] bpk
            bpm:f32[64,256,1600] = mul bbx bph
            bpn:f32[64,256,1600] = mul bby bpm
            bpo:f32[1600] = reduce_sum[axes=(0, 1)] bpn
            bpp:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] bpo
            bpq:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bpp
            bpr:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] bpq
            bps:f32[64,256,1600] = mul bpm bbz
            bpt:f32[64,256] = reduce_sum[axes=(2,)] bps
            bpu:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] bpt
            bpv:f32[64,256,1] = mul bpu bca
            bpw:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] bpv
            bpx:f32[64,256] = mul bpw bcb
            bpy:f32[64,256] = neg bpx
            bpz:f32[64,256] = mul bpy bcc
            bqa:f32[64,256] = div bpx 1600.0
            bqb:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] bqa
            bqc:f32[64,256,1600] = mul bqb bcd
            bqd:f32[64,256,1600] = mul bph bce
            bqe:f32[64,256,1600] = neg bqd
            bqf:f32[64,256] = reduce_sum[axes=(2,)] bqe
            bqg:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] bqf
            bqh:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] bqg
            bqi:f32[64,256] = add_any bpz bqh
            bqj:f32[64,256] = div bqi 1600.0
            bqk:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] bqj
            bql:f32[64,256,1600] = add_any bqc bqk
            bqm:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bql
            bqn:f16[64,256,1600] = add_any boh bqm
            bqo:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bqd
            bqp:f16[64,256,1600] = add_any bqn bqo
            bqq:f16[1600] = reduce_sum[axes=(0, 1)] bqp
            bqr:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] bqq
            bqs:f16[1600] = reduce_sum[axes=(0, 1)] bqr
            bqt:f16[1600,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] bqp bcf
            bqu:f16[1600,1600] = transpose[permutation=(1, 0)] bqt
            bqv:f16[1600,1600] = transpose[permutation=(1, 0)] bqu
            bqw:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] bqp bcg
            bqx:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] bqw
            bqy:f16[64,25,64,256] = transpose[permutation=(0, 2, 3, 1)] bqx
            bqz:f16[64,25,256,256] = dot_general[
              dimension_numbers=(((2,), (3,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] bqy bch
            bra:f16[64,25,256,256] = mul bqz bci
            brb:f16[64,25,256,256] = mul bra bcj
            brc:f16[64,25,256] = reduce_sum[axes=(3,)] brb
            brd:f16[64,25,256,1] = reshape[
              dimensions=None
              new_sizes=(64, 25, 256, 1)
            ] brc
            bre:f16[64,25,256,1] = neg brd
            brf:f32[64,25,256,1] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bre
            brg:f32[64,25,256] = reduce_sum[axes=(3,)] brf
            brh:f32[64,25,256,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 256)
            ] brg
            bri:f16[64,25,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] brh
            brj:f16[64,25,256,256] = div bqz bck
            brk:f16[64,25,256,256] = add_any bri brj
            brl:f16[64,25,256,256] = mul brk bcj
            brm:f16[64,25,256,64] = dot_general[
              dimension_numbers=(((2,), (1,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] brl bcl
            brn:f16[64,256,25,64] = transpose[permutation=(0, 2, 1, 3)] brm
            bro:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] brn
            brp:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (1600, 1600, 0))
            ] bro 0.0
            brq:f16[64,25,256,64] = dot_general[
              dimension_numbers=(((3,), (1,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] brl bcm
            brr:f16[64,256,25,64] = transpose[permutation=(0, 2, 1, 3)] brq
            brs:f16[64,256,25,64] = div brr bcn
            brt:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] brs
            bru:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (0, 3200, 0))
            ] brt 0.0
            brv:f16[64,256,4800] = add_any brp bru
            brw:f16[64,25,64,256] = dot_general[
              dimension_numbers=(((3,), (2,)), ((0, 1), (0, 1)))
              precision=None
              preferred_element_type=None
            ] bqy bco
            brx:f16[64,256,25,64] = transpose[permutation=(0, 3, 1, 2)] brw
            bry:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] brx
            brz:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (3200, 0, 0))
            ] bry 0.0
            bsa:f16[64,256,4800] = add_any brv brz
            bsb:f16[4800] = reduce_sum[axes=(0, 1)] bsa
            bsc:f16[1,1,4800] = reshape[dimensions=None new_sizes=(1, 1, 4800)] bsb
            bsd:f16[4800] = reduce_sum[axes=(0, 1)] bsc
            bse:f16[4800,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] bsa bcp
            bsf:f16[1600,4800] = transpose[permutation=(1, 0)] bse
            bsg:f16[4800,1600] = transpose[permutation=(1, 0)] bsf
            bsh:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] bsa bcq
            bsi:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bsh
            bsj:f32[1600] = reduce_sum[axes=(0, 1)] bsi
            bsk:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] bsj
            bsl:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bsk
            bsm:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] bsl
            bsn:f32[64,256,1600] = mul bcr bsi
            bso:f32[64,256,1600] = mul bcs bsn
            bsp:f32[1600] = reduce_sum[axes=(0, 1)] bso
            bsq:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] bsp
            bsr:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bsq
            bss:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] bsr
            bst:f32[64,256,1600] = mul bsn bct
            bsu:f32[64,256] = reduce_sum[axes=(2,)] bst
            bsv:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] bsu
            bsw:f32[64,256,1] = mul bsv bcu
            bsx:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] bsw
            bsy:f32[64,256] = mul bsx bcv
            bsz:f32[64,256] = neg bsy
            bta:f32[64,256] = mul bsz bcw
            btb:f32[64,256] = div bsy 1600.0
            btc:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] btb
            btd:f32[64,256,1600] = mul btc bcx
            bte:f32[64,256,1600] = mul bsi bcy
            btf:f32[64,256,1600] = neg bte
            btg:f32[64,256] = reduce_sum[axes=(2,)] btf
            bth:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] btg
            bti:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] bth
            btj:f32[64,256] = add_any bta bti
            btk:f32[64,256] = div btj 1600.0
            btl:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] btk
            btm:f32[64,256,1600] = add_any btd btl
            btn:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] btm
            bto:f16[64,256,1600] = add_any bqp btn
            btp:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bte
            btq:f16[64,256,1600] = add_any bto btp
            btr:f16[1600] = reduce_sum[axes=(0, 1)] btq
            bts:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] btr
            btt:f16[1600] = reduce_sum[axes=(0, 1)] bts
            btu:f16[1600,6400] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] btq bcz
            btv:f16[6400,1600] = transpose[permutation=(1, 0)] btu
            btw:f16[1600,6400] = transpose[permutation=(1, 0)] btv
            btx:f16[64,256,6400] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] btq bda
            bty:f16[64,256,6400] = mul bdb btx
            btz:f16[64,256,6400] = mul 0.5 bty
            bua:f16[64,256,6400] = mul btz bdc
            bub:f16[64,256,6400] = mul bua bdd
            buc:f16[64,256,6400] = add_any bua bub
            bud:f16[64,256,6400] = mul 0.7978515625 buc
            bue:f16[64,256,6400] = mul 0.044708251953125 bud
            buf:f16[64,256,6400] = mul bue bde
            bug:f16[64,256,6400] = add_any bud buf
            buh:f16[64,256,6400] = mul btx bdf
            bui:f16[64,256,6400] = add_any bug buh
            buj:f16[6400] = reduce_sum[axes=(0, 1)] bui
            buk:f16[1,1,6400] = reshape[dimensions=None new_sizes=(1, 1, 6400)] buj
            bul:f16[6400] = reduce_sum[axes=(0, 1)] buk
            bum:f16[6400,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] bui bdg
            bun:f16[1600,6400] = transpose[permutation=(1, 0)] bum
            buo:f16[6400,1600] = transpose[permutation=(1, 0)] bun
            bup:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] bui bdh
            buq:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] bup
            bur:f32[1600] = reduce_sum[axes=(0, 1)] buq
            bus:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] bur
            but:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bus
            buu:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] but
            buv:f32[64,256,1600] = mul bdi buq
            buw:f32[64,256,1600] = mul bdj buv
            bux:f32[1600] = reduce_sum[axes=(0, 1)] buw
            buy:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] bux
            buz:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] buy
            bva:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] buz
            bvb:f32[64,256,1600] = mul buv bdk
            bvc:f32[64,256] = reduce_sum[axes=(2,)] bvb
            bvd:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] bvc
            bve:f32[64,256,1] = mul bvd bdl
            bvf:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] bve
            bvg:f32[64,256] = mul bvf bdm
            bvh:f32[64,256] = neg bvg
            bvi:f32[64,256] = mul bvh bdn
            bvj:f32[64,256] = div bvg 1600.0
            bvk:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] bvj
            bvl:f32[64,256,1600] = mul bvk bdo
            bvm:f32[64,256,1600] = mul buq bdp
            bvn:f32[64,256,1600] = neg bvm
            bvo:f32[64,256] = reduce_sum[axes=(2,)] bvn
            bvp:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] bvo
            bvq:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] bvp
            bvr:f32[64,256] = add_any bvi bvq
            bvs:f32[64,256] = div bvr 1600.0
            bvt:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] bvs
            bvu:f32[64,256,1600] = add_any bvl bvt
            bvv:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bvu
            bvw:f16[64,256,1600] = add_any btq bvv
            bvx:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] bvm
            bvy:f16[64,256,1600] = add_any bvw bvx
            bvz:f16[1600] = add xc bds
            bwa:f16[1600,6400] = add xd bdv
            bwb:f16[6400] = add xe bek
            bwc:f16[6400,1600] = add xf ben
            bwd:f16[1600] = add xg bet
            bwe:f16[1600] = add xh bez
            bwf:f16[1600] = add xi bga
            bwg:f16[1600,1600] = add xj bgd
            bwh:f16[4800] = add xk bhl
            bwi:f16[4800,1600] = add xl bho
            bwj:f16[1600] = add xm bhu
            bwk:f16[1600] = add xn bia
            bwl:f16[1600] = add xo bjb
            bwm:f16[1600,6400] = add xp bje
            bwn:f16[6400] = add xq bjt
            bwo:f16[6400,1600] = add xr bjw
            bwp:f16[1600] = add xs bkc
            bwq:f16[1600] = add xt bki
            bwr:f16[1600] = add xu blj
            bws:f16[1600,1600] = add xv blm
            bwt:f16[4800] = add xw bmu
            bwu:f16[4800,1600] = add xx bmx
            bwv:f16[1600] = add xy bnd
            bww:f16[1600] = add xz bnj
            bwx:f16[1600] = add ya bok
            bwy:f16[1600,6400] = add yb bon
            bwz:f16[6400] = add yc bpc
            bxa:f16[6400,1600] = add yd bpf
            bxb:f16[1600] = add ye bpl
            bxc:f16[1600] = add yf bpr
            bxd:f16[1600] = add yg bqs
            bxe:f16[1600,1600] = add yh bqv
            bxf:f16[4800] = add yi bsd
            bxg:f16[4800,1600] = add yj bsg
            bxh:f16[1600] = add yk bsm
            bxi:f16[1600] = add yl bss
            bxj:f16[1600] = add ym btt
            bxk:f16[1600,6400] = add yn btw
            bxl:f16[6400] = add yo bul
            bxm:f16[6400,1600] = add yp buo
            bxn:f16[1600] = add yq buu
            bxo:f16[1600] = add yr bva
          in (bvy, bvz, bwa, bwb, bwc, bwd, bwe, bwf, bwg, bwh, bwi, bwj, bwk, bwl,
            bwm, bwn, bwo, bwp, bwq, bwr, bws, bwt, bwu, bwv, bww, bwx, bwy, bwz,
            bxa, bxb, bxc, bxd, bxe, bxf, bxg, bxh, bxi, bxj, bxk, bxl, bxm, bxn,
            bxo) }
        name=70
      ] im eg eh ei ej ek el em en eo ep eq er es et eu ev ew ex ey ez fa fb fc fd
        fe ff fg fh fi fj fk fl fm fn fo fp fq fr fs ft fu fv in io ip iq ir is it
        iu iv iw ix iy iz ja jb jc jd je jf jg jh ji jj jk jl jm jn jo jp jq jr js
        jt ju jv jw jx jy jz ka kb kc kd ke kf kg kh ki kj kk kl km kn ko kp kq kr
        ks kt ku kv kw kx ky kz la lb lc ld le lf lg lh li lj lk ll lm ln lo lp lq
        lr ls lt lu lv lw lx ly lz ma mb mc md me mf mg mh mi mj mk ml mm mn mo mp
        mq mr ms mt mu mv mw mx my mz na nb nc nd ne nf ng nh ni nj nk
      bxp:f16[64,256,1600] bxq:f16[1600] bxr:f16[1600,1600] bxs:f16[4800] bxt:f16[4800,1600]
        bxu:f16[1600] bxv:f16[1600] bxw:f16[1600] bxx:f16[1600,6400] bxy:f16[6400]
        bxz:f16[6400,1600] bya:f16[1600] byb:f16[1600] byc:f16[1600] byd:f16[1600,1600]
        bye:f16[4800] byf:f16[4800,1600] byg:f16[1600] byh:f16[1600] byi:f16[1600]
        byj:f16[1600,6400] byk:f16[6400] byl:f16[6400,1600] bym:f16[1600] byn:f16[1600]
        byo:f16[1600] byp:f16[1600,1600] byq:f16[4800] byr:f16[4800,1600] bys:f16[1600]
        byt:f16[1600] byu:f16[1600] byv:f16[1600,6400] byw:f16[6400] byx:f16[6400,1600]
        byy:f16[1600] byz:f16[1600] bza:f16[1600] bzb:f16[1600,1600] bzc:f16[4800]
        bzd:f16[4800,1600] bze:f16[1600] bzf:f16[1600] bzg:f16[1600] bzh:f16[1600,6400]
        bzi:f16[6400] bzj:f16[6400,1600] bzk:f16[1600] bzl:f16[1600] = named_call[
        call_jaxpr={ lambda ; bzm:f16[64,256,1600] bzn:f16[1600] bzo:f16[1600,1600]
            bzp:f16[4800] bzq:f16[4800,1600] bzr:f16[1600] bzs:f16[1600] bzt:f16[1600]
            bzu:f16[1600,6400] bzv:f16[6400] bzw:f16[6400,1600] bzx:f16[1600] bzy:f16[1600]
            bzz:f16[1600] caa:f16[1600,1600] cab:f16[4800] cac:f16[4800,1600] cad:f16[1600]
            cae:f16[1600] caf:f16[1600] cag:f16[1600,6400] cah:f16[6400] cai:f16[6400,1600]
            caj:f16[1600] cak:f16[1600] cal:f16[1600] cam:f16[1600,1600] can:f16[4800]
            cao:f16[4800,1600] cap:f16[1600] caq:f16[1600] car:f16[1600] cas:f16[1600,6400]
            cat:f16[6400] cau:f16[6400,1600] cav:f16[1600] caw:f16[1600] cax:f16[1600]
            cay:f16[1600,1600] caz:f16[4800] cba:f16[4800,1600] cbb:f16[1600] cbc:f16[1600]
            cbd:f16[1600] cbe:f16[1600,6400] cbf:f16[6400] cbg:f16[6400,1600] cbh:f16[1600]
            cbi:f16[1600] cbj:f16[64,256,1600] cbk:f16[1600,1600] cbl:f16[64,256,25,64]
            cbm:f16[64,25,256,1] cbn:f16[64,25,256,256] cbo:f16[64,25,256,1] cbp:f16[64,256,25,64]
            cbq:f16[64,256,25,64] cbr:f16[] cbs:f16[64,25,256,256] cbt:f16[64,256,1600]
            cbu:f16[1600,4800] cbv:f32[64,256,1600] cbw:f32[64,256,1] cbx:f32[1,1,1600]
            cby:f32[64,256,1] cbz:f32[64,256] cca:f32[64,256] ccb:f32[64,256,1600]
            ccc:f32[64,256,1600] ccd:f16[64,256,6400] cce:f16[6400,1600] ccf:f16[64,256,6400]
            ccg:f16[64,256,6400] cch:f16[64,256,6400] cci:f16[64,256,6400] ccj:f16[64,256,6400]
            cck:f16[64,256,1600] ccl:f16[1600,6400] ccm:f32[64,256,1600] ccn:f32[64,256,1]
            cco:f32[1,1,1600] ccp:f32[64,256,1] ccq:f32[64,256] ccr:f32[64,256] ccs:f32[64,256,1600]
            cct:f32[64,256,1600] ccu:f16[64,256,1600] ccv:f16[1600,1600] ccw:f16[64,256,25,64]
            ccx:f16[64,25,256,1] ccy:f16[64,25,256,256] ccz:f16[64,25,256,1] cda:f16[64,256,25,64]
            cdb:f16[64,256,25,64] cdc:f16[] cdd:f16[64,25,256,256] cde:f16[64,256,1600]
            cdf:f16[1600,4800] cdg:f32[64,256,1600] cdh:f32[64,256,1] cdi:f32[1,1,1600]
            cdj:f32[64,256,1] cdk:f32[64,256] cdl:f32[64,256] cdm:f32[64,256,1600]
            cdn:f32[64,256,1600] cdo:f16[64,256,6400] cdp:f16[6400,1600] cdq:f16[64,256,6400]
            cdr:f16[64,256,6400] cds:f16[64,256,6400] cdt:f16[64,256,6400] cdu:f16[64,256,6400]
            cdv:f16[64,256,1600] cdw:f16[1600,6400] cdx:f32[64,256,1600] cdy:f32[64,256,1]
            cdz:f32[1,1,1600] cea:f32[64,256,1] ceb:f32[64,256] cec:f32[64,256] ced:f32[64,256,1600]
            cee:f32[64,256,1600] cef:f16[64,256,1600] ceg:f16[1600,1600] ceh:f16[64,256,25,64]
            cei:f16[64,25,256,1] cej:f16[64,25,256,256] cek:f16[64,25,256,1] cel:f16[64,256,25,64]
            cem:f16[64,256,25,64] cen:f16[] ceo:f16[64,25,256,256] cep:f16[64,256,1600]
            ceq:f16[1600,4800] cer:f32[64,256,1600] ces:f32[64,256,1] cet:f32[1,1,1600]
            ceu:f32[64,256,1] cev:f32[64,256] cew:f32[64,256] cex:f32[64,256,1600]
            cey:f32[64,256,1600] cez:f16[64,256,6400] cfa:f16[6400,1600] cfb:f16[64,256,6400]
            cfc:f16[64,256,6400] cfd:f16[64,256,6400] cfe:f16[64,256,6400] cff:f16[64,256,6400]
            cfg:f16[64,256,1600] cfh:f16[1600,6400] cfi:f32[64,256,1600] cfj:f32[64,256,1]
            cfk:f32[1,1,1600] cfl:f32[64,256,1] cfm:f32[64,256] cfn:f32[64,256] cfo:f32[64,256,1600]
            cfp:f32[64,256,1600] cfq:f16[64,256,1600] cfr:f16[1600,1600] cfs:f16[64,256,25,64]
            cft:f16[64,25,256,1] cfu:f16[64,25,256,256] cfv:f16[64,25,256,1] cfw:f16[64,256,25,64]
            cfx:f16[64,256,25,64] cfy:f16[] cfz:f16[64,25,256,256] cga:f16[64,256,1600]
            cgb:f16[1600,4800] cgc:f32[64,256,1600] cgd:f32[64,256,1] cge:f32[1,1,1600]
            cgf:f32[64,256,1] cgg:f32[64,256] cgh:f32[64,256] cgi:f32[64,256,1600]
            cgj:f32[64,256,1600] cgk:f16[64,256,6400] cgl:f16[6400,1600] cgm:f16[64,256,6400]
            cgn:f16[64,256,6400] cgo:f16[64,256,6400] cgp:f16[64,256,6400] cgq:f16[64,256,6400]
            cgr:f16[64,256,1600] cgs:f16[1600,6400] cgt:f32[64,256,1600] cgu:f32[64,256,1]
            cgv:f32[1,1,1600] cgw:f32[64,256,1] cgx:f32[64,256] cgy:f32[64,256] cgz:f32[64,256,1600]
            cha:f32[64,256,1600]. let
            chb:f16[1600] = reduce_sum[axes=(0, 1)] bzm
            chc:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] chb
            chd:f16[1600] = reduce_sum[axes=(0, 1)] chc
            che:f16[1600,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] bzm cbj
            chf:f16[1600,1600] = transpose[permutation=(1, 0)] che
            chg:f16[1600,1600] = transpose[permutation=(1, 0)] chf
            chh:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] bzm cbk
            chi:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] chh
            chj:f16[64,25,64,256] = transpose[permutation=(0, 2, 3, 1)] chi
            chk:f16[64,25,256,256] = dot_general[
              dimension_numbers=(((2,), (3,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] chj cbl
            chl:f16[64,25,256,256] = mul chk cbm
            chm:f16[64,25,256,256] = mul chl cbn
            chn:f16[64,25,256] = reduce_sum[axes=(3,)] chm
            cho:f16[64,25,256,1] = reshape[
              dimensions=None
              new_sizes=(64, 25, 256, 1)
            ] chn
            chp:f16[64,25,256,1] = neg cho
            chq:f32[64,25,256,1] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] chp
            chr:f32[64,25,256] = reduce_sum[axes=(3,)] chq
            chs:f32[64,25,256,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 256)
            ] chr
            cht:f16[64,25,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] chs
            chu:f16[64,25,256,256] = div chk cbo
            chv:f16[64,25,256,256] = add_any cht chu
            chw:f16[64,25,256,256] = mul chv cbn
            chx:f16[64,25,256,64] = dot_general[
              dimension_numbers=(((2,), (1,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] chw cbp
            chy:f16[64,256,25,64] = transpose[permutation=(0, 2, 1, 3)] chx
            chz:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] chy
            cia:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (1600, 1600, 0))
            ] chz 0.0
            cib:f16[64,25,256,64] = dot_general[
              dimension_numbers=(((3,), (1,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] chw cbq
            cic:f16[64,256,25,64] = transpose[permutation=(0, 2, 1, 3)] cib
            cid:f16[64,256,25,64] = div cic cbr
            cie:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] cid
            cif:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (0, 3200, 0))
            ] cie 0.0
            cig:f16[64,256,4800] = add_any cia cif
            cih:f16[64,25,64,256] = dot_general[
              dimension_numbers=(((3,), (2,)), ((0, 1), (0, 1)))
              precision=None
              preferred_element_type=None
            ] chj cbs
            cii:f16[64,256,25,64] = transpose[permutation=(0, 3, 1, 2)] cih
            cij:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] cii
            cik:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (3200, 0, 0))
            ] cij 0.0
            cil:f16[64,256,4800] = add_any cig cik
            cim:f16[4800] = reduce_sum[axes=(0, 1)] cil
            cin:f16[1,1,4800] = reshape[dimensions=None new_sizes=(1, 1, 4800)] cim
            cio:f16[4800] = reduce_sum[axes=(0, 1)] cin
            cip:f16[4800,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] cil cbt
            ciq:f16[1600,4800] = transpose[permutation=(1, 0)] cip
            cir:f16[4800,1600] = transpose[permutation=(1, 0)] ciq
            cis:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] cil cbu
            cit:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] cis
            ciu:f32[1600] = reduce_sum[axes=(0, 1)] cit
            civ:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] ciu
            ciw:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] civ
            cix:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] ciw
            ciy:f32[64,256,1600] = mul cbv cit
            ciz:f32[64,256,1600] = mul cbw ciy
            cja:f32[1600] = reduce_sum[axes=(0, 1)] ciz
            cjb:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] cja
            cjc:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] cjb
            cjd:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] cjc
            cje:f32[64,256,1600] = mul ciy cbx
            cjf:f32[64,256] = reduce_sum[axes=(2,)] cje
            cjg:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] cjf
            cjh:f32[64,256,1] = mul cjg cby
            cji:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] cjh
            cjj:f32[64,256] = mul cji cbz
            cjk:f32[64,256] = neg cjj
            cjl:f32[64,256] = mul cjk cca
            cjm:f32[64,256] = div cjj 1600.0
            cjn:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] cjm
            cjo:f32[64,256,1600] = mul cjn ccb
            cjp:f32[64,256,1600] = mul cit ccc
            cjq:f32[64,256,1600] = neg cjp
            cjr:f32[64,256] = reduce_sum[axes=(2,)] cjq
            cjs:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] cjr
            cjt:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] cjs
            cju:f32[64,256] = add_any cjl cjt
            cjv:f32[64,256] = div cju 1600.0
            cjw:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] cjv
            cjx:f32[64,256,1600] = add_any cjo cjw
            cjy:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] cjx
            cjz:f16[64,256,1600] = add_any bzm cjy
            cka:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] cjp
            ckb:f16[64,256,1600] = add_any cjz cka
            ckc:f16[1600] = reduce_sum[axes=(0, 1)] ckb
            ckd:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] ckc
            cke:f16[1600] = reduce_sum[axes=(0, 1)] ckd
            ckf:f16[1600,6400] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] ckb ccd
            ckg:f16[6400,1600] = transpose[permutation=(1, 0)] ckf
            ckh:f16[1600,6400] = transpose[permutation=(1, 0)] ckg
            cki:f16[64,256,6400] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] ckb cce
            ckj:f16[64,256,6400] = mul ccf cki
            ckk:f16[64,256,6400] = mul 0.5 ckj
            ckl:f16[64,256,6400] = mul ckk ccg
            ckm:f16[64,256,6400] = mul ckl cch
            ckn:f16[64,256,6400] = add_any ckl ckm
            cko:f16[64,256,6400] = mul 0.7978515625 ckn
            ckp:f16[64,256,6400] = mul 0.044708251953125 cko
            ckq:f16[64,256,6400] = mul ckp cci
            ckr:f16[64,256,6400] = add_any cko ckq
            cks:f16[64,256,6400] = mul cki ccj
            ckt:f16[64,256,6400] = add_any ckr cks
            cku:f16[6400] = reduce_sum[axes=(0, 1)] ckt
            ckv:f16[1,1,6400] = reshape[dimensions=None new_sizes=(1, 1, 6400)] cku
            ckw:f16[6400] = reduce_sum[axes=(0, 1)] ckv
            ckx:f16[6400,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] ckt cck
            cky:f16[1600,6400] = transpose[permutation=(1, 0)] ckx
            ckz:f16[6400,1600] = transpose[permutation=(1, 0)] cky
            cla:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] ckt ccl
            clb:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] cla
            clc:f32[1600] = reduce_sum[axes=(0, 1)] clb
            cld:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] clc
            cle:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] cld
            clf:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] cle
            clg:f32[64,256,1600] = mul ccm clb
            clh:f32[64,256,1600] = mul ccn clg
            cli:f32[1600] = reduce_sum[axes=(0, 1)] clh
            clj:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] cli
            clk:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] clj
            cll:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] clk
            clm:f32[64,256,1600] = mul clg cco
            cln:f32[64,256] = reduce_sum[axes=(2,)] clm
            clo:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] cln
            clp:f32[64,256,1] = mul clo ccp
            clq:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] clp
            clr:f32[64,256] = mul clq ccq
            cls:f32[64,256] = neg clr
            clt:f32[64,256] = mul cls ccr
            clu:f32[64,256] = div clr 1600.0
            clv:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] clu
            clw:f32[64,256,1600] = mul clv ccs
            clx:f32[64,256,1600] = mul clb cct
            cly:f32[64,256,1600] = neg clx
            clz:f32[64,256] = reduce_sum[axes=(2,)] cly
            cma:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] clz
            cmb:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] cma
            cmc:f32[64,256] = add_any clt cmb
            cmd:f32[64,256] = div cmc 1600.0
            cme:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] cmd
            cmf:f32[64,256,1600] = add_any clw cme
            cmg:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] cmf
            cmh:f16[64,256,1600] = add_any ckb cmg
            cmi:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] clx
            cmj:f16[64,256,1600] = add_any cmh cmi
            cmk:f16[1600] = reduce_sum[axes=(0, 1)] cmj
            cml:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] cmk
            cmm:f16[1600] = reduce_sum[axes=(0, 1)] cml
            cmn:f16[1600,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] cmj ccu
            cmo:f16[1600,1600] = transpose[permutation=(1, 0)] cmn
            cmp:f16[1600,1600] = transpose[permutation=(1, 0)] cmo
            cmq:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] cmj ccv
            cmr:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] cmq
            cms:f16[64,25,64,256] = transpose[permutation=(0, 2, 3, 1)] cmr
            cmt:f16[64,25,256,256] = dot_general[
              dimension_numbers=(((2,), (3,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] cms ccw
            cmu:f16[64,25,256,256] = mul cmt ccx
            cmv:f16[64,25,256,256] = mul cmu ccy
            cmw:f16[64,25,256] = reduce_sum[axes=(3,)] cmv
            cmx:f16[64,25,256,1] = reshape[
              dimensions=None
              new_sizes=(64, 25, 256, 1)
            ] cmw
            cmy:f16[64,25,256,1] = neg cmx
            cmz:f32[64,25,256,1] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] cmy
            cna:f32[64,25,256] = reduce_sum[axes=(3,)] cmz
            cnb:f32[64,25,256,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 256)
            ] cna
            cnc:f16[64,25,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] cnb
            cnd:f16[64,25,256,256] = div cmt ccz
            cne:f16[64,25,256,256] = add_any cnc cnd
            cnf:f16[64,25,256,256] = mul cne ccy
            cng:f16[64,25,256,64] = dot_general[
              dimension_numbers=(((2,), (1,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] cnf cda
            cnh:f16[64,256,25,64] = transpose[permutation=(0, 2, 1, 3)] cng
            cni:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] cnh
            cnj:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (1600, 1600, 0))
            ] cni 0.0
            cnk:f16[64,25,256,64] = dot_general[
              dimension_numbers=(((3,), (1,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] cnf cdb
            cnl:f16[64,256,25,64] = transpose[permutation=(0, 2, 1, 3)] cnk
            cnm:f16[64,256,25,64] = div cnl cdc
            cnn:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] cnm
            cno:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (0, 3200, 0))
            ] cnn 0.0
            cnp:f16[64,256,4800] = add_any cnj cno
            cnq:f16[64,25,64,256] = dot_general[
              dimension_numbers=(((3,), (2,)), ((0, 1), (0, 1)))
              precision=None
              preferred_element_type=None
            ] cms cdd
            cnr:f16[64,256,25,64] = transpose[permutation=(0, 3, 1, 2)] cnq
            cns:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] cnr
            cnt:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (3200, 0, 0))
            ] cns 0.0
            cnu:f16[64,256,4800] = add_any cnp cnt
            cnv:f16[4800] = reduce_sum[axes=(0, 1)] cnu
            cnw:f16[1,1,4800] = reshape[dimensions=None new_sizes=(1, 1, 4800)] cnv
            cnx:f16[4800] = reduce_sum[axes=(0, 1)] cnw
            cny:f16[4800,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] cnu cde
            cnz:f16[1600,4800] = transpose[permutation=(1, 0)] cny
            coa:f16[4800,1600] = transpose[permutation=(1, 0)] cnz
            cob:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] cnu cdf
            coc:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] cob
            cod:f32[1600] = reduce_sum[axes=(0, 1)] coc
            coe:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] cod
            cof:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] coe
            cog:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] cof
            coh:f32[64,256,1600] = mul cdg coc
            coi:f32[64,256,1600] = mul cdh coh
            coj:f32[1600] = reduce_sum[axes=(0, 1)] coi
            cok:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] coj
            col:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] cok
            com:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] col
            con:f32[64,256,1600] = mul coh cdi
            coo:f32[64,256] = reduce_sum[axes=(2,)] con
            cop:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] coo
            coq:f32[64,256,1] = mul cop cdj
            cor:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] coq
            cos:f32[64,256] = mul cor cdk
            cot:f32[64,256] = neg cos
            cou:f32[64,256] = mul cot cdl
            cov:f32[64,256] = div cos 1600.0
            cow:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] cov
            cox:f32[64,256,1600] = mul cow cdm
            coy:f32[64,256,1600] = mul coc cdn
            coz:f32[64,256,1600] = neg coy
            cpa:f32[64,256] = reduce_sum[axes=(2,)] coz
            cpb:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] cpa
            cpc:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] cpb
            cpd:f32[64,256] = add_any cou cpc
            cpe:f32[64,256] = div cpd 1600.0
            cpf:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] cpe
            cpg:f32[64,256,1600] = add_any cox cpf
            cph:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] cpg
            cpi:f16[64,256,1600] = add_any cmj cph
            cpj:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] coy
            cpk:f16[64,256,1600] = add_any cpi cpj
            cpl:f16[1600] = reduce_sum[axes=(0, 1)] cpk
            cpm:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] cpl
            cpn:f16[1600] = reduce_sum[axes=(0, 1)] cpm
            cpo:f16[1600,6400] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] cpk cdo
            cpp:f16[6400,1600] = transpose[permutation=(1, 0)] cpo
            cpq:f16[1600,6400] = transpose[permutation=(1, 0)] cpp
            cpr:f16[64,256,6400] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] cpk cdp
            cps:f16[64,256,6400] = mul cdq cpr
            cpt:f16[64,256,6400] = mul 0.5 cps
            cpu:f16[64,256,6400] = mul cpt cdr
            cpv:f16[64,256,6400] = mul cpu cds
            cpw:f16[64,256,6400] = add_any cpu cpv
            cpx:f16[64,256,6400] = mul 0.7978515625 cpw
            cpy:f16[64,256,6400] = mul 0.044708251953125 cpx
            cpz:f16[64,256,6400] = mul cpy cdt
            cqa:f16[64,256,6400] = add_any cpx cpz
            cqb:f16[64,256,6400] = mul cpr cdu
            cqc:f16[64,256,6400] = add_any cqa cqb
            cqd:f16[6400] = reduce_sum[axes=(0, 1)] cqc
            cqe:f16[1,1,6400] = reshape[dimensions=None new_sizes=(1, 1, 6400)] cqd
            cqf:f16[6400] = reduce_sum[axes=(0, 1)] cqe
            cqg:f16[6400,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] cqc cdv
            cqh:f16[1600,6400] = transpose[permutation=(1, 0)] cqg
            cqi:f16[6400,1600] = transpose[permutation=(1, 0)] cqh
            cqj:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] cqc cdw
            cqk:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] cqj
            cql:f32[1600] = reduce_sum[axes=(0, 1)] cqk
            cqm:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] cql
            cqn:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] cqm
            cqo:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] cqn
            cqp:f32[64,256,1600] = mul cdx cqk
            cqq:f32[64,256,1600] = mul cdy cqp
            cqr:f32[1600] = reduce_sum[axes=(0, 1)] cqq
            cqs:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] cqr
            cqt:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] cqs
            cqu:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] cqt
            cqv:f32[64,256,1600] = mul cqp cdz
            cqw:f32[64,256] = reduce_sum[axes=(2,)] cqv
            cqx:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] cqw
            cqy:f32[64,256,1] = mul cqx cea
            cqz:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] cqy
            cra:f32[64,256] = mul cqz ceb
            crb:f32[64,256] = neg cra
            crc:f32[64,256] = mul crb cec
            crd:f32[64,256] = div cra 1600.0
            cre:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] crd
            crf:f32[64,256,1600] = mul cre ced
            crg:f32[64,256,1600] = mul cqk cee
            crh:f32[64,256,1600] = neg crg
            cri:f32[64,256] = reduce_sum[axes=(2,)] crh
            crj:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] cri
            crk:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] crj
            crl:f32[64,256] = add_any crc crk
            crm:f32[64,256] = div crl 1600.0
            crn:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] crm
            cro:f32[64,256,1600] = add_any crf crn
            crp:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] cro
            crq:f16[64,256,1600] = add_any cpk crp
            crr:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] crg
            crs:f16[64,256,1600] = add_any crq crr
            crt:f16[1600] = reduce_sum[axes=(0, 1)] crs
            cru:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] crt
            crv:f16[1600] = reduce_sum[axes=(0, 1)] cru
            crw:f16[1600,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] crs cef
            crx:f16[1600,1600] = transpose[permutation=(1, 0)] crw
            cry:f16[1600,1600] = transpose[permutation=(1, 0)] crx
            crz:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] crs ceg
            csa:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] crz
            csb:f16[64,25,64,256] = transpose[permutation=(0, 2, 3, 1)] csa
            csc:f16[64,25,256,256] = dot_general[
              dimension_numbers=(((2,), (3,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] csb ceh
            csd:f16[64,25,256,256] = mul csc cei
            cse:f16[64,25,256,256] = mul csd cej
            csf:f16[64,25,256] = reduce_sum[axes=(3,)] cse
            csg:f16[64,25,256,1] = reshape[
              dimensions=None
              new_sizes=(64, 25, 256, 1)
            ] csf
            csh:f16[64,25,256,1] = neg csg
            csi:f32[64,25,256,1] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] csh
            csj:f32[64,25,256] = reduce_sum[axes=(3,)] csi
            csk:f32[64,25,256,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 256)
            ] csj
            csl:f16[64,25,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] csk
            csm:f16[64,25,256,256] = div csc cek
            csn:f16[64,25,256,256] = add_any csl csm
            cso:f16[64,25,256,256] = mul csn cej
            csp:f16[64,25,256,64] = dot_general[
              dimension_numbers=(((2,), (1,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] cso cel
            csq:f16[64,256,25,64] = transpose[permutation=(0, 2, 1, 3)] csp
            csr:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] csq
            css:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (1600, 1600, 0))
            ] csr 0.0
            cst:f16[64,25,256,64] = dot_general[
              dimension_numbers=(((3,), (1,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] cso cem
            csu:f16[64,256,25,64] = transpose[permutation=(0, 2, 1, 3)] cst
            csv:f16[64,256,25,64] = div csu cen
            csw:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] csv
            csx:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (0, 3200, 0))
            ] csw 0.0
            csy:f16[64,256,4800] = add_any css csx
            csz:f16[64,25,64,256] = dot_general[
              dimension_numbers=(((3,), (2,)), ((0, 1), (0, 1)))
              precision=None
              preferred_element_type=None
            ] csb ceo
            cta:f16[64,256,25,64] = transpose[permutation=(0, 3, 1, 2)] csz
            ctb:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] cta
            ctc:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (3200, 0, 0))
            ] ctb 0.0
            ctd:f16[64,256,4800] = add_any csy ctc
            cte:f16[4800] = reduce_sum[axes=(0, 1)] ctd
            ctf:f16[1,1,4800] = reshape[dimensions=None new_sizes=(1, 1, 4800)] cte
            ctg:f16[4800] = reduce_sum[axes=(0, 1)] ctf
            cth:f16[4800,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] ctd cep
            cti:f16[1600,4800] = transpose[permutation=(1, 0)] cth
            ctj:f16[4800,1600] = transpose[permutation=(1, 0)] cti
            ctk:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] ctd ceq
            ctl:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] ctk
            ctm:f32[1600] = reduce_sum[axes=(0, 1)] ctl
            ctn:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] ctm
            cto:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] ctn
            ctp:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] cto
            ctq:f32[64,256,1600] = mul cer ctl
            ctr:f32[64,256,1600] = mul ces ctq
            cts:f32[1600] = reduce_sum[axes=(0, 1)] ctr
            ctt:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] cts
            ctu:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] ctt
            ctv:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] ctu
            ctw:f32[64,256,1600] = mul ctq cet
            ctx:f32[64,256] = reduce_sum[axes=(2,)] ctw
            cty:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] ctx
            ctz:f32[64,256,1] = mul cty ceu
            cua:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] ctz
            cub:f32[64,256] = mul cua cev
            cuc:f32[64,256] = neg cub
            cud:f32[64,256] = mul cuc cew
            cue:f32[64,256] = div cub 1600.0
            cuf:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] cue
            cug:f32[64,256,1600] = mul cuf cex
            cuh:f32[64,256,1600] = mul ctl cey
            cui:f32[64,256,1600] = neg cuh
            cuj:f32[64,256] = reduce_sum[axes=(2,)] cui
            cuk:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] cuj
            cul:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] cuk
            cum:f32[64,256] = add_any cud cul
            cun:f32[64,256] = div cum 1600.0
            cuo:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] cun
            cup:f32[64,256,1600] = add_any cug cuo
            cuq:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] cup
            cur:f16[64,256,1600] = add_any crs cuq
            cus:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] cuh
            cut:f16[64,256,1600] = add_any cur cus
            cuu:f16[1600] = reduce_sum[axes=(0, 1)] cut
            cuv:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] cuu
            cuw:f16[1600] = reduce_sum[axes=(0, 1)] cuv
            cux:f16[1600,6400] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] cut cez
            cuy:f16[6400,1600] = transpose[permutation=(1, 0)] cux
            cuz:f16[1600,6400] = transpose[permutation=(1, 0)] cuy
            cva:f16[64,256,6400] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] cut cfa
            cvb:f16[64,256,6400] = mul cfb cva
            cvc:f16[64,256,6400] = mul 0.5 cvb
            cvd:f16[64,256,6400] = mul cvc cfc
            cve:f16[64,256,6400] = mul cvd cfd
            cvf:f16[64,256,6400] = add_any cvd cve
            cvg:f16[64,256,6400] = mul 0.7978515625 cvf
            cvh:f16[64,256,6400] = mul 0.044708251953125 cvg
            cvi:f16[64,256,6400] = mul cvh cfe
            cvj:f16[64,256,6400] = add_any cvg cvi
            cvk:f16[64,256,6400] = mul cva cff
            cvl:f16[64,256,6400] = add_any cvj cvk
            cvm:f16[6400] = reduce_sum[axes=(0, 1)] cvl
            cvn:f16[1,1,6400] = reshape[dimensions=None new_sizes=(1, 1, 6400)] cvm
            cvo:f16[6400] = reduce_sum[axes=(0, 1)] cvn
            cvp:f16[6400,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] cvl cfg
            cvq:f16[1600,6400] = transpose[permutation=(1, 0)] cvp
            cvr:f16[6400,1600] = transpose[permutation=(1, 0)] cvq
            cvs:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] cvl cfh
            cvt:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] cvs
            cvu:f32[1600] = reduce_sum[axes=(0, 1)] cvt
            cvv:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] cvu
            cvw:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] cvv
            cvx:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] cvw
            cvy:f32[64,256,1600] = mul cfi cvt
            cvz:f32[64,256,1600] = mul cfj cvy
            cwa:f32[1600] = reduce_sum[axes=(0, 1)] cvz
            cwb:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] cwa
            cwc:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] cwb
            cwd:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] cwc
            cwe:f32[64,256,1600] = mul cvy cfk
            cwf:f32[64,256] = reduce_sum[axes=(2,)] cwe
            cwg:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] cwf
            cwh:f32[64,256,1] = mul cwg cfl
            cwi:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] cwh
            cwj:f32[64,256] = mul cwi cfm
            cwk:f32[64,256] = neg cwj
            cwl:f32[64,256] = mul cwk cfn
            cwm:f32[64,256] = div cwj 1600.0
            cwn:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] cwm
            cwo:f32[64,256,1600] = mul cwn cfo
            cwp:f32[64,256,1600] = mul cvt cfp
            cwq:f32[64,256,1600] = neg cwp
            cwr:f32[64,256] = reduce_sum[axes=(2,)] cwq
            cws:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] cwr
            cwt:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] cws
            cwu:f32[64,256] = add_any cwl cwt
            cwv:f32[64,256] = div cwu 1600.0
            cww:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] cwv
            cwx:f32[64,256,1600] = add_any cwo cww
            cwy:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] cwx
            cwz:f16[64,256,1600] = add_any cut cwy
            cxa:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] cwp
            cxb:f16[64,256,1600] = add_any cwz cxa
            cxc:f16[1600] = reduce_sum[axes=(0, 1)] cxb
            cxd:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] cxc
            cxe:f16[1600] = reduce_sum[axes=(0, 1)] cxd
            cxf:f16[1600,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] cxb cfq
            cxg:f16[1600,1600] = transpose[permutation=(1, 0)] cxf
            cxh:f16[1600,1600] = transpose[permutation=(1, 0)] cxg
            cxi:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] cxb cfr
            cxj:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] cxi
            cxk:f16[64,25,64,256] = transpose[permutation=(0, 2, 3, 1)] cxj
            cxl:f16[64,25,256,256] = dot_general[
              dimension_numbers=(((2,), (3,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] cxk cfs
            cxm:f16[64,25,256,256] = mul cxl cft
            cxn:f16[64,25,256,256] = mul cxm cfu
            cxo:f16[64,25,256] = reduce_sum[axes=(3,)] cxn
            cxp:f16[64,25,256,1] = reshape[
              dimensions=None
              new_sizes=(64, 25, 256, 1)
            ] cxo
            cxq:f16[64,25,256,1] = neg cxp
            cxr:f32[64,25,256,1] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] cxq
            cxs:f32[64,25,256] = reduce_sum[axes=(3,)] cxr
            cxt:f32[64,25,256,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 256)
            ] cxs
            cxu:f16[64,25,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] cxt
            cxv:f16[64,25,256,256] = div cxl cfv
            cxw:f16[64,25,256,256] = add_any cxu cxv
            cxx:f16[64,25,256,256] = mul cxw cfu
            cxy:f16[64,25,256,64] = dot_general[
              dimension_numbers=(((2,), (1,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] cxx cfw
            cxz:f16[64,256,25,64] = transpose[permutation=(0, 2, 1, 3)] cxy
            cya:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] cxz
            cyb:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (1600, 1600, 0))
            ] cya 0.0
            cyc:f16[64,25,256,64] = dot_general[
              dimension_numbers=(((3,), (1,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] cxx cfx
            cyd:f16[64,256,25,64] = transpose[permutation=(0, 2, 1, 3)] cyc
            cye:f16[64,256,25,64] = div cyd cfy
            cyf:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] cye
            cyg:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (0, 3200, 0))
            ] cyf 0.0
            cyh:f16[64,256,4800] = add_any cyb cyg
            cyi:f16[64,25,64,256] = dot_general[
              dimension_numbers=(((3,), (2,)), ((0, 1), (0, 1)))
              precision=None
              preferred_element_type=None
            ] cxk cfz
            cyj:f16[64,256,25,64] = transpose[permutation=(0, 3, 1, 2)] cyi
            cyk:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] cyj
            cyl:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (3200, 0, 0))
            ] cyk 0.0
            cym:f16[64,256,4800] = add_any cyh cyl
            cyn:f16[4800] = reduce_sum[axes=(0, 1)] cym
            cyo:f16[1,1,4800] = reshape[dimensions=None new_sizes=(1, 1, 4800)] cyn
            cyp:f16[4800] = reduce_sum[axes=(0, 1)] cyo
            cyq:f16[4800,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] cym cga
            cyr:f16[1600,4800] = transpose[permutation=(1, 0)] cyq
            cys:f16[4800,1600] = transpose[permutation=(1, 0)] cyr
            cyt:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] cym cgb
            cyu:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] cyt
            cyv:f32[1600] = reduce_sum[axes=(0, 1)] cyu
            cyw:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] cyv
            cyx:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] cyw
            cyy:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] cyx
            cyz:f32[64,256,1600] = mul cgc cyu
            cza:f32[64,256,1600] = mul cgd cyz
            czb:f32[1600] = reduce_sum[axes=(0, 1)] cza
            czc:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] czb
            czd:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] czc
            cze:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] czd
            czf:f32[64,256,1600] = mul cyz cge
            czg:f32[64,256] = reduce_sum[axes=(2,)] czf
            czh:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] czg
            czi:f32[64,256,1] = mul czh cgf
            czj:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] czi
            czk:f32[64,256] = mul czj cgg
            czl:f32[64,256] = neg czk
            czm:f32[64,256] = mul czl cgh
            czn:f32[64,256] = div czk 1600.0
            czo:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] czn
            czp:f32[64,256,1600] = mul czo cgi
            czq:f32[64,256,1600] = mul cyu cgj
            czr:f32[64,256,1600] = neg czq
            czs:f32[64,256] = reduce_sum[axes=(2,)] czr
            czt:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] czs
            czu:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] czt
            czv:f32[64,256] = add_any czm czu
            czw:f32[64,256] = div czv 1600.0
            czx:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] czw
            czy:f32[64,256,1600] = add_any czp czx
            czz:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] czy
            daa:f16[64,256,1600] = add_any cxb czz
            dab:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] czq
            dac:f16[64,256,1600] = add_any daa dab
            dad:f16[1600] = reduce_sum[axes=(0, 1)] dac
            dae:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] dad
            daf:f16[1600] = reduce_sum[axes=(0, 1)] dae
            dag:f16[1600,6400] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] dac cgk
            dah:f16[6400,1600] = transpose[permutation=(1, 0)] dag
            dai:f16[1600,6400] = transpose[permutation=(1, 0)] dah
            daj:f16[64,256,6400] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] dac cgl
            dak:f16[64,256,6400] = mul cgm daj
            dal:f16[64,256,6400] = mul 0.5 dak
            dam:f16[64,256,6400] = mul dal cgn
            dan:f16[64,256,6400] = mul dam cgo
            dao:f16[64,256,6400] = add_any dam dan
            dap:f16[64,256,6400] = mul 0.7978515625 dao
            daq:f16[64,256,6400] = mul 0.044708251953125 dap
            dar:f16[64,256,6400] = mul daq cgp
            das:f16[64,256,6400] = add_any dap dar
            dat:f16[64,256,6400] = mul daj cgq
            dau:f16[64,256,6400] = add_any das dat
            dav:f16[6400] = reduce_sum[axes=(0, 1)] dau
            daw:f16[1,1,6400] = reshape[dimensions=None new_sizes=(1, 1, 6400)] dav
            dax:f16[6400] = reduce_sum[axes=(0, 1)] daw
            day:f16[6400,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] dau cgr
            daz:f16[1600,6400] = transpose[permutation=(1, 0)] day
            dba:f16[6400,1600] = transpose[permutation=(1, 0)] daz
            dbb:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] dau cgs
            dbc:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] dbb
            dbd:f32[1600] = reduce_sum[axes=(0, 1)] dbc
            dbe:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] dbd
            dbf:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] dbe
            dbg:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] dbf
            dbh:f32[64,256,1600] = mul cgt dbc
            dbi:f32[64,256,1600] = mul cgu dbh
            dbj:f32[1600] = reduce_sum[axes=(0, 1)] dbi
            dbk:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] dbj
            dbl:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] dbk
            dbm:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] dbl
            dbn:f32[64,256,1600] = mul dbh cgv
            dbo:f32[64,256] = reduce_sum[axes=(2,)] dbn
            dbp:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] dbo
            dbq:f32[64,256,1] = mul dbp cgw
            dbr:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] dbq
            dbs:f32[64,256] = mul dbr cgx
            dbt:f32[64,256] = neg dbs
            dbu:f32[64,256] = mul dbt cgy
            dbv:f32[64,256] = div dbs 1600.0
            dbw:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] dbv
            dbx:f32[64,256,1600] = mul dbw cgz
            dby:f32[64,256,1600] = mul dbc cha
            dbz:f32[64,256,1600] = neg dby
            dca:f32[64,256] = reduce_sum[axes=(2,)] dbz
            dcb:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] dca
            dcc:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] dcb
            dcd:f32[64,256] = add_any dbu dcc
            dce:f32[64,256] = div dcd 1600.0
            dcf:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] dce
            dcg:f32[64,256,1600] = add_any dbx dcf
            dch:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] dcg
            dci:f16[64,256,1600] = add_any dac dch
            dcj:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] dby
            dck:f16[64,256,1600] = add_any dci dcj
            dcl:f16[1600] = add bzn chd
            dcm:f16[1600,1600] = add bzo chg
            dcn:f16[4800] = add bzp cio
            dco:f16[4800,1600] = add bzq cir
            dcp:f16[1600] = add bzr cix
            dcq:f16[1600] = add bzs cjd
            dcr:f16[1600] = add bzt cke
            dcs:f16[1600,6400] = add bzu ckh
            dct:f16[6400] = add bzv ckw
            dcu:f16[6400,1600] = add bzw ckz
            dcv:f16[1600] = add bzx clf
            dcw:f16[1600] = add bzy cll
            dcx:f16[1600] = add bzz cmm
            dcy:f16[1600,1600] = add caa cmp
            dcz:f16[4800] = add cab cnx
            dda:f16[4800,1600] = add cac coa
            ddb:f16[1600] = add cad cog
            ddc:f16[1600] = add cae com
            ddd:f16[1600] = add caf cpn
            dde:f16[1600,6400] = add cag cpq
            ddf:f16[6400] = add cah cqf
            ddg:f16[6400,1600] = add cai cqi
            ddh:f16[1600] = add caj cqo
            ddi:f16[1600] = add cak cqu
            ddj:f16[1600] = add cal crv
            ddk:f16[1600,1600] = add cam cry
            ddl:f16[4800] = add can ctg
            ddm:f16[4800,1600] = add cao ctj
            ddn:f16[1600] = add cap ctp
            ddo:f16[1600] = add caq ctv
            ddp:f16[1600] = add car cuw
            ddq:f16[1600,6400] = add cas cuz
            ddr:f16[6400] = add cat cvo
            dds:f16[6400,1600] = add cau cvr
            ddt:f16[1600] = add cav cvx
            ddu:f16[1600] = add caw cwd
            ddv:f16[1600] = add cax cxe
            ddw:f16[1600,1600] = add cay cxh
            ddx:f16[4800] = add caz cyp
            ddy:f16[4800,1600] = add cba cys
            ddz:f16[1600] = add cbb cyy
            dea:f16[1600] = add cbc cze
            deb:f16[1600] = add cbd daf
            dec:f16[1600,6400] = add cbe dai
            ded:f16[6400] = add cbf dax
            dee:f16[6400,1600] = add cbg dba
            def:f16[1600] = add cbh dbg
            deg:f16[1600] = add cbi dbm
          in (dck, dcl, dcm, dcn, dco, dcp, dcq, dcr, dcs, dct, dcu, dcv, dcw, dcx,
            dcy, dcz, dda, ddb, ddc, ddd, dde, ddf, ddg, ddh, ddi, ddj, ddk, ddl,
            ddm, ddn, ddo, ddp, ddq, ddr, dds, ddt, ddu, ddv, ddw, ddx, ddy, ddz,
            dea, deb, dec, ded, dee, def, deg) }
        name=71
      ] vk fw fx fy fz ga gb gc gd ge gf gg gh gi gj gk gl gm gn go gp gq gr gs gt
        gu gv gw gx gy gz ha hb hc hd he hf hg hh hi hj hk hl hm hn ho hp hq hr nl
        nm nn no np nq nr ns nt nu nv nw nx ny nz oa ob oc od oe of og oh oi oj ok
        ol om on oo op oq or os ot ou ov ow ox oy oz pa pb pc pd pe pf pg ph pi pj
        pk pl pm pn po pp pq pr ps pt pu pv pw px py pz qa qb qc qd qe qf qg qh qi
        qj qk ql qm qn qo qp qq qr qs qt qu qv qw qx qy qz ra rb rc rd re rf rg rh
        ri rj rk rl rm rn ro rp rq rr rs rt ru rv rw rx ry rz sa sb sc sd se sf sg
        sh si sj sk sl sm sn so sp sq sr ss st su sv sw sx sy sz ta tb tc
      deh:f16[1600] dei:f16[1600,1600] dej:f16[4800] dek:f16[4800,1600] del:f16[1600]
        dem:f16[1600] den:f16[1600] deo:f16[1600,6400] dep:f16[6400] deq:f16[6400,1600]
        der:f16[1600] des:f16[1600] det:f16[1600] deu:f16[1600,1600] dev:f16[4800]
        dew:f16[4800,1600] dex:f16[1600] dey:f16[1600] dez:f16[1024,1600] dfa:f16[50257,1600] = named_call[
        call_jaxpr={ lambda ; dfb:f16[64,256,1600] dfc:f16[1600] dfd:f16[1600,1600]
            dfe:f16[4800] dff:f16[4800,1600] dfg:f16[1600] dfh:f16[1600] dfi:f16[1600]
            dfj:f16[1600,6400] dfk:f16[6400] dfl:f16[6400,1600] dfm:f16[1600] dfn:f16[1600]
            dfo:f16[1600] dfp:f16[1600,1600] dfq:f16[4800] dfr:f16[4800,1600] dfs:f16[1600]
            dft:f16[1600] dfu:f16[1024,1600] dfv:f16[50257,1600] dfw:f16[64,256,1600]
            dfx:f16[1600,1600] dfy:f16[64,256,25,64] dfz:f16[64,25,256,1] dga:f16[64,25,256,256]
            dgb:f16[64,25,256,1] dgc:f16[64,256,25,64] dgd:f16[64,256,25,64] dge:f16[]
            dgf:f16[64,25,256,256] dgg:f16[64,256,1600] dgh:f16[1600,4800] dgi:f32[64,256,1600]
            dgj:f32[64,256,1] dgk:f32[1,1,1600] dgl:f32[64,256,1] dgm:f32[64,256]
            dgn:f32[64,256] dgo:f32[64,256,1600] dgp:f32[64,256,1600] dgq:f16[64,256,6400]
            dgr:f16[6400,1600] dgs:f16[64,256,6400] dgt:f16[64,256,6400] dgu:f16[64,256,6400]
            dgv:f16[64,256,6400] dgw:f16[64,256,6400] dgx:f16[64,256,1600] dgy:f16[1600,6400]
            dgz:f32[64,256,1600] dha:f32[64,256,1] dhb:f32[1,1,1600] dhc:f32[64,256,1]
            dhd:f32[64,256] dhe:f32[64,256] dhf:f32[64,256,1600] dhg:f32[64,256,1600]
            dhh:f16[64,256,1600] dhi:f16[1600,1600] dhj:f16[64,256,25,64] dhk:f16[64,25,256,1]
            dhl:f16[64,25,256,256] dhm:f16[64,25,256,1] dhn:f16[64,256,25,64] dho:f16[64,256,25,64]
            dhp:f16[] dhq:f16[64,25,256,256] dhr:f16[64,256,1600] dhs:f16[1600,4800]
            dht:f32[64,256,1600] dhu:f32[64,256,1] dhv:f32[1,1,1600] dhw:f32[64,256,1]
            dhx:f32[64,256] dhy:f32[64,256] dhz:f32[64,256,1600] dia:f32[64,256,1600]
            dib:f16[64,256,1024] dic:f16[64,256,50257]. let
            did:f16[1600] = reduce_sum[axes=(0, 1)] dfb
            die:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] did
            dif:f16[1600] = reduce_sum[axes=(0, 1)] die
            dig:f16[1600,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] dfb dfw
            dih:f16[1600,1600] = transpose[permutation=(1, 0)] dig
            dii:f16[1600,1600] = transpose[permutation=(1, 0)] dih
            dij:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] dfb dfx
            dik:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] dij
            dil:f16[64,25,64,256] = transpose[permutation=(0, 2, 3, 1)] dik
            dim:f16[64,25,256,256] = dot_general[
              dimension_numbers=(((2,), (3,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] dil dfy
            din:f16[64,25,256,256] = mul dim dfz
            dio:f16[64,25,256,256] = mul din dga
            dip:f16[64,25,256] = reduce_sum[axes=(3,)] dio
            diq:f16[64,25,256,1] = reshape[
              dimensions=None
              new_sizes=(64, 25, 256, 1)
            ] dip
            dir:f16[64,25,256,1] = neg diq
            dis:f32[64,25,256,1] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] dir
            dit:f32[64,25,256] = reduce_sum[axes=(3,)] dis
            diu:f32[64,25,256,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 256)
            ] dit
            div:f16[64,25,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] diu
            diw:f16[64,25,256,256] = div dim dgb
            dix:f16[64,25,256,256] = add_any div diw
            diy:f16[64,25,256,256] = mul dix dga
            diz:f16[64,25,256,64] = dot_general[
              dimension_numbers=(((2,), (1,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] diy dgc
            dja:f16[64,256,25,64] = transpose[permutation=(0, 2, 1, 3)] diz
            djb:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] dja
            djc:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (1600, 1600, 0))
            ] djb 0.0
            djd:f16[64,25,256,64] = dot_general[
              dimension_numbers=(((3,), (1,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] diy dgd
            dje:f16[64,256,25,64] = transpose[permutation=(0, 2, 1, 3)] djd
            djf:f16[64,256,25,64] = div dje dge
            djg:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] djf
            djh:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (0, 3200, 0))
            ] djg 0.0
            dji:f16[64,256,4800] = add_any djc djh
            djj:f16[64,25,64,256] = dot_general[
              dimension_numbers=(((3,), (2,)), ((0, 1), (0, 1)))
              precision=None
              preferred_element_type=None
            ] dil dgf
            djk:f16[64,256,25,64] = transpose[permutation=(0, 3, 1, 2)] djj
            djl:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] djk
            djm:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (3200, 0, 0))
            ] djl 0.0
            djn:f16[64,256,4800] = add_any dji djm
            djo:f16[4800] = reduce_sum[axes=(0, 1)] djn
            djp:f16[1,1,4800] = reshape[dimensions=None new_sizes=(1, 1, 4800)] djo
            djq:f16[4800] = reduce_sum[axes=(0, 1)] djp
            djr:f16[4800,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] djn dgg
            djs:f16[1600,4800] = transpose[permutation=(1, 0)] djr
            djt:f16[4800,1600] = transpose[permutation=(1, 0)] djs
            dju:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] djn dgh
            djv:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] dju
            djw:f32[1600] = reduce_sum[axes=(0, 1)] djv
            djx:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] djw
            djy:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] djx
            djz:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] djy
            dka:f32[64,256,1600] = mul dgi djv
            dkb:f32[64,256,1600] = mul dgj dka
            dkc:f32[1600] = reduce_sum[axes=(0, 1)] dkb
            dkd:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] dkc
            dke:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] dkd
            dkf:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] dke
            dkg:f32[64,256,1600] = mul dka dgk
            dkh:f32[64,256] = reduce_sum[axes=(2,)] dkg
            dki:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] dkh
            dkj:f32[64,256,1] = mul dki dgl
            dkk:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] dkj
            dkl:f32[64,256] = mul dkk dgm
            dkm:f32[64,256] = neg dkl
            dkn:f32[64,256] = mul dkm dgn
            dko:f32[64,256] = div dkl 1600.0
            dkp:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] dko
            dkq:f32[64,256,1600] = mul dkp dgo
            dkr:f32[64,256,1600] = mul djv dgp
            dks:f32[64,256,1600] = neg dkr
            dkt:f32[64,256] = reduce_sum[axes=(2,)] dks
            dku:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] dkt
            dkv:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] dku
            dkw:f32[64,256] = add_any dkn dkv
            dkx:f32[64,256] = div dkw 1600.0
            dky:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] dkx
            dkz:f32[64,256,1600] = add_any dkq dky
            dla:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] dkz
            dlb:f16[64,256,1600] = add_any dfb dla
            dlc:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] dkr
            dld:f16[64,256,1600] = add_any dlb dlc
            dle:f16[1600] = reduce_sum[axes=(0, 1)] dld
            dlf:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] dle
            dlg:f16[1600] = reduce_sum[axes=(0, 1)] dlf
            dlh:f16[1600,6400] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] dld dgq
            dli:f16[6400,1600] = transpose[permutation=(1, 0)] dlh
            dlj:f16[1600,6400] = transpose[permutation=(1, 0)] dli
            dlk:f16[64,256,6400] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] dld dgr
            dll:f16[64,256,6400] = mul dgs dlk
            dlm:f16[64,256,6400] = mul 0.5 dll
            dln:f16[64,256,6400] = mul dlm dgt
            dlo:f16[64,256,6400] = mul dln dgu
            dlp:f16[64,256,6400] = add_any dln dlo
            dlq:f16[64,256,6400] = mul 0.7978515625 dlp
            dlr:f16[64,256,6400] = mul 0.044708251953125 dlq
            dls:f16[64,256,6400] = mul dlr dgv
            dlt:f16[64,256,6400] = add_any dlq dls
            dlu:f16[64,256,6400] = mul dlk dgw
            dlv:f16[64,256,6400] = add_any dlt dlu
            dlw:f16[6400] = reduce_sum[axes=(0, 1)] dlv
            dlx:f16[1,1,6400] = reshape[dimensions=None new_sizes=(1, 1, 6400)] dlw
            dly:f16[6400] = reduce_sum[axes=(0, 1)] dlx
            dlz:f16[6400,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] dlv dgx
            dma:f16[1600,6400] = transpose[permutation=(1, 0)] dlz
            dmb:f16[6400,1600] = transpose[permutation=(1, 0)] dma
            dmc:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] dlv dgy
            dmd:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] dmc
            dme:f32[1600] = reduce_sum[axes=(0, 1)] dmd
            dmf:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] dme
            dmg:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] dmf
            dmh:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] dmg
            dmi:f32[64,256,1600] = mul dgz dmd
            dmj:f32[64,256,1600] = mul dha dmi
            dmk:f32[1600] = reduce_sum[axes=(0, 1)] dmj
            dml:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] dmk
            dmm:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] dml
            dmn:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] dmm
            dmo:f32[64,256,1600] = mul dmi dhb
            dmp:f32[64,256] = reduce_sum[axes=(2,)] dmo
            dmq:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] dmp
            dmr:f32[64,256,1] = mul dmq dhc
            dms:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] dmr
            dmt:f32[64,256] = mul dms dhd
            dmu:f32[64,256] = neg dmt
            dmv:f32[64,256] = mul dmu dhe
            dmw:f32[64,256] = div dmt 1600.0
            dmx:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] dmw
            dmy:f32[64,256,1600] = mul dmx dhf
            dmz:f32[64,256,1600] = mul dmd dhg
            dna:f32[64,256,1600] = neg dmz
            dnb:f32[64,256] = reduce_sum[axes=(2,)] dna
            dnc:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] dnb
            dnd:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] dnc
            dne:f32[64,256] = add_any dmv dnd
            dnf:f32[64,256] = div dne 1600.0
            dng:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] dnf
            dnh:f32[64,256,1600] = add_any dmy dng
            dni:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] dnh
            dnj:f16[64,256,1600] = add_any dld dni
            dnk:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] dmz
            dnl:f16[64,256,1600] = add_any dnj dnk
            dnm:f16[1600] = reduce_sum[axes=(0, 1)] dnl
            dnn:f16[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] dnm
            dno:f16[1600] = reduce_sum[axes=(0, 1)] dnn
            dnp:f16[1600,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] dnl dhh
            dnq:f16[1600,1600] = transpose[permutation=(1, 0)] dnp
            dnr:f16[1600,1600] = transpose[permutation=(1, 0)] dnq
            dns:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] dnl dhi
            dnt:f16[64,256,25,64] = reshape[
              dimensions=None
              new_sizes=(64, 256, 25, 64)
            ] dns
            dnu:f16[64,25,64,256] = transpose[permutation=(0, 2, 3, 1)] dnt
            dnv:f16[64,25,256,256] = dot_general[
              dimension_numbers=(((2,), (3,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] dnu dhj
            dnw:f16[64,25,256,256] = mul dnv dhk
            dnx:f16[64,25,256,256] = mul dnw dhl
            dny:f16[64,25,256] = reduce_sum[axes=(3,)] dnx
            dnz:f16[64,25,256,1] = reshape[
              dimensions=None
              new_sizes=(64, 25, 256, 1)
            ] dny
            doa:f16[64,25,256,1] = neg dnz
            dob:f32[64,25,256,1] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] doa
            doc:f32[64,25,256] = reduce_sum[axes=(3,)] dob
            dod:f32[64,25,256,256] = broadcast_in_dim[
              broadcast_dimensions=(0, 1, 2)
              shape=(64, 25, 256, 256)
            ] doc
            doe:f16[64,25,256,256] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] dod
            dof:f16[64,25,256,256] = div dnv dhm
            dog:f16[64,25,256,256] = add_any doe dof
            doh:f16[64,25,256,256] = mul dog dhl
            doi:f16[64,25,256,64] = dot_general[
              dimension_numbers=(((2,), (1,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] doh dhn
            doj:f16[64,256,25,64] = transpose[permutation=(0, 2, 1, 3)] doi
            dok:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] doj
            dol:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (1600, 1600, 0))
            ] dok 0.0
            dom:f16[64,25,256,64] = dot_general[
              dimension_numbers=(((3,), (1,)), ((0, 1), (0, 2)))
              precision=None
              preferred_element_type=None
            ] doh dho
            don:f16[64,256,25,64] = transpose[permutation=(0, 2, 1, 3)] dom
            doo:f16[64,256,25,64] = div don dhp
            dop:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] doo
            doq:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (0, 3200, 0))
            ] dop 0.0
            dor:f16[64,256,4800] = add_any dol doq
            dos:f16[64,25,64,256] = dot_general[
              dimension_numbers=(((3,), (2,)), ((0, 1), (0, 1)))
              precision=None
              preferred_element_type=None
            ] dnu dhq
            dot:f16[64,256,25,64] = transpose[permutation=(0, 3, 1, 2)] dos
            dou:f16[64,256,1600] = reshape[
              dimensions=None
              new_sizes=(64, 256, 1600)
            ] dot
            dov:f16[64,256,4800] = pad[
              padding_config=((0, 0, 0), (0, 0, 0), (3200, 0, 0))
            ] dou 0.0
            dow:f16[64,256,4800] = add_any dor dov
            dox:f16[4800] = reduce_sum[axes=(0, 1)] dow
            doy:f16[1,1,4800] = reshape[dimensions=None new_sizes=(1, 1, 4800)] dox
            doz:f16[4800] = reduce_sum[axes=(0, 1)] doy
            dpa:f16[4800,1600] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] dow dhr
            dpb:f16[1600,4800] = transpose[permutation=(1, 0)] dpa
            dpc:f16[4800,1600] = transpose[permutation=(1, 0)] dpb
            dpd:f16[64,256,1600] = dot_general[
              dimension_numbers=(((2,), (1,)), ((), ()))
              precision=None
              preferred_element_type=None
            ] dow dhs
            dpe:f32[64,256,1600] = convert_element_type[
              new_dtype=float32
              weak_type=False
            ] dpd
            dpf:f32[1600] = reduce_sum[axes=(0, 1)] dpe
            dpg:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] dpf
            dph:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] dpg
            dpi:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] dph
            dpj:f32[64,256,1600] = mul dht dpe
            dpk:f32[64,256,1600] = mul dhu dpj
            dpl:f32[1600] = reduce_sum[axes=(0, 1)] dpk
            dpm:f32[1,1,1600] = reshape[dimensions=None new_sizes=(1, 1, 1600)] dpl
            dpn:f16[1,1,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] dpm
            dpo:f16[1600] = reshape[dimensions=None new_sizes=(1600,)] dpn
            dpp:f32[64,256,1600] = mul dpj dhv
            dpq:f32[64,256] = reduce_sum[axes=(2,)] dpp
            dpr:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] dpq
            dps:f32[64,256,1] = mul dpr dhw
            dpt:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] dps
            dpu:f32[64,256] = mul dpt dhx
            dpv:f32[64,256] = neg dpu
            dpw:f32[64,256] = mul dpv dhy
            dpx:f32[64,256] = div dpu 1600.0
            dpy:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] dpx
            dpz:f32[64,256,1600] = mul dpy dhz
            dqa:f32[64,256,1600] = mul dpe dia
            dqb:f32[64,256,1600] = neg dqa
            dqc:f32[64,256] = reduce_sum[axes=(2,)] dqb
            dqd:f32[64,256,1] = reshape[dimensions=None new_sizes=(64, 256, 1)] dqc
            dqe:f32[64,256] = reshape[dimensions=None new_sizes=(64, 256)] dqd
            dqf:f32[64,256] = add_any dpw dqe
            dqg:f32[64,256] = div dqf 1600.0
            dqh:f32[64,256,1600] = broadcast_in_dim[
              broadcast_dimensions=(0, 1)
              shape=(64, 256, 1600)
            ] dqg
            dqi:f32[64,256,1600] = add_any dpz dqh
            dqj:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] dqi
            dqk:f16[64,256,1600] = add_any dnl dqj
            dql:f16[64,256,1600] = convert_element_type[
              new_dtype=float16
              weak_type=False
            ] dqa
            dqm:f16[64,256,1600] = add_any dqk dql
            dqn:f16[1600,1024] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] dqm dib
            dqo:f16[1024,1600] = transpose[permutation=(1, 0)] dqn
            dqp:f16[1600,50257] = dot_general[
              dimension_numbers=(((0, 1), (0, 1)), ((), ()))
              precision=None
              preferred_element_type=None
            ] dqm dic
            dqq:f16[50257,1600] = transpose[permutation=(1, 0)] dqp
            dqr:f16[1600] = add dfc dif
            dqs:f16[1600,1600] = add dfd dii
            dqt:f16[4800] = add dfe djq
            dqu:f16[4800,1600] = add dff djt
            dqv:f16[1600] = add dfg djz
            dqw:f16[1600] = add dfh dkf
            dqx:f16[1600] = add dfi dlg
            dqy:f16[1600,6400] = add dfj dlj
            dqz:f16[6400] = add dfk dly
            dra:f16[6400,1600] = add dfl dmb
            drb:f16[1600] = add dfm dmh
            drc:f16[1600] = add dfn dmn
            drd:f16[1600] = add dfo dno
            dre:f16[1600,1600] = add dfp dnr
            drf:f16[4800] = add dfq doz
            drg:f16[4800,1600] = add dfr dpc
            drh:f16[1600] = add dfs dpi
            dri:f16[1600] = add dft dpo
            drj:f16[1024,1600] = add dfu dqo
            drk:f16[50257,1600] = add dfv dqq
          in (dqr, dqs, dqt, dqu, dqv, dqw, dqx, dqy, dqz, dra, drb, drc, drd, dre,
            drf, drg, drh, dri, drj, drk) }
        name=72
      ] bxp hs ht hu hv hw hx hy hz ia ib ic id ie if ig ih ii ij ik il td te tf
        tg th ti tj tk tl tm tn to tp tq tr ts tt tu tv tw tx ty tz ua ub uc ud ue
        uf ug uh ui uj uk ul um un uo up uq ur us ut uu uv uw ux uy uz va vb vc vd
        ve vf vg vh vi vj
    in (vl, vm, vn, vo, vp, vq, vr, vs, vt, vu, vv, vw, vx, vy, vz, wa, wb, wc, wd,
      we, wf, wg, wh, wi, wj, wk, wl, wm, wn, wo, wp, wq, wr, ws, wt, wu, wv, ww,
      wx, wy, wz, xa, bxq, bxr, bxs, bxt, bxu, bxv, bxw, bxx, bxy, bxz, bya, byb,
      byc, byd, bye, byf, byg, byh, byi, byj, byk, byl, bym, byn, byo, byp, byq,
      byr, bys, byt, byu, byv, byw, byx, byy, byz, bza, bzb, bzc, bzd, bze, bzf,
      bzg, bzh, bzi, bzj, bzk, bzl, deh, dei, dej, dek, del, dem, den, deo, dep,
      deq, der, des, det, deu, dev, dew, dex, dey, dez, dfa) }
  name=7
] drl drm drn dro drp drq drr drs drt dru drv drw drx dry drz dsa dsb dsc dsd dse
  dsf dsg dsh dsi dsj dsk dsl dsm dsn dso dsp dsq dsr dss dst dsu dsv dsw dsx dsy
  dsz dta dtb dtc dtd dte dtf dtg dth dti dtj dtk dtl dtm dtn dto dtp dtq dtr dts
  dtt dtu dtv dtw dtx dty dtz dua dub duc dud due duf dug duh dui duj duk dul dum
  dun duo dup duq dur dus dut duu duv duw dux duy duz dva dvb dvc dvd dve dvf dvg
  dvh dvi dvj dvk dvl dvm dvn dvo dvp dvq dvr dvs dvt dvu dvv dvw dvx dvy dvz dwa
  dwb dwc dwd dwe dwf dwg dwh dwi dwj dwk dwl dwm dwn dwo dwp dwq dwr dws dwt dwu
  dwv dww dwx dwy dwz dxa dxb dxc dxd dxe dxf dxg dxh dxi dxj dxk dxl dxm dxn dxo
  dxp dxq dxr dxs dxt dxu dxv dxw dxx dxy dxz dya dyb dyc dyd dye dyf dyg dyh dyi
  dyj dyk dyl dym dyn dyo dyp dyq dyr dys dyt dyu dyv dyw dyx dyy dyz dza dzb dzc
  dzd dze dzf dzg dzh dzi dzj dzk dzl dzm dzn dzo dzp dzq dzr dzs dzt dzu dzv dzw
  dzx dzy dzz eaa eab eac ead eae eaf eag eah eai eaj eak eal eam ean eao eap eaq
  ear eas eat eau eav eaw eax eay eaz eba ebb ebc ebd ebe ebf ebg ebh ebi ebj ebk
  ebl ebm ebn ebo ebp ebq ebr ebs ebt ebu ebv ebw ebx eby ebz eca ecb ecc ecd ece
  ecf ecg ech eci ecj eck ecl ecm ecn eco ecp ecq ecr ecs ect ecu ecv ecw ecx ecy
  ecz eda edb edc edd ede edf edg edh edi edj edk edl edm edn edo edp edq edr eds
  edt edu edv edw edx edy edz eea eeb eec eed eee eef eeg eeh eei eej eek eel eem
  een eeo eep eeq eer ees eet eeu eev eew eex eey eez efa efb efc efd efe eff efg
  efh efi efj efk efl efm efn efo efp efq efr efs eft efu efv efw efx efy efz ega
  egb egc egd ege egf egg egh egi egj egk egl egm egn ego egp egq egr egs egt egu
  egv egw egx egy egz eha ehb ehc ehd ehe ehf ehg ehh ehi ehj ehk ehl ehm ehn eho
  ehp ehq ehr ehs eht ehu ehv ehw ehx ehy ehz eia eib eic eid eie eif eig eih eii
  eij eik eil eim ein eio
eqn: a:f16[1600] b:f16[1600,6400] c:f16[6400] d:f16[6400,1600] e:f16[1600] f:f16[1600]
  g:f16[1600] h:f16[1600,1600] i:f16[4800] j:f16[4800,1600] k:f16[1600] l:f16[1600]
  m:f16[1600] n:f16[1600,6400] o:f16[6400] p:f16[6400,1600] q:f16[1600] r:f16[1600]
  s:f16[1600] t:f16[1600,1600] u:f16[4800] v:f16[4800,1600] w:f16[1600] x:f16[1600]
  y:f16[1600] z:f16[1600,6400] ba:f16[6400] bb:f16[6400,1600] bc:f16[1600] bd:f16[1600]
  be:f16[1600] bf:f16[1600,1600] bg:f16[4800] bh:f16[4800,1600] bi:f16[1600] bj:f16[1600]
  bk:f16[1600] bl:f16[1600,6400] bm:f16[6400] bn:f16[6400,1600] bo:f16[1600] bp:f16[1600]
  bq:f16[1600] br:f16[1600,1600] bs:f16[4800] bt:f16[4800,1600] bu:f16[1600] bv:f16[1600]
  bw:f16[1600] bx:f16[1600,6400] by:f16[6400] bz:f16[6400,1600] ca:f16[1600] cb:f16[1600]
  cc:f16[1600] cd:f16[1600,1600] ce:f16[4800] cf:f16[4800,1600] cg:f16[1600] ch:f16[1600]
  ci:f16[1600] cj:f16[1600,6400] ck:f16[6400] cl:f16[6400,1600] cm:f16[1600] cn:f16[1600]
  co:f16[1600] cp:f16[1600,1600] cq:f16[4800] cr:f16[4800,1600] cs:f16[1600] ct:f16[1600]
  cu:f16[1600] cv:f16[1600,6400] cw:f16[6400] cx:f16[6400,1600] cy:f16[1600] cz:f16[1600]
  da:f16[1600] db:f16[1600,1600] dc:f16[4800] dd:f16[4800,1600] de:f16[1600] df:f16[1600]
  dg:f16[1600] dh:f16[1600,6400] di:f16[6400] dj:f16[6400,1600] dk:f16[1600] dl:f16[1600]
  dm:f16[1600] dn:f16[1600,1600] do:f16[4800] dp:f16[4800,1600] dq:f16[1600] dr:f16[1600]
  ds:f16[1600] dt:f16[1600,6400] du:f16[6400] dv:f16[6400,1600] dw:f16[1600] dx:f16[1600]
  dy:f16[1600] dz:f16[1600,1600] ea:f16[4800] eb:f16[4800,1600] ec:f16[1600] ed:f16[1600]
  ee:f16[1024,1600] ef:f16[50257,1600] = pipeline_marker[mark_type=end name=7] eg
  eh ei ej ek el em en eo ep eq er es et eu ev ew ex ey ez fa fb fc fd fe ff fg fh
  fi fj fk fl fm fn fo fp fq fr fs ft fu fv fw fx fy fz ga gb gc gd ge gf gg gh gi
  gj gk gl gm gn go gp gq gr gs gt gu gv gw gx gy gz ha hb hc hd he hf hg hh hi hj
  hk hl hm hn ho hp hq hr hs ht hu hv hw hx hy hz ia ib ic id ie if ig ih ii ij ik
  il
input_var_mem_size
[cmbr, cmbs, cmbp, cmbq, cmbn, cmbo, cmbj, cmbk, cmbh, cmbi, cmbl, cmbm, cmbf, cmbg, cmbd, cmbe, cmbb, cmbc, cmax, cmay, cmav, cmaw, cmaz, cmba, cmat, cmau, cmar, cmas, cmap, cmaq, cmal, cmam, cmaj, cmak, cman, cmao, cmah, cmai, cmaf, cmag, cmad, cmae, clzz, cmaa, clzx, clzy, cmab, cmac, clwd, clwe, clwb, clwc, clvz, clwa, clvv, clvw, clvt, clvu, clvx, clvy, clrb, clrc, clqz, clra, clqx, clqy, clqt, clqu, clqr, clqs, clqv, clqw, cllz, clma, cllx, clly, cllv, cllw, cllr, clls, cllp, cllq, cllt, cllu, clgx, clgy, clgv, clgw, clgt, clgu, clgp, clgq, clgn, clgo, clgr, clgs, clgl, clgm, clgj, clgk, clgh, clgi, clgd, clge, clgb, clgc, clgf, clgg, cmch, cmcj, ykt, fst, fsu, fsi, fsq, fsp, fsl, fss, fse, fsf, frs, fru, fry, frw, fro, frd, fqy, frz, fqn, fqo, foz, fqk, fqe, fqi, fpu, foy, fpt, fqj, foj, foq, fnx, fnz, fod, fob, fnt, fni, fnd, foe, fms, fmt, fmh, fmp, fmo, fmk, fmr, fmd, fme, flr, flt, flx, flv, fln, flc, fkx, fly, fkm, fkn, fiy, fkj, fkd, fkh, fjt, fix, fjs, fki, fii, fip, fhw, fhy, fic, fia, fhs, fhh, fhc, fid, fgr, fgs, fgg, fgo, fgn, fgj, fgq, fgc, fgd, ffq, ffs, ffw, ffu, ffm, ffb, few, ffx, fel, fem, fcx, fei, fec, feg, fds, fcw, fdr, feh, fch, fco, fbv, fbx, fcb, fbz, fbr, fbg, fbb, fcc, faq, far, faf, fan, fam, fai, fap, fab, fac, ezp, ezr, ezv, ezt, ezl, eza, eyv, ezw, ewr, ews, evd, ewo, ewi, ewm, evy, evc, evx, ewn, eun, euu, eub, eud, euh, euf, etx, etm, eth, eui, esw, esx, esl, est, ess, eso, esv, esh, esi, erv, erx, esb, erz, err, erg, erb, esc, eqq, eqr, epc, eqn, eqh, eql, epx, epb, epw, eqm, eom, eot, eoa, eoc, eog, eoe, enw, enl, eng, eoh, emv, emw, emk, ems, emr, emn, emu, emg, emh, elu, elw, ema, ely, elq, elf, ela, emb, ekp, ekq, ejb, ekm, ekg, ekk, ejw, eja, ejv, ekl, eil, eis, ehz, eib, eif, eid, ehv, ehk, ehf, eig, egu, egv, egj, egr, egq, egm, egt, egf, egg, eft, efv, efz, efx, efp, efe, eez, ega, eeo, eep, eda, eel, eef, eej, edv, ecz, edu, eek, eck, ecr, eby, eca, ece, ecc, ebu, ebj, ebe, ecf, eat, eau, eai, eaq, eap, eal, eas, eae, eaf, dzs, dzu, dzy, dzw, dzo, dzd, dyy, dzz, dwn, dwo, duz, dwk, dwe, dwi, dvu, duy, dvt, dwj, duj, duq, dtx, dtz, dud, dub, dtt, dti, dtd, due, dss, dst, dsh, dsp, dso, dsk, dsr, dsd, dse, drr, drt, drx, drv, drn, drc, dqx, dry, dqm, dqn, doy, dqj, dqd, dqh, dpt, dox, dps, dqi, doi, dop, dnw, dny, doc, doa, dns, dnh, dnc, dod, dmu, dmp]
